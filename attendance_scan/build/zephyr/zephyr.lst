
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   0:	200052a0 	.word	0x200052a0
   4:	000161a9 	.word	0x000161a9

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   8:	0001f72f 	.word	0x0001f72f
   c:	0001617d 	.word	0x0001617d
	(void)memset(res + 3, 0, 13);
  10:	0001617d 	.word	0x0001617d
  14:	0001617d 	.word	0x0001617d
  18:	0001617d 	.word	0x0001617d
	...
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
  2c:	00015be9 	.word	0x00015be9
  30:	0001617d 	.word	0x0001617d

	return 0;
}
  34:	00000000 	.word	0x00000000
  38:	00015b95 	.word	0x00015b95
  3c:	0001617d 	.word	0x0001617d

00000040 <_irq_vector_table>:
  40:	00015ca1 0001ff37 00015ca1 00015ca1     .\..7....\...\..
  50:	00015ca1 00015ca1 00015ca1 00015ca1     .\...\...\...\..
  60:	0001feff 00015ca1 00015ca1 0001ff1d     .....\...\......
  70:	00015ca1 00015ca1 00015ca1 00015ca1     .\...\...\...\..
  80:	00015ca1 00015ca1 00015ca1 00015ca1     .\...\...\...\..
  90:	00015ca1 00015ca1 00015ca1 00015ca1     .\...\...\...\..
  a0:	00015ca1 00015ca1 00015ca1 00015ca1     .\...\...\...\..
  b0:	00015ca1 00015ca1 00015ca1 00015ca1     .\...\...\...\..
  c0:	00015ca1 00015ca1 00015ca1 00015ca1     .\...\...\...\..
  d0:	00015ca1 00015ca1 00015ca1 00015ca1     .\...\...\...\..
  e0:	00015ca1 00015ca1 00015ca1 00015ca1     .\...\...\...\..
  f0:	00015ca1 00015ca1 00015ca1 00015ca1     .\...\...\...\..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <CONFIG_IDLE_STACK_SIZE+0x106>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
     184:	f080 8116 	bcs.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     1b2:	f080 8101 	bcs.w	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <CONFIG_IDLE_STACK_SIZE+0x142>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20a:	d202      	bcs.n	212 <CONFIG_IDLE_STACK_SIZE+0xd2>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe0>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     232:	d202      	bcs.n	23a <CONFIG_IDLE_STACK_SIZE+0xfa>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <CONFIG_IDLE_STACK_SIZE+0x11c>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xae>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <CONFIG_IDLE_STACK_SIZE+0x1bc>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <CONFIG_IDLE_STACK_SIZE+0x12e>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xdc>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     2be:	f080 808b 	bcs.w	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2ea:	d271      	bcs.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <CONFIG_IDLE_STACK_SIZE+0xae>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     342:	d247      	bcs.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     36e:	d22d      	bcs.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc0>
     38c:	d016      	beq.n	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     38e:	b15e      	cbz	r6, 3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <CONFIG_IDLE_STACK_SIZE+0x138>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3f6:	4615      	mov	r5, r2
     3f8:	4a0a      	ldr	r2, [pc, #40]	; (424 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x24>)
     3fa:	461c      	mov	r4, r3
     3fc:	6856      	ldr	r6, [r2, #4]
     3fe:	b12e      	cbz	r6, 40c <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0xc>
     400:	b001      	add	sp, #4
     402:	462a      	mov	r2, r5
     404:	46b4      	mov	ip, r6
     406:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     40a:	4760      	bx	ip
     40c:	2000      	movs	r0, #0
     40e:	f88d 0000 	strb.w	r0, [sp]
     412:	4668      	mov	r0, sp
     414:	f00f fb60 	bl	fad8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     418:	f89d 0000 	ldrb.w	r0, [sp]
     41c:	1a28      	subs	r0, r5, r0
     41e:	7020      	strb	r0, [r4, #0]
     420:	2000      	movs	r0, #0
     422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     424:	20000000 	.word	0x20000000

00000428 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     428:	4801      	ldr	r0, [pc, #4]	; (430 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     42a:	7800      	ldrb	r0, [r0, #0]
     42c:	4770      	bx	lr
     42e:	0000      	.short	0x0000
     430:	20000008 	.word	0x20000008

00000434 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     434:	4905      	ldr	r1, [pc, #20]	; (44c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     436:	780a      	ldrb	r2, [r1, #0]
     438:	4290      	cmp	r0, r2
     43a:	d301      	bcc.n	440 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     43c:	2000      	movs	r0, #0
     43e:	4770      	bx	lr
     440:	6849      	ldr	r1, [r1, #4]
     442:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
     446:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     44a:	4770      	bx	lr
     44c:	20000008 	.word	0x20000008
     450:	b570      	push	{r4, r5, r6, lr}
     452:	4605      	mov	r5, r0
     454:	2a20      	cmp	r2, #32
     456:	d027      	beq.n	4a8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x34>
     458:	4819      	ldr	r0, [pc, #100]	; (4c0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4c>)
     45a:	4c1a      	ldr	r4, [pc, #104]	; (4c4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x50>)
     45c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     460:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     464:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     468:	2920      	cmp	r1, #32
     46a:	d022      	beq.n	4b2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x3e>
     46c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     470:	7840      	ldrb	r0, [r0, #1]
     472:	784c      	ldrb	r4, [r1, #1]
     474:	7048      	strb	r0, [r1, #1]
     476:	4620      	mov	r0, r4
     478:	4601      	mov	r1, r0
     47a:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     47e:	4291      	cmp	r1, r2
     480:	7005      	strb	r5, [r0, #0]
     482:	7840      	ldrb	r0, [r0, #1]
     484:	d1f8      	bne.n	478 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4>
     486:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     48a:	2a20      	cmp	r2, #32
     48c:	bf1a      	itte	ne
     48e:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     492:	7054      	strbne	r4, [r2, #1]
     494:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     498:	2220      	movs	r2, #32
     49a:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     49e:	f88c 2001 	strb.w	r2, [ip, #1]
     4a2:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     4a6:	bd70      	pop	{r4, r5, r6, pc}
     4a8:	f240 217e 	movw	r1, #638	; 0x27e
     4ac:	2070      	movs	r0, #112	; 0x70
     4ae:	f003 f991 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     4b2:	f893 4020 	ldrb.w	r4, [r3, #32]
     4b6:	7840      	ldrb	r0, [r0, #1]
     4b8:	f883 0020 	strb.w	r0, [r3, #32]
     4bc:	e7db      	b.n	476 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2>
     4be:	0000      	.short	0x0000
     4c0:	20000b94 	.word	0x20000b94
     4c4:	20000c14 	.word	0x20000c14
     4c8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4cc:	b085      	sub	sp, #20
     4ce:	4615      	mov	r5, r2
     4d0:	460c      	mov	r4, r1
     4d2:	f002 f91f 	bl	2714 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     4d6:	4428      	add	r0, r5
     4d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     4dc:	9002      	str	r0, [sp, #8]
     4de:	6821      	ldr	r1, [r4, #0]
     4e0:	1a08      	subs	r0, r1, r0
     4e2:	0200      	lsls	r0, r0, #8
     4e4:	17c1      	asrs	r1, r0, #31
     4e6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     4ea:	1200      	asrs	r0, r0, #8
     4ec:	2800      	cmp	r0, #0
     4ee:	f300 80d5 	bgt.w	69c <CONFIG_BT_HCI_TX_STACK_SIZE+0x9c>
     4f2:	48ac      	ldr	r0, [pc, #688]	; (7a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a4>)
     4f4:	9f08      	ldr	r7, [sp, #32]
     4f6:	4eac      	ldr	r6, [pc, #688]	; (7a8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a8>)
     4f8:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     4fc:	9003      	str	r0, [sp, #12]
     4fe:	f890 5020 	ldrb.w	r5, [r0, #32]
     502:	2020      	movs	r0, #32
     504:	46e9      	mov	r9, sp
     506:	f10d 0804 	add.w	r8, sp, #4
     50a:	f88d 0000 	strb.w	r0, [sp]
     50e:	f506 7a40 	add.w	sl, r6, #768	; 0x300
     512:	2d20      	cmp	r5, #32
     514:	bf18      	it	ne
     516:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     51a:	d025      	beq.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
     51c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     520:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     524:	6822      	ldr	r2, [r4, #0]
     526:	68c1      	ldr	r1, [r0, #12]
     528:	1a51      	subs	r1, r2, r1
     52a:	0209      	lsls	r1, r1, #8
     52c:	17ca      	asrs	r2, r1, #31
     52e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     532:	3008      	adds	r0, #8
     534:	1209      	asrs	r1, r1, #8
     536:	d417      	bmi.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
     538:	8961      	ldrh	r1, [r4, #10]
     53a:	b171      	cbz	r1, 55a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x72>
     53c:	8941      	ldrh	r1, [r0, #10]
     53e:	b961      	cbnz	r1, 55a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x72>
     540:	f000 fdb4 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     544:	f002 f8e6 	bl	2714 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     548:	6821      	ldr	r1, [r4, #0]
     54a:	1a08      	subs	r0, r1, r0
     54c:	0200      	lsls	r0, r0, #8
     54e:	17c1      	asrs	r1, r0, #31
     550:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     554:	1200      	asrs	r0, r0, #8
     556:	2833      	cmp	r0, #51	; 0x33
     558:	db06      	blt.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
     55a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     55e:	f889 5000 	strb.w	r5, [r9]
     562:	7845      	ldrb	r5, [r0, #1]
     564:	2d20      	cmp	r5, #32
     566:	d1d9      	bne.n	51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>
     568:	f899 0000 	ldrb.w	r0, [r9]
     56c:	f888 0000 	strb.w	r0, [r8]
     570:	46a1      	mov	r9, r4
     572:	2d20      	cmp	r5, #32
     574:	bf1c      	itt	ne
     576:	488d      	ldrne	r0, [pc, #564]	; (7ac <CONFIG_BT_HCI_TX_STACK_SIZE+0x1ac>)
     578:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     57c:	f000 810e 	beq.w	79c <CONFIG_BT_HCI_TX_STACK_SIZE+0x19c>
     580:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     584:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
     588:	f8d9 2004 	ldr.w	r2, [r9, #4]
     58c:	f8da 1008 	ldr.w	r1, [sl, #8]
     590:	4648      	mov	r0, r9
     592:	1a89      	subs	r1, r1, r2
     594:	0209      	lsls	r1, r1, #8
     596:	17ca      	asrs	r2, r1, #31
     598:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     59c:	f10a 0708 	add.w	r7, sl, #8
     5a0:	1209      	asrs	r1, r1, #8
     5a2:	d415      	bmi.n	5d0 <__data_size+0x1>
     5a4:	8979      	ldrh	r1, [r7, #10]
     5a6:	2900      	cmp	r1, #0
     5a8:	f000 80f8 	beq.w	79c <CONFIG_BT_HCI_TX_STACK_SIZE+0x19c>
     5ac:	8941      	ldrh	r1, [r0, #10]
     5ae:	2900      	cmp	r1, #0
     5b0:	f040 80f4 	bne.w	79c <CONFIG_BT_HCI_TX_STACK_SIZE+0x19c>
     5b4:	f000 fd7a 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     5b8:	f002 f8ac 	bl	2714 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     5bc:	6839      	ldr	r1, [r7, #0]
     5be:	1a08      	subs	r0, r1, r0
     5c0:	0200      	lsls	r0, r0, #8
     5c2:	17c1      	asrs	r1, r0, #31
     5c4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     5c8:	1200      	asrs	r0, r0, #8
     5ca:	2833      	cmp	r0, #51	; 0x33
     5cc:	f280 80e6 	bge.w	79c <CONFIG_BT_HCI_TX_STACK_SIZE+0x19c>
     5d0:	f888 5000 	strb.w	r5, [r8]
     5d4:	f89a 1014 	ldrb.w	r1, [sl, #20]
     5d8:	f899 000c 	ldrb.w	r0, [r9, #12]
     5dc:	4281      	cmp	r1, r0
     5de:	d906      	bls.n	5ee <__data_size+0x1f>
     5e0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     5e4:	7845      	ldrb	r5, [r0, #1]
     5e6:	2d20      	cmp	r5, #32
     5e8:	d1ca      	bne.n	580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>
     5ea:	f000 b8d7 	b.w	79c <CONFIG_BT_HCI_TX_STACK_SIZE+0x19c>
     5ee:	f89d 0004 	ldrb.w	r0, [sp, #4]
     5f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     5f6:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
     5fa:	8a68      	ldrh	r0, [r5, #18]
     5fc:	68ef      	ldr	r7, [r5, #12]
     5fe:	2800      	cmp	r0, #0
     600:	d143      	bne.n	68a <CONFIG_BT_HCI_TX_STACK_SIZE+0x8a>
     602:	8960      	ldrh	r0, [r4, #10]
     604:	b3e8      	cbz	r0, 682 <CONFIG_BT_HCI_TX_STACK_SIZE+0x82>
     606:	68a8      	ldr	r0, [r5, #8]
     608:	f00f fa86 	bl	fb18 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     60c:	8a69      	ldrh	r1, [r5, #18]
     60e:	7c2a      	ldrb	r2, [r5, #16]
     610:	4b67      	ldr	r3, [pc, #412]	; (7b0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1b0>)
     612:	4411      	add	r1, r2
     614:	1c49      	adds	r1, r1, #1
     616:	1842      	adds	r2, r0, r1
     618:	4298      	cmp	r0, r3
     61a:	d904      	bls.n	626 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     61c:	f240 6109 	movw	r1, #1545	; 0x609
     620:	2070      	movs	r0, #112	; 0x70
     622:	f003 f8d7 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     626:	4863      	ldr	r0, [pc, #396]	; (7b4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1b4>)
     628:	4281      	cmp	r1, r0
     62a:	dd04      	ble.n	636 <CONFIG_BT_HCI_TX_STACK_SIZE+0x36>
     62c:	f240 610a 	movw	r1, #1546	; 0x60a
     630:	2070      	movs	r0, #112	; 0x70
     632:	f003 f8cf 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     636:	4860      	ldr	r0, [pc, #384]	; (7b8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1b8>)
     638:	4281      	cmp	r1, r0
     63a:	da04      	bge.n	646 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     63c:	f240 610b 	movw	r1, #1547	; 0x60b
     640:	2070      	movs	r0, #112	; 0x70
     642:	f003 f8c7 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     646:	485d      	ldr	r0, [pc, #372]	; (7bc <CONFIG_BT_HCI_TX_STACK_SIZE+0x1bc>)
     648:	4290      	cmp	r0, r2
     64a:	bfdc      	itt	le
     64c:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
     650:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
     654:	dd05      	ble.n	662 <CONFIG_BT_HCI_TX_STACK_SIZE+0x62>
     656:	2a00      	cmp	r2, #0
     658:	bfbc      	itt	lt
     65a:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
     65e:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
     662:	4610      	mov	r0, r2
     664:	f002 f856 	bl	2714 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     668:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     66c:	1a78      	subs	r0, r7, r1
     66e:	0200      	lsls	r0, r0, #8
     670:	17c2      	asrs	r2, r0, #31
     672:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     676:	1200      	asrs	r0, r0, #8
     678:	2833      	cmp	r0, #51	; 0x33
     67a:	bfb8      	it	lt
     67c:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
     680:	e000      	b.n	684 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     682:	e002      	b.n	68a <CONFIG_BT_HCI_TX_STACK_SIZE+0x8a>
     684:	bfb8      	it	lt
     686:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
     68a:	9802      	ldr	r0, [sp, #8]
     68c:	1a38      	subs	r0, r7, r0
     68e:	0200      	lsls	r0, r0, #8
     690:	17c1      	asrs	r1, r0, #31
     692:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     696:	1200      	asrs	r0, r0, #8
     698:	2800      	cmp	r0, #0
     69a:	dd03      	ble.n	6a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa4>
     69c:	b009      	add	sp, #36	; 0x24
     69e:	2000      	movs	r0, #0
     6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6a4:	e9d4 1000 	ldrd	r1, r0, [r4]
     6a8:	1a40      	subs	r0, r0, r1
     6aa:	4438      	add	r0, r7
     6ac:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
     6b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     6b4:	e9c4 1000 	strd	r1, r0, [r4]
     6b8:	9803      	ldr	r0, [sp, #12]
     6ba:	f8dd 8020 	ldr.w	r8, [sp, #32]
     6be:	466f      	mov	r7, sp
     6c0:	f890 5020 	ldrb.w	r5, [r0, #32]
     6c4:	2020      	movs	r0, #32
     6c6:	f10d 0a04 	add.w	sl, sp, #4
     6ca:	f88d 0000 	strb.w	r0, [sp]
     6ce:	2d20      	cmp	r5, #32
     6d0:	bf1c      	itt	ne
     6d2:	4836      	ldrne	r0, [pc, #216]	; (7ac <CONFIG_BT_HCI_TX_STACK_SIZE+0x1ac>)
     6d4:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     6d8:	d025      	beq.n	726 <CONFIG_BT_HCI_TX_STACK_SIZE+0x126>
     6da:	bf00      	nop
     6dc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     6e0:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     6e4:	6822      	ldr	r2, [r4, #0]
     6e6:	68c1      	ldr	r1, [r0, #12]
     6e8:	1a51      	subs	r1, r2, r1
     6ea:	0209      	lsls	r1, r1, #8
     6ec:	17ca      	asrs	r2, r1, #31
     6ee:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     6f2:	3008      	adds	r0, #8
     6f4:	1209      	asrs	r1, r1, #8
     6f6:	d416      	bmi.n	726 <CONFIG_BT_HCI_TX_STACK_SIZE+0x126>
     6f8:	8961      	ldrh	r1, [r4, #10]
     6fa:	b171      	cbz	r1, 71a <CONFIG_BT_HCI_TX_STACK_SIZE+0x11a>
     6fc:	8941      	ldrh	r1, [r0, #10]
     6fe:	b961      	cbnz	r1, 71a <CONFIG_BT_HCI_TX_STACK_SIZE+0x11a>
     700:	f000 fcd4 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     704:	f002 f806 	bl	2714 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     708:	6821      	ldr	r1, [r4, #0]
     70a:	1a08      	subs	r0, r1, r0
     70c:	0200      	lsls	r0, r0, #8
     70e:	17c1      	asrs	r1, r0, #31
     710:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     714:	1200      	asrs	r0, r0, #8
     716:	2833      	cmp	r0, #51	; 0x33
     718:	db05      	blt.n	726 <CONFIG_BT_HCI_TX_STACK_SIZE+0x126>
     71a:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     71e:	703d      	strb	r5, [r7, #0]
     720:	7845      	ldrb	r5, [r0, #1]
     722:	2d20      	cmp	r5, #32
     724:	d1da      	bne.n	6dc <CONFIG_BT_HCI_TX_STACK_SIZE+0xdc>
     726:	7838      	ldrb	r0, [r7, #0]
     728:	f88a 0000 	strb.w	r0, [sl]
     72c:	4627      	mov	r7, r4
     72e:	2d20      	cmp	r5, #32
     730:	bf1c      	itt	ne
     732:	481e      	ldrne	r0, [pc, #120]	; (7ac <CONFIG_BT_HCI_TX_STACK_SIZE+0x1ac>)
     734:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     738:	d030      	beq.n	79c <CONFIG_BT_HCI_TX_STACK_SIZE+0x19c>
     73a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     73e:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
     742:	6879      	ldr	r1, [r7, #4]
     744:	f8d9 2008 	ldr.w	r2, [r9, #8]
     748:	4638      	mov	r0, r7
     74a:	1a51      	subs	r1, r2, r1
     74c:	0209      	lsls	r1, r1, #8
     74e:	17ca      	asrs	r2, r1, #31
     750:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     754:	f109 0808 	add.w	r8, r9, #8
     758:	1209      	asrs	r1, r1, #8
     75a:	d412      	bmi.n	782 <CONFIG_BT_HCI_TX_STACK_SIZE+0x182>
     75c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     760:	b1e1      	cbz	r1, 79c <CONFIG_BT_HCI_TX_STACK_SIZE+0x19c>
     762:	8941      	ldrh	r1, [r0, #10]
     764:	b9d1      	cbnz	r1, 79c <CONFIG_BT_HCI_TX_STACK_SIZE+0x19c>
     766:	f000 fca1 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     76a:	f001 ffd3 	bl	2714 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     76e:	f8d8 1000 	ldr.w	r1, [r8]
     772:	1a08      	subs	r0, r1, r0
     774:	0200      	lsls	r0, r0, #8
     776:	17c1      	asrs	r1, r0, #31
     778:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     77c:	1200      	asrs	r0, r0, #8
     77e:	2833      	cmp	r0, #51	; 0x33
     780:	da0c      	bge.n	79c <CONFIG_BT_HCI_TX_STACK_SIZE+0x19c>
     782:	f88a 5000 	strb.w	r5, [sl]
     786:	f899 0014 	ldrb.w	r0, [r9, #20]
     78a:	7b39      	ldrb	r1, [r7, #12]
     78c:	4288      	cmp	r0, r1
     78e:	f67f af2e 	bls.w	5ee <__data_size+0x1f>
     792:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     796:	7845      	ldrb	r5, [r0, #1]
     798:	2d20      	cmp	r5, #32
     79a:	d1ce      	bne.n	73a <CONFIG_BT_HCI_TX_STACK_SIZE+0x13a>
     79c:	b009      	add	sp, #36	; 0x24
     79e:	2001      	movs	r0, #1
     7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7a4:	20000c14 	.word	0x20000c14
     7a8:	20000894 	.word	0x20000894
     7ac:	20000b94 	.word	0x20000b94
     7b0:	1e847fff 	.word	0x1e847fff
     7b4:	07a12000 	.word	0x07a12000
     7b8:	f85ee000 	.word	0xf85ee000
     7bc:	1e848000 	.word	0x1e848000
     7c0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     7c4:	4604      	mov	r4, r0
     7c6:	483c      	ldr	r0, [pc, #240]	; (8b8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb8>)
     7c8:	460e      	mov	r6, r1
     7ca:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     7ce:	4f3b      	ldr	r7, [pc, #236]	; (8bc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xbc>)
     7d0:	f890 5020 	ldrb.w	r5, [r0, #32]
     7d4:	2020      	movs	r0, #32
     7d6:	4698      	mov	r8, r3
     7d8:	4692      	mov	sl, r2
     7da:	7010      	strb	r0, [r2, #0]
     7dc:	f507 7940 	add.w	r9, r7, #768	; 0x300
     7e0:	2d20      	cmp	r5, #32
     7e2:	bf18      	it	ne
     7e4:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     7e8:	d028      	beq.n	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
     7ea:	bf00      	nop
     7ec:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     7f0:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
     7f4:	f100 0108 	add.w	r1, r0, #8
     7f8:	68c0      	ldr	r0, [r0, #12]
     7fa:	6822      	ldr	r2, [r4, #0]
     7fc:	1a10      	subs	r0, r2, r0
     7fe:	0200      	lsls	r0, r0, #8
     800:	17c2      	asrs	r2, r0, #31
     802:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     806:	1200      	asrs	r0, r0, #8
     808:	d418      	bmi.n	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
     80a:	8960      	ldrh	r0, [r4, #10]
     80c:	b178      	cbz	r0, 82e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2e>
     80e:	8948      	ldrh	r0, [r1, #10]
     810:	b968      	cbnz	r0, 82e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2e>
     812:	4608      	mov	r0, r1
     814:	f000 fc4a 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     818:	f001 ff7c 	bl	2714 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     81c:	6821      	ldr	r1, [r4, #0]
     81e:	1a08      	subs	r0, r1, r0
     820:	0200      	lsls	r0, r0, #8
     822:	17c1      	asrs	r1, r0, #31
     824:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     828:	1200      	asrs	r0, r0, #8
     82a:	2833      	cmp	r0, #51	; 0x33
     82c:	db06      	blt.n	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
     82e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     832:	f88a 5000 	strb.w	r5, [sl]
     836:	7845      	ldrb	r5, [r0, #1]
     838:	2d20      	cmp	r5, #32
     83a:	d1d7      	bne.n	7ec <CONFIG_BT_HCI_TX_STACK_SIZE+0x1ec>
     83c:	f89a 0000 	ldrb.w	r0, [sl]
     840:	f888 0000 	strb.w	r0, [r8]
     844:	2d20      	cmp	r5, #32
     846:	bf18      	it	ne
     848:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     84c:	d030      	beq.n	8b0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb0>
     84e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     852:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
     856:	6861      	ldr	r1, [r4, #4]
     858:	f8d9 2008 	ldr.w	r2, [r9, #8]
     85c:	4620      	mov	r0, r4
     85e:	1a51      	subs	r1, r2, r1
     860:	0209      	lsls	r1, r1, #8
     862:	17ca      	asrs	r2, r1, #31
     864:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     868:	f109 0608 	add.w	r6, r9, #8
     86c:	1209      	asrs	r1, r1, #8
     86e:	d410      	bmi.n	892 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x92>
     870:	8971      	ldrh	r1, [r6, #10]
     872:	b1e9      	cbz	r1, 8b0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb0>
     874:	8941      	ldrh	r1, [r0, #10]
     876:	b9d9      	cbnz	r1, 8b0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb0>
     878:	f000 fc18 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     87c:	f001 ff4a 	bl	2714 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     880:	6831      	ldr	r1, [r6, #0]
     882:	1a08      	subs	r0, r1, r0
     884:	0200      	lsls	r0, r0, #8
     886:	17c1      	asrs	r1, r0, #31
     888:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     88c:	1200      	asrs	r0, r0, #8
     88e:	2833      	cmp	r0, #51	; 0x33
     890:	da0e      	bge.n	8b0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb0>
     892:	f888 5000 	strb.w	r5, [r8]
     896:	f899 0014 	ldrb.w	r0, [r9, #20]
     89a:	7b21      	ldrb	r1, [r4, #12]
     89c:	4288      	cmp	r0, r1
     89e:	d802      	bhi.n	8a6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa6>
     8a0:	2000      	movs	r0, #0
     8a2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     8a6:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     8aa:	7845      	ldrb	r5, [r0, #1]
     8ac:	2d20      	cmp	r5, #32
     8ae:	d1ce      	bne.n	84e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e>
     8b0:	2001      	movs	r0, #1
     8b2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     8b6:	0000      	.short	0x0000
     8b8:	20000c14 	.word	0x20000c14
     8bc:	20000894 	.word	0x20000894
     8c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8c4:	b098      	sub	sp, #96	; 0x60
     8c6:	4616      	mov	r6, r2
     8c8:	460d      	mov	r5, r1
     8ca:	f04f 0800 	mov.w	r8, #0
     8ce:	f04f 0b01 	mov.w	fp, #1
     8d2:	f002 f9a1 	bl	2c18 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     8d6:	4604      	mov	r4, r0
     8d8:	2d01      	cmp	r5, #1
     8da:	bf18      	it	ne
     8dc:	2d02      	cmpne	r5, #2
     8de:	d005      	beq.n	8ec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xec>
     8e0:	f640 1194 	movw	r1, #2452	; 0x994
     8e4:	f04f 0070 	mov.w	r0, #112	; 0x70
     8e8:	f002 ff74 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     8ec:	49f9      	ldr	r1, [pc, #996]	; (cd4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4d4>)
     8ee:	2001      	movs	r0, #1
     8f0:	6008      	str	r0, [r1, #0]
     8f2:	49f9      	ldr	r1, [pc, #996]	; (cd8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4d8>)
     8f4:	6889      	ldr	r1, [r1, #8]
     8f6:	6008      	str	r0, [r1, #0]
     8f8:	2000      	movs	r0, #0
     8fa:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
     8fe:	900c      	str	r0, [sp, #48]	; 0x30
     900:	1e40      	subs	r0, r0, #1
     902:	900e      	str	r0, [sp, #56]	; 0x38
     904:	49f5      	ldr	r1, [pc, #980]	; (cdc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4dc>)
     906:	eb06 0046 	add.w	r0, r6, r6, lsl #1
     90a:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
     90e:	3308      	adds	r3, #8
     910:	af0f      	add	r7, sp, #60	; 0x3c
     912:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     914:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     918:	a80f      	add	r0, sp, #60	; 0x3c
     91a:	f000 fbc7 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     91e:	900d      	str	r0, [sp, #52]	; 0x34
     920:	48ee      	ldr	r0, [pc, #952]	; (cdc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4dc>)
     922:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
     926:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
     92a:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
     92e:	f1b9 0f00 	cmp.w	r9, #0
     932:	bf14      	ite	ne
     934:	f04f 0a01 	movne.w	sl, #1
     938:	f04f 0a00 	moveq.w	sl, #0
     93c:	980f      	ldr	r0, [sp, #60]	; 0x3c
     93e:	9014      	str	r0, [sp, #80]	; 0x50
     940:	f1ba 0f00 	cmp.w	sl, #0
     944:	d009      	beq.n	95a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x15a>
     946:	48e6      	ldr	r0, [pc, #920]	; (ce0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e0>)
     948:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
     94c:	b928      	cbnz	r0, 95a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x15a>
     94e:	f002 fec9 	bl	36e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     952:	2800      	cmp	r0, #0
     954:	bf08      	it	eq
     956:	2701      	moveq	r7, #1
     958:	d000      	beq.n	95c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x15c>
     95a:	2700      	movs	r7, #0
     95c:	48e1      	ldr	r0, [pc, #900]	; (ce4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e4>)
     95e:	2200      	movs	r2, #0
     960:	9215      	str	r2, [sp, #84]	; 0x54
     962:	7800      	ldrb	r0, [r0, #0]
     964:	4616      	mov	r6, r2
     966:	2801      	cmp	r0, #1
     968:	bf18      	it	ne
     96a:	2803      	cmpne	r0, #3
     96c:	d140      	bne.n	9f0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1f0>
     96e:	48dd      	ldr	r0, [pc, #884]	; (ce4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e4>)
     970:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     974:	eba8 0009 	sub.w	r0, r8, r9
     978:	9015      	str	r0, [sp, #84]	; 0x54
     97a:	45c8      	cmp	r8, r9
     97c:	d938      	bls.n	9f0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1f0>
     97e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     980:	ea6f 0108 	mvn.w	r1, r8
     984:	f8df e360 	ldr.w	lr, [pc, #864]	; ce8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e8>
     988:	1858      	adds	r0, r3, r1
     98a:	f10d 0c0c 	add.w	ip, sp, #12
     98e:	aa17      	add	r2, sp, #92	; 0x5c
     990:	4573      	cmp	r3, lr
     992:	d904      	bls.n	99e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x19e>
     994:	f240 6109 	movw	r1, #1545	; 0x609
     998:	2070      	movs	r0, #112	; 0x70
     99a:	f002 ff1b 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     99e:	4bd3      	ldr	r3, [pc, #844]	; (cec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4ec>)
     9a0:	4299      	cmp	r1, r3
     9a2:	dd04      	ble.n	9ae <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1ae>
     9a4:	f240 610a 	movw	r1, #1546	; 0x60a
     9a8:	2070      	movs	r0, #112	; 0x70
     9aa:	f002 ff13 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     9ae:	4bd0      	ldr	r3, [pc, #832]	; (cf0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4f0>)
     9b0:	4299      	cmp	r1, r3
     9b2:	da04      	bge.n	9be <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1be>
     9b4:	f240 610b 	movw	r1, #1547	; 0x60b
     9b8:	2070      	movs	r0, #112	; 0x70
     9ba:	f002 ff0b 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     9be:	49cd      	ldr	r1, [pc, #820]	; (cf4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4f4>)
     9c0:	4281      	cmp	r1, r0
     9c2:	bfdc      	itt	le
     9c4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     9c8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     9cc:	dd05      	ble.n	9da <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1da>
     9ce:	2800      	cmp	r0, #0
     9d0:	bfbc      	itt	lt
     9d2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     9d6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     9da:	4661      	mov	r1, ip
     9dc:	f001 feb6 	bl	274c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     9e0:	9803      	ldr	r0, [sp, #12]
     9e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
     9e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     9e8:	9003      	str	r0, [sp, #12]
     9ea:	1a08      	subs	r0, r1, r0
     9ec:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     9f0:	2f00      	cmp	r7, #0
     9f2:	bf18      	it	ne
     9f4:	2632      	movne	r6, #50	; 0x32
     9f6:	d104      	bne.n	a02 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x202>
     9f8:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     9fc:	2800      	cmp	r0, #0
     9fe:	bf18      	it	ne
     a00:	2602      	movne	r6, #2
     a02:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     a06:	d008      	beq.n	a1a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x21a>
     a08:	980f      	ldr	r0, [sp, #60]	; 0x3c
     a0a:	1b00      	subs	r0, r0, r4
     a0c:	0200      	lsls	r0, r0, #8
     a0e:	17c1      	asrs	r1, r0, #31
     a10:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     a14:	1200      	asrs	r0, r0, #8
     a16:	2801      	cmp	r0, #1
     a18:	da02      	bge.n	a20 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x220>
     a1a:	2004      	movs	r0, #4
     a1c:	9918      	ldr	r1, [sp, #96]	; 0x60
     a1e:	e00b      	b.n	a38 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x238>
     a20:	b147      	cbz	r7, a34 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x234>
     a22:	48af      	ldr	r0, [pc, #700]	; (ce0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e0>)
     a24:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     a28:	b120      	cbz	r0, a34 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x234>
     a2a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     a2e:	1c06      	adds	r6, r0, #0
     a30:	bf18      	it	ne
     a32:	2602      	movne	r6, #2
     a34:	4621      	mov	r1, r4
     a36:	2001      	movs	r0, #1
     a38:	f1b9 0f00 	cmp.w	r9, #0
     a3c:	d002      	beq.n	a44 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x244>
     a3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
     a40:	2b1e      	cmp	r3, #30
     a42:	da02      	bge.n	a4a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x24a>
     a44:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
     a48:	b113      	cbz	r3, a50 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x250>
     a4a:	f04f 0b00 	mov.w	fp, #0
     a4e:	1e40      	subs	r0, r0, #1
     a50:	1983      	adds	r3, r0, r6
     a52:	48a4      	ldr	r0, [pc, #656]	; (ce4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e4>)
     a54:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
     a58:	7800      	ldrb	r0, [r0, #0]
     a5a:	9015      	str	r0, [sp, #84]	; 0x54
     a5c:	980f      	ldr	r0, [sp, #60]	; 0x3c
     a5e:	1a80      	subs	r0, r0, r2
     a60:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
     a64:	ebac 0001 	sub.w	r0, ip, r1
     a68:	0200      	lsls	r0, r0, #8
     a6a:	17c6      	asrs	r6, r0, #31
     a6c:	eb00 6016 	add.w	r0, r0, r6, lsr #24
     a70:	1200      	asrs	r0, r0, #8
     a72:	4298      	cmp	r0, r3
     a74:	db18      	blt.n	aa8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2a8>
     a76:	2a00      	cmp	r2, #0
     a78:	bf18      	it	ne
     a7a:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
     a7e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     a80:	9705      	str	r7, [sp, #20]
     a82:	2700      	movs	r7, #0
     a84:	f001 ffc0 	bl	2a08 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     a88:	1a30      	subs	r0, r6, r0
     a8a:	0200      	lsls	r0, r0, #8
     a8c:	17c1      	asrs	r1, r0, #31
     a8e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     a92:	1200      	asrs	r0, r0, #8
     a94:	283e      	cmp	r0, #62	; 0x3e
     a96:	da3f      	bge.n	b18 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x318>
     a98:	2d01      	cmp	r5, #1
     a9a:	d020      	beq.n	ade <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2de>
     a9c:	1e70      	subs	r0, r6, #1
     a9e:	9905      	ldr	r1, [sp, #20]
     aa0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     aa4:	b319      	cbz	r1, aee <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2ee>
     aa6:	e02d      	b.n	b04 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x304>
     aa8:	b182      	cbz	r2, acc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2cc>
     aaa:	f1be 0f00 	cmp.w	lr, #0
     aae:	bf04      	itt	eq
     ab0:	9815      	ldreq	r0, [sp, #84]	; 0x54
     ab2:	2803      	cmpeq	r0, #3
     ab4:	d00a      	beq.n	acc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2cc>
     ab6:	b927      	cbnz	r7, ac2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2c2>
     ab8:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     abc:	2800      	cmp	r0, #0
     abe:	bf18      	it	ne
     ac0:	1e9b      	subne	r3, r3, #2
     ac2:	2200      	movs	r2, #0
     ac4:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
     ac8:	4690      	mov	r8, r2
     aca:	e7c7      	b.n	a5c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x25c>
     acc:	bb07      	cbnz	r7, b10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x310>
     ace:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     ad2:	b1e8      	cbz	r0, b10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x310>
     ad4:	2000      	movs	r0, #0
     ad6:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
     ada:	1e9b      	subs	r3, r3, #2
     adc:	e7be      	b.n	a5c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x25c>
     ade:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     ae2:	d120      	bne.n	b26 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x326>
     ae4:	f640 110d 	movw	r1, #2317	; 0x90d
     ae8:	2070      	movs	r0, #112	; 0x70
     aea:	f002 fe73 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     aee:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     af2:	d007      	beq.n	b04 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x304>
     af4:	1a21      	subs	r1, r4, r0
     af6:	0209      	lsls	r1, r1, #8
     af8:	17ca      	asrs	r2, r1, #31
     afa:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     afe:	1209      	asrs	r1, r1, #8
     b00:	2904      	cmp	r1, #4
     b02:	dd03      	ble.n	b0c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x30c>
     b04:	4604      	mov	r4, r0
     b06:	f001 ff85 	bl	2a14 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     b0a:	e00c      	b.n	b26 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x326>
     b0c:	2900      	cmp	r1, #0
     b0e:	dd0a      	ble.n	b26 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x326>
     b10:	b01b      	add	sp, #108	; 0x6c
     b12:	2000      	movs	r0, #0
     b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b18:	1e70      	subs	r0, r6, #1
     b1a:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     b1e:	4620      	mov	r0, r4
     b20:	f001 ff78 	bl	2a14 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     b24:	4657      	mov	r7, sl
     b26:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b2a:	d024      	beq.n	b76 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x376>
     b2c:	980f      	ldr	r0, [sp, #60]	; 0x3c
     b2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
     b30:	1b00      	subs	r0, r0, r4
     b32:	1b1b      	subs	r3, r3, r4
     b34:	4a70      	ldr	r2, [pc, #448]	; (cf8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4f8>)
     b36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b3a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     b3e:	4583      	cmp	fp, r0
     b40:	bf98      	it	ls
     b42:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
     b46:	d2e3      	bcs.n	b10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x310>
     b48:	429a      	cmp	r2, r3
     b4a:	d3e1      	bcc.n	b10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x310>
     b4c:	4620      	mov	r0, r4
     b4e:	f00e ffe3 	bl	fb18 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     b52:	4965      	ldr	r1, [pc, #404]	; (ce8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e8>)
     b54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     b56:	1c4b      	adds	r3, r1, #1
     b58:	1a16      	subs	r6, r2, r0
     b5a:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
     b5e:	bf24      	itt	cs
     b60:	eba0 0c02 	subcs.w	ip, r0, r2
     b64:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
     b68:	d310      	bcc.n	b8c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38c>
     b6a:	42b1      	cmp	r1, r6
     b6c:	d208      	bcs.n	b80 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x380>
     b6e:	1a08      	subs	r0, r1, r0
     b70:	4410      	add	r0, r2
     b72:	1c46      	adds	r6, r0, #1
     b74:	e00a      	b.n	b8c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38c>
     b76:	f640 212d 	movw	r1, #2605	; 0xa2d
     b7a:	2070      	movs	r0, #112	; 0x70
     b7c:	f002 fe2a 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b80:	4561      	cmp	r1, ip
     b82:	d22c      	bcs.n	bde <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3de>
     b84:	1a89      	subs	r1, r1, r2
     b86:	4408      	add	r0, r1
     b88:	1c40      	adds	r0, r0, #1
     b8a:	4246      	negs	r6, r0
     b8c:	4854      	ldr	r0, [pc, #336]	; (ce0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e0>)
     b8e:	7f80      	ldrb	r0, [r0, #30]
     b90:	b350      	cbz	r0, be8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3e8>
     b92:	4628      	mov	r0, r5
     b94:	4645      	mov	r5, r8
     b96:	f04f 0b00 	mov.w	fp, #0
     b9a:	46d8      	mov	r8, fp
     b9c:	2801      	cmp	r0, #1
     b9e:	d005      	beq.n	bac <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3ac>
     ba0:	2002      	movs	r0, #2
     ba2:	f002 f98f 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     ba6:	2001      	movs	r0, #1
     ba8:	f002 f98c 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     bac:	45a9      	cmp	r9, r5
     bae:	d227      	bcs.n	c00 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x400>
     bb0:	eba6 0105 	sub.w	r1, r6, r5
     bb4:	f04f 0301 	mov.w	r3, #1
     bb8:	f04f 0203 	mov.w	r2, #3
     bbc:	f04f 0002 	mov.w	r0, #2
     bc0:	f002 f8ac 	bl	2d1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     bc4:	2800      	cmp	r0, #0
     bc6:	bf08      	it	eq
     bc8:	f04f 0801 	moveq.w	r8, #1
     bcc:	f1b9 0f00 	cmp.w	r9, #0
     bd0:	d030      	beq.n	c34 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x434>
     bd2:	2301      	movs	r3, #1
     bd4:	eba6 0109 	sub.w	r1, r6, r9
     bd8:	2203      	movs	r2, #3
     bda:	4618      	mov	r0, r3
     bdc:	e01e      	b.n	c1c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x41c>
     bde:	f640 310c 	movw	r1, #2828	; 0xb0c
     be2:	2070      	movs	r0, #112	; 0x70
     be4:	f002 fdf6 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     be8:	45c1      	cmp	r9, r8
     bea:	bf34      	ite	cc
     bec:	4640      	movcc	r0, r8
     bee:	4648      	movcs	r0, r9
     bf0:	4458      	add	r0, fp
     bf2:	42b0      	cmp	r0, r6
     bf4:	dbcd      	blt.n	b92 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x392>
     bf6:	f44f 6124 	mov.w	r1, #2624	; 0xa40
     bfa:	2070      	movs	r0, #112	; 0x70
     bfc:	f002 fdea 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c00:	d910      	bls.n	c24 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x424>
     c02:	2301      	movs	r3, #1
     c04:	eba6 0109 	sub.w	r1, r6, r9
     c08:	2203      	movs	r2, #3
     c0a:	4618      	mov	r0, r3
     c0c:	f002 f886 	bl	2d1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c10:	b328      	cbz	r0, c5e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x45e>
     c12:	b17d      	cbz	r5, c34 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x434>
     c14:	1b71      	subs	r1, r6, r5
     c16:	2301      	movs	r3, #1
     c18:	2203      	movs	r2, #3
     c1a:	2002      	movs	r0, #2
     c1c:	f002 f87e 	bl	2d1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c20:	b1e8      	cbz	r0, c5e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x45e>
     c22:	e007      	b.n	c34 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x434>
     c24:	ea55 0009 	orrs.w	r0, r5, r9
     c28:	d004      	beq.n	c34 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x434>
     c2a:	f640 1177 	movw	r1, #2423	; 0x977
     c2e:	2070      	movs	r0, #112	; 0x70
     c30:	f002 fdd0 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c34:	2301      	movs	r3, #1
     c36:	2203      	movs	r2, #3
     c38:	4631      	mov	r1, r6
     c3a:	2000      	movs	r0, #0
     c3c:	f002 f86e 	bl	2d1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c40:	b168      	cbz	r0, c5e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x45e>
     c42:	2501      	movs	r5, #1
     c44:	f1b8 0f00 	cmp.w	r8, #0
     c48:	d003      	beq.n	c52 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x452>
     c4a:	9814      	ldr	r0, [sp, #80]	; 0x50
     c4c:	900f      	str	r0, [sp, #60]	; 0x3c
     c4e:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
     c52:	f8df 80a8 	ldr.w	r8, [pc, #168]	; cfc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4fc>
     c56:	f1ba 0f00 	cmp.w	sl, #0
     c5a:	d10e      	bne.n	c7a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x47a>
     c5c:	e009      	b.n	c72 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x472>
     c5e:	2002      	movs	r0, #2
     c60:	f002 f930 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c64:	2001      	movs	r0, #1
     c66:	f002 f92d 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c6a:	b01b      	add	sp, #108	; 0x6c
     c6c:	2000      	movs	r0, #0
     c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c72:	481b      	ldr	r0, [pc, #108]	; (ce0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e0>)
     c74:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     c78:	b100      	cbz	r0, c7c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x47c>
     c7a:	b34f      	cbz	r7, cd0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4d0>
     c7c:	f8df a060 	ldr.w	sl, [pc, #96]	; ce0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e0>
     c80:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     c84:	b118      	cbz	r0, c8e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x48e>
     c86:	f002 fbf5 	bl	3474 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     c8a:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
     c8e:	b307      	cbz	r7, cd2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4d2>
     c90:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
     c94:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     c98:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     c9c:	f8c8 0000 	str.w	r0, [r8]
     ca0:	2300      	movs	r3, #0
     ca2:	2203      	movs	r2, #3
     ca4:	2005      	movs	r0, #5
     ca6:	f002 f839 	bl	2d1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     caa:	b368      	cbz	r0, d08 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x508>
     cac:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     cb0:	2005      	movs	r0, #5
     cb2:	f002 f9d3 	bl	305c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
     cb6:	4912      	ldr	r1, [pc, #72]	; (d00 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x500>)
     cb8:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
     cbc:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
     cc0:	4910      	ldr	r1, [pc, #64]	; (d04 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x504>)
     cc2:	12e0      	asrs	r0, r4, #11
     cc4:	6008      	str	r0, [r1, #0]
     cc6:	4c06      	ldr	r4, [pc, #24]	; (ce0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e0>)
     cc8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     ccc:	b3e8      	cbz	r0, d4a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x54a>
     cce:	e030      	b.n	d32 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x532>
     cd0:	e01b      	b.n	d0a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x50a>
     cd2:	e01f      	b.n	d14 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x514>
     cd4:	40000508 	.word	0x40000508
     cd8:	20000010 	.word	0x20000010
     cdc:	20000894 	.word	0x20000894
     ce0:	20000c14 	.word	0x20000c14
     ce4:	20000012 	.word	0x20000012
     ce8:	1e847fff 	.word	0x1e847fff
     cec:	07a12000 	.word	0x07a12000
     cf0:	f85ee000 	.word	0xf85ee000
     cf4:	1e848000 	.word	0x1e848000
     cf8:	003fffff 	.word	0x003fffff
     cfc:	4001f508 	.word	0x4001f508
     d00:	4001f098 	.word	0x4001f098
     d04:	4001f504 	.word	0x4001f504
     d08:	e025      	b.n	d56 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x556>
     d0a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; dc4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5c4>
     d0e:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     d12:	b1c8      	cbz	r0, d48 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x548>
     d14:	4c2b      	ldr	r4, [pc, #172]	; (dc4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5c4>)
     d16:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     d1a:	b150      	cbz	r0, d32 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x532>
     d1c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     d20:	f8c8 0000 	str.w	r0, [r8]
     d24:	2005      	movs	r0, #5
     d26:	f002 f8cd 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d2a:	f002 fc0b 	bl	3544 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
     d2e:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
     d32:	eba6 0009 	sub.w	r0, r6, r9
     d36:	f1a0 0119 	sub.w	r1, r0, #25
     d3a:	2900      	cmp	r1, #0
     d3c:	dc15      	bgt.n	d6a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x56a>
     d3e:	f640 2171 	movw	r1, #2673	; 0xa71
     d42:	2070      	movs	r0, #112	; 0x70
     d44:	f002 fd46 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d48:	e000      	b.n	d4c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x54c>
     d4a:	e009      	b.n	d60 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x560>
     d4c:	f002 fbae 	bl	34ac <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     d50:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
     d54:	e79b      	b.n	c8e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x48e>
     d56:	f240 313e 	movw	r1, #830	; 0x33e
     d5a:	2070      	movs	r0, #112	; 0x70
     d5c:	f002 fd3a 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d60:	f002 fbe2 	bl	3528 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
     d64:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
     d68:	e7e3      	b.n	d32 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x532>
     d6a:	2203      	movs	r2, #3
     d6c:	2301      	movs	r3, #1
     d6e:	4610      	mov	r0, r2
     d70:	f001 ffd4 	bl	2d1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d74:	b308      	cbz	r0, dba <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5ba>
     d76:	4814      	ldr	r0, [pc, #80]	; (dc8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5c8>)
     d78:	6880      	ldr	r0, [r0, #8]
     d7a:	f8c0 b000 	str.w	fp, [r0]
     d7e:	4813      	ldr	r0, [pc, #76]	; (dcc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5cc>)
     d80:	f8c0 b000 	str.w	fp, [r0]
     d84:	ac0c      	add	r4, sp, #48	; 0x30
     d86:	4812      	ldr	r0, [pc, #72]	; (dd0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5d0>)
     d88:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     d8c:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
     d90:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
     d94:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
     d98:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
     d9c:	ac10      	add	r4, sp, #64	; 0x40
     d9e:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     da2:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
     da6:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
     daa:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
     dae:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
     db2:	b01b      	add	sp, #108	; 0x6c
     db4:	2001      	movs	r0, #1
     db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     dba:	f640 2179 	movw	r1, #2681	; 0xa79
     dbe:	2070      	movs	r0, #112	; 0x70
     dc0:	f002 fd08 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     dc4:	20000c14 	.word	0x20000c14
     dc8:	20000010 	.word	0x20000010
     dcc:	40000508 	.word	0x40000508
     dd0:	20000894 	.word	0x20000894
     dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     dd8:	4606      	mov	r6, r0
     dda:	b083      	sub	sp, #12
     ddc:	7808      	ldrb	r0, [r1, #0]
     dde:	7390      	strb	r0, [r2, #14]
     de0:	7acf      	ldrb	r7, [r1, #11]
     de2:	7357      	strb	r7, [r2, #13]
     de4:	7a88      	ldrb	r0, [r1, #10]
     de6:	7310      	strb	r0, [r2, #12]
     de8:	8908      	ldrh	r0, [r1, #8]
     dea:	4614      	mov	r4, r2
     dec:	8150      	strh	r0, [r2, #10]
     dee:	460d      	mov	r5, r1
     df0:	780a      	ldrb	r2, [r1, #0]
     df2:	495f      	ldr	r1, [pc, #380]	; (f70 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x770>)
     df4:	4699      	mov	r9, r3
     df6:	ea4f 0c81 	mov.w	ip, r1, lsl #2
     dfa:	424b      	negs	r3, r1
     dfc:	f1ac 0801 	sub.w	r8, ip, #1
     e00:	b15a      	cbz	r2, e1a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x61a>
     e02:	43c0      	mvns	r0, r0
     e04:	f8d5 8004 	ldr.w	r8, [r5, #4]
     e08:	f104 0208 	add.w	r2, r4, #8
     e0c:	4288      	cmp	r0, r1
     e0e:	dd3d      	ble.n	e8c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x68c>
     e10:	f240 610a 	movw	r1, #1546	; 0x60a
     e14:	2070      	movs	r0, #112	; 0x70
     e16:	f002 fcdd 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e1a:	68ee      	ldr	r6, [r5, #12]
     e1c:	686d      	ldr	r5, [r5, #4]
     e1e:	ea6f 0900 	mvn.w	r9, r0
     e22:	f104 0208 	add.w	r2, r4, #8
     e26:	eb06 0009 	add.w	r0, r6, r9
     e2a:	4546      	cmp	r6, r8
     e2c:	d904      	bls.n	e38 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x638>
     e2e:	f240 6109 	movw	r1, #1545	; 0x609
     e32:	2070      	movs	r0, #112	; 0x70
     e34:	f002 fcce 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e38:	4589      	cmp	r9, r1
     e3a:	dce9      	bgt.n	e10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x610>
     e3c:	4599      	cmp	r9, r3
     e3e:	db28      	blt.n	e92 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x692>
     e40:	4584      	cmp	ip, r0
     e42:	bfdc      	itt	le
     e44:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     e48:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     e4c:	dd05      	ble.n	e5a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x65a>
     e4e:	2800      	cmp	r0, #0
     e50:	bfbc      	itt	lt
     e52:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     e56:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     e5a:	4621      	mov	r1, r4
     e5c:	f001 fc76 	bl	274c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     e60:	6820      	ldr	r0, [r4, #0]
     e62:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     e66:	1970      	adds	r0, r6, r5
     e68:	1c40      	adds	r0, r0, #1
     e6a:	6021      	str	r1, [r4, #0]
     e6c:	2f00      	cmp	r7, #0
     e6e:	bf08      	it	eq
     e70:	307a      	addeq	r0, #122	; 0x7a
     e72:	d003      	beq.n	e7c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x67c>
     e74:	2f01      	cmp	r7, #1
     e76:	bf08      	it	eq
     e78:	3048      	addeq	r0, #72	; 0x48
     e7a:	d12d      	bne.n	ed8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6d8>
     e7c:	f001 fc4a 	bl	2714 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     e80:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     e84:	6060      	str	r0, [r4, #4]
     e86:	b003      	add	sp, #12
     e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     e8c:	4601      	mov	r1, r0
     e8e:	4298      	cmp	r0, r3
     e90:	da04      	bge.n	e9c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x69c>
     e92:	f240 610b 	movw	r1, #1547	; 0x60b
     e96:	2070      	movs	r0, #112	; 0x70
     e98:	f002 fc9c 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e9c:	4584      	cmp	ip, r0
     e9e:	bfdc      	itt	le
     ea0:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
     ea4:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
     ea8:	dd05      	ble.n	eb6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6b6>
     eaa:	2800      	cmp	r0, #0
     eac:	bfbc      	itt	lt
     eae:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
     eb2:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
     eb6:	4621      	mov	r1, r4
     eb8:	f001 fc48 	bl	274c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     ebc:	6820      	ldr	r0, [r4, #0]
     ebe:	2f00      	cmp	r7, #0
     ec0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     ec4:	f108 0001 	add.w	r0, r8, #1
     ec8:	6021      	str	r1, [r4, #0]
     eca:	bf08      	it	eq
     ecc:	307a      	addeq	r0, #122	; 0x7a
     ece:	d008      	beq.n	ee2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6e2>
     ed0:	2f01      	cmp	r7, #1
     ed2:	bf08      	it	eq
     ed4:	3048      	addeq	r0, #72	; 0x48
     ed6:	d004      	beq.n	ee2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6e2>
     ed8:	f240 61b1 	movw	r1, #1713	; 0x6b1
     edc:	2070      	movs	r0, #112	; 0x70
     ede:	f002 fc79 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ee2:	f001 fc17 	bl	2714 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     ee6:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     eea:	6061      	str	r1, [r4, #4]
     eec:	8960      	ldrh	r0, [r4, #10]
     eee:	aa01      	add	r2, sp, #4
     ef0:	4669      	mov	r1, sp
     ef2:	f001 fc2b 	bl	274c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     ef6:	481f      	ldr	r0, [pc, #124]	; (f74 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x774>)
     ef8:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
     efc:	2920      	cmp	r1, #32
     efe:	d023      	beq.n	f48 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x748>
     f00:	6900      	ldr	r0, [r0, #16]
     f02:	1d40      	adds	r0, r0, #5
     f04:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f08:	e9d4 2100 	ldrd	r2, r1, [r4]
     f0c:	1a89      	subs	r1, r1, r2
     f0e:	6020      	str	r0, [r4, #0]
     f10:	4408      	add	r0, r1
     f12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f16:	6060      	str	r0, [r4, #4]
     f18:	464b      	mov	r3, r9
     f1a:	4632      	mov	r2, r6
     f1c:	4621      	mov	r1, r4
     f1e:	68e8      	ldr	r0, [r5, #12]
     f20:	f7ff fad2 	bl	4c8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x54>
     f24:	2800      	cmp	r0, #0
     f26:	bf1c      	itt	ne
     f28:	b003      	addne	sp, #12
     f2a:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f2e:	e9d4 1000 	ldrd	r1, r0, [r4]
     f32:	1a40      	subs	r0, r0, r1
     f34:	4430      	add	r0, r6
     f36:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
     f3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f3e:	e9c4 1000 	strd	r1, r0, [r4]
     f42:	b003      	add	sp, #12
     f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f48:	8960      	ldrh	r0, [r4, #10]
     f4a:	f106 0709 	add.w	r7, r6, #9
     f4e:	b120      	cbz	r0, f5a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x75a>
     f50:	f002 fbc8 	bl	36e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     f54:	2800      	cmp	r0, #0
     f56:	bf08      	it	eq
     f58:	3732      	addeq	r7, #50	; 0x32
     f5a:	4807      	ldr	r0, [pc, #28]	; (f78 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x778>)
     f5c:	7841      	ldrb	r1, [r0, #1]
     f5e:	9800      	ldr	r0, [sp, #0]
     f60:	4281      	cmp	r1, r0
     f62:	bf84      	itt	hi
     f64:	1a08      	subhi	r0, r1, r0
     f66:	4407      	addhi	r7, r0
     f68:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
     f6c:	e7cc      	b.n	f08 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x708>
     f6e:	0000      	.short	0x0000
     f70:	07a12000 	.word	0x07a12000
     f74:	20000c14 	.word	0x20000c14
     f78:	20000012 	.word	0x20000012
     f7c:	b510      	push	{r4, lr}
     f7e:	4c15      	ldr	r4, [pc, #84]	; (fd4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7d4>)
     f80:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
     f84:	2820      	cmp	r0, #32
     f86:	bf18      	it	ne
     f88:	bd10      	popne	{r4, pc}
     f8a:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
     f8e:	eb04 0082 	add.w	r0, r4, r2, lsl #2
     f92:	f890 1020 	ldrb.w	r1, [r0, #32]
     f96:	2920      	cmp	r1, #32
     f98:	d017      	beq.n	fca <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7ca>
     f9a:	f8df c03c 	ldr.w	ip, [pc, #60]	; fd8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7d8>
     f9e:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
     fa2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
     fa6:	785b      	ldrb	r3, [r3, #1]
     fa8:	f880 3020 	strb.w	r3, [r0, #32]
     fac:	2301      	movs	r3, #1
     fae:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
     fb2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
     fb6:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
     fba:	2002      	movs	r0, #2
     fbc:	f000 f8b0 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
     fc0:	2000      	movs	r0, #0
     fc2:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
     fc6:	77a0      	strb	r0, [r4, #30]
     fc8:	bd10      	pop	{r4, pc}
     fca:	f240 318b 	movw	r1, #907	; 0x38b
     fce:	2070      	movs	r0, #112	; 0x70
     fd0:	f002 fc00 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fd4:	20000c14 	.word	0x20000c14
     fd8:	20000b94 	.word	0x20000b94
     fdc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     fe0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
     fe4:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
     fe8:	eb08 0085 	add.w	r0, r8, r5, lsl #2
     fec:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
     ff0:	2c20      	cmp	r4, #32
     ff2:	bf08      	it	eq
     ff4:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     ff8:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 10a0 <CONFIG_FPROTECT_BLOCK_SIZE+0xa0>
     ffc:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
    1000:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    1004:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    1008:	2607      	movs	r6, #7
    100a:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    100e:	2801      	cmp	r0, #1
    1010:	d00e      	beq.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    1012:	2804      	cmp	r0, #4
    1014:	bf08      	it	eq
    1016:	2602      	moveq	r6, #2
    1018:	d00a      	beq.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    101a:	2805      	cmp	r0, #5
    101c:	bf0c      	ite	eq
    101e:	2603      	moveq	r6, #3
    1020:	2806      	cmpne	r0, #6
    1022:	d005      	beq.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    1024:	f640 01d9 	movw	r1, #2265	; 0x8d9
    1028:	f04f 0070 	mov.w	r0, #112	; 0x70
    102c:	f002 fbd2 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1030:	f1bb 0f00 	cmp.w	fp, #0
    1034:	bf18      	it	ne
    1036:	f3af 8000 	nopne.w
    103a:	f3ef 8010 	mrs	r0, PRIMASK
    103e:	b672      	cpsid	i
    1040:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1044:	784a      	ldrb	r2, [r1, #1]
    1046:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    104a:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    104e:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1052:	42a2      	cmp	r2, r4
    1054:	bf04      	itt	eq
    1056:	2220      	moveq	r2, #32
    1058:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    105c:	b1b8      	cbz	r0, 108e <CONFIG_FPROTECT_BLOCK_SIZE+0x8e>
    105e:	462a      	mov	r2, r5
    1060:	4621      	mov	r1, r4
    1062:	2001      	movs	r0, #1
    1064:	f000 f85c 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    1068:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    106c:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    1070:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    1074:	6840      	ldr	r0, [r0, #4]
    1076:	4631      	mov	r1, r6
    1078:	4790      	blx	r2
    107a:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    107e:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1082:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1086:	2c20      	cmp	r4, #32
    1088:	d1bc      	bne.n	1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
    108a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    108e:	4806      	ldr	r0, [pc, #24]	; (10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>)
    1090:	2800      	cmp	r0, #0
    1092:	bf18      	it	ne
    1094:	f3af 8000 	nopne.w
    1098:	b662      	cpsie	i
    109a:	e7e0      	b.n	105e <CONFIG_FPROTECT_BLOCK_SIZE+0x5e>
    109c:	20000c14 	.word	0x20000c14
    10a0:	00000000 	.word	0x00000000
    10a4:	20000b94 	.word	0x20000b94
    10a8:	00000000 	.word	0x00000000
    10ac:	b510      	push	{r4, lr}
    10ae:	4604      	mov	r4, r0
    10b0:	6800      	ldr	r0, [r0, #0]
    10b2:	f00e fd31 	bl	fb18 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    10b6:	4602      	mov	r2, r0
    10b8:	8960      	ldrh	r0, [r4, #10]
    10ba:	7a21      	ldrb	r1, [r4, #8]
    10bc:	4b14      	ldr	r3, [pc, #80]	; (1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>)
    10be:	4408      	add	r0, r1
    10c0:	1c41      	adds	r1, r0, #1
    10c2:	1850      	adds	r0, r2, r1
    10c4:	429a      	cmp	r2, r3
    10c6:	d904      	bls.n	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
    10c8:	f240 6109 	movw	r1, #1545	; 0x609
    10cc:	2070      	movs	r0, #112	; 0x70
    10ce:	f002 fb81 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10d2:	4a10      	ldr	r2, [pc, #64]	; (1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>)
    10d4:	4291      	cmp	r1, r2
    10d6:	dd04      	ble.n	10e2 <CONFIG_FPROTECT_BLOCK_SIZE+0xe2>
    10d8:	f240 610a 	movw	r1, #1546	; 0x60a
    10dc:	2070      	movs	r0, #112	; 0x70
    10de:	f002 fb79 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10e2:	4a0d      	ldr	r2, [pc, #52]	; (1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>)
    10e4:	4291      	cmp	r1, r2
    10e6:	da04      	bge.n	10f2 <CONFIG_FPROTECT_BLOCK_SIZE+0xf2>
    10e8:	f240 610b 	movw	r1, #1547	; 0x60b
    10ec:	2070      	movs	r0, #112	; 0x70
    10ee:	f002 fb71 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10f2:	490a      	ldr	r1, [pc, #40]	; (111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>)
    10f4:	4281      	cmp	r1, r0
    10f6:	bfde      	ittt	le
    10f8:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    10fc:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1100:	bd10      	pople	{r4, pc}
    1102:	2800      	cmp	r0, #0
    1104:	bfbc      	itt	lt
    1106:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    110a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    110e:	bd10      	pop	{r4, pc}
    1110:	1e847fff 	.word	0x1e847fff
    1114:	07a12000 	.word	0x07a12000
    1118:	f85ee000 	.word	0xf85ee000
    111c:	1e848000 	.word	0x1e848000
    1120:	f8df c054 	ldr.w	ip, [pc, #84]	; 1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>
    1124:	b510      	push	{r4, lr}
    1126:	2300      	movs	r3, #0
    1128:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    112c:	2807      	cmp	r0, #7
    112e:	d21e      	bcs.n	116e <CONFIG_FPROTECT_BLOCK_SIZE+0x16e>
    1130:	e8df f000 	tbb	[pc, r0]
    1134:	05050505 	.word	0x05050505
    1138:	00040404 	.word	0x00040404
    113c:	2301      	movs	r3, #1
    113e:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    1142:	2b00      	cmp	r3, #0
    1144:	bf08      	it	eq
    1146:	bd10      	popeq	{r4, pc}
    1148:	480c      	ldr	r0, [pc, #48]	; (117c <CONFIG_FPROTECT_BLOCK_SIZE+0x17c>)
    114a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    114e:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    1152:	2820      	cmp	r0, #32
    1154:	bf0e      	itee	eq
    1156:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    115a:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    115e:	7041      	strbne	r1, [r0, #1]
    1160:	2020      	movs	r0, #32
    1162:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1166:	7058      	strb	r0, [r3, #1]
    1168:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    116c:	bd10      	pop	{r4, pc}
    116e:	f44f 7115 	mov.w	r1, #596	; 0x254
    1172:	2070      	movs	r0, #112	; 0x70
    1174:	f002 fb2e 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1178:	20000b94 	.word	0x20000b94
    117c:	20000c14 	.word	0x20000c14
    1180:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1184:	b083      	sub	sp, #12
    1186:	485c      	ldr	r0, [pc, #368]	; (12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>)
    1188:	9904      	ldr	r1, [sp, #16]
    118a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    118e:	9001      	str	r0, [sp, #4]
    1190:	f890 4020 	ldrb.w	r4, [r0, #32]
    1194:	9803      	ldr	r0, [sp, #12]
    1196:	4625      	mov	r5, r4
    1198:	2801      	cmp	r0, #1
    119a:	bf18      	it	ne
    119c:	2802      	cmpne	r0, #2
    119e:	d005      	beq.n	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    11a0:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    11a4:	f04f 0070 	mov.w	r0, #112	; 0x70
    11a8:	f002 fb14 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11ac:	2700      	movs	r7, #0
    11ae:	2d20      	cmp	r5, #32
    11b0:	d04a      	beq.n	1248 <CONFIG_FPROTECT_BLOCK_SIZE+0x248>
    11b2:	4851      	ldr	r0, [pc, #324]	; (12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>)
    11b4:	9100      	str	r1, [sp, #0]
    11b6:	2600      	movs	r6, #0
    11b8:	7f80      	ldrb	r0, [r0, #30]
    11ba:	2800      	cmp	r0, #0
    11bc:	bf08      	it	eq
    11be:	2602      	moveq	r6, #2
    11c0:	f001 fc22 	bl	2a08 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    11c4:	f8df a138 	ldr.w	sl, [pc, #312]	; 1300 <CONFIG_FPROTECT_BLOCK_SIZE+0x300>
    11c8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    11cc:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    11d0:	f8df 9128 	ldr.w	r9, [pc, #296]	; 12fc <CONFIG_FPROTECT_BLOCK_SIZE+0x2fc>
    11d4:	688a      	ldr	r2, [r1, #8]
    11d6:	68c9      	ldr	r1, [r1, #12]
    11d8:	1a12      	subs	r2, r2, r0
    11da:	1a09      	subs	r1, r1, r0
    11dc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    11e0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    11e4:	4296      	cmp	r6, r2
    11e6:	bf98      	it	ls
    11e8:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    11ec:	d201      	bcs.n	11f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f2>
    11ee:	4589      	cmp	r9, r1
    11f0:	d228      	bcs.n	1244 <CONFIG_FPROTECT_BLOCK_SIZE+0x244>
    11f2:	4a44      	ldr	r2, [pc, #272]	; (1304 <CONFIG_FPROTECT_BLOCK_SIZE+0x304>)
    11f4:	9900      	ldr	r1, [sp, #0]
    11f6:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    11fa:	4622      	mov	r2, r4
    11fc:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    1200:	784c      	ldrb	r4, [r1, #1]
    1202:	2c20      	cmp	r4, #32
    1204:	d016      	beq.n	1234 <CONFIG_FPROTECT_BLOCK_SIZE+0x234>
    1206:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    120a:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    120e:	f8dc 8008 	ldr.w	r8, [ip, #8]
    1212:	f8dc c00c 	ldr.w	ip, [ip, #12]
    1216:	eba8 0800 	sub.w	r8, r8, r0
    121a:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    121e:	ebac 0100 	sub.w	r1, ip, r0
    1222:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1226:	4546      	cmp	r6, r8
    1228:	bf98      	it	ls
    122a:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    122e:	d2e4      	bcs.n	11fa <CONFIG_FPROTECT_BLOCK_SIZE+0x1fa>
    1230:	4589      	cmp	r9, r1
    1232:	d3e2      	bcc.n	11fa <CONFIG_FPROTECT_BLOCK_SIZE+0x1fa>
    1234:	2a20      	cmp	r2, #32
    1236:	d005      	beq.n	1244 <CONFIG_FPROTECT_BLOCK_SIZE+0x244>
    1238:	2120      	movs	r1, #32
    123a:	2004      	movs	r0, #4
    123c:	9b00      	ldr	r3, [sp, #0]
    123e:	f7ff f907 	bl	450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1242:	4604      	mov	r4, r0
    1244:	42ac      	cmp	r4, r5
    1246:	d115      	bne.n	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
    1248:	482f      	ldr	r0, [pc, #188]	; (1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>)
    124a:	2800      	cmp	r0, #0
    124c:	bf18      	it	ne
    124e:	f3af 8000 	nopne.w
    1252:	f001 fbd9 	bl	2a08 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1256:	4c28      	ldr	r4, [pc, #160]	; (12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>)
    1258:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    125c:	2920      	cmp	r1, #32
    125e:	d00d      	beq.n	127c <CONFIG_FPROTECT_BLOCK_SIZE+0x27c>
    1260:	68e1      	ldr	r1, [r4, #12]
    1262:	1c82      	adds	r2, r0, #2
    1264:	1a51      	subs	r1, r2, r1
    1266:	0209      	lsls	r1, r1, #8
    1268:	17ca      	asrs	r2, r1, #31
    126a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    126e:	1209      	asrs	r1, r1, #8
    1270:	2900      	cmp	r1, #0
    1272:	dd03      	ble.n	127c <CONFIG_FPROTECT_BLOCK_SIZE+0x27c>
    1274:	b005      	add	sp, #20
    1276:	2000      	movs	r0, #0
    1278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    127c:	2d20      	cmp	r5, #32
    127e:	d00d      	beq.n	129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>
    1280:	462a      	mov	r2, r5
    1282:	9903      	ldr	r1, [sp, #12]
    1284:	f7ff fb1c 	bl	8c0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xc0>
    1288:	b358      	cbz	r0, 12e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e2>
    128a:	9801      	ldr	r0, [sp, #4]
    128c:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    1290:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    1294:	b005      	add	sp, #20
    1296:	2001      	movs	r0, #1
    1298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    129c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    12a0:	b118      	cbz	r0, 12aa <CONFIG_FPROTECT_BLOCK_SIZE+0x2aa>
    12a2:	f002 f8e7 	bl	3474 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    12a6:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    12aa:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    12ae:	b150      	cbz	r0, 12c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c6>
    12b0:	4916      	ldr	r1, [pc, #88]	; (130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>)
    12b2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    12b6:	6008      	str	r0, [r1, #0]
    12b8:	2005      	movs	r0, #5
    12ba:	f001 fe03 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12be:	f002 f941 	bl	3544 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    12c2:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    12c6:	2004      	movs	r0, #4
    12c8:	f001 fdfc 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12cc:	f001 fe68 	bl	2fa0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    12d0:	2020      	movs	r0, #32
    12d2:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    12d6:	480e      	ldr	r0, [pc, #56]	; (1310 <CONFIG_FPROTECT_BLOCK_SIZE+0x310>)
    12d8:	6880      	ldr	r0, [r0, #8]
    12da:	6007      	str	r7, [r0, #0]
    12dc:	480d      	ldr	r0, [pc, #52]	; (1314 <CONFIG_FPROTECT_BLOCK_SIZE+0x314>)
    12de:	6007      	str	r7, [r0, #0]
    12e0:	e7d8      	b.n	1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>
    12e2:	462a      	mov	r2, r5
    12e4:	2120      	movs	r1, #32
    12e6:	2004      	movs	r0, #4
    12e8:	9b04      	ldr	r3, [sp, #16]
    12ea:	f7ff f8b1 	bl	450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    12ee:	b005      	add	sp, #20
    12f0:	2000      	movs	r0, #0
    12f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12f6:	0000      	.short	0x0000
    12f8:	20000c14 	.word	0x20000c14
    12fc:	003fffff 	.word	0x003fffff
    1300:	20000894 	.word	0x20000894
    1304:	20000b94 	.word	0x20000b94
    1308:	00000000 	.word	0x00000000
    130c:	4001f508 	.word	0x4001f508
    1310:	20000010 	.word	0x20000010
    1314:	40000508 	.word	0x40000508

00001318 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    1318:	4906      	ldr	r1, [pc, #24]	; (1334 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    131a:	b510      	push	{r4, lr}
    131c:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    1320:	2a20      	cmp	r2, #32
    1322:	bf1c      	itt	ne
    1324:	7788      	strbne	r0, [r1, #30]
    1326:	bd10      	popne	{r4, pc}
    1328:	f240 31ea 	movw	r1, #1002	; 0x3ea
    132c:	2070      	movs	r0, #112	; 0x70
    132e:	f002 fa51 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1332:	0000      	.short	0x0000
    1334:	20000c14 	.word	0x20000c14

00001338 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    133c:	4e5b      	ldr	r6, [pc, #364]	; (14ac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    133e:	4681      	mov	r9, r0
    1340:	b085      	sub	sp, #20
    1342:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1346:	468a      	mov	sl, r1
    1348:	2820      	cmp	r0, #32
    134a:	d04d      	beq.n	13e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    134c:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1350:	f106 040c 	add.w	r4, r6, #12
    1354:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1358:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    135c:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    1360:	2020      	movs	r0, #32
    1362:	f88d 0000 	strb.w	r0, [sp]
    1366:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    136a:	aa03      	add	r2, sp, #12
    136c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1370:	a901      	add	r1, sp, #4
    1372:	f890 5020 	ldrb.w	r5, [r0, #32]
    1376:	6930      	ldr	r0, [r6, #16]
    1378:	9002      	str	r0, [sp, #8]
    137a:	6830      	ldr	r0, [r6, #0]
    137c:	4448      	add	r0, r9
    137e:	f001 f9e5 	bl	274c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1382:	68f8      	ldr	r0, [r7, #12]
    1384:	9901      	ldr	r1, [sp, #4]
    1386:	4a4a      	ldr	r2, [pc, #296]	; (14b0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    1388:	4408      	add	r0, r1
    138a:	f1a9 0165 	sub.w	r1, r9, #101	; 0x65
    138e:	4291      	cmp	r1, r2
    1390:	d82f      	bhi.n	13f2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    1392:	68b9      	ldr	r1, [r7, #8]
    1394:	1a41      	subs	r1, r0, r1
    1396:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    139a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    139e:	d228      	bcs.n	13f2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    13a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    13a4:	6060      	str	r0, [r4, #4]
    13a6:	4630      	mov	r0, r6
    13a8:	f884 a00c 	strb.w	sl, [r4, #12]
    13ac:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    13b0:	46ea      	mov	sl, sp
    13b2:	2d20      	cmp	r5, #32
    13b4:	bf1c      	itt	ne
    13b6:	493f      	ldrne	r1, [pc, #252]	; (14b4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    13b8:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    13bc:	d03c      	beq.n	1438 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    13be:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    13c2:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    13c6:	6860      	ldr	r0, [r4, #4]
    13c8:	68ba      	ldr	r2, [r7, #8]
    13ca:	4621      	mov	r1, r4
    13cc:	1a10      	subs	r0, r2, r0
    13ce:	0200      	lsls	r0, r0, #8
    13d0:	17c2      	asrs	r2, r0, #31
    13d2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    13d6:	f107 0608 	add.w	r6, r7, #8
    13da:	1200      	asrs	r0, r0, #8
    13dc:	d41b      	bmi.n	1416 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    13de:	8970      	ldrh	r0, [r6, #10]
    13e0:	b350      	cbz	r0, 1438 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    13e2:	8948      	ldrh	r0, [r1, #10]
    13e4:	b148      	cbz	r0, 13fa <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    13e6:	e027      	b.n	1438 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    13e8:	f640 317b 	movw	r1, #2939	; 0xb7b
    13ec:	2070      	movs	r0, #112	; 0x70
    13ee:	f002 f9f1 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13f2:	b005      	add	sp, #20
    13f4:	2001      	movs	r0, #1
    13f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13fa:	4620      	mov	r0, r4
    13fc:	f7ff fe56 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
    1400:	f001 f988 	bl	2714 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1404:	6831      	ldr	r1, [r6, #0]
    1406:	1a08      	subs	r0, r1, r0
    1408:	0200      	lsls	r0, r0, #8
    140a:	17c1      	asrs	r1, r0, #31
    140c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1410:	1200      	asrs	r0, r0, #8
    1412:	2833      	cmp	r0, #51	; 0x33
    1414:	da10      	bge.n	1438 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1416:	f88a 5000 	strb.w	r5, [sl]
    141a:	7d39      	ldrb	r1, [r7, #20]
    141c:	7b20      	ldrb	r0, [r4, #12]
    141e:	4281      	cmp	r1, r0
    1420:	d805      	bhi.n	142e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    1422:	9802      	ldr	r0, [sp, #8]
    1424:	6060      	str	r0, [r4, #4]
    1426:	b005      	add	sp, #20
    1428:	2002      	movs	r0, #2
    142a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    142e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1432:	7845      	ldrb	r5, [r0, #1]
    1434:	2d20      	cmp	r5, #32
    1436:	d1c2      	bne.n	13be <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    1438:	2005      	movs	r0, #5
    143a:	f001 fd43 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    143e:	4c1b      	ldr	r4, [pc, #108]	; (14ac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    1440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1444:	60a0      	str	r0, [r4, #8]
    1446:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    144a:	f89d 2000 	ldrb.w	r2, [sp]
    144e:	2120      	movs	r1, #32
    1450:	2a20      	cmp	r2, #32
    1452:	bf13      	iteet	ne
    1454:	2005      	movne	r0, #5
    1456:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    145a:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    145e:	f7fe fff7 	blne	450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1462:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1466:	4913      	ldr	r1, [pc, #76]	; (14b4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    1468:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    146c:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    1470:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1474:	7048      	strb	r0, [r1, #1]
    1476:	6820      	ldr	r0, [r4, #0]
    1478:	4448      	add	r0, r9
    147a:	6020      	str	r0, [r4, #0]
    147c:	2001      	movs	r0, #1
    147e:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    1482:	7e60      	ldrb	r0, [r4, #25]
    1484:	2801      	cmp	r0, #1
    1486:	d105      	bne.n	1494 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    1488:	6920      	ldr	r0, [r4, #16]
    148a:	1e40      	subs	r0, r0, #1
    148c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1490:	f001 fb5e 	bl	2b50 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1494:	f89d 0000 	ldrb.w	r0, [sp]
    1498:	2820      	cmp	r0, #32
    149a:	d003      	beq.n	14a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    149c:	4806      	ldr	r0, [pc, #24]	; (14b8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    149e:	7840      	ldrb	r0, [r0, #1]
    14a0:	f002 fa68 	bl	3974 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    14a4:	b005      	add	sp, #20
    14a6:	2000      	movs	r0, #0
    14a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14ac:	20000c14 	.word	0x20000c14
    14b0:	07a11f9b 	.word	0x07a11f9b
    14b4:	20000b94 	.word	0x20000b94
    14b8:	20000010 	.word	0x20000010

000014bc <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    14bc:	b570      	push	{r4, r5, r6, lr}
    14be:	4a23      	ldr	r2, [pc, #140]	; (154c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    14c0:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    14c4:	2920      	cmp	r1, #32
    14c6:	d039      	beq.n	153c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    14c8:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    14cc:	f5a2 7360 	sub.w	r3, r2, #896	; 0x380
    14d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    14d4:	eb03 0cc1 	add.w	ip, r3, r1, lsl #3
    14d8:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
    14dc:	f892 402e 	ldrb.w	r4, [r2, #46]	; 0x2e
    14e0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    14e4:	f891 1020 	ldrb.w	r1, [r1, #32]
    14e8:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    14ec:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    14f0:	2920      	cmp	r1, #32
    14f2:	d028      	beq.n	1546 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    14f4:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    14f8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    14fc:	7d2d      	ldrb	r5, [r5, #20]
    14fe:	4285      	cmp	r5, r0
    1500:	bf84      	itt	hi
    1502:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    1506:	7849      	ldrbhi	r1, [r1, #1]
    1508:	d8f2      	bhi.n	14f0 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x34>
    150a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    150e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    1512:	f8dc 000c 	ldr.w	r0, [ip, #12]
    1516:	6889      	ldr	r1, [r1, #8]
    1518:	6814      	ldr	r4, [r2, #0]
    151a:	1a08      	subs	r0, r1, r0
    151c:	0200      	lsls	r0, r0, #8
    151e:	17c1      	asrs	r1, r0, #31
    1520:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1524:	1200      	asrs	r0, r0, #8
    1526:	d407      	bmi.n	1538 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    1528:	f00e faf6 	bl	fb18 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    152c:	f104 0165 	add.w	r1, r4, #101	; 0x65
    1530:	4288      	cmp	r0, r1
    1532:	bf24      	itt	cs
    1534:	1b00      	subcs	r0, r0, r4
    1536:	bd70      	popcs	{r4, r5, r6, pc}
    1538:	2000      	movs	r0, #0
    153a:	bd70      	pop	{r4, r5, r6, pc}
    153c:	f640 314d 	movw	r1, #2893	; 0xb4d
    1540:	2070      	movs	r0, #112	; 0x70
    1542:	f002 f947 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    154a:	bd70      	pop	{r4, r5, r6, pc}
    154c:	20000c14 	.word	0x20000c14

00001550 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    1550:	4806      	ldr	r0, [pc, #24]	; (156c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    1552:	b510      	push	{r4, lr}
    1554:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    1558:	2920      	cmp	r1, #32
    155a:	bf1c      	itt	ne
    155c:	7e00      	ldrbne	r0, [r0, #24]
    155e:	bd10      	popne	{r4, pc}
    1560:	f640 3174 	movw	r1, #2932	; 0xb74
    1564:	2070      	movs	r0, #112	; 0x70
    1566:	f002 f935 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    156a:	0000      	.short	0x0000
    156c:	20000c14 	.word	0x20000c14

00001570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    1570:	4602      	mov	r2, r0
    1572:	4b14      	ldr	r3, [pc, #80]	; (15c4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    1574:	b510      	push	{r4, lr}
    1576:	4408      	add	r0, r1
    1578:	429a      	cmp	r2, r3
    157a:	d904      	bls.n	1586 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    157c:	f240 6109 	movw	r1, #1545	; 0x609
    1580:	2070      	movs	r0, #112	; 0x70
    1582:	f002 f927 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1586:	4a10      	ldr	r2, [pc, #64]	; (15c8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    1588:	4291      	cmp	r1, r2
    158a:	dd04      	ble.n	1596 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    158c:	f240 610a 	movw	r1, #1546	; 0x60a
    1590:	2070      	movs	r0, #112	; 0x70
    1592:	f002 f91f 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1596:	4a0d      	ldr	r2, [pc, #52]	; (15cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    1598:	4291      	cmp	r1, r2
    159a:	da04      	bge.n	15a6 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    159c:	f240 610b 	movw	r1, #1547	; 0x60b
    15a0:	2070      	movs	r0, #112	; 0x70
    15a2:	f002 f917 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15a6:	490a      	ldr	r1, [pc, #40]	; (15d0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    15a8:	4281      	cmp	r1, r0
    15aa:	bfde      	ittt	le
    15ac:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    15b0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    15b4:	bd10      	pople	{r4, pc}
    15b6:	2800      	cmp	r0, #0
    15b8:	bfbc      	itt	lt
    15ba:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    15be:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    15c2:	bd10      	pop	{r4, pc}
    15c4:	1e847fff 	.word	0x1e847fff
    15c8:	07a12000 	.word	0x07a12000
    15cc:	f85ee000 	.word	0xf85ee000
    15d0:	1e848000 	.word	0x1e848000

000015d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    15d4:	4a10      	ldr	r2, [pc, #64]	; (1618 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    15d6:	1a0b      	subs	r3, r1, r0
    15d8:	f102 0c01 	add.w	ip, r2, #1
    15dc:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    15e0:	bf3c      	itt	cc
    15e2:	4618      	movcc	r0, r3
    15e4:	4770      	bxcc	lr
    15e6:	b510      	push	{r4, lr}
    15e8:	1a44      	subs	r4, r0, r1
    15ea:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    15ee:	bf3c      	itt	cc
    15f0:	4618      	movcc	r0, r3
    15f2:	bd10      	popcc	{r4, pc}
    15f4:	429a      	cmp	r2, r3
    15f6:	d203      	bcs.n	1600 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    15f8:	1a10      	subs	r0, r2, r0
    15fa:	4408      	add	r0, r1
    15fc:	1c40      	adds	r0, r0, #1
    15fe:	bd10      	pop	{r4, pc}
    1600:	42a2      	cmp	r2, r4
    1602:	d204      	bcs.n	160e <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    1604:	1a51      	subs	r1, r2, r1
    1606:	4408      	add	r0, r1
    1608:	1c40      	adds	r0, r0, #1
    160a:	4240      	negs	r0, r0
    160c:	bd10      	pop	{r4, pc}
    160e:	f640 310c 	movw	r1, #2828	; 0xb0c
    1612:	2070      	movs	r0, #112	; 0x70
    1614:	f002 f8de 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1618:	1e847fff 	.word	0x1e847fff

0000161c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    161c:	4907      	ldr	r1, [pc, #28]	; (163c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    161e:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    1622:	4282      	cmp	r2, r0
    1624:	bf04      	itt	eq
    1626:	6848      	ldreq	r0, [r1, #4]
    1628:	4770      	bxeq	lr
    162a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    162e:	4904      	ldr	r1, [pc, #16]	; (1640 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    1630:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    1634:	3008      	adds	r0, #8
    1636:	f7ff bd39 	b.w	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
    163a:	0000      	.short	0x0000
    163c:	20000c14 	.word	0x20000c14
    1640:	20000894 	.word	0x20000894

00001644 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    1644:	490e      	ldr	r1, [pc, #56]	; (1680 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    1646:	b510      	push	{r4, lr}
    1648:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    164c:	2820      	cmp	r0, #32
    164e:	d012      	beq.n	1676 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    1650:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1654:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    1658:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    165c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    1660:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    1664:	6840      	ldr	r0, [r0, #4]
    1666:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    166a:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    166e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1672:	2104      	movs	r1, #4
    1674:	4710      	bx	r2
    1676:	f640 01bc 	movw	r1, #2236	; 0x8bc
    167a:	2070      	movs	r0, #112	; 0x70
    167c:	f002 f8aa 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1680:	20000c14 	.word	0x20000c14

00001684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1686:	4d6d      	ldr	r5, [pc, #436]	; (183c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    1688:	496d      	ldr	r1, [pc, #436]	; (1840 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    168a:	2601      	movs	r6, #1
    168c:	f505 7460 	add.w	r4, r5, #896	; 0x380
    1690:	2808      	cmp	r0, #8
    1692:	d273      	bcs.n	177c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    1694:	e8df f000 	tbb	[pc, r0]
    1698:	af9d6704 	.word	0xaf9d6704
    169c:	b9b444cd 	.word	0xb9b444cd
    16a0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    16a4:	b918      	cbnz	r0, 16ae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    16a6:	f001 ff01 	bl	34ac <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    16aa:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    16ae:	8ae0      	ldrh	r0, [r4, #22]
    16b0:	b110      	cbz	r0, 16b8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    16b2:	f002 f817 	bl	36e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    16b6:	b188      	cbz	r0, 16dc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    16b8:	f7ff fc60 	bl	f7c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x77c>
    16bc:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    16c0:	68a1      	ldr	r1, [r4, #8]
    16c2:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    16c6:	d005      	beq.n	16d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    16c8:	2301      	movs	r3, #1
    16ca:	2203      	movs	r2, #3
    16cc:	2005      	movs	r0, #5
    16ce:	f001 fb25 	bl	2d1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    16d2:	b140      	cbz	r0, 16e6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    16d4:	7e60      	ldrb	r0, [r4, #25]
    16d6:	2801      	cmp	r0, #1
    16d8:	d110      	bne.n	16fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    16da:	e009      	b.n	16f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    16dc:	f44f 6107 	mov.w	r1, #2160	; 0x870
    16e0:	2070      	movs	r0, #112	; 0x70
    16e2:	f002 f877 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16e6:	f640 0175 	movw	r1, #2165	; 0x875
    16ea:	2070      	movs	r0, #112	; 0x70
    16ec:	f002 f872 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16f0:	6920      	ldr	r0, [r4, #16]
    16f2:	1e40      	subs	r0, r0, #1
    16f4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    16f8:	f001 fa2a 	bl	2b50 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    16fc:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1700:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1704:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1708:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    170c:	6840      	ldr	r0, [r0, #4]
    170e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1712:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1716:	b001      	add	sp, #4
    1718:	2101      	movs	r1, #1
    171a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    171e:	4710      	bx	r2
    1720:	f7ff fc2c 	bl	f7c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x77c>
    1724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1728:	60a0      	str	r0, [r4, #8]
    172a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    172e:	f88d 0000 	strb.w	r0, [sp]
    1732:	f89d 0000 	ldrb.w	r0, [sp]
    1736:	b188      	cbz	r0, 175c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    1738:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    173c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1740:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1744:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1748:	6840      	ldr	r0, [r0, #4]
    174a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    174e:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1752:	b001      	add	sp, #4
    1754:	2106      	movs	r1, #6
    1756:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    175a:	4710      	bx	r2
    175c:	f640 0186 	movw	r1, #2182	; 0x886
    1760:	2070      	movs	r0, #112	; 0x70
    1762:	f002 f837 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1766:	f7ff fc09 	bl	f7c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x77c>
    176a:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    176e:	f001 ffb9 	bl	36e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1772:	b120      	cbz	r0, 177e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    1774:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1778:	b130      	cbz	r0, 1788 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    177a:	e009      	b.n	1790 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    177c:	e059      	b.n	1832 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    177e:	f640 0196 	movw	r1, #2198	; 0x896
    1782:	2070      	movs	r0, #112	; 0x70
    1784:	f002 f826 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1788:	f001 fe90 	bl	34ac <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    178c:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    1790:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1794:	b158      	cbz	r0, 17ae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    1796:	492b      	ldr	r1, [pc, #172]	; (1844 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    1798:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    179c:	6008      	str	r0, [r1, #0]
    179e:	2005      	movs	r0, #5
    17a0:	f001 fb90 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    17a4:	f001 fece 	bl	3544 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    17a8:	2000      	movs	r0, #0
    17aa:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    17ae:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    17b2:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    17b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    17ba:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    17be:	6840      	ldr	r0, [r0, #4]
    17c0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    17c4:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    17c8:	b001      	add	sp, #4
    17ca:	2100      	movs	r1, #0
    17cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    17d0:	4710      	bx	r2
    17d2:	f001 fc2f 	bl	3034 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    17d6:	8ae0      	ldrh	r0, [r4, #22]
    17d8:	b110      	cbz	r0, 17e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    17da:	f001 ff83 	bl	36e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    17de:	b128      	cbz	r0, 17ec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    17e0:	4819      	ldr	r0, [pc, #100]	; (1848 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    17e2:	7800      	ldrb	r0, [r0, #0]
    17e4:	2803      	cmp	r0, #3
    17e6:	bf08      	it	eq
    17e8:	7766      	strbeq	r6, [r4, #29]
    17ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17ec:	f640 01a1 	movw	r1, #2209	; 0x8a1
    17f0:	2070      	movs	r0, #112	; 0x70
    17f2:	f001 ffef 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17f6:	4815      	ldr	r0, [pc, #84]	; (184c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    17f8:	6006      	str	r6, [r0, #0]
    17fa:	6888      	ldr	r0, [r1, #8]
    17fc:	6006      	str	r6, [r0, #0]
    17fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1800:	7808      	ldrb	r0, [r1, #0]
    1802:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1806:	f002 b8b5 	b.w	3974 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    180a:	f7ff fbb7 	bl	f7c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x77c>
    180e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1812:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1816:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    181a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    181e:	6840      	ldr	r0, [r0, #4]
    1820:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1824:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1828:	b001      	add	sp, #4
    182a:	2105      	movs	r1, #5
    182c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1830:	4710      	bx	r2
    1832:	f640 01b4 	movw	r1, #2228	; 0x8b4
    1836:	2070      	movs	r0, #112	; 0x70
    1838:	f001 ffcc 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    183c:	20000894 	.word	0x20000894
    1840:	20000010 	.word	0x20000010
    1844:	4001f508 	.word	0x4001f508
    1848:	20000012 	.word	0x20000012
    184c:	40000508 	.word	0x40000508

00001850 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    1850:	4803      	ldr	r0, [pc, #12]	; (1860 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    1852:	b510      	push	{r4, lr}
    1854:	7840      	ldrb	r0, [r0, #1]
    1856:	f00e f95f 	bl	fb18 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    185a:	b280      	uxth	r0, r0
    185c:	bd10      	pop	{r4, pc}
    185e:	0000      	.short	0x0000
    1860:	20000012 	.word	0x20000012

00001864 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    1864:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1868:	4682      	mov	sl, r0
    186a:	48dc      	ldr	r0, [pc, #880]	; (1bdc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    186c:	b08b      	sub	sp, #44	; 0x2c
    186e:	6800      	ldr	r0, [r0, #0]
    1870:	4ddb      	ldr	r5, [pc, #876]	; (1be0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    1872:	05c0      	lsls	r0, r0, #23
    1874:	0dc0      	lsrs	r0, r0, #23
    1876:	d00e      	beq.n	1896 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    1878:	3810      	subs	r0, #16
    187a:	b240      	sxtb	r0, r0
    187c:	2800      	cmp	r0, #0
    187e:	bfb8      	it	lt
    1880:	f000 000f 	andlt.w	r0, r0, #15
    1884:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1888:	bfac      	ite	ge
    188a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    188e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1892:	0940      	lsrs	r0, r0, #5
    1894:	d00d      	beq.n	18b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    1896:	980c      	ldr	r0, [sp, #48]	; 0x30
    1898:	f04f 0b00 	mov.w	fp, #0
    189c:	7800      	ldrb	r0, [r0, #0]
    189e:	2800      	cmp	r0, #0
    18a0:	bf18      	it	ne
    18a2:	2801      	cmpne	r0, #1
    18a4:	d018      	beq.n	18d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    18a6:	f240 714f 	movw	r1, #1871	; 0x74f
    18aa:	f04f 0070 	mov.w	r0, #112	; 0x70
    18ae:	f001 ff91 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18b2:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    18b6:	f04f 0b01 	mov.w	fp, #1
    18ba:	2820      	cmp	r0, #32
    18bc:	d007      	beq.n	18ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    18be:	980c      	ldr	r0, [sp, #48]	; 0x30
    18c0:	7800      	ldrb	r0, [r0, #0]
    18c2:	b148      	cbz	r0, 18d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    18c4:	f240 714b 	movw	r1, #1867	; 0x74b
    18c8:	2070      	movs	r0, #112	; 0x70
    18ca:	f001 ff83 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18ce:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    18d2:	2070      	movs	r0, #112	; 0x70
    18d4:	f001 ff7e 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18d8:	4cc2      	ldr	r4, [pc, #776]	; (1be4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    18da:	b124      	cbz	r4, 18e6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    18dc:	2100      	movs	r1, #0
    18de:	f240 7052 	movw	r0, #1874	; 0x752
    18e2:	f3af 8000 	nop.w
    18e6:	49c0      	ldr	r1, [pc, #768]	; (1be8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    18e8:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    18ec:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    18f0:	f04f 0801 	mov.w	r8, #1
    18f4:	9000      	str	r0, [sp, #0]
    18f6:	b124      	cbz	r4, 1902 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    18f8:	2100      	movs	r1, #0
    18fa:	f240 705a 	movw	r0, #1882	; 0x75a
    18fe:	f3af 8000 	nop.w
    1902:	f1b8 0f00 	cmp.w	r8, #0
    1906:	d009      	beq.n	191c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    1908:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    190c:	f04f 0900 	mov.w	r9, #0
    1910:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    1914:	f1bb 0f00 	cmp.w	fp, #0
    1918:	d007      	beq.n	192a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    191a:	e032      	b.n	1982 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    191c:	48b3      	ldr	r0, [pc, #716]	; (1bec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    191e:	2800      	cmp	r0, #0
    1920:	bf18      	it	ne
    1922:	f3af 8000 	nopne.w
    1926:	b662      	cpsie	i
    1928:	e7ee      	b.n	1908 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    192a:	4637      	mov	r7, r6
    192c:	2001      	movs	r0, #1
    192e:	ea20 0607 	bic.w	r6, r0, r7
    1932:	48af      	ldr	r0, [pc, #700]	; (1bf0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    1934:	2240      	movs	r2, #64	; 0x40
    1936:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    193a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    193e:	f00e fa59 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1942:	b124      	cbz	r4, 194e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    1944:	2100      	movs	r1, #0
    1946:	f240 50cd 	movw	r0, #1485	; 0x5cd
    194a:	f3af 8000 	nop.w
    194e:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    1952:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1956:	6a09      	ldr	r1, [r1, #32]
    1958:	6201      	str	r1, [r0, #32]
    195a:	b124      	cbz	r4, 1966 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    195c:	2100      	movs	r1, #0
    195e:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1962:	f3af 8000 	nop.w
    1966:	b124      	cbz	r4, 1972 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    1968:	2100      	movs	r1, #0
    196a:	f240 7064 	movw	r0, #1892	; 0x764
    196e:	f3af 8000 	nop.w
    1972:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1976:	f88d 0004 	strb.w	r0, [sp, #4]
    197a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    197e:	2800      	cmp	r0, #0
    1980:	d1b9      	bne.n	18f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1982:	b124      	cbz	r4, 198e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    1984:	2100      	movs	r1, #0
    1986:	f240 706e 	movw	r0, #1902	; 0x76e
    198a:	f3af 8000 	nop.w
    198e:	f001 f83b 	bl	2a08 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1992:	4680      	mov	r8, r0
    1994:	4633      	mov	r3, r6
    1996:	aa06      	add	r2, sp, #24
    1998:	990c      	ldr	r1, [sp, #48]	; 0x30
    199a:	f7ff fa1b 	bl	dd4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5d4>
    199e:	b124      	cbz	r4, 19aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    19a0:	2100      	movs	r1, #0
    19a2:	f240 7075 	movw	r0, #1909	; 0x775
    19a6:	f3af 8000 	nop.w
    19aa:	4991      	ldr	r1, [pc, #580]	; (1bf0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    19ac:	a806      	add	r0, sp, #24
    19ae:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    19b2:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    19b6:	2901      	cmp	r1, #1
    19b8:	bf18      	it	ne
    19ba:	2902      	cmpne	r1, #2
    19bc:	d13c      	bne.n	1a38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    19be:	9906      	ldr	r1, [sp, #24]
    19c0:	9b07      	ldr	r3, [sp, #28]
    19c2:	eba1 0108 	sub.w	r1, r1, r8
    19c6:	4a8b      	ldr	r2, [pc, #556]	; (1bf4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    19c8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    19cc:	eba3 0308 	sub.w	r3, r3, r8
    19d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    19d4:	2902      	cmp	r1, #2
    19d6:	d371      	bcc.n	1abc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    19d8:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    19dc:	d26e      	bcs.n	1abc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    19de:	429a      	cmp	r2, r3
    19e0:	d36c      	bcc.n	1abc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    19e2:	f04f 0901 	mov.w	r9, #1
    19e6:	ab01      	add	r3, sp, #4
    19e8:	aa05      	add	r2, sp, #20
    19ea:	4631      	mov	r1, r6
    19ec:	f7fe fee8 	bl	7c0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1c0>
    19f0:	2800      	cmp	r0, #0
    19f2:	d06b      	beq.n	1acc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    19f4:	f89d 1014 	ldrb.w	r1, [sp, #20]
    19f8:	f89d 2004 	ldrb.w	r2, [sp, #4]
    19fc:	4633      	mov	r3, r6
    19fe:	428a      	cmp	r2, r1
    1a00:	d068      	beq.n	1ad4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    1a02:	2005      	movs	r0, #5
    1a04:	f7fe fd24 	bl	450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1a08:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    1a0c:	7048      	strb	r0, [r1, #1]
    1a0e:	f89d 0014 	ldrb.w	r0, [sp, #20]
    1a12:	2820      	cmp	r0, #32
    1a14:	bf03      	ittte	eq
    1a16:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1a1a:	f880 a020 	strbeq.w	sl, [r0, #32]
    1a1e:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    1a22:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1a26:	bf18      	it	ne
    1a28:	f880 a001 	strbne.w	sl, [r0, #1]
    1a2c:	4632      	mov	r2, r6
    1a2e:	4651      	mov	r1, sl
    1a30:	f05f 0003 	movs.w	r0, #3
    1a34:	f7ff fb74 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    1a38:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1a3c:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    1a40:	f88d 0004 	strb.w	r0, [sp, #4]
    1a44:	f89d 7004 	ldrb.w	r7, [sp, #4]
    1a48:	b124      	cbz	r4, 1a54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    1a4a:	2100      	movs	r1, #0
    1a4c:	f240 707c 	movw	r0, #1916	; 0x77c
    1a50:	f3af 8000 	nop.w
    1a54:	4868      	ldr	r0, [pc, #416]	; (1bf8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    1a56:	2800      	cmp	r0, #0
    1a58:	bf18      	it	ne
    1a5a:	f3af 8000 	nopne.w
    1a5e:	f3ef 8810 	mrs	r8, PRIMASK
    1a62:	b672      	cpsid	i
    1a64:	b124      	cbz	r4, 1a70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    1a66:	2100      	movs	r1, #0
    1a68:	f240 7082 	movw	r0, #1922	; 0x782
    1a6c:	f3af 8000 	nop.w
    1a70:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1a74:	f88d 0004 	strb.w	r0, [sp, #4]
    1a78:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1a7c:	2800      	cmp	r0, #0
    1a7e:	f47f af3a 	bne.w	18f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1a82:	b124      	cbz	r4, 1a8e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    1a84:	2100      	movs	r1, #0
    1a86:	f240 708a 	movw	r0, #1930	; 0x78a
    1a8a:	f3af 8000 	nop.w
    1a8e:	f10d 0e18 	add.w	lr, sp, #24
    1a92:	9800      	ldr	r0, [sp, #0]
    1a94:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    1a98:	f100 0008 	add.w	r0, r0, #8
    1a9c:	f1b9 0f00 	cmp.w	r9, #0
    1aa0:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    1aa4:	d044      	beq.n	1b30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1aa6:	b124      	cbz	r4, 1ab2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    1aa8:	2100      	movs	r1, #0
    1aaa:	f240 7097 	movw	r0, #1943	; 0x797
    1aae:	f3af 8000 	nop.w
    1ab2:	f1bb 0f00 	cmp.w	fp, #0
    1ab6:	d12c      	bne.n	1b12 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1ab8:	e016      	b.n	1ae8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    1aba:	e7ff      	b.n	1abc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1abc:	4632      	mov	r2, r6
    1abe:	4651      	mov	r1, sl
    1ac0:	2004      	movs	r0, #4
    1ac2:	f7ff fb2d 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    1ac6:	f04f 0901 	mov.w	r9, #1
    1aca:	e7b5      	b.n	1a38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    1acc:	4632      	mov	r2, r6
    1ace:	4651      	mov	r1, sl
    1ad0:	2004      	movs	r0, #4
    1ad2:	e7af      	b.n	1a34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    1ad4:	2920      	cmp	r1, #32
    1ad6:	bf19      	ittee	ne
    1ad8:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1adc:	7840      	ldrbne	r0, [r0, #1]
    1ade:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1ae2:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1ae6:	e78f      	b.n	1a08 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    1ae8:	b19f      	cbz	r7, 1b12 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1aea:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1aee:	2820      	cmp	r0, #32
    1af0:	d10f      	bne.n	1b12 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1af2:	b124      	cbz	r4, 1afe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    1af4:	2100      	movs	r1, #0
    1af6:	f240 709c 	movw	r0, #1948	; 0x79c
    1afa:	f3af 8000 	nop.w
    1afe:	4631      	mov	r1, r6
    1b00:	2002      	movs	r0, #2
    1b02:	f7ff fb3d 	bl	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
    1b06:	b920      	cbnz	r0, 1b12 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1b08:	980c      	ldr	r0, [sp, #48]	; 0x30
    1b0a:	7800      	ldrb	r0, [r0, #0]
    1b0c:	b3f0      	cbz	r0, 1b8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    1b0e:	2801      	cmp	r0, #1
    1b10:	d04c      	beq.n	1bac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    1b12:	b124      	cbz	r4, 1b1e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    1b14:	2100      	movs	r1, #0
    1b16:	f240 70b9 	movw	r0, #1977	; 0x7b9
    1b1a:	f3af 8000 	nop.w
    1b1e:	f1bb 0f00 	cmp.w	fp, #0
    1b22:	bf18      	it	ne
    1b24:	2001      	movne	r0, #1
    1b26:	d04a      	beq.n	1bbe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    1b28:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    1b2c:	f04f 0901 	mov.w	r9, #1
    1b30:	b124      	cbz	r4, 1b3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    1b32:	2100      	movs	r1, #0
    1b34:	f240 70ca 	movw	r0, #1994	; 0x7ca
    1b38:	f3af 8000 	nop.w
    1b3c:	f1b8 0f00 	cmp.w	r8, #0
    1b40:	d045      	beq.n	1bce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    1b42:	b124      	cbz	r4, 1b4e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    1b44:	2100      	movs	r1, #0
    1b46:	f240 70ce 	movw	r0, #1998	; 0x7ce
    1b4a:	f3af 8000 	nop.w
    1b4e:	f1b9 0f00 	cmp.w	r9, #0
    1b52:	d011      	beq.n	1b78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1b54:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1b58:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1b5c:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1b60:	2820      	cmp	r0, #32
    1b62:	d009      	beq.n	1b78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1b64:	b124      	cbz	r4, 1b70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    1b66:	2100      	movs	r1, #0
    1b68:	f240 70d5 	movw	r0, #2005	; 0x7d5
    1b6c:	f3af 8000 	nop.w
    1b70:	4822      	ldr	r0, [pc, #136]	; (1bfc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    1b72:	7840      	ldrb	r0, [r0, #1]
    1b74:	f001 fefe 	bl	3974 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1b78:	b124      	cbz	r4, 1b84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    1b7a:	2100      	movs	r1, #0
    1b7c:	f240 70da 	movw	r0, #2010	; 0x7da
    1b80:	f3af 8000 	nop.w
    1b84:	b00d      	add	sp, #52	; 0x34
    1b86:	4648      	mov	r0, r9
    1b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b8c:	e7ff      	b.n	1b8e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    1b8e:	b124      	cbz	r4, 1b9a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    1b90:	2100      	movs	r1, #0
    1b92:	f240 70a4 	movw	r0, #1956	; 0x7a4
    1b96:	f3af 8000 	nop.w
    1b9a:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    1b9e:	4651      	mov	r1, sl
    1ba0:	2004      	movs	r0, #4
    1ba2:	f7ff fabd 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    1ba6:	f04f 0901 	mov.w	r9, #1
    1baa:	e7c1      	b.n	1b30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1bac:	2c00      	cmp	r4, #0
    1bae:	f43f aea2 	beq.w	18f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1bb2:	2100      	movs	r1, #0
    1bb4:	f240 70af 	movw	r0, #1967	; 0x7af
    1bb8:	f3af 8000 	nop.w
    1bbc:	e69b      	b.n	18f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1bbe:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    1bc2:	2001      	movs	r0, #1
    1bc4:	ea20 0101 	bic.w	r1, r0, r1
    1bc8:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    1bcc:	e7ac      	b.n	1b28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    1bce:	4807      	ldr	r0, [pc, #28]	; (1bec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    1bd0:	2800      	cmp	r0, #0
    1bd2:	bf18      	it	ne
    1bd4:	f3af 8000 	nopne.w
    1bd8:	b662      	cpsie	i
    1bda:	e7b2      	b.n	1b42 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    1bdc:	e000ed04 	.word	0xe000ed04
    1be0:	20000c14 	.word	0x20000c14
    1be4:	00000000 	.word	0x00000000
    1be8:	20000894 	.word	0x20000894
    1bec:	00000000 	.word	0x00000000
    1bf0:	20000b94 	.word	0x20000b94
    1bf4:	003fffff 	.word	0x003fffff
    1bf8:	00000000 	.word	0x00000000
    1bfc:	20000010 	.word	0x20000010

00001c00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1c00:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c04:	48a5      	ldr	r0, [pc, #660]	; (1e9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x150>)
    1c06:	b08c      	sub	sp, #48	; 0x30
    1c08:	6800      	ldr	r0, [r0, #0]
    1c0a:	05c0      	lsls	r0, r0, #23
    1c0c:	0dc0      	lsrs	r0, r0, #23
    1c0e:	d011      	beq.n	1c34 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    1c10:	3810      	subs	r0, #16
    1c12:	b240      	sxtb	r0, r0
    1c14:	2800      	cmp	r0, #0
    1c16:	bfb8      	it	lt
    1c18:	f000 000f 	andlt.w	r0, r0, #15
    1c1c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1c20:	bfac      	ite	ge
    1c22:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1c26:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1c2a:	0940      	lsrs	r0, r0, #5
    1c2c:	bf08      	it	eq
    1c2e:	f04f 0901 	moveq.w	r9, #1
    1c32:	d001      	beq.n	1c38 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    1c34:	f04f 0900 	mov.w	r9, #0
    1c38:	980c      	ldr	r0, [sp, #48]	; 0x30
    1c3a:	7800      	ldrb	r0, [r0, #0]
    1c3c:	2800      	cmp	r0, #0
    1c3e:	f04f 0000 	mov.w	r0, #0
    1c42:	bf1c      	itt	ne
    1c44:	b00d      	addne	sp, #52	; 0x34
    1c46:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c4a:	f8df a254 	ldr.w	sl, [pc, #596]	; 1ea0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x154>
    1c4e:	4d95      	ldr	r5, [pc, #596]	; (1ea4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x158>)
    1c50:	4c95      	ldr	r4, [pc, #596]	; (1ea8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15c>)
    1c52:	f04f 0b00 	mov.w	fp, #0
    1c56:	900b      	str	r0, [sp, #44]	; 0x2c
    1c58:	b125      	cbz	r5, 1c64 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    1c5a:	2100      	movs	r1, #0
    1c5c:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    1c60:	f3af 8000 	nop.w
    1c64:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    1c68:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    1c6c:	f04f 0800 	mov.w	r8, #0
    1c70:	b125      	cbz	r5, 1c7c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    1c72:	2100      	movs	r1, #0
    1c74:	f240 605d 	movw	r0, #1629	; 0x65d
    1c78:	f3af 8000 	nop.w
    1c7c:	f1b9 0f00 	cmp.w	r9, #0
    1c80:	d11d      	bne.n	1cbe <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1c82:	4637      	mov	r7, r6
    1c84:	2001      	movs	r0, #1
    1c86:	ea20 0607 	bic.w	r6, r0, r7
    1c8a:	4888      	ldr	r0, [pc, #544]	; (1eac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x160>)
    1c8c:	2240      	movs	r2, #64	; 0x40
    1c8e:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1c92:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1c96:	f00e f8ad 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1c9a:	b125      	cbz	r5, 1ca6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    1c9c:	2100      	movs	r1, #0
    1c9e:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1ca2:	f3af 8000 	nop.w
    1ca6:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    1caa:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    1cae:	6a09      	ldr	r1, [r1, #32]
    1cb0:	6201      	str	r1, [r0, #32]
    1cb2:	b125      	cbz	r5, 1cbe <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1cb4:	2100      	movs	r1, #0
    1cb6:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1cba:	f3af 8000 	nop.w
    1cbe:	b125      	cbz	r5, 1cca <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    1cc0:	2100      	movs	r1, #0
    1cc2:	f240 6065 	movw	r0, #1637	; 0x665
    1cc6:	f3af 8000 	nop.w
    1cca:	f000 fe9d 	bl	2a08 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1cce:	4607      	mov	r7, r0
    1cd0:	4633      	mov	r3, r6
    1cd2:	466a      	mov	r2, sp
    1cd4:	990c      	ldr	r1, [sp, #48]	; 0x30
    1cd6:	f7ff f87d 	bl	dd4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5d4>
    1cda:	b125      	cbz	r5, 1ce6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    1cdc:	2100      	movs	r1, #0
    1cde:	f240 606b 	movw	r0, #1643	; 0x66b
    1ce2:	f3af 8000 	nop.w
    1ce6:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1cea:	2820      	cmp	r0, #32
    1cec:	d014      	beq.n	1d18 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    1cee:	6920      	ldr	r0, [r4, #16]
    1cf0:	9900      	ldr	r1, [sp, #0]
    1cf2:	1a09      	subs	r1, r1, r0
    1cf4:	0209      	lsls	r1, r1, #8
    1cf6:	17ca      	asrs	r2, r1, #31
    1cf8:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1cfc:	1209      	asrs	r1, r1, #8
    1cfe:	d50b      	bpl.n	1d18 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    1d00:	e9dd 2100 	ldrd	r2, r1, [sp]
    1d04:	1a89      	subs	r1, r1, r2
    1d06:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1d0a:	4408      	add	r0, r1
    1d0c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d10:	e9cd 2000 	strd	r2, r0, [sp]
    1d14:	f04f 0801 	mov.w	r8, #1
    1d18:	b14d      	cbz	r5, 1d2e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    1d1a:	2100      	movs	r1, #0
    1d1c:	f240 6075 	movw	r0, #1653	; 0x675
    1d20:	f3af 8000 	nop.w
    1d24:	2100      	movs	r1, #0
    1d26:	f240 607b 	movw	r0, #1659	; 0x67b
    1d2a:	f3af 8000 	nop.w
    1d2e:	9800      	ldr	r0, [sp, #0]
    1d30:	9901      	ldr	r1, [sp, #4]
    1d32:	1bc0      	subs	r0, r0, r7
    1d34:	1bc9      	subs	r1, r1, r7
    1d36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d3a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1d3e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1d42:	d205      	bcs.n	1d50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4>
    1d44:	458a      	cmp	sl, r1
    1d46:	d303      	bcc.n	1d50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4>
    1d48:	f1b9 0f00 	cmp.w	r9, #0
    1d4c:	d10c      	bne.n	1d68 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c>
    1d4e:	e003      	b.n	1d58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc>
    1d50:	f1b9 0f00 	cmp.w	r9, #0
    1d54:	d038      	beq.n	1dc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7c>
    1d56:	e094      	b.n	1e82 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x136>
    1d58:	4633      	mov	r3, r6
    1d5a:	463a      	mov	r2, r7
    1d5c:	4669      	mov	r1, sp
    1d5e:	4854      	ldr	r0, [pc, #336]	; (1eb0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x164>)
    1d60:	f7fe fbb2 	bl	4c8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x54>
    1d64:	ea48 0800 	orr.w	r8, r8, r0
    1d68:	f1b8 0f00 	cmp.w	r8, #0
    1d6c:	d022      	beq.n	1db4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x68>
    1d6e:	9800      	ldr	r0, [sp, #0]
    1d70:	f00d fed2 	bl	fb18 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1d74:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1d78:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1d7c:	4b4d      	ldr	r3, [pc, #308]	; (1eb4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x168>)
    1d7e:	4411      	add	r1, r2
    1d80:	1c49      	adds	r1, r1, #1
    1d82:	1842      	adds	r2, r0, r1
    1d84:	4298      	cmp	r0, r3
    1d86:	d841      	bhi.n	1e0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc0>
    1d88:	4849      	ldr	r0, [pc, #292]	; (1eb0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x164>)
    1d8a:	4281      	cmp	r1, r0
    1d8c:	dc5a      	bgt.n	1e44 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf8>
    1d8e:	4240      	negs	r0, r0
    1d90:	4281      	cmp	r1, r0
    1d92:	db5f      	blt.n	1e54 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x108>
    1d94:	1c58      	adds	r0, r3, #1
    1d96:	4290      	cmp	r0, r2
    1d98:	bfdc      	itt	le
    1d9a:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1d9e:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1da2:	dd05      	ble.n	1db0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x64>
    1da4:	2a00      	cmp	r2, #0
    1da6:	bfbc      	itt	lt
    1da8:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1dac:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1db0:	980c      	ldr	r0, [sp, #48]	; 0x30
    1db2:	60c2      	str	r2, [r0, #12]
    1db4:	2001      	movs	r0, #1
    1db6:	900b      	str	r0, [sp, #44]	; 0x2c
    1db8:	2d00      	cmp	r5, #0
    1dba:	d062      	beq.n	1e82 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x136>
    1dbc:	2100      	movs	r1, #0
    1dbe:	f240 608e 	movw	r0, #1678	; 0x68e
    1dc2:	f3af 8000 	nop.w
    1dc6:	e05c      	b.n	1e82 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x136>
    1dc8:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1dcc:	aa08      	add	r2, sp, #32
    1dce:	a907      	add	r1, sp, #28
    1dd0:	f000 fcbc 	bl	274c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1dd4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1dd8:	2820      	cmp	r0, #32
    1dda:	d01c      	beq.n	1e16 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xca>
    1ddc:	6920      	ldr	r0, [r4, #16]
    1dde:	1d40      	adds	r0, r0, #5
    1de0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1de4:	e9dd 2100 	ldrd	r2, r1, [sp]
    1de8:	1a89      	subs	r1, r1, r2
    1dea:	4401      	add	r1, r0
    1dec:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1df0:	e9cd 0100 	strd	r0, r1, [sp]
    1df4:	f00d fe90 	bl	fb18 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1df8:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1dfc:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1e00:	4b2c      	ldr	r3, [pc, #176]	; (1eb4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x168>)
    1e02:	4411      	add	r1, r2
    1e04:	1c4a      	adds	r2, r1, #1
    1e06:	1881      	adds	r1, r0, r2
    1e08:	4298      	cmp	r0, r3
    1e0a:	d918      	bls.n	1e3e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf2>
    1e0c:	f240 6109 	movw	r1, #1545	; 0x609
    1e10:	2070      	movs	r0, #112	; 0x70
    1e12:	f001 fcdf 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e16:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1e1a:	f107 0609 	add.w	r6, r7, #9
    1e1e:	b120      	cbz	r0, 1e2a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xde>
    1e20:	f001 fc60 	bl	36e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1e24:	2800      	cmp	r0, #0
    1e26:	bf08      	it	eq
    1e28:	3632      	addeq	r6, #50	; 0x32
    1e2a:	4823      	ldr	r0, [pc, #140]	; (1eb8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x16c>)
    1e2c:	7841      	ldrb	r1, [r0, #1]
    1e2e:	9807      	ldr	r0, [sp, #28]
    1e30:	4281      	cmp	r1, r0
    1e32:	bf84      	itt	hi
    1e34:	1a08      	subhi	r0, r1, r0
    1e36:	4406      	addhi	r6, r0
    1e38:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    1e3c:	e7d2      	b.n	1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1e3e:	481c      	ldr	r0, [pc, #112]	; (1eb0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x164>)
    1e40:	4282      	cmp	r2, r0
    1e42:	dd04      	ble.n	1e4e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x102>
    1e44:	f240 610a 	movw	r1, #1546	; 0x60a
    1e48:	2070      	movs	r0, #112	; 0x70
    1e4a:	f001 fcc3 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e4e:	481b      	ldr	r0, [pc, #108]	; (1ebc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x170>)
    1e50:	4282      	cmp	r2, r0
    1e52:	da04      	bge.n	1e5e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x112>
    1e54:	f240 610b 	movw	r1, #1547	; 0x60b
    1e58:	2070      	movs	r0, #112	; 0x70
    1e5a:	f001 fcbb 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e5e:	4818      	ldr	r0, [pc, #96]	; (1ec0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x174>)
    1e60:	4288      	cmp	r0, r1
    1e62:	bfdc      	itt	le
    1e64:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    1e68:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    1e6c:	dd05      	ble.n	1e7a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12e>
    1e6e:	2900      	cmp	r1, #0
    1e70:	bfbc      	itt	lt
    1e72:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    1e76:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    1e7a:	980c      	ldr	r0, [sp, #48]	; 0x30
    1e7c:	60c1      	str	r1, [r0, #12]
    1e7e:	2001      	movs	r0, #1
    1e80:	900b      	str	r0, [sp, #44]	; 0x2c
    1e82:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1e86:	f88d 0010 	strb.w	r0, [sp, #16]
    1e8a:	f89d 0010 	ldrb.w	r0, [sp, #16]
    1e8e:	2800      	cmp	r0, #0
    1e90:	f47f aee2 	bne.w	1c58 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    1e94:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1e96:	b00d      	add	sp, #52	; 0x34
    1e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e9c:	e000ed04 	.word	0xe000ed04
    1ea0:	003fffff 	.word	0x003fffff
    1ea4:	00000000 	.word	0x00000000
    1ea8:	20000c14 	.word	0x20000c14
    1eac:	20000b94 	.word	0x20000b94
    1eb0:	07a12000 	.word	0x07a12000
    1eb4:	1e847fff 	.word	0x1e847fff
    1eb8:	20000012 	.word	0x20000012
    1ebc:	f85ee000 	.word	0xf85ee000
    1ec0:	1e848000 	.word	0x1e848000

00001ec4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1ec4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ec8:	4d88      	ldr	r5, [pc, #544]	; (20ec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>)
    1eca:	b08c      	sub	sp, #48	; 0x30
    1ecc:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1ed0:	2000      	movs	r0, #0
    1ed2:	9009      	str	r0, [sp, #36]	; 0x24
    1ed4:	2001      	movs	r0, #1
    1ed6:	4c86      	ldr	r4, [pc, #536]	; (20f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>)
    1ed8:	f04f 0900 	mov.w	r9, #0
    1edc:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    1ee0:	4680      	mov	r8, r0
    1ee2:	9008      	str	r0, [sp, #32]
    1ee4:	b124      	cbz	r4, 1ef0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    1ee6:	2100      	movs	r1, #0
    1ee8:	f240 70e9 	movw	r0, #2025	; 0x7e9
    1eec:	f3af 8000 	nop.w
    1ef0:	9808      	ldr	r0, [sp, #32]
    1ef2:	2800      	cmp	r0, #0
    1ef4:	d037      	beq.n	1f66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    1ef6:	bf00      	nop
    1ef8:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    1efc:	b124      	cbz	r4, 1f08 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    1efe:	2100      	movs	r1, #0
    1f00:	f240 70ee 	movw	r0, #2030	; 0x7ee
    1f04:	f3af 8000 	nop.w
    1f08:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    1f0c:	2240      	movs	r2, #64	; 0x40
    1f0e:	ea28 060a 	bic.w	r6, r8, sl
    1f12:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    1f16:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    1f1a:	4683      	mov	fp, r0
    1f1c:	f00d ff6a 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1f20:	b124      	cbz	r4, 1f2c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    1f22:	2100      	movs	r1, #0
    1f24:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1f28:	f3af 8000 	nop.w
    1f2c:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1f30:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    1f34:	9000      	str	r0, [sp, #0]
    1f36:	6a09      	ldr	r1, [r1, #32]
    1f38:	6201      	str	r1, [r0, #32]
    1f3a:	b124      	cbz	r4, 1f46 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    1f3c:	2100      	movs	r1, #0
    1f3e:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1f42:	f3af 8000 	nop.w
    1f46:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1f4a:	f88d 0008 	strb.w	r0, [sp, #8]
    1f4e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1f52:	b178      	cbz	r0, 1f74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    1f54:	2c00      	cmp	r4, #0
    1f56:	bf1c      	itt	ne
    1f58:	2100      	movne	r1, #0
    1f5a:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    1f5e:	d0c1      	beq.n	1ee4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1f60:	f3af 8000 	nop.w
    1f64:	e7be      	b.n	1ee4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1f66:	4863      	ldr	r0, [pc, #396]	; (20f4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    1f68:	2800      	cmp	r0, #0
    1f6a:	bf18      	it	ne
    1f6c:	f3af 8000 	nopne.w
    1f70:	b662      	cpsie	i
    1f72:	e7c1      	b.n	1ef8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    1f74:	b124      	cbz	r4, 1f80 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    1f76:	2100      	movs	r1, #0
    1f78:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    1f7c:	f3af 8000 	nop.w
    1f80:	980c      	ldr	r0, [sp, #48]	; 0x30
    1f82:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    1f86:	2803      	cmp	r0, #3
    1f88:	d172      	bne.n	2070 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    1f8a:	f8dd a000 	ldr.w	sl, [sp]
    1f8e:	f8cd a018 	str.w	sl, [sp, #24]
    1f92:	990c      	ldr	r1, [sp, #48]	; 0x30
    1f94:	f89a 0020 	ldrb.w	r0, [sl, #32]
    1f98:	4288      	cmp	r0, r1
    1f9a:	bf14      	ite	ne
    1f9c:	f04f 0b00 	movne.w	fp, #0
    1fa0:	f04f 0b01 	moveq.w	fp, #1
    1fa4:	f10a 0c20 	add.w	ip, sl, #32
    1fa8:	4686      	mov	lr, r0
    1faa:	2220      	movs	r2, #32
    1fac:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    1fb0:	e003      	b.n	1fba <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    1fb2:	4602      	mov	r2, r0
    1fb4:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    1fb8:	7840      	ldrb	r0, [r0, #1]
    1fba:	4288      	cmp	r0, r1
    1fbc:	d002      	beq.n	1fc4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x100>
    1fbe:	2820      	cmp	r0, #32
    1fc0:	d00a      	beq.n	1fd8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    1fc2:	e7f6      	b.n	1fb2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xee>
    1fc4:	2820      	cmp	r0, #32
    1fc6:	d007      	beq.n	1fd8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    1fc8:	4586      	cmp	lr, r0
    1fca:	d107      	bne.n	1fdc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x118>
    1fcc:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    1fd0:	7840      	ldrb	r0, [r0, #1]
    1fd2:	f88c 0000 	strb.w	r0, [ip]
    1fd6:	e007      	b.n	1fe8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x124>
    1fd8:	4648      	mov	r0, r9
    1fda:	e00c      	b.n	1ff6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    1fdc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    1fe0:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    1fe4:	7840      	ldrb	r0, [r0, #1]
    1fe6:	7048      	strb	r0, [r1, #1]
    1fe8:	b124      	cbz	r4, 1ff4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x130>
    1fea:	2100      	movs	r1, #0
    1fec:	f240 5037 	movw	r0, #1335	; 0x537
    1ff0:	f3af 8000 	nop.w
    1ff4:	4640      	mov	r0, r8
    1ff6:	ea10 0f0b 	tst.w	r0, fp
    1ffa:	bf18      	it	ne
    1ffc:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    2000:	2800      	cmp	r0, #0
    2002:	d052      	beq.n	20aa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    2004:	b124      	cbz	r4, 2010 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14c>
    2006:	2100      	movs	r1, #0
    2008:	f240 70fd 	movw	r0, #2045	; 0x7fd
    200c:	f3af 8000 	nop.w
    2010:	4632      	mov	r2, r6
    2012:	2001      	movs	r0, #1
    2014:	990c      	ldr	r1, [sp, #48]	; 0x30
    2016:	f7ff f883 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    201a:	9806      	ldr	r0, [sp, #24]
    201c:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    2020:	f88d 0008 	strb.w	r0, [sp, #8]
    2024:	f89d a008 	ldrb.w	sl, [sp, #8]
    2028:	b124      	cbz	r4, 2034 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    202a:	2100      	movs	r1, #0
    202c:	f640 0008 	movw	r0, #2056	; 0x808
    2030:	f3af 8000 	nop.w
    2034:	4830      	ldr	r0, [pc, #192]	; (20f8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    2036:	2800      	cmp	r0, #0
    2038:	bf18      	it	ne
    203a:	f3af 8000 	nopne.w
    203e:	f3ef 8010 	mrs	r0, PRIMASK
    2042:	b672      	cpsid	i
    2044:	9008      	str	r0, [sp, #32]
    2046:	b124      	cbz	r4, 2052 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    2048:	2100      	movs	r1, #0
    204a:	f640 000d 	movw	r0, #2061	; 0x80d
    204e:	f3af 8000 	nop.w
    2052:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2056:	f88d 0008 	strb.w	r0, [sp, #8]
    205a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    205e:	b140      	cbz	r0, 2072 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    2060:	2c00      	cmp	r4, #0
    2062:	bf1c      	itt	ne
    2064:	2100      	movne	r1, #0
    2066:	f640 0011 	movwne	r0, #2065	; 0x811
    206a:	f43f af3b 	beq.w	1ee4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    206e:	e777      	b.n	1f60 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    2070:	e01b      	b.n	20aa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    2072:	f1ba 0f00 	cmp.w	sl, #0
    2076:	d008      	beq.n	208a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2078:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    207c:	2820      	cmp	r0, #32
    207e:	d104      	bne.n	208a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2080:	4631      	mov	r1, r6
    2082:	2002      	movs	r0, #2
    2084:	f7ff f87c 	bl	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
    2088:	b308      	cbz	r0, 20ce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    208a:	b124      	cbz	r4, 2096 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    208c:	2100      	movs	r1, #0
    208e:	f640 0025 	movw	r0, #2085	; 0x825
    2092:	f3af 8000 	nop.w
    2096:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    209a:	ea28 0000 	bic.w	r0, r8, r0
    209e:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    20a2:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    20a6:	2001      	movs	r0, #1
    20a8:	9009      	str	r0, [sp, #36]	; 0x24
    20aa:	b124      	cbz	r4, 20b6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    20ac:	2100      	movs	r1, #0
    20ae:	f640 002e 	movw	r0, #2094	; 0x82e
    20b2:	f3af 8000 	nop.w
    20b6:	9808      	ldr	r0, [sp, #32]
    20b8:	b188      	cbz	r0, 20de <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21a>
    20ba:	b124      	cbz	r4, 20c6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x202>
    20bc:	2100      	movs	r1, #0
    20be:	f640 0032 	movw	r0, #2098	; 0x832
    20c2:	f3af 8000 	nop.w
    20c6:	9809      	ldr	r0, [sp, #36]	; 0x24
    20c8:	b00d      	add	sp, #52	; 0x34
    20ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20ce:	2c00      	cmp	r4, #0
    20d0:	d0f1      	beq.n	20b6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    20d2:	2100      	movs	r1, #0
    20d4:	f44f 6002 	mov.w	r0, #2080	; 0x820
    20d8:	f3af 8000 	nop.w
    20dc:	e7e6      	b.n	20ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    20de:	4805      	ldr	r0, [pc, #20]	; (20f4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    20e0:	2800      	cmp	r0, #0
    20e2:	bf18      	it	ne
    20e4:	f3af 8000 	nopne.w
    20e8:	b662      	cpsie	i
    20ea:	e7e6      	b.n	20ba <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f6>
    20ec:	20000c14 	.word	0x20000c14
	...

000020fc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    20fc:	b510      	push	{r4, lr}
    20fe:	2820      	cmp	r0, #32
    2100:	d211      	bcs.n	2126 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2102:	490e      	ldr	r1, [pc, #56]	; (213c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    2104:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    2108:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    210c:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2110:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2114:	b13b      	cbz	r3, 2126 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2116:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    211a:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    211e:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    2122:	2a01      	cmp	r2, #1
    2124:	d001      	beq.n	212a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    2126:	2000      	movs	r0, #0
    2128:	bd10      	pop	{r4, pc}
    212a:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    212e:	4601      	mov	r1, r0
    2130:	2000      	movs	r0, #0
    2132:	f7fe fff5 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    2136:	2001      	movs	r0, #1
    2138:	bd10      	pop	{r4, pc}
    213a:	0000      	.short	0x0000
    213c:	20000c14 	.word	0x20000c14

00002140 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    2140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2144:	4e80      	ldr	r6, [pc, #512]	; (2348 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    2146:	4680      	mov	r8, r0
    2148:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    214c:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2150:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2154:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2158:	2800      	cmp	r0, #0
    215a:	d068      	beq.n	222e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    215c:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    2160:	4d7a      	ldr	r5, [pc, #488]	; (234c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    2162:	b125      	cbz	r5, 216e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2164:	2100      	movs	r1, #0
    2166:	f640 30c1 	movw	r0, #3009	; 0xbc1
    216a:	f3af 8000 	nop.w
    216e:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    2172:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2176:	2801      	cmp	r0, #1
    2178:	d018      	beq.n	21ac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    217a:	b2c0      	uxtb	r0, r0
    217c:	2804      	cmp	r0, #4
    217e:	bf1c      	itt	ne
    2180:	2805      	cmpne	r0, #5
    2182:	2806      	cmpne	r0, #6
    2184:	d058      	beq.n	2238 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    2186:	b12d      	cbz	r5, 2194 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2188:	f04f 0100 	mov.w	r1, #0
    218c:	f640 30cd 	movw	r0, #3021	; 0xbcd
    2190:	f3af 8000 	nop.w
    2194:	f001 fc44 	bl	3a20 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2198:	b125      	cbz	r5, 21a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    219a:	2100      	movs	r1, #0
    219c:	f640 30d1 	movw	r0, #3025	; 0xbd1
    21a0:	f3af 8000 	nop.w
    21a4:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    21a8:	2801      	cmp	r0, #1
    21aa:	d1e6      	bne.n	217a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    21ac:	2401      	movs	r4, #1
    21ae:	b125      	cbz	r5, 21ba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    21b0:	2100      	movs	r1, #0
    21b2:	f640 30d8 	movw	r0, #3032	; 0xbd8
    21b6:	f3af 8000 	nop.w
    21ba:	2c00      	cmp	r4, #0
    21bc:	d042      	beq.n	2244 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    21be:	2000      	movs	r0, #0
    21c0:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    21c4:	b125      	cbz	r5, 21d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    21c6:	2100      	movs	r1, #0
    21c8:	f640 30dd 	movw	r0, #3037	; 0xbdd
    21cc:	f3af 8000 	nop.w
    21d0:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    21d4:	2001      	movs	r0, #1
    21d6:	ea20 090b 	bic.w	r9, r0, fp
    21da:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    21de:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    21e2:	2240      	movs	r2, #64	; 0x40
    21e4:	f00d fe06 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    21e8:	b125      	cbz	r5, 21f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    21ea:	2100      	movs	r1, #0
    21ec:	f240 50cd 	movw	r0, #1485	; 0x5cd
    21f0:	f3af 8000 	nop.w
    21f4:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    21f8:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    21fc:	6a00      	ldr	r0, [r0, #32]
    21fe:	f8ca 0020 	str.w	r0, [sl, #32]
    2202:	b125      	cbz	r5, 220e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    2204:	2100      	movs	r1, #0
    2206:	f240 50d1 	movw	r0, #1489	; 0x5d1
    220a:	f3af 8000 	nop.w
    220e:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    2212:	f88d 0000 	strb.w	r0, [sp]
    2216:	f89d 0000 	ldrb.w	r0, [sp]
    221a:	b1d0      	cbz	r0, 2252 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    221c:	2d00      	cmp	r5, #0
    221e:	bf1c      	itt	ne
    2220:	2100      	movne	r1, #0
    2222:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    2226:	d0c2      	beq.n	21ae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2228:	f3af 8000 	nop.w
    222c:	e7bf      	b.n	21ae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    222e:	f640 31b8 	movw	r1, #3000	; 0xbb8
    2232:	2070      	movs	r0, #112	; 0x70
    2234:	f001 face 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2238:	464a      	mov	r2, r9
    223a:	4641      	mov	r1, r8
    223c:	2001      	movs	r0, #1
    223e:	f7fe ff6f 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    2242:	e7a9      	b.n	2198 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    2244:	4842      	ldr	r0, [pc, #264]	; (2350 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    2246:	2800      	cmp	r0, #0
    2248:	bf18      	it	ne
    224a:	f3af 8000 	nopne.w
    224e:	b662      	cpsie	i
    2250:	e7b5      	b.n	21be <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    2252:	b125      	cbz	r5, 225e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    2254:	2100      	movs	r1, #0
    2256:	f640 30e7 	movw	r0, #3047	; 0xbe7
    225a:	f3af 8000 	nop.w
    225e:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    2262:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2266:	4614      	mov	r4, r2
    2268:	f04f 0b20 	mov.w	fp, #32
    226c:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2270:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2274:	e003      	b.n	227e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    2276:	46a3      	mov	fp, r4
    2278:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    227c:	785c      	ldrb	r4, [r3, #1]
    227e:	4544      	cmp	r4, r8
    2280:	d002      	beq.n	2288 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    2282:	2c20      	cmp	r4, #32
    2284:	d02b      	beq.n	22de <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2286:	e7f6      	b.n	2276 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    2288:	2c20      	cmp	r4, #32
    228a:	d028      	beq.n	22de <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    228c:	42a2      	cmp	r2, r4
    228e:	d104      	bne.n	229a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    2290:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    2294:	7840      	ldrb	r0, [r0, #1]
    2296:	7008      	strb	r0, [r1, #0]
    2298:	e005      	b.n	22a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    229a:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    229e:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    22a2:	7849      	ldrb	r1, [r1, #1]
    22a4:	7041      	strb	r1, [r0, #1]
    22a6:	f1ba 0f00 	cmp.w	sl, #0
    22aa:	d011      	beq.n	22d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    22ac:	b125      	cbz	r5, 22b8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    22ae:	2100      	movs	r1, #0
    22b0:	f240 502f 	movw	r0, #1327	; 0x52f
    22b4:	f3af 8000 	nop.w
    22b8:	f89a 0000 	ldrb.w	r0, [sl]
    22bc:	42a0      	cmp	r0, r4
    22be:	d107      	bne.n	22d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    22c0:	b125      	cbz	r5, 22cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    22c2:	2100      	movs	r1, #0
    22c4:	f240 5032 	movw	r0, #1330	; 0x532
    22c8:	f3af 8000 	nop.w
    22cc:	f88a b000 	strb.w	fp, [sl]
    22d0:	b15d      	cbz	r5, 22ea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    22d2:	2100      	movs	r1, #0
    22d4:	f240 5037 	movw	r0, #1335	; 0x537
    22d8:	f3af 8000 	nop.w
    22dc:	e000      	b.n	22e0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    22de:	b125      	cbz	r5, 22ea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    22e0:	2100      	movs	r1, #0
    22e2:	f640 30eb 	movw	r0, #3051	; 0xbeb
    22e6:	f3af 8000 	nop.w
    22ea:	481a      	ldr	r0, [pc, #104]	; (2354 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    22ec:	2800      	cmp	r0, #0
    22ee:	bf18      	it	ne
    22f0:	f3af 8000 	nopne.w
    22f4:	f3ef 8410 	mrs	r4, PRIMASK
    22f8:	b672      	cpsid	i
    22fa:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    22fe:	f88d 0000 	strb.w	r0, [sp]
    2302:	f89d 0000 	ldrb.w	r0, [sp]
    2306:	b138      	cbz	r0, 2318 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    2308:	2d00      	cmp	r5, #0
    230a:	bf1c      	itt	ne
    230c:	2100      	movne	r1, #0
    230e:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    2312:	f43f af4c 	beq.w	21ae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2316:	e787      	b.n	2228 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    2318:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    231c:	2001      	movs	r0, #1
    231e:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2322:	b154      	cbz	r4, 233a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    2324:	2d00      	cmp	r5, #0
    2326:	bf08      	it	eq
    2328:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    232c:	2100      	movs	r1, #0
    232e:	f640 30fe 	movw	r0, #3070	; 0xbfe
    2332:	f3af 8000 	nop.w
    2336:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    233a:	4805      	ldr	r0, [pc, #20]	; (2350 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    233c:	2800      	cmp	r0, #0
    233e:	bf18      	it	ne
    2340:	f3af 8000 	nopne.w
    2344:	b662      	cpsie	i
    2346:	e7ed      	b.n	2324 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    2348:	20000c14 	.word	0x20000c14
	...

00002358 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2358:	b570      	push	{r4, r5, r6, lr}
    235a:	460d      	mov	r5, r1
    235c:	4606      	mov	r6, r0
    235e:	f001 f9af 	bl	36c0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    2362:	480f      	ldr	r0, [pc, #60]	; (23a0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    2364:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    2368:	2400      	movs	r4, #0
    236a:	3880      	subs	r0, #128	; 0x80
    236c:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2370:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2374:	b129      	cbz	r1, 2382 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    2376:	1c61      	adds	r1, r4, #1
    2378:	b2cc      	uxtb	r4, r1
    237a:	2c20      	cmp	r4, #32
    237c:	d3f8      	bcc.n	2370 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    237e:	2020      	movs	r0, #32
    2380:	bd70      	pop	{r4, r5, r6, pc}
    2382:	4808      	ldr	r0, [pc, #32]	; (23a4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    2384:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2388:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    238c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    2390:	4621      	mov	r1, r4
    2392:	6045      	str	r5, [r0, #4]
    2394:	2001      	movs	r0, #1
    2396:	f7fe fec3 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    239a:	4620      	mov	r0, r4
    239c:	bd70      	pop	{r4, r5, r6, pc}
    239e:	0000      	.short	0x0000
    23a0:	20000c14 	.word	0x20000c14
    23a4:	20000894 	.word	0x20000894

000023a8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    23a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23ac:	b083      	sub	sp, #12
    23ae:	f000 fb2b 	bl	2a08 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    23b2:	4605      	mov	r5, r0
    23b4:	f000 fdf4 	bl	2fa0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    23b8:	4c67      	ldr	r4, [pc, #412]	; (2558 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    23ba:	68a0      	ldr	r0, [r4, #8]
    23bc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    23c0:	bf1c      	itt	ne
    23c2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    23c6:	60a0      	strne	r0, [r4, #8]
    23c8:	7fa0      	ldrb	r0, [r4, #30]
    23ca:	f8df b190 	ldr.w	fp, [pc, #400]	; 255c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    23ce:	b9a8      	cbnz	r0, 23fc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    23d0:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    23d4:	1a08      	subs	r0, r1, r0
    23d6:	0200      	lsls	r0, r0, #8
    23d8:	17c1      	asrs	r1, r0, #31
    23da:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    23de:	1200      	asrs	r0, r0, #8
    23e0:	f44f 710c 	mov.w	r1, #560	; 0x230
    23e4:	f00d fbc5 	bl	fb72 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    23e8:	6921      	ldr	r1, [r4, #16]
    23ea:	4408      	add	r0, r1
    23ec:	1a28      	subs	r0, r5, r0
    23ee:	0200      	lsls	r0, r0, #8
    23f0:	17c1      	asrs	r1, r0, #31
    23f2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    23f6:	1200      	asrs	r0, r0, #8
    23f8:	0fc0      	lsrs	r0, r0, #31
    23fa:	d013      	beq.n	2424 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    23fc:	7e60      	ldrb	r0, [r4, #25]
    23fe:	b328      	cbz	r0, 244c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    2400:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2404:	f88d 0000 	strb.w	r0, [sp]
    2408:	f89d 0000 	ldrb.w	r0, [sp]
    240c:	b1f0      	cbz	r0, 244c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    240e:	f000 fc09 	bl	2c24 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    2412:	bf00      	nop
    2414:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    2418:	b1f0      	cbz	r0, 2458 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    241a:	f240 4147 	movw	r1, #1095	; 0x447
    241e:	2070      	movs	r0, #112	; 0x70
    2420:	f001 f9d8 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2424:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2428:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    242c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2430:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2434:	6840      	ldr	r0, [r0, #4]
    2436:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    243a:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    243e:	2108      	movs	r1, #8
    2440:	4790      	blx	r2
    2442:	f44f 6186 	mov.w	r1, #1072	; 0x430
    2446:	2070      	movs	r0, #112	; 0x70
    2448:	f001 f9c4 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    244c:	1ce8      	adds	r0, r5, #3
    244e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2452:	f000 fadf 	bl	2a14 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2456:	e7dd      	b.n	2414 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    2458:	f04f 0a01 	mov.w	sl, #1
    245c:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    2460:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2464:	2820      	cmp	r0, #32
    2466:	d024      	beq.n	24b2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    2468:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    246c:	2020      	movs	r0, #32
    246e:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    2472:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    2476:	2600      	movs	r6, #0
    2478:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    247c:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    2480:	4837      	ldr	r0, [pc, #220]	; (2560 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    2482:	6026      	str	r6, [r4, #0]
    2484:	7800      	ldrb	r0, [r0, #0]
    2486:	2802      	cmp	r0, #2
    2488:	bf16      	itet	ne
    248a:	2803      	cmpne	r0, #3
    248c:	2001      	moveq	r0, #1
    248e:	2000      	movne	r0, #0
    2490:	7720      	strb	r0, [r4, #28]
    2492:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    2496:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    249a:	f899 0020 	ldrb.w	r0, [r9, #32]
    249e:	2820      	cmp	r0, #32
    24a0:	d031      	beq.n	2506 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    24a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    24a6:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    24aa:	7d81      	ldrb	r1, [r0, #22]
    24ac:	2901      	cmp	r1, #1
    24ae:	d005      	beq.n	24bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    24b0:	e029      	b.n	2506 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    24b2:	f240 414a 	movw	r1, #1098	; 0x44a
    24b6:	2070      	movs	r0, #112	; 0x70
    24b8:	f001 f98c 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24bc:	46ab      	mov	fp, r5
    24be:	f100 0508 	add.w	r5, r0, #8
    24c2:	8a40      	ldrh	r0, [r0, #18]
    24c4:	aa01      	add	r2, sp, #4
    24c6:	4669      	mov	r1, sp
    24c8:	f000 f940 	bl	274c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    24cc:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    24d0:	2820      	cmp	r0, #32
    24d2:	d004      	beq.n	24de <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    24d4:	6920      	ldr	r0, [r4, #16]
    24d6:	1d40      	adds	r0, r0, #5
    24d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    24dc:	e00b      	b.n	24f6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    24de:	8968      	ldrh	r0, [r5, #10]
    24e0:	f10b 0b09 	add.w	fp, fp, #9
    24e4:	b128      	cbz	r0, 24f2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    24e6:	f001 f8fd 	bl	36e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    24ea:	2800      	cmp	r0, #0
    24ec:	bf08      	it	eq
    24ee:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    24f2:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    24f6:	e9d5 2100 	ldrd	r2, r1, [r5]
    24fa:	1a89      	subs	r1, r1, r2
    24fc:	6028      	str	r0, [r5, #0]
    24fe:	4408      	add	r0, r1
    2500:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2504:	6068      	str	r0, [r5, #4]
    2506:	4639      	mov	r1, r7
    2508:	2001      	movs	r0, #1
    250a:	f7fe fe39 	bl	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
    250e:	2800      	cmp	r0, #0
    2510:	d0f9      	beq.n	2506 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    2512:	4814      	ldr	r0, [pc, #80]	; (2564 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    2514:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    2518:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    251c:	2802      	cmp	r0, #2
    251e:	d104      	bne.n	252a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    2520:	463a      	mov	r2, r7
    2522:	4641      	mov	r1, r8
    2524:	2006      	movs	r0, #6
    2526:	f7fe fdfb 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    252a:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    252e:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    2532:	2820      	cmp	r0, #32
    2534:	d003      	beq.n	253e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    2536:	480c      	ldr	r0, [pc, #48]	; (2568 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    2538:	7840      	ldrb	r0, [r0, #1]
    253a:	f001 fa1b 	bl	3974 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    253e:	7f20      	ldrb	r0, [r4, #28]
    2540:	2800      	cmp	r0, #0
    2542:	bf04      	itt	eq
    2544:	b003      	addeq	sp, #12
    2546:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    254a:	f000 fd73 	bl	3034 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    254e:	7726      	strb	r6, [r4, #28]
    2550:	7766      	strb	r6, [r4, #29]
    2552:	b003      	add	sp, #12
    2554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2558:	20000c14 	.word	0x20000c14
    255c:	20000894 	.word	0x20000894
    2560:	20000012 	.word	0x20000012
    2564:	20000b94 	.word	0x20000b94
    2568:	20000010 	.word	0x20000010

0000256c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    256c:	b510      	push	{r4, lr}
    256e:	4c32      	ldr	r4, [pc, #200]	; (2638 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    2570:	b082      	sub	sp, #8
    2572:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2576:	2920      	cmp	r1, #32
    2578:	d008      	beq.n	258c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    257a:	68a1      	ldr	r1, [r4, #8]
    257c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    2580:	d009      	beq.n	2596 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    2582:	f640 21e9 	movw	r1, #2793	; 0xae9
    2586:	2070      	movs	r0, #112	; 0x70
    2588:	f001 f924 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    258c:	f640 21e8 	movw	r1, #2792	; 0xae8
    2590:	2070      	movs	r0, #112	; 0x70
    2592:	f001 f91f 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2596:	6862      	ldr	r2, [r4, #4]
    2598:	4601      	mov	r1, r0
    259a:	4b28      	ldr	r3, [pc, #160]	; (263c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    259c:	1850      	adds	r0, r2, r1
    259e:	429a      	cmp	r2, r3
    25a0:	d904      	bls.n	25ac <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    25a2:	f240 6109 	movw	r1, #1545	; 0x609
    25a6:	2070      	movs	r0, #112	; 0x70
    25a8:	f001 f914 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25ac:	4a24      	ldr	r2, [pc, #144]	; (2640 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    25ae:	4291      	cmp	r1, r2
    25b0:	dd04      	ble.n	25bc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    25b2:	f240 610a 	movw	r1, #1546	; 0x60a
    25b6:	2070      	movs	r0, #112	; 0x70
    25b8:	f001 f90c 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25bc:	4a21      	ldr	r2, [pc, #132]	; (2644 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    25be:	4291      	cmp	r1, r2
    25c0:	da04      	bge.n	25cc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    25c2:	f240 610b 	movw	r1, #1547	; 0x60b
    25c6:	2070      	movs	r0, #112	; 0x70
    25c8:	f001 f904 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25cc:	491e      	ldr	r1, [pc, #120]	; (2648 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    25ce:	4281      	cmp	r1, r0
    25d0:	bfdc      	itt	le
    25d2:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    25d6:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    25da:	dd05      	ble.n	25e8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    25dc:	2800      	cmp	r0, #0
    25de:	bfbc      	itt	lt
    25e0:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    25e4:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    25e8:	aa01      	add	r2, sp, #4
    25ea:	4669      	mov	r1, sp
    25ec:	f000 f8ae 	bl	274c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    25f0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    25f4:	280f      	cmp	r0, #15
    25f6:	bf8c      	ite	hi
    25f8:	2001      	movhi	r0, #1
    25fa:	2000      	movls	r0, #0
    25fc:	9900      	ldr	r1, [sp, #0]
    25fe:	4408      	add	r0, r1
    2600:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2604:	60a1      	str	r1, [r4, #8]
    2606:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    260a:	f88d 0000 	strb.w	r0, [sp]
    260e:	f89d 0000 	ldrb.w	r0, [sp]
    2612:	2800      	cmp	r0, #0
    2614:	bf04      	itt	eq
    2616:	b002      	addeq	sp, #8
    2618:	bd10      	popeq	{r4, pc}
    261a:	2301      	movs	r3, #1
    261c:	2203      	movs	r2, #3
    261e:	2005      	movs	r0, #5
    2620:	f000 fb7c 	bl	2d1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2624:	2800      	cmp	r0, #0
    2626:	bf1c      	itt	ne
    2628:	b002      	addne	sp, #8
    262a:	bd10      	popne	{r4, pc}
    262c:	f640 21f1 	movw	r1, #2801	; 0xaf1
    2630:	2070      	movs	r0, #112	; 0x70
    2632:	f001 f8cf 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2636:	0000      	.short	0x0000
    2638:	20000c14 	.word	0x20000c14
    263c:	1e847fff 	.word	0x1e847fff
    2640:	07a12000 	.word	0x07a12000
    2644:	f85ee000 	.word	0xf85ee000
    2648:	1e848000 	.word	0x1e848000

0000264c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    264c:	b570      	push	{r4, r5, r6, lr}
    264e:	4c1e      	ldr	r4, [pc, #120]	; (26c8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    2650:	2120      	movs	r1, #32
    2652:	f884 1020 	strb.w	r1, [r4, #32]
    2656:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    265a:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    265e:	2000      	movs	r0, #0
    2660:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    2664:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2668:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    266c:	1e42      	subs	r2, r0, #1
    266e:	60a2      	str	r2, [r4, #8]
    2670:	6020      	str	r0, [r4, #0]
    2672:	77a0      	strb	r0, [r4, #30]
    2674:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    2678:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    267c:	7720      	strb	r0, [r4, #28]
    267e:	7760      	strb	r0, [r4, #29]
    2680:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    2684:	4911      	ldr	r1, [pc, #68]	; (26cc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    2686:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    268a:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    268e:	7008      	strb	r0, [r1, #0]
    2690:	7048      	strb	r0, [r1, #1]
    2692:	8048      	strh	r0, [r1, #2]
    2694:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2698:	2210      	movs	r2, #16
    269a:	7088      	strb	r0, [r1, #2]
    269c:	f801 0f04 	strb.w	r0, [r1, #4]!
    26a0:	1e52      	subs	r2, r2, #1
    26a2:	d1fa      	bne.n	269a <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    26a4:	4d0a      	ldr	r5, [pc, #40]	; (26d0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    26a6:	2601      	movs	r6, #1
    26a8:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    26ac:	20ff      	movs	r0, #255	; 0xff
    26ae:	7028      	strb	r0, [r5, #0]
    26b0:	4808      	ldr	r0, [pc, #32]	; (26d4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    26b2:	f001 f941 	bl	3938 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    26b6:	7068      	strb	r0, [r5, #1]
    26b8:	f001 f99c 	bl	39f4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    26bc:	60a8      	str	r0, [r5, #8]
    26be:	f000 fce7 	bl	3090 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    26c2:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    26c6:	bd70      	pop	{r4, r5, r6, pc}
    26c8:	20000c14 	.word	0x20000c14
    26cc:	20000012 	.word	0x20000012
    26d0:	20000010 	.word	0x20000010
    26d4:	00000fdd 	.word	0x00000fdd

000026d8 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    26d8:	b570      	push	{r4, r5, r6, lr}
    26da:	4605      	mov	r5, r0
    26dc:	2001      	movs	r0, #1
    26de:	fa00 f405 	lsl.w	r4, r0, r5
    26e2:	460e      	mov	r6, r1
    26e4:	2a00      	cmp	r2, #0
    26e6:	bf08      	it	eq
    26e8:	4808      	ldreq	r0, [pc, #32]	; (270c <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    26ea:	d00c      	beq.n	2706 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    26ec:	2000      	movs	r0, #0
    26ee:	f000 fcb5 	bl	305c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    26f2:	00e9      	lsls	r1, r5, #3
    26f4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    26f8:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    26fc:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    2700:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    2704:	4802      	ldr	r0, [pc, #8]	; (2710 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    2706:	6004      	str	r4, [r0, #0]
    2708:	bd70      	pop	{r4, r5, r6, pc}
    270a:	0000      	.short	0x0000
    270c:	4001f508 	.word	0x4001f508
    2710:	4001f504 	.word	0x4001f504

00002714 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    2714:	0b41      	lsrs	r1, r0, #13
    2716:	f248 6237 	movw	r2, #34359	; 0x8637
    271a:	4351      	muls	r1, r2
    271c:	0c0a      	lsrs	r2, r1, #16
    271e:	4b09      	ldr	r3, [pc, #36]	; (2744 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    2720:	0251      	lsls	r1, r2, #9
    2722:	fb02 0203 	mla	r2, r2, r3, r0
    2726:	4808      	ldr	r0, [pc, #32]	; (2748 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    2728:	4350      	muls	r0, r2
    272a:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    272e:	306e      	adds	r0, #110	; 0x6e
    2730:	0d40      	lsrs	r0, r0, #21
    2732:	425b      	negs	r3, r3
    2734:	fb10 f303 	smulbb	r3, r0, r3
    2738:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    273c:	bf88      	it	hi
    273e:	1c49      	addhi	r1, r1, #1
    2740:	4408      	add	r0, r1
    2742:	4770      	bx	lr
    2744:	ffffc2f7 	.word	0xffffc2f7
    2748:	00010c6f 	.word	0x00010c6f

0000274c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    274c:	0b43      	lsrs	r3, r0, #13
    274e:	f248 6c37 	movw	ip, #34359	; 0x8637
    2752:	fb03 f30c 	mul.w	r3, r3, ip
    2756:	b430      	push	{r4, r5}
    2758:	0c1b      	lsrs	r3, r3, #16
    275a:	f8df c044 	ldr.w	ip, [pc, #68]	; 27a0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    275e:	025c      	lsls	r4, r3, #9
    2760:	fb03 030c 	mla	r3, r3, ip, r0
    2764:	480f      	ldr	r0, [pc, #60]	; (27a4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    2766:	4358      	muls	r0, r3
    2768:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    276c:	eb04 000c 	add.w	r0, r4, ip
    2770:	f643 5409 	movw	r4, #15625	; 0x3d09
    2774:	fb1c f404 	smulbb	r4, ip, r4
    2778:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    277c:	f643 5508 	movw	r5, #15624	; 0x3d08
    2780:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    2784:	442c      	add	r4, r5
    2786:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    278a:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    278e:	bf84      	itt	hi
    2790:	f04f 0c00 	movhi.w	ip, #0
    2794:	1c40      	addhi	r0, r0, #1
    2796:	6008      	str	r0, [r1, #0]
    2798:	f882 c000 	strb.w	ip, [r2]
    279c:	bc30      	pop	{r4, r5}
    279e:	4770      	bx	lr
    27a0:	ffffc2f7 	.word	0xffffc2f7
    27a4:	00010c6f 	.word	0x00010c6f

000027a8 <MPSL_IRQ_RTC0_Handler>:
    27a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    27ac:	4c36      	ldr	r4, [pc, #216]	; (2888 <MPSL_IRQ_RTC0_Handler+0xe0>)
    27ae:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27b2:	f44f 6600 	mov.w	r6, #2048	; 0x800
    27b6:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    27ba:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    27be:	f04f 0500 	mov.w	r5, #0
    27c2:	d019      	beq.n	27f8 <MPSL_IRQ_RTC0_Handler+0x50>
    27c4:	4831      	ldr	r0, [pc, #196]	; (288c <MPSL_IRQ_RTC0_Handler+0xe4>)
    27c6:	6800      	ldr	r0, [r0, #0]
    27c8:	b1b0      	cbz	r0, 27f8 <MPSL_IRQ_RTC0_Handler+0x50>
    27ca:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    27ce:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27d2:	482f      	ldr	r0, [pc, #188]	; (2890 <MPSL_IRQ_RTC0_Handler+0xe8>)
    27d4:	6800      	ldr	r0, [r0, #0]
    27d6:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    27da:	1a40      	subs	r0, r0, r1
    27dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    27e0:	2802      	cmp	r0, #2
    27e2:	d302      	bcc.n	27ea <MPSL_IRQ_RTC0_Handler+0x42>
    27e4:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    27e8:	d306      	bcc.n	27f8 <MPSL_IRQ_RTC0_Handler+0x50>
    27ea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    27ee:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    27f2:	2004      	movs	r0, #4
    27f4:	f7fe ff46 	bl	1684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27f8:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27fc:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2800:	d019      	beq.n	2836 <MPSL_IRQ_RTC0_Handler+0x8e>
    2802:	4824      	ldr	r0, [pc, #144]	; (2894 <MPSL_IRQ_RTC0_Handler+0xec>)
    2804:	6800      	ldr	r0, [r0, #0]
    2806:	b1b0      	cbz	r0, 2836 <MPSL_IRQ_RTC0_Handler+0x8e>
    2808:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    280c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2810:	4821      	ldr	r0, [pc, #132]	; (2898 <MPSL_IRQ_RTC0_Handler+0xf0>)
    2812:	6800      	ldr	r0, [r0, #0]
    2814:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    2818:	1a40      	subs	r0, r0, r1
    281a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    281e:	2802      	cmp	r0, #2
    2820:	d302      	bcc.n	2828 <MPSL_IRQ_RTC0_Handler+0x80>
    2822:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2826:	d306      	bcc.n	2836 <MPSL_IRQ_RTC0_Handler+0x8e>
    2828:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    282c:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2830:	2005      	movs	r0, #5
    2832:	f7fe ff27 	bl	1684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2836:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    283a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    283e:	bf08      	it	eq
    2840:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2844:	4815      	ldr	r0, [pc, #84]	; (289c <MPSL_IRQ_RTC0_Handler+0xf4>)
    2846:	6800      	ldr	r0, [r0, #0]
    2848:	2800      	cmp	r0, #0
    284a:	bf08      	it	eq
    284c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2850:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    2854:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2858:	4811      	ldr	r0, [pc, #68]	; (28a0 <MPSL_IRQ_RTC0_Handler+0xf8>)
    285a:	6800      	ldr	r0, [r0, #0]
    285c:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    2860:	1a40      	subs	r0, r0, r1
    2862:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2866:	2802      	cmp	r0, #2
    2868:	d304      	bcc.n	2874 <MPSL_IRQ_RTC0_Handler+0xcc>
    286a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    286e:	bf38      	it	cc
    2870:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    2874:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2878:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    287c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2880:	2006      	movs	r0, #6
    2882:	f7fe beff 	b.w	1684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2886:	0000      	.short	0x0000
    2888:	4000b000 	.word	0x4000b000
    288c:	4000b140 	.word	0x4000b140
    2890:	4000b540 	.word	0x4000b540
    2894:	4000b144 	.word	0x4000b144
    2898:	4000b544 	.word	0x4000b544
    289c:	4000b148 	.word	0x4000b148
    28a0:	4000b548 	.word	0x4000b548

000028a4 <MPSL_IRQ_TIMER0_Handler>:
    28a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28a8:	4d38      	ldr	r5, [pc, #224]	; (298c <MPSL_IRQ_TIMER0_Handler+0xe8>)
    28aa:	7828      	ldrb	r0, [r5, #0]
    28ac:	2804      	cmp	r0, #4
    28ae:	d068      	beq.n	2982 <MPSL_IRQ_TIMER0_Handler+0xde>
    28b0:	1ce8      	adds	r0, r5, #3
    28b2:	2201      	movs	r2, #1
    28b4:	7801      	ldrb	r1, [r0, #0]
    28b6:	b159      	cbz	r1, 28d0 <MPSL_IRQ_TIMER0_Handler+0x2c>
    28b8:	2901      	cmp	r1, #1
    28ba:	bf08      	it	eq
    28bc:	706a      	strbeq	r2, [r5, #1]
    28be:	d002      	beq.n	28c6 <MPSL_IRQ_TIMER0_Handler+0x22>
    28c0:	7869      	ldrb	r1, [r5, #1]
    28c2:	2900      	cmp	r1, #0
    28c4:	d058      	beq.n	2978 <MPSL_IRQ_TIMER0_Handler+0xd4>
    28c6:	2102      	movs	r1, #2
    28c8:	7001      	strb	r1, [r0, #0]
    28ca:	7840      	ldrb	r0, [r0, #1]
    28cc:	f000 fafa 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    28d0:	4c2f      	ldr	r4, [pc, #188]	; (2990 <MPSL_IRQ_TIMER0_Handler+0xec>)
    28d2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    28d6:	f04f 0800 	mov.w	r8, #0
    28da:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    28de:	f44f 7780 	mov.w	r7, #256	; 0x100
    28e2:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    28e6:	d00a      	beq.n	28fe <MPSL_IRQ_TIMER0_Handler+0x5a>
    28e8:	482a      	ldr	r0, [pc, #168]	; (2994 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    28ea:	6800      	ldr	r0, [r0, #0]
    28ec:	b138      	cbz	r0, 28fe <MPSL_IRQ_TIMER0_Handler+0x5a>
    28ee:	2003      	movs	r0, #3
    28f0:	f000 fae8 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    28f4:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    28f8:	2003      	movs	r0, #3
    28fa:	f7fe fec3 	bl	1684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    28fe:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2902:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2906:	d00a      	beq.n	291e <MPSL_IRQ_TIMER0_Handler+0x7a>
    2908:	4823      	ldr	r0, [pc, #140]	; (2998 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    290a:	6800      	ldr	r0, [r0, #0]
    290c:	b138      	cbz	r0, 291e <MPSL_IRQ_TIMER0_Handler+0x7a>
    290e:	2002      	movs	r0, #2
    2910:	f000 fad8 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2914:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2918:	2002      	movs	r0, #2
    291a:	f7fe feb3 	bl	1684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    291e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2922:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2926:	d00a      	beq.n	293e <MPSL_IRQ_TIMER0_Handler+0x9a>
    2928:	481c      	ldr	r0, [pc, #112]	; (299c <MPSL_IRQ_TIMER0_Handler+0xf8>)
    292a:	6800      	ldr	r0, [r0, #0]
    292c:	b138      	cbz	r0, 293e <MPSL_IRQ_TIMER0_Handler+0x9a>
    292e:	2001      	movs	r0, #1
    2930:	f000 fac8 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2934:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2938:	2001      	movs	r0, #1
    293a:	f7fe fea3 	bl	1684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    293e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2942:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2946:	bf08      	it	eq
    2948:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    294c:	4814      	ldr	r0, [pc, #80]	; (29a0 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    294e:	6800      	ldr	r0, [r0, #0]
    2950:	2800      	cmp	r0, #0
    2952:	bf08      	it	eq
    2954:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2958:	2000      	movs	r0, #0
    295a:	f000 fab3 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    295e:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2962:	2004      	movs	r0, #4
    2964:	7028      	strb	r0, [r5, #0]
    2966:	f8c5 8008 	str.w	r8, [r5, #8]
    296a:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    296e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2972:	2000      	movs	r0, #0
    2974:	f7fe be86 	b.w	1684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2978:	f240 316a 	movw	r1, #874	; 0x36a
    297c:	206c      	movs	r0, #108	; 0x6c
    297e:	f000 ff29 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2986:	2007      	movs	r0, #7
    2988:	f7fe be7c 	b.w	1684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    298c:	2000001c 	.word	0x2000001c
    2990:	40008000 	.word	0x40008000
    2994:	4000814c 	.word	0x4000814c
    2998:	40008148 	.word	0x40008148
    299c:	40008144 	.word	0x40008144
    29a0:	40008140 	.word	0x40008140
    29a4:	2201      	movs	r2, #1
    29a6:	0211      	lsls	r1, r2, #8
    29a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    29ac:	2000      	movs	r0, #0
    29ae:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    29b2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    29b6:	f3bf 8f4f 	dsb	sy
    29ba:	f3bf 8f6f 	isb	sy
    29be:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    29c2:	490e      	ldr	r1, [pc, #56]	; (29fc <MPSL_IRQ_TIMER0_Handler+0x158>)
    29c4:	f841 2f04 	str.w	r2, [r1, #4]!
    29c8:	1e43      	subs	r3, r0, #1
    29ca:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    29ce:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    29d2:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    29d6:	4b0a      	ldr	r3, [pc, #40]	; (2a00 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    29d8:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    29dc:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    29e0:	1d1b      	adds	r3, r3, #4
    29e2:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    29e6:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    29ea:	1d1b      	adds	r3, r3, #4
    29ec:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    29f0:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    29f4:	60ca      	str	r2, [r1, #12]
    29f6:	4903      	ldr	r1, [pc, #12]	; (2a04 <MPSL_IRQ_TIMER0_Handler+0x160>)
    29f8:	7048      	strb	r0, [r1, #1]
    29fa:	4770      	bx	lr
    29fc:	40008000 	.word	0x40008000
    2a00:	40008004 	.word	0x40008004
    2a04:	2000001c 	.word	0x2000001c

00002a08 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    2a08:	4801      	ldr	r0, [pc, #4]	; (2a10 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    2a0a:	6800      	ldr	r0, [r0, #0]
    2a0c:	4770      	bx	lr
    2a0e:	0000      	.short	0x0000
    2a10:	4000b504 	.word	0x4000b504

00002a14 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    2a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2a18:	4e47      	ldr	r6, [pc, #284]	; (2b38 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    2a1a:	4605      	mov	r5, r0
    2a1c:	1ef7      	subs	r7, r6, #3
    2a1e:	7832      	ldrb	r2, [r6, #0]
    2a20:	68f9      	ldr	r1, [r7, #12]
    2a22:	2a01      	cmp	r2, #1
    2a24:	bf04      	itt	eq
    2a26:	42a9      	cmpeq	r1, r5
    2a28:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2a2c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2a30:	4b42      	ldr	r3, [pc, #264]	; (2b3c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    2a32:	6018      	str	r0, [r3, #0]
    2a34:	4842      	ldr	r0, [pc, #264]	; (2b40 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    2a36:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2a3a:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    2a3e:	f100 0304 	add.w	r3, r0, #4
    2a42:	f04f 0400 	mov.w	r4, #0
    2a46:	2a00      	cmp	r2, #0
    2a48:	d061      	beq.n	2b0e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    2a4a:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    2a4e:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    2a52:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    2a56:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    2a5a:	4b3a      	ldr	r3, [pc, #232]	; (2b44 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    2a5c:	681b      	ldr	r3, [r3, #0]
    2a5e:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    2a62:	f04f 0801 	mov.w	r8, #1
    2a66:	2b00      	cmp	r3, #0
    2a68:	bf04      	itt	eq
    2a6a:	f44f 6300 	moveq.w	r3, #2048	; 0x800
    2a6e:	f8c9 3280 	streq.w	r3, [r9, #640]	; 0x280
    2a72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2a76:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    2a7a:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    2a7e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    2a82:	f8d0 3504 	ldr.w	r3, [r0, #1284]	; 0x504
    2a86:	1aeb      	subs	r3, r5, r3
    2a88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2a8c:	2b02      	cmp	r3, #2
    2a8e:	d34b      	bcc.n	2b28 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    2a90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2a94:	d248      	bcs.n	2b28 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    2a96:	f8c0 5540 	str.w	r5, [r0, #1344]	; 0x540
    2a9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2a9e:	f8c0 3344 	str.w	r3, [r0, #836]	; 0x344
    2aa2:	b132      	cbz	r2, 2ab2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9e>
    2aa4:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    2aa8:	1a8a      	subs	r2, r1, r2
    2aaa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2aae:	2a02      	cmp	r2, #2
    2ab0:	d3f8      	bcc.n	2aa4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x90>
    2ab2:	f8c7 8008 	str.w	r8, [r7, #8]
    2ab6:	703c      	strb	r4, [r7, #0]
    2ab8:	f7ff ff74 	bl	29a4 <MPSL_IRQ_TIMER0_Handler+0x100>
    2abc:	4822      	ldr	r0, [pc, #136]	; (2b48 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    2abe:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    2ac2:	f364 0101 	bfi	r1, r4, #0, #2
    2ac6:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    2aca:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    2ace:	2102      	movs	r1, #2
    2ad0:	f361 0201 	bfi	r2, r1, #0, #2
    2ad4:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    2ad8:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    2adc:	2104      	movs	r1, #4
    2ade:	f361 0203 	bfi	r2, r1, #0, #4
    2ae2:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    2ae6:	f8c0 800c 	str.w	r8, [r0, #12]
    2aea:	68b9      	ldr	r1, [r7, #8]
    2aec:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2af0:	1580      	asrs	r0, r0, #22
    2af2:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    2af6:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    2afa:	4914      	ldr	r1, [pc, #80]	; (2b4c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    2afc:	05c0      	lsls	r0, r0, #23
    2afe:	6008      	str	r0, [r1, #0]
    2b00:	2004      	movs	r0, #4
    2b02:	60fd      	str	r5, [r7, #12]
    2b04:	7070      	strb	r0, [r6, #1]
    2b06:	f886 8000 	strb.w	r8, [r6]
    2b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2b0e:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    2b12:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    2b16:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    2b1a:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    2b1e:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    2b22:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    2b26:	e798      	b.n	2a5a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x46>
    2b28:	2100      	movs	r1, #0
    2b2a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2b2e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    2b32:	206c      	movs	r0, #108	; 0x6c
    2b34:	f000 fe4e 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b38:	2000001f 	.word	0x2000001f
    2b3c:	4001f508 	.word	0x4001f508
    2b40:	4000b000 	.word	0x4000b000
    2b44:	4000b148 	.word	0x4000b148
    2b48:	40008000 	.word	0x40008000
    2b4c:	4001f504 	.word	0x4001f504

00002b50 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    2b50:	b570      	push	{r4, r5, r6, lr}
    2b52:	4c2c      	ldr	r4, [pc, #176]	; (2c04 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2b54:	68e2      	ldr	r2, [r4, #12]
    2b56:	4282      	cmp	r2, r0
    2b58:	bf14      	ite	ne
    2b5a:	2101      	movne	r1, #1
    2b5c:	2100      	moveq	r1, #0
    2b5e:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 2c08 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    2b62:	f89c 5000 	ldrb.w	r5, [ip]
    2b66:	2d02      	cmp	r5, #2
    2b68:	d002      	beq.n	2b70 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    2b6a:	2900      	cmp	r1, #0
    2b6c:	d037      	beq.n	2bde <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8e>
    2b6e:	e002      	b.n	2b76 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    2b70:	2900      	cmp	r1, #0
    2b72:	bf08      	it	eq
    2b74:	bd70      	popeq	{r4, r5, r6, pc}
    2b76:	7861      	ldrb	r1, [r4, #1]
    2b78:	b381      	cbz	r1, 2bdc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8c>
    2b7a:	4b24      	ldr	r3, [pc, #144]	; (2c0c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2b7c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2b80:	6019      	str	r1, [r3, #0]
    2b82:	138b      	asrs	r3, r1, #14
    2b84:	4922      	ldr	r1, [pc, #136]	; (2c10 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2b86:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2b8a:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2b8e:	2300      	movs	r3, #0
    2b90:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
    2b94:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    2b98:	1ac3      	subs	r3, r0, r3
    2b9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2b9e:	2b02      	cmp	r3, #2
    2ba0:	d327      	bcc.n	2bf2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    2ba2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2ba6:	d224      	bcs.n	2bf2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    2ba8:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    2bac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2bb0:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    2bb4:	b13d      	cbz	r5, 2bc6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x76>
    2bb6:	bf00      	nop
    2bb8:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    2bbc:	1ad3      	subs	r3, r2, r3
    2bbe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2bc2:	2b02      	cmp	r3, #2
    2bc4:	d3f8      	bcc.n	2bb8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x68>
    2bc6:	4b13      	ldr	r3, [pc, #76]	; (2c14 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    2bc8:	2102      	movs	r1, #2
    2bca:	074a      	lsls	r2, r1, #29
    2bcc:	601a      	str	r2, [r3, #0]
    2bce:	60e0      	str	r0, [r4, #12]
    2bd0:	2004      	movs	r0, #4
    2bd2:	f88c 0001 	strb.w	r0, [ip, #1]
    2bd6:	f88c 1000 	strb.w	r1, [ip]
    2bda:	bd70      	pop	{r4, r5, r6, pc}
    2bdc:	e004      	b.n	2be8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x98>
    2bde:	f240 2102 	movw	r1, #514	; 0x202
    2be2:	206c      	movs	r0, #108	; 0x6c
    2be4:	f000 fdf6 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2be8:	f240 2106 	movw	r1, #518	; 0x206
    2bec:	206c      	movs	r0, #108	; 0x6c
    2bee:	f000 fdf1 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bf2:	2000      	movs	r0, #0
    2bf4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    2bf8:	f240 2112 	movw	r1, #530	; 0x212
    2bfc:	206c      	movs	r0, #108	; 0x6c
    2bfe:	f000 fde9 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c02:	0000      	.short	0x0000
    2c04:	2000001c 	.word	0x2000001c
    2c08:	2000001f 	.word	0x2000001f
    2c0c:	4001f508 	.word	0x4001f508
    2c10:	4000b000 	.word	0x4000b000
    2c14:	4001f504 	.word	0x4001f504

00002c18 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2c18:	4801      	ldr	r0, [pc, #4]	; (2c20 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2c1a:	68c0      	ldr	r0, [r0, #12]
    2c1c:	4770      	bx	lr
    2c1e:	0000      	.short	0x0000
    2c20:	2000001c 	.word	0x2000001c

00002c24 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c28:	4936      	ldr	r1, [pc, #216]	; (2d04 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2c2a:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    2c2e:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    2c32:	4d35      	ldr	r5, [pc, #212]	; (2d08 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2c34:	1d0b      	adds	r3, r1, #4
    2c36:	2200      	movs	r2, #0
    2c38:	7828      	ldrb	r0, [r5, #0]
    2c3a:	b168      	cbz	r0, 2c58 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    2c3c:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    2c40:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    2c44:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2c48:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    2c4c:	4b2f      	ldr	r3, [pc, #188]	; (2d0c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2c4e:	681b      	ldr	r3, [r3, #0]
    2c50:	f04f 0c01 	mov.w	ip, #1
    2c54:	b99b      	cbnz	r3, 2c7e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5a>
    2c56:	e00c      	b.n	2c72 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4e>
    2c58:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    2c5c:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    2c60:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    2c64:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
    2c68:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2c6c:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    2c70:	e7ec      	b.n	2c4c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    2c72:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2c76:	f44f 6300 	mov.w	r3, #2048	; 0x800
    2c7a:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
    2c7e:	2802      	cmp	r0, #2
    2c80:	d004      	beq.n	2c8c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x68>
    2c82:	f240 211e 	movw	r1, #542	; 0x21e
    2c86:	206c      	movs	r0, #108	; 0x6c
    2c88:	f000 fda4 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c8c:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    2c90:	4c1f      	ldr	r4, [pc, #124]	; (2d10 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2c92:	1cc0      	adds	r0, r0, #3
    2c94:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c98:	68e3      	ldr	r3, [r4, #12]
    2c9a:	4e1e      	ldr	r6, [pc, #120]	; (2d14 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2c9c:	4298      	cmp	r0, r3
    2c9e:	d00c      	beq.n	2cba <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    2ca0:	f8d1 7504 	ldr.w	r7, [r1, #1284]	; 0x504
    2ca4:	1bdf      	subs	r7, r3, r7
    2ca6:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2caa:	2f04      	cmp	r7, #4
    2cac:	d305      	bcc.n	2cba <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    2cae:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2cb2:	d202      	bcs.n	2cba <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    2cb4:	f7ff feae 	bl	2a14 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2cb8:	e01f      	b.n	2cfa <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    2cba:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    2cbe:	1a18      	subs	r0, r3, r0
    2cc0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2cc4:	2802      	cmp	r0, #2
    2cc6:	d315      	bcc.n	2cf4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    2cc8:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2ccc:	d212      	bcs.n	2cf4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    2cce:	4912      	ldr	r1, [pc, #72]	; (2d18 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    2cd0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2cd4:	6008      	str	r0, [r1, #0]
    2cd6:	f8c4 c008 	str.w	ip, [r4, #8]
    2cda:	7022      	strb	r2, [r4, #0]
    2cdc:	f8c6 c004 	str.w	ip, [r6, #4]
    2ce0:	f8c6 c00c 	str.w	ip, [r6, #12]
    2ce4:	0040      	lsls	r0, r0, #1
    2ce6:	1f09      	subs	r1, r1, #4
    2ce8:	6008      	str	r0, [r1, #0]
    2cea:	2004      	movs	r0, #4
    2cec:	7068      	strb	r0, [r5, #1]
    2cee:	f885 c000 	strb.w	ip, [r5]
    2cf2:	e002      	b.n	2cfa <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    2cf4:	f8c4 c008 	str.w	ip, [r4, #8]
    2cf8:	7022      	strb	r2, [r4, #0]
    2cfa:	68a0      	ldr	r0, [r4, #8]
    2cfc:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    2d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2d04:	4000b000 	.word	0x4000b000
    2d08:	2000001f 	.word	0x2000001f
    2d0c:	4000b148 	.word	0x4000b148
    2d10:	2000001c 	.word	0x2000001c
    2d14:	40008000 	.word	0x40008000
    2d18:	4001f508 	.word	0x4001f508

00002d1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d20:	f8df c190 	ldr.w	ip, [pc, #400]	; 2eb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x198>
    2d24:	2600      	movs	r6, #0
    2d26:	2701      	movs	r7, #1
    2d28:	f89c 4000 	ldrb.w	r4, [ip]
    2d2c:	f89c c001 	ldrb.w	ip, [ip, #1]
    2d30:	f44f 75a0 	mov.w	r5, #320	; 0x140
    2d34:	2807      	cmp	r0, #7
    2d36:	d27b      	bcs.n	2e30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    2d38:	e8df f000 	tbb	[pc, r0]
    2d3c:	04040404 	.word	0x04040404
    2d40:	006c6c6c 	.word	0x006c6c6c
    2d44:	f8df 8170 	ldr.w	r8, [pc, #368]	; 2eb8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x19c>
    2d48:	f8d8 900c 	ldr.w	r9, [r8, #12]
    2d4c:	f1b9 7f80 	cmp.w	r9, #16777216	; 0x1000000
    2d50:	bf04      	itt	eq
    2d52:	f898 8001 	ldrbeq.w	r8, [r8, #1]
    2d56:	f1b8 0f00 	cmpeq.w	r8, #0
    2d5a:	d002      	beq.n	2d62 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2d5c:	2c02      	cmp	r4, #2
    2d5e:	d005      	beq.n	2d6c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x50>
    2d60:	e02c      	b.n	2dbc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa0>
    2d62:	f240 2151 	movw	r1, #593	; 0x251
    2d66:	206c      	movs	r0, #108	; 0x6c
    2d68:	f000 fd34 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d6c:	f1ac 0804 	sub.w	r8, ip, #4
    2d70:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    2d74:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    2d78:	f105 4880 	add.w	r8, r5, #1073741824	; 0x40000000
    2d7c:	f508 4830 	add.w	r8, r8, #45056	; 0xb000
    2d80:	2500      	movs	r5, #0
    2d82:	2c01      	cmp	r4, #1
    2d84:	d002      	beq.n	2d8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x70>
    2d86:	2c02      	cmp	r4, #2
    2d88:	d00b      	beq.n	2da2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x86>
    2d8a:	e014      	b.n	2db6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    2d8c:	f1bc 0f04 	cmp.w	ip, #4
    2d90:	bf24      	itt	cs
    2d92:	f8d8 9000 	ldrcs.w	r9, [r8]
    2d96:	f1b9 0f00 	cmpcs.w	r9, #0
    2d9a:	bf08      	it	eq
    2d9c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    2da0:	e009      	b.n	2db6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    2da2:	f1bc 0f04 	cmp.w	ip, #4
    2da6:	bf24      	itt	cs
    2da8:	f8d8 9000 	ldrcs.w	r9, [r8]
    2dac:	f1b9 0f00 	cmpcs.w	r9, #0
    2db0:	bf08      	it	eq
    2db2:	f045 4580 	orreq.w	r5, r5, #1073741824	; 0x40000000
    2db6:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
    2dba:	d1e1      	bne.n	2d80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x64>
    2dbc:	4c3f      	ldr	r4, [pc, #252]	; (2ebc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a0>)
    2dbe:	f100 0c10 	add.w	ip, r0, #16
    2dc2:	fa07 fc0c 	lsl.w	ip, r7, ip
    2dc6:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    2dca:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    2dce:	b1c2      	cbz	r2, 2e02 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe6>
    2dd0:	f04f 0840 	mov.w	r8, #64	; 0x40
    2dd4:	eb08 0880 	add.w	r8, r8, r0, lsl #2
    2dd8:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    2ddc:	44a0      	add	r8, r4
    2dde:	f8c8 7000 	str.w	r7, [r8]
    2de2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    2de6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2dea:	eba1 0000 	sub.w	r0, r1, r0
    2dee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2df2:	4282      	cmp	r2, r0
    2df4:	bf98      	it	ls
    2df6:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    2dfa:	bf28      	it	cs
    2dfc:	f8c5 6540 	strcs.w	r6, [r5, #1344]	; 0x540
    2e00:	d250      	bcs.n	2ea4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2e02:	f8c5 1540 	str.w	r1, [r5, #1344]	; 0x540
    2e06:	2b01      	cmp	r3, #1
    2e08:	bf08      	it	eq
    2e0a:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    2e0e:	2001      	movs	r0, #1
    2e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e14:	b134      	cbz	r4, 2e24 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    2e16:	4584      	cmp	ip, r0
    2e18:	d104      	bne.n	2e24 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    2e1a:	f44f 711d 	mov.w	r1, #628	; 0x274
    2e1e:	206c      	movs	r0, #108	; 0x6c
    2e20:	f000 fcd8 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e24:	f1a0 0c04 	sub.w	ip, r0, #4
    2e28:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    2e2c:	2b01      	cmp	r3, #1
    2e2e:	e000      	b.n	2e32 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    2e30:	e03b      	b.n	2eaa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18e>
    2e32:	bf0c      	ite	eq
    2e34:	f04f 0801 	moveq.w	r8, #1
    2e38:	f04f 0800 	movne.w	r8, #0
    2e3c:	2c03      	cmp	r4, #3
    2e3e:	d304      	bcc.n	2e4a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x12e>
    2e40:	f240 114d 	movw	r1, #333	; 0x14d
    2e44:	206c      	movs	r0, #108	; 0x6c
    2e46:	f000 fcc5 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e4a:	f8df c074 	ldr.w	ip, [pc, #116]	; 2ec0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a4>
    2e4e:	f104 0310 	add.w	r3, r4, #16
    2e52:	fa07 f303 	lsl.w	r3, r7, r3
    2e56:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    2e5a:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    2e5e:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    2e62:	f84c 6004 	str.w	r6, [ip, r4]
    2e66:	1f00      	subs	r0, r0, #4
    2e68:	b2c0      	uxtb	r0, r0
    2e6a:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    2e6e:	b16a      	cbz	r2, 2e8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    2e70:	f8dc 4504 	ldr.w	r4, [ip, #1284]	; 0x504
    2e74:	1b0c      	subs	r4, r1, r4
    2e76:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    2e7a:	42a2      	cmp	r2, r4
    2e7c:	bf98      	it	ls
    2e7e:	f5b4 0f80 	cmpls.w	r4, #4194304	; 0x400000
    2e82:	bf24      	itt	cs
    2e84:	2100      	movcs	r1, #0
    2e86:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    2e8a:	d20b      	bcs.n	2ea4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2e8c:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2e90:	f1b8 0f00 	cmp.w	r8, #0
    2e94:	bf18      	it	ne
    2e96:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    2e9a:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    2e9e:	2001      	movs	r0, #1
    2ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ea4:	2000      	movs	r0, #0
    2ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2eaa:	f240 2179 	movw	r1, #633	; 0x279
    2eae:	206c      	movs	r0, #108	; 0x6c
    2eb0:	f000 fc90 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2eb4:	2000001f 	.word	0x2000001f
    2eb8:	2000001c 	.word	0x2000001c
    2ebc:	40008000 	.word	0x40008000
    2ec0:	4000b000 	.word	0x4000b000

00002ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2ec8:	2600      	movs	r6, #0
    2eca:	f44f 77a0 	mov.w	r7, #320	; 0x140
    2ece:	f04f 0801 	mov.w	r8, #1
    2ed2:	2807      	cmp	r0, #7
    2ed4:	d251      	bcs.n	2f7a <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb6>
    2ed6:	e8df f000 	tbb	[pc, r0]
    2eda:	0404      	.short	0x0404
    2edc:	19190404 	.word	0x19190404
    2ee0:	0019      	.short	0x0019
    2ee2:	f100 0110 	add.w	r1, r0, #16
    2ee6:	fa08 f201 	lsl.w	r2, r8, r1
    2eea:	4926      	ldr	r1, [pc, #152]	; (2f84 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    2eec:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2ef0:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    2ef4:	2200      	movs	r2, #0
    2ef6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2efa:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    2efe:	508e      	str	r6, [r1, r2]
    2f00:	4921      	ldr	r1, [pc, #132]	; (2f88 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    2f02:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2f06:	9000      	str	r0, [sp, #0]
    2f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2f0c:	4d1f      	ldr	r5, [pc, #124]	; (2f8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    2f0e:	1f01      	subs	r1, r0, #4
    2f10:	b2cc      	uxtb	r4, r1
    2f12:	7829      	ldrb	r1, [r5, #0]
    2f14:	b179      	cbz	r1, 2f36 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    2f16:	786a      	ldrb	r2, [r5, #1]
    2f18:	4282      	cmp	r2, r0
    2f1a:	d10c      	bne.n	2f36 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    2f1c:	4a1c      	ldr	r2, [pc, #112]	; (2f90 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    2f1e:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2f22:	6010      	str	r0, [r2, #0]
    2f24:	2901      	cmp	r1, #1
    2f26:	bf08      	it	eq
    2f28:	f7ff fd3c 	bleq	29a4 <MPSL_IRQ_TIMER0_Handler+0x100>
    2f2c:	702e      	strb	r6, [r5, #0]
    2f2e:	4919      	ldr	r1, [pc, #100]	; (2f94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    2f30:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2f34:	60c8      	str	r0, [r1, #12]
    2f36:	f104 0010 	add.w	r0, r4, #16
    2f3a:	fa08 f100 	lsl.w	r1, r8, r0
    2f3e:	4816      	ldr	r0, [pc, #88]	; (2f98 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    2f40:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    2f44:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    2f48:	00a1      	lsls	r1, r4, #2
    2f4a:	4401      	add	r1, r0
    2f4c:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    2f50:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    2f54:	1a89      	subs	r1, r1, r2
    2f56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2f5a:	2902      	cmp	r1, #2
    2f5c:	d307      	bcc.n	2f6e <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xaa>
    2f5e:	eb00 0284 	add.w	r2, r0, r4, lsl #2
    2f62:	2100      	movs	r1, #0
    2f64:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    2f68:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    2f6c:	5046      	str	r6, [r0, r1]
    2f6e:	480b      	ldr	r0, [pc, #44]	; (2f9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    2f70:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    2f74:	9000      	str	r0, [sp, #0]
    2f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2f7a:	f240 21f1 	movw	r1, #753	; 0x2f1
    2f7e:	206c      	movs	r0, #108	; 0x6c
    2f80:	f000 fc28 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f84:	40008000 	.word	0x40008000
    2f88:	40008140 	.word	0x40008140
    2f8c:	2000001f 	.word	0x2000001f
    2f90:	4001f508 	.word	0x4001f508
    2f94:	2000001c 	.word	0x2000001c
    2f98:	4000b000 	.word	0x4000b000
    2f9c:	4000b140 	.word	0x4000b140

00002fa0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    2fa0:	4920      	ldr	r1, [pc, #128]	; (3024 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    2fa2:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    2fa6:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    2faa:	481f      	ldr	r0, [pc, #124]	; (3028 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    2fac:	1d0a      	adds	r2, r1, #4
    2fae:	7803      	ldrb	r3, [r0, #0]
    2fb0:	2000      	movs	r0, #0
    2fb2:	b15b      	cbz	r3, 2fcc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    2fb4:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2fb8:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2fbc:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    2fc0:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2fc4:	4919      	ldr	r1, [pc, #100]	; (302c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    2fc6:	6809      	ldr	r1, [r1, #0]
    2fc8:	b999      	cbnz	r1, 2ff2 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x52>
    2fca:	e00c      	b.n	2fe6 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x46>
    2fcc:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2fd0:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2fd4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    2fd8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2fdc:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    2fe0:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2fe4:	e7ee      	b.n	2fc4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x24>
    2fe6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2fea:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2fee:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    2ff2:	490f      	ldr	r1, [pc, #60]	; (3030 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    2ff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2ff8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2ffc:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    3000:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3004:	1d0a      	adds	r2, r1, #4
    3006:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    300a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    300e:	1d12      	adds	r2, r2, #4
    3010:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3014:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3018:	1d12      	adds	r2, r2, #4
    301a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    301e:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    3022:	4770      	bx	lr
    3024:	4000b000 	.word	0x4000b000
    3028:	2000001f 	.word	0x2000001f
    302c:	4000b148 	.word	0x4000b148
    3030:	40008000 	.word	0x40008000

00003034 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    3034:	4808      	ldr	r0, [pc, #32]	; (3058 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    3036:	f990 0002 	ldrsb.w	r0, [r0, #2]
    303a:	2800      	cmp	r0, #0
    303c:	bfb8      	it	lt
    303e:	4770      	bxlt	lr
    3040:	f000 011f 	and.w	r1, r0, #31
    3044:	2201      	movs	r2, #1
    3046:	fa02 f101 	lsl.w	r1, r2, r1
    304a:	0940      	lsrs	r0, r0, #5
    304c:	0080      	lsls	r0, r0, #2
    304e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3052:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3056:	4770      	bx	lr
    3058:	2000001c 	.word	0x2000001c

0000305c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    305c:	b510      	push	{r4, lr}
    305e:	2807      	cmp	r0, #7
    3060:	d20d      	bcs.n	307e <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    3062:	e8df f000 	tbb	[pc, r0]
    3066:	0404      	.short	0x0404
    3068:	06060404 	.word	0x06060404
    306c:	0006      	.short	0x0006
    306e:	4906      	ldr	r1, [pc, #24]	; (3088 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    3070:	e002      	b.n	3078 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    3072:	1f00      	subs	r0, r0, #4
    3074:	4905      	ldr	r1, [pc, #20]	; (308c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    3076:	b2c0      	uxtb	r0, r0
    3078:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    307c:	bd10      	pop	{r4, pc}
    307e:	f240 219d 	movw	r1, #669	; 0x29d
    3082:	206c      	movs	r0, #108	; 0x6c
    3084:	f000 fba6 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3088:	40008140 	.word	0x40008140
    308c:	4000b140 	.word	0x4000b140

00003090 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3090:	b510      	push	{r4, lr}
    3092:	481c      	ldr	r0, [pc, #112]	; (3104 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    3094:	2400      	movs	r4, #0
    3096:	2104      	movs	r1, #4
    3098:	7004      	strb	r4, [r0, #0]
    309a:	1ec0      	subs	r0, r0, #3
    309c:	7001      	strb	r1, [r0, #0]
    309e:	0589      	lsls	r1, r1, #22
    30a0:	60c1      	str	r1, [r0, #12]
    30a2:	f7ff fc7f 	bl	29a4 <MPSL_IRQ_TIMER0_Handler+0x100>
    30a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    30aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
    30ae:	f04f 0c01 	mov.w	ip, #1
    30b2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    30b6:	f3bf 8f4f 	dsb	sy
    30ba:	f3bf 8f6f 	isb	sy
    30be:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    30c2:	4811      	ldr	r0, [pc, #68]	; (3108 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    30c4:	f8c0 c004 	str.w	ip, [r0, #4]
    30c8:	f8c0 c008 	str.w	ip, [r0, #8]
    30cc:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    30d0:	2900      	cmp	r1, #0
    30d2:	d1fb      	bne.n	30cc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3c>
    30d4:	1e49      	subs	r1, r1, #1
    30d6:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    30da:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    30de:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    30e2:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    30e6:	4909      	ldr	r1, [pc, #36]	; (310c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    30e8:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    30ec:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    30f0:	1d09      	adds	r1, r1, #4
    30f2:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    30f6:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    30fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    30fe:	f8c0 c000 	str.w	ip, [r0]
    3102:	bd10      	pop	{r4, pc}
    3104:	2000001f 	.word	0x2000001f
    3108:	4000b000 	.word	0x4000b000
    310c:	4000b004 	.word	0x4000b004

00003110 <MPSL_IRQ_CLOCK_Handler>:
    3110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3114:	4c16      	ldr	r4, [pc, #88]	; (3170 <MPSL_IRQ_CLOCK_Handler+0x60>)
    3116:	7a60      	ldrb	r0, [r4, #9]
    3118:	2800      	cmp	r0, #0
    311a:	d027      	beq.n	316c <MPSL_IRQ_CLOCK_Handler+0x5c>
    311c:	f44f 7180 	mov.w	r1, #256	; 0x100
    3120:	058d      	lsls	r5, r1, #22
    3122:	4628      	mov	r0, r5
    3124:	f00c fd49 	bl	fbba <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3128:	4680      	mov	r8, r0
    312a:	f44f 7182 	mov.w	r1, #260	; 0x104
    312e:	4628      	mov	r0, r5
    3130:	f00c fd43 	bl	fbba <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3134:	2600      	movs	r6, #0
    3136:	4607      	mov	r7, r0
    3138:	f1b8 0f00 	cmp.w	r8, #0
    313c:	d009      	beq.n	3152 <MPSL_IRQ_CLOCK_Handler+0x42>
    313e:	2001      	movs	r0, #1
    3140:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3144:	7920      	ldrb	r0, [r4, #4]
    3146:	b120      	cbz	r0, 3152 <MPSL_IRQ_CLOCK_Handler+0x42>
    3148:	7126      	strb	r6, [r4, #4]
    314a:	69e0      	ldr	r0, [r4, #28]
    314c:	b108      	cbz	r0, 3152 <MPSL_IRQ_CLOCK_Handler+0x42>
    314e:	4780      	blx	r0
    3150:	61e6      	str	r6, [r4, #28]
    3152:	b137      	cbz	r7, 3162 <MPSL_IRQ_CLOCK_Handler+0x52>
    3154:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3158:	2002      	movs	r0, #2
    315a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    315e:	f000 fa6d 	bl	363c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3162:	4640      	mov	r0, r8
    3164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3168:	f000 b85a 	b.w	3220 <MPSL_IRQ_CLOCK_Handler+0x110>
    316c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3170:	2000002c 	.word	0x2000002c
    3174:	b510      	push	{r4, lr}
    3176:	f00c fdca 	bl	fd0e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    317a:	b930      	cbnz	r0, 318a <MPSL_IRQ_CLOCK_Handler+0x7a>
    317c:	f00c fde8 	bl	fd50 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3180:	b918      	cbnz	r0, 318a <MPSL_IRQ_CLOCK_Handler+0x7a>
    3182:	f00c fe1b 	bl	fdbc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3186:	2800      	cmp	r0, #0
    3188:	d002      	beq.n	3190 <MPSL_IRQ_CLOCK_Handler+0x80>
    318a:	4902      	ldr	r1, [pc, #8]	; (3194 <MPSL_IRQ_CLOCK_Handler+0x84>)
    318c:	2002      	movs	r0, #2
    318e:	6008      	str	r0, [r1, #0]
    3190:	bd10      	pop	{r4, pc}
    3192:	0000      	.short	0x0000
    3194:	40000c34 	.word	0x40000c34
    3198:	b570      	push	{r4, r5, r6, lr}
    319a:	f000 f987 	bl	34ac <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    319e:	f000 faa1 	bl	36e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    31a2:	4c09      	ldr	r4, [pc, #36]	; (31c8 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    31a4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    31a8:	b130      	cbz	r0, 31b8 <MPSL_IRQ_CLOCK_Handler+0xa8>
    31aa:	f7ff ffe3 	bl	3174 <MPSL_IRQ_CLOCK_Handler+0x64>
    31ae:	2001      	movs	r0, #1
    31b0:	6128      	str	r0, [r5, #16]
    31b2:	2004      	movs	r0, #4
    31b4:	72a0      	strb	r0, [r4, #10]
    31b6:	e004      	b.n	31c2 <MPSL_IRQ_CLOCK_Handler+0xb2>
    31b8:	2003      	movs	r0, #3
    31ba:	72a0      	strb	r0, [r4, #10]
    31bc:	2001      	movs	r0, #1
    31be:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    31c2:	2000      	movs	r0, #0
    31c4:	71e0      	strb	r0, [r4, #7]
    31c6:	bd70      	pop	{r4, r5, r6, pc}
    31c8:	2000002c 	.word	0x2000002c
    31cc:	b570      	push	{r4, r5, r6, lr}
    31ce:	4c13      	ldr	r4, [pc, #76]	; (321c <MPSL_IRQ_CLOCK_Handler+0x10c>)
    31d0:	79a0      	ldrb	r0, [r4, #6]
    31d2:	b1f0      	cbz	r0, 3212 <MPSL_IRQ_CLOCK_Handler+0x102>
    31d4:	2801      	cmp	r0, #1
    31d6:	d003      	beq.n	31e0 <MPSL_IRQ_CLOCK_Handler+0xd0>
    31d8:	79e1      	ldrb	r1, [r4, #7]
    31da:	1e40      	subs	r0, r0, #1
    31dc:	4281      	cmp	r1, r0
    31de:	da18      	bge.n	3212 <MPSL_IRQ_CLOCK_Handler+0x102>
    31e0:	f000 fa80 	bl	36e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    31e4:	4605      	mov	r5, r0
    31e6:	f000 fb65 	bl	38b4 <mpsl_temperature_get>
    31ea:	79a1      	ldrb	r1, [r4, #6]
    31ec:	2901      	cmp	r1, #1
    31ee:	d902      	bls.n	31f6 <MPSL_IRQ_CLOCK_Handler+0xe6>
    31f0:	79e1      	ldrb	r1, [r4, #7]
    31f2:	1c49      	adds	r1, r1, #1
    31f4:	71e1      	strb	r1, [r4, #7]
    31f6:	b10d      	cbz	r5, 31fc <MPSL_IRQ_CLOCK_Handler+0xec>
    31f8:	6961      	ldr	r1, [r4, #20]
    31fa:	e000      	b.n	31fe <MPSL_IRQ_CLOCK_Handler+0xee>
    31fc:	6921      	ldr	r1, [r4, #16]
    31fe:	1a41      	subs	r1, r0, r1
    3200:	2902      	cmp	r1, #2
    3202:	da02      	bge.n	320a <MPSL_IRQ_CLOCK_Handler+0xfa>
    3204:	f111 0f02 	cmn.w	r1, #2
    3208:	dc07      	bgt.n	321a <MPSL_IRQ_CLOCK_Handler+0x10a>
    320a:	b10d      	cbz	r5, 3210 <MPSL_IRQ_CLOCK_Handler+0x100>
    320c:	6160      	str	r0, [r4, #20]
    320e:	e000      	b.n	3212 <MPSL_IRQ_CLOCK_Handler+0x102>
    3210:	6120      	str	r0, [r4, #16]
    3212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3216:	f7ff bfbf 	b.w	3198 <MPSL_IRQ_CLOCK_Handler+0x88>
    321a:	bd70      	pop	{r4, r5, r6, pc}
    321c:	2000002c 	.word	0x2000002c
    3220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3224:	4606      	mov	r6, r0
    3226:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    322a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    322e:	4628      	mov	r0, r5
    3230:	f00c fcc3 	bl	fbba <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3234:	4680      	mov	r8, r0
    3236:	f44f 7188 	mov.w	r1, #272	; 0x110
    323a:	4628      	mov	r0, r5
    323c:	f00c fcbd 	bl	fbba <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3240:	4c27      	ldr	r4, [pc, #156]	; (32e0 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3242:	4682      	mov	sl, r0
    3244:	7827      	ldrb	r7, [r4, #0]
    3246:	f104 0008 	add.w	r0, r4, #8
    324a:	f00c fd2a 	bl	fca2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    324e:	b110      	cbz	r0, 3256 <MPSL_IRQ_CLOCK_Handler+0x146>
    3250:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3254:	e016      	b.n	3284 <MPSL_IRQ_CLOCK_Handler+0x174>
    3256:	f04f 0901 	mov.w	r9, #1
    325a:	b146      	cbz	r6, 326e <MPSL_IRQ_CLOCK_Handler+0x15e>
    325c:	7aa0      	ldrb	r0, [r4, #10]
    325e:	2803      	cmp	r0, #3
    3260:	d105      	bne.n	326e <MPSL_IRQ_CLOCK_Handler+0x15e>
    3262:	2004      	movs	r0, #4
    3264:	72a0      	strb	r0, [r4, #10]
    3266:	f7ff ff85 	bl	3174 <MPSL_IRQ_CLOCK_Handler+0x64>
    326a:	f8c5 9010 	str.w	r9, [r5, #16]
    326e:	2600      	movs	r6, #0
    3270:	f1b8 0f00 	cmp.w	r8, #0
    3274:	d018      	beq.n	32a8 <MPSL_IRQ_CLOCK_Handler+0x198>
    3276:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    327a:	7aa0      	ldrb	r0, [r4, #10]
    327c:	2804      	cmp	r0, #4
    327e:	d004      	beq.n	328a <MPSL_IRQ_CLOCK_Handler+0x17a>
    3280:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    3284:	206d      	movs	r0, #109	; 0x6d
    3286:	f000 faa5 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    328a:	f00c fd40 	bl	fd0e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    328e:	b928      	cbnz	r0, 329c <MPSL_IRQ_CLOCK_Handler+0x18c>
    3290:	f00c fd5e 	bl	fd50 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3294:	b910      	cbnz	r0, 329c <MPSL_IRQ_CLOCK_Handler+0x18c>
    3296:	f00c fd91 	bl	fdbc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    329a:	b108      	cbz	r0, 32a0 <MPSL_IRQ_CLOCK_Handler+0x190>
    329c:	4811      	ldr	r0, [pc, #68]	; (32e4 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    329e:	6006      	str	r6, [r0, #0]
    32a0:	2002      	movs	r0, #2
    32a2:	72a0      	strb	r0, [r4, #10]
    32a4:	f000 f8e6 	bl	3474 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    32a8:	f1ba 0f00 	cmp.w	sl, #0
    32ac:	d008      	beq.n	32c0 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    32ae:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    32b2:	7aa0      	ldrb	r0, [r4, #10]
    32b4:	2802      	cmp	r0, #2
    32b6:	d101      	bne.n	32bc <MPSL_IRQ_CLOCK_Handler+0x1ac>
    32b8:	f7ff ff88 	bl	31cc <MPSL_IRQ_CLOCK_Handler+0xbc>
    32bc:	f8c5 9014 	str.w	r9, [r5, #20]
    32c0:	b13f      	cbz	r7, 32d2 <MPSL_IRQ_CLOCK_Handler+0x1c2>
    32c2:	7026      	strb	r6, [r4, #0]
    32c4:	7aa0      	ldrb	r0, [r4, #10]
    32c6:	2802      	cmp	r0, #2
    32c8:	d101      	bne.n	32ce <MPSL_IRQ_CLOCK_Handler+0x1be>
    32ca:	f7ff ff65 	bl	3198 <MPSL_IRQ_CLOCK_Handler+0x88>
    32ce:	f000 f8d1 	bl	3474 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    32d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    32d6:	4802      	ldr	r0, [pc, #8]	; (32e0 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    32d8:	3008      	adds	r0, #8
    32da:	f00c bcf9 	b.w	fcd0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    32de:	0000      	.short	0x0000
    32e0:	2000002c 	.word	0x2000002c
    32e4:	40000c34 	.word	0x40000c34
    32e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    32ec:	4c5c      	ldr	r4, [pc, #368]	; (3460 <MPSL_IRQ_CLOCK_Handler+0x350>)
    32ee:	f04f 0800 	mov.w	r8, #0
    32f2:	4606      	mov	r6, r0
    32f4:	f8c4 8018 	str.w	r8, [r4, #24]
    32f8:	7843      	ldrb	r3, [r0, #1]
    32fa:	7882      	ldrb	r2, [r0, #2]
    32fc:	7800      	ldrb	r0, [r0, #0]
    32fe:	72e0      	strb	r0, [r4, #11]
    3300:	7163      	strb	r3, [r4, #5]
    3302:	2701      	movs	r7, #1
    3304:	71a2      	strb	r2, [r4, #6]
    3306:	07bd      	lsls	r5, r7, #30
    3308:	f884 8007 	strb.w	r8, [r4, #7]
    330c:	2805      	cmp	r0, #5
    330e:	d224      	bcs.n	335a <MPSL_IRQ_CLOCK_Handler+0x24a>
    3310:	e8df f000 	tbb	[pc, r0]
    3314:	1f05030f 	.word	0x1f05030f
    3318:	0021      	.short	0x0021
    331a:	61a7      	str	r7, [r4, #24]
    331c:	e009      	b.n	3332 <MPSL_IRQ_CLOCK_Handler+0x222>
    331e:	f000 f8c5 	bl	34ac <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3322:	2101      	movs	r1, #1
    3324:	4628      	mov	r0, r5
    3326:	f00c fc4d 	bl	fbc4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    332a:	2800      	cmp	r0, #0
    332c:	d0f9      	beq.n	3322 <MPSL_IRQ_CLOCK_Handler+0x212>
    332e:	2002      	movs	r0, #2
    3330:	61a0      	str	r0, [r4, #24]
    3332:	f00c fc73 	bl	fc1c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3336:	b1b0      	cbz	r0, 3366 <MPSL_IRQ_CLOCK_Handler+0x256>
    3338:	f000 f9ee 	bl	3718 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    333c:	7e21      	ldrb	r1, [r4, #24]
    333e:	f001 0103 	and.w	r1, r1, #3
    3342:	4288      	cmp	r0, r1
    3344:	d10f      	bne.n	3366 <MPSL_IRQ_CLOCK_Handler+0x256>
    3346:	79b0      	ldrb	r0, [r6, #6]
    3348:	b150      	cbz	r0, 3360 <MPSL_IRQ_CLOCK_Handler+0x250>
    334a:	2002      	movs	r0, #2
    334c:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3350:	e06a      	b.n	3428 <MPSL_IRQ_CLOCK_Handler+0x318>
    3352:	4844      	ldr	r0, [pc, #272]	; (3464 <MPSL_IRQ_CLOCK_Handler+0x354>)
    3354:	e7ec      	b.n	3330 <MPSL_IRQ_CLOCK_Handler+0x220>
    3356:	4844      	ldr	r0, [pc, #272]	; (3468 <MPSL_IRQ_CLOCK_Handler+0x358>)
    3358:	e7ea      	b.n	3330 <MPSL_IRQ_CLOCK_Handler+0x220>
    335a:	f240 312d 	movw	r1, #813	; 0x32d
    335e:	e049      	b.n	33f4 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    3360:	f000 f9ae 	bl	36c0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3364:	e060      	b.n	3428 <MPSL_IRQ_CLOCK_Handler+0x318>
    3366:	60ef      	str	r7, [r5, #12]
    3368:	f44f 7a82 	mov.w	sl, #260	; 0x104
    336c:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3370:	69a0      	ldr	r0, [r4, #24]
    3372:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    3376:	f00c fcb6 	bl	fce6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    337a:	b940      	cbnz	r0, 338e <MPSL_IRQ_CLOCK_Handler+0x27e>
    337c:	f00c fcbd 	bl	fcfa <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3380:	b928      	cbnz	r0, 338e <MPSL_IRQ_CLOCK_Handler+0x27e>
    3382:	f00c fcd1 	bl	fd28 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3386:	b910      	cbnz	r0, 338e <MPSL_IRQ_CLOCK_Handler+0x27e>
    3388:	f00c fce2 	bl	fd50 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    338c:	b138      	cbz	r0, 339e <MPSL_IRQ_CLOCK_Handler+0x28e>
    338e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3392:	4836      	ldr	r0, [pc, #216]	; (346c <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3394:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    3398:	f3c1 3142 	ubfx	r1, r1, #13, #3
    339c:	6001      	str	r1, [r0, #0]
    339e:	f00c fca2 	bl	fce6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    33a2:	b940      	cbnz	r0, 33b6 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    33a4:	f00c fca9 	bl	fcfa <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    33a8:	b928      	cbnz	r0, 33b6 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    33aa:	f00c fcbd 	bl	fd28 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    33ae:	b910      	cbnz	r0, 33b6 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    33b0:	f00c fcce 	bl	fd50 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    33b4:	b110      	cbz	r0, 33bc <MPSL_IRQ_CLOCK_Handler+0x2ac>
    33b6:	482d      	ldr	r0, [pc, #180]	; (346c <MPSL_IRQ_CLOCK_Handler+0x35c>)
    33b8:	3010      	adds	r0, #16
    33ba:	6007      	str	r7, [r0, #0]
    33bc:	60af      	str	r7, [r5, #8]
    33be:	2002      	movs	r0, #2
    33c0:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    33c4:	79b0      	ldrb	r0, [r6, #6]
    33c6:	bb78      	cbnz	r0, 3428 <MPSL_IRQ_CLOCK_Handler+0x318>
    33c8:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    33cc:	f010 0f02 	tst.w	r0, #2
    33d0:	d00e      	beq.n	33f0 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    33d2:	f8df 909c 	ldr.w	r9, [pc, #156]	; 3470 <MPSL_IRQ_CLOCK_Handler+0x360>
    33d6:	f8d9 1000 	ldr.w	r1, [r9]
    33da:	43c9      	mvns	r1, r1
    33dc:	f341 1700 	sbfx	r7, r1, #4, #1
    33e0:	f8d9 1000 	ldr.w	r1, [r9]
    33e4:	f041 0110 	orr.w	r1, r1, #16
    33e8:	f8c9 1000 	str.w	r1, [r9]
    33ec:	1c7f      	adds	r7, r7, #1
    33ee:	e007      	b.n	3400 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    33f0:	f240 21ee 	movw	r1, #750	; 0x2ee
    33f4:	206d      	movs	r0, #109	; 0x6d
    33f6:	f000 f9ed 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33fa:	bf00      	nop
    33fc:	f000 fb10 	bl	3a20 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3400:	4651      	mov	r1, sl
    3402:	4628      	mov	r0, r5
    3404:	f00c fbd9 	bl	fbba <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3408:	2800      	cmp	r0, #0
    340a:	d0f7      	beq.n	33fc <MPSL_IRQ_CLOCK_Handler+0x2ec>
    340c:	f000 f958 	bl	36c0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3410:	b92f      	cbnz	r7, 341e <MPSL_IRQ_CLOCK_Handler+0x30e>
    3412:	f8d9 1000 	ldr.w	r1, [r9]
    3416:	f021 0110 	bic.w	r1, r1, #16
    341a:	f8c9 1000 	str.w	r1, [r9]
    341e:	2002      	movs	r0, #2
    3420:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3424:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3428:	79a0      	ldrb	r0, [r4, #6]
    342a:	b170      	cbz	r0, 344a <MPSL_IRQ_CLOCK_Handler+0x33a>
    342c:	7830      	ldrb	r0, [r6, #0]
    342e:	b960      	cbnz	r0, 344a <MPSL_IRQ_CLOCK_Handler+0x33a>
    3430:	f000 f958 	bl	36e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3434:	4606      	mov	r6, r0
    3436:	f000 fa3d 	bl	38b4 <mpsl_temperature_get>
    343a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    343e:	b116      	cbz	r6, 3446 <MPSL_IRQ_CLOCK_Handler+0x336>
    3440:	e9c4 2004 	strd	r2, r0, [r4, #16]
    3444:	e001      	b.n	344a <MPSL_IRQ_CLOCK_Handler+0x33a>
    3446:	e9c4 0204 	strd	r0, r2, [r4, #16]
    344a:	2101      	movs	r1, #1
    344c:	4628      	mov	r0, r5
    344e:	f00c fbb9 	bl	fbc4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3452:	b108      	cbz	r0, 3458 <MPSL_IRQ_CLOCK_Handler+0x348>
    3454:	f000 f940 	bl	36d8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3458:	f884 800a 	strb.w	r8, [r4, #10]
    345c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3460:	2000002c 	.word	0x2000002c
    3464:	00020001 	.word	0x00020001
    3468:	00030001 	.word	0x00030001
    346c:	4000053c 	.word	0x4000053c
    3470:	e000ed10 	.word	0xe000ed10

00003474 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3474:	b510      	push	{r4, lr}
    3476:	f3ef 8410 	mrs	r4, PRIMASK
    347a:	b672      	cpsid	i
    347c:	480a      	ldr	r0, [pc, #40]	; (34a8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    347e:	7841      	ldrb	r1, [r0, #1]
    3480:	b129      	cbz	r1, 348e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    3482:	7841      	ldrb	r1, [r0, #1]
    3484:	1e49      	subs	r1, r1, #1
    3486:	7041      	strb	r1, [r0, #1]
    3488:	7841      	ldrb	r1, [r0, #1]
    348a:	b129      	cbz	r1, 3498 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    348c:	e008      	b.n	34a0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    348e:	f240 110d 	movw	r1, #269	; 0x10d
    3492:	206d      	movs	r0, #109	; 0x6d
    3494:	f000 f99e 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3498:	7880      	ldrb	r0, [r0, #2]
    349a:	b908      	cbnz	r0, 34a0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    349c:	f000 f930 	bl	3700 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    34a0:	2c00      	cmp	r4, #0
    34a2:	d100      	bne.n	34a6 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    34a4:	b662      	cpsie	i
    34a6:	bd10      	pop	{r4, pc}
    34a8:	2000002c 	.word	0x2000002c

000034ac <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    34ac:	b510      	push	{r4, lr}
    34ae:	f3ef 8410 	mrs	r4, PRIMASK
    34b2:	b672      	cpsid	i
    34b4:	4806      	ldr	r0, [pc, #24]	; (34d0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    34b6:	7841      	ldrb	r1, [r0, #1]
    34b8:	1c49      	adds	r1, r1, #1
    34ba:	7041      	strb	r1, [r0, #1]
    34bc:	7840      	ldrb	r0, [r0, #1]
    34be:	2801      	cmp	r0, #1
    34c0:	d101      	bne.n	34c6 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    34c2:	f00c fb96 	bl	fbf2 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    34c6:	2c00      	cmp	r4, #0
    34c8:	d100      	bne.n	34cc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    34ca:	b662      	cpsie	i
    34cc:	bd10      	pop	{r4, pc}
    34ce:	0000      	.short	0x0000
    34d0:	2000002c 	.word	0x2000002c

000034d4 <mpsl_clock_hfclk_release>:
    34d4:	4805      	ldr	r0, [pc, #20]	; (34ec <mpsl_clock_hfclk_release+0x18>)
    34d6:	b510      	push	{r4, lr}
    34d8:	78c1      	ldrb	r1, [r0, #3]
    34da:	b121      	cbz	r1, 34e6 <mpsl_clock_hfclk_release+0x12>
    34dc:	2100      	movs	r1, #0
    34de:	7101      	strb	r1, [r0, #4]
    34e0:	70c1      	strb	r1, [r0, #3]
    34e2:	f7ff ffc7 	bl	3474 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    34e6:	2000      	movs	r0, #0
    34e8:	bd10      	pop	{r4, pc}
    34ea:	0000      	.short	0x0000
    34ec:	2000002c 	.word	0x2000002c

000034f0 <mpsl_clock_hfclk_request>:
    34f0:	b570      	push	{r4, r5, r6, lr}
    34f2:	4c0c      	ldr	r4, [pc, #48]	; (3524 <mpsl_clock_hfclk_request+0x34>)
    34f4:	78e1      	ldrb	r1, [r4, #3]
    34f6:	b961      	cbnz	r1, 3512 <mpsl_clock_hfclk_request+0x22>
    34f8:	2501      	movs	r5, #1
    34fa:	70e5      	strb	r5, [r4, #3]
    34fc:	61e0      	str	r0, [r4, #28]
    34fe:	f7ff ffd5 	bl	34ac <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3502:	f000 f8ef 	bl	36e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3506:	b130      	cbz	r0, 3516 <mpsl_clock_hfclk_request+0x26>
    3508:	69e0      	ldr	r0, [r4, #28]
    350a:	b110      	cbz	r0, 3512 <mpsl_clock_hfclk_request+0x22>
    350c:	4780      	blx	r0
    350e:	2000      	movs	r0, #0
    3510:	61e0      	str	r0, [r4, #28]
    3512:	2000      	movs	r0, #0
    3514:	bd70      	pop	{r4, r5, r6, pc}
    3516:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    351a:	7125      	strb	r5, [r4, #4]
    351c:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3520:	e7f7      	b.n	3512 <mpsl_clock_hfclk_request+0x22>
    3522:	0000      	.short	0x0000
    3524:	2000002c 	.word	0x2000002c

00003528 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    3528:	f3ef 8010 	mrs	r0, PRIMASK
    352c:	b672      	cpsid	i
    352e:	4904      	ldr	r1, [pc, #16]	; (3540 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    3530:	788a      	ldrb	r2, [r1, #2]
    3532:	1c52      	adds	r2, r2, #1
    3534:	708a      	strb	r2, [r1, #2]
    3536:	2800      	cmp	r0, #0
    3538:	d100      	bne.n	353c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    353a:	b662      	cpsie	i
    353c:	4770      	bx	lr
    353e:	0000      	.short	0x0000
    3540:	2000002c 	.word	0x2000002c

00003544 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    3544:	b510      	push	{r4, lr}
    3546:	f3ef 8410 	mrs	r4, PRIMASK
    354a:	b672      	cpsid	i
    354c:	480a      	ldr	r0, [pc, #40]	; (3578 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    354e:	7881      	ldrb	r1, [r0, #2]
    3550:	b129      	cbz	r1, 355e <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    3552:	7881      	ldrb	r1, [r0, #2]
    3554:	1e49      	subs	r1, r1, #1
    3556:	7081      	strb	r1, [r0, #2]
    3558:	7841      	ldrb	r1, [r0, #1]
    355a:	b129      	cbz	r1, 3568 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    355c:	e008      	b.n	3570 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    355e:	f240 1125 	movw	r1, #293	; 0x125
    3562:	206d      	movs	r0, #109	; 0x6d
    3564:	f000 f936 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3568:	7880      	ldrb	r0, [r0, #2]
    356a:	b908      	cbnz	r0, 3570 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    356c:	f000 f8c8 	bl	3700 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3570:	2c00      	cmp	r4, #0
    3572:	d100      	bne.n	3576 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    3574:	b662      	cpsie	i
    3576:	bd10      	pop	{r4, pc}
    3578:	2000002c 	.word	0x2000002c

0000357c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    357c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3580:	0004      	movs	r4, r0
    3582:	f06f 0015 	mvn.w	r0, #21
    3586:	d03c      	beq.n	3602 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3588:	7821      	ldrb	r1, [r4, #0]
    358a:	2904      	cmp	r1, #4
    358c:	d839      	bhi.n	3602 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    358e:	2900      	cmp	r1, #0
    3590:	7861      	ldrb	r1, [r4, #1]
    3592:	d038      	beq.n	3606 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    3594:	2900      	cmp	r1, #0
    3596:	d134      	bne.n	3602 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3598:	78a1      	ldrb	r1, [r4, #2]
    359a:	2900      	cmp	r1, #0
    359c:	d131      	bne.n	3602 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    359e:	2000      	movs	r0, #0
    35a0:	f00c fad6 	bl	fb50 <MPSL_IRQ_RADIO_Handler+0x1e>
    35a4:	2000      	movs	r0, #0
    35a6:	f00c fac6 	bl	fb36 <MPSL_IRQ_RADIO_Handler+0x4>
    35aa:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    35ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    35b2:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    35b6:	2600      	movs	r6, #0
    35b8:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    35bc:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    35c0:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    35c4:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    35c8:	4f14      	ldr	r7, [pc, #80]	; (361c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    35ca:	707e      	strb	r6, [r7, #1]
    35cc:	88a0      	ldrh	r0, [r4, #4]
    35ce:	81b8      	strh	r0, [r7, #12]
    35d0:	f00c fb06 	bl	fbe0 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    35d4:	2501      	movs	r5, #1
    35d6:	b108      	cbz	r0, 35dc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    35d8:	70fd      	strb	r5, [r7, #3]
    35da:	707d      	strb	r5, [r7, #1]
    35dc:	2101      	movs	r1, #1
    35de:	4640      	mov	r0, r8
    35e0:	f00c faf0 	bl	fbc4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    35e4:	b108      	cbz	r0, 35ea <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    35e6:	f000 f877 	bl	36d8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    35ea:	4620      	mov	r0, r4
    35ec:	f7ff fe7c 	bl	32e8 <MPSL_IRQ_CLOCK_Handler+0x1d8>
    35f0:	727d      	strb	r5, [r7, #9]
    35f2:	2000      	movs	r0, #0
    35f4:	f00c fa9f 	bl	fb36 <MPSL_IRQ_RADIO_Handler+0x4>
    35f8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    35fc:	4630      	mov	r0, r6
    35fe:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    3602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3606:	2900      	cmp	r1, #0
    3608:	d0fb      	beq.n	3602 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    360a:	2920      	cmp	r1, #32
    360c:	d8f9      	bhi.n	3602 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    360e:	78a1      	ldrb	r1, [r4, #2]
    3610:	2921      	cmp	r1, #33	; 0x21
    3612:	d8f6      	bhi.n	3602 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3614:	2901      	cmp	r1, #1
    3616:	d1c2      	bne.n	359e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3618:	e7f3      	b.n	3602 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    361a:	0000      	.short	0x0000
    361c:	2000002c 	.word	0x2000002c

00003620 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3620:	4801      	ldr	r0, [pc, #4]	; (3628 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3622:	8980      	ldrh	r0, [r0, #12]
    3624:	4770      	bx	lr
    3626:	0000      	.short	0x0000
    3628:	2000002c 	.word	0x2000002c

0000362c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    362c:	4802      	ldr	r0, [pc, #8]	; (3638 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    362e:	7a80      	ldrb	r0, [r0, #10]
    3630:	2800      	cmp	r0, #0
    3632:	d000      	beq.n	3636 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3634:	2001      	movs	r0, #1
    3636:	4770      	bx	lr
    3638:	2000002c 	.word	0x2000002c

0000363c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    363c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    363e:	4d1f      	ldr	r5, [pc, #124]	; (36bc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3640:	7ae8      	ldrb	r0, [r5, #11]
    3642:	2800      	cmp	r0, #0
    3644:	d10f      	bne.n	3666 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3646:	7e28      	ldrb	r0, [r5, #24]
    3648:	f000 0003 	and.w	r0, r0, #3
    364c:	f00c fad6 	bl	fbfc <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3650:	2800      	cmp	r0, #0
    3652:	d008      	beq.n	3666 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3654:	f3ef 8110 	mrs	r1, PRIMASK
    3658:	b672      	cpsid	i
    365a:	f7ff ffe7 	bl	362c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    365e:	b118      	cbz	r0, 3668 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3660:	2900      	cmp	r1, #0
    3662:	d100      	bne.n	3666 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3664:	b662      	cpsie	i
    3666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3668:	2601      	movs	r6, #1
    366a:	72ae      	strb	r6, [r5, #10]
    366c:	b901      	cbnz	r1, 3670 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    366e:	b662      	cpsie	i
    3670:	2018      	movs	r0, #24
    3672:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    3676:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    367a:	61a6      	str	r6, [r4, #24]
    367c:	f44f 7020 	mov.w	r0, #640	; 0x280
    3680:	f8ad 0000 	strh.w	r0, [sp]
    3684:	f8bd 0000 	ldrh.w	r0, [sp]
    3688:	1e41      	subs	r1, r0, #1
    368a:	f8ad 1000 	strh.w	r1, [sp]
    368e:	d2f9      	bcs.n	3684 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    3690:	2700      	movs	r7, #0
    3692:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    3696:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    369a:	4808      	ldr	r0, [pc, #32]	; (36bc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    369c:	3008      	adds	r0, #8
    369e:	f00c fb13 	bl	fcc8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    36a2:	702f      	strb	r7, [r5, #0]
    36a4:	f7ff fd78 	bl	3198 <MPSL_IRQ_CLOCK_Handler+0x88>
    36a8:	6166      	str	r6, [r4, #20]
    36aa:	7968      	ldrb	r0, [r5, #5]
    36ac:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    36b0:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    36b4:	2018      	movs	r0, #24
    36b6:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    36ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36bc:	2000002c 	.word	0x2000002c

000036c0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    36c0:	b510      	push	{r4, lr}
    36c2:	4c04      	ldr	r4, [pc, #16]	; (36d4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    36c4:	7e20      	ldrb	r0, [r4, #24]
    36c6:	f000 0003 	and.w	r0, r0, #3
    36ca:	f00c fa97 	bl	fbfc <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    36ce:	2800      	cmp	r0, #0
    36d0:	d0f8      	beq.n	36c4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    36d2:	bd10      	pop	{r4, pc}
    36d4:	2000002c 	.word	0x2000002c

000036d8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    36d8:	4901      	ldr	r1, [pc, #4]	; (36e0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    36da:	2001      	movs	r0, #1
    36dc:	7008      	strb	r0, [r1, #0]
    36de:	4770      	bx	lr
    36e0:	20000304 	.word	0x20000304

000036e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    36e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    36e8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    36ec:	b918      	cbnz	r0, 36f6 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    36ee:	4803      	ldr	r0, [pc, #12]	; (36fc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    36f0:	7800      	ldrb	r0, [r0, #0]
    36f2:	2800      	cmp	r0, #0
    36f4:	d000      	beq.n	36f8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    36f6:	2001      	movs	r0, #1
    36f8:	4770      	bx	lr
    36fa:	0000      	.short	0x0000
    36fc:	20000304 	.word	0x20000304

00003700 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    3700:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3704:	2101      	movs	r1, #1
    3706:	6041      	str	r1, [r0, #4]
    3708:	2100      	movs	r1, #0
    370a:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    370e:	4801      	ldr	r0, [pc, #4]	; (3714 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    3710:	7001      	strb	r1, [r0, #0]
    3712:	4770      	bx	lr
    3714:	20000304 	.word	0x20000304

00003718 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3718:	4802      	ldr	r0, [pc, #8]	; (3724 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    371a:	6800      	ldr	r0, [r0, #0]
    371c:	f000 0003 	and.w	r0, r0, #3
    3720:	4770      	bx	lr
    3722:	0000      	.short	0x0000
    3724:	4000041c 	.word	0x4000041c
    3728:	b510      	push	{r4, lr}
    372a:	b131      	cbz	r1, 373a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    372c:	2901      	cmp	r1, #1
    372e:	d007      	beq.n	3740 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3730:	f240 3102 	movw	r1, #770	; 0x302
    3734:	a005      	add	r0, pc, #20	; (adr r0, 374c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3736:	f000 f821 	bl	377c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    373a:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    373e:	e001      	b.n	3744 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3740:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3744:	f000 0001 	and.w	r0, r0, #1
    3748:	bd10      	pop	{r4, pc}
    374a:	0000      	.short	0x0000
    374c:	5f66726e 	.word	0x5f66726e
    3750:	636f6c63 	.word	0x636f6c63
    3754:	00682e6b 	.word	0x00682e6b
    3758:	f3bf 8f4f 	dsb	sy
    375c:	4805      	ldr	r0, [pc, #20]	; (3774 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    375e:	6801      	ldr	r1, [r0, #0]
    3760:	4a05      	ldr	r2, [pc, #20]	; (3778 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    3762:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3766:	4311      	orrs	r1, r2
    3768:	6001      	str	r1, [r0, #0]
    376a:	f3bf 8f4f 	dsb	sy
    376e:	bf00      	nop
    3770:	e7fd      	b.n	376e <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    3772:	0000      	.short	0x0000
    3774:	e000ed0c 	.word	0xe000ed0c
    3778:	05fa0004 	.word	0x05fa0004

0000377c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    377c:	b672      	cpsid	i
    377e:	4a03      	ldr	r2, [pc, #12]	; (378c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    3780:	6852      	ldr	r2, [r2, #4]
    3782:	b102      	cbz	r2, 3786 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    3784:	4790      	blx	r2
    3786:	f7ff ffe7 	bl	3758 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    378a:	0000      	.short	0x0000
    378c:	2000004c 	.word	0x2000004c
    3790:	4806      	ldr	r0, [pc, #24]	; (37ac <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    3792:	b510      	push	{r4, lr}
    3794:	2100      	movs	r1, #0
    3796:	6001      	str	r1, [r0, #0]
    3798:	2101      	movs	r1, #1
    379a:	6001      	str	r1, [r0, #0]
    379c:	4608      	mov	r0, r1
    379e:	f00c fa54 	bl	fc4a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    37a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    37a6:	2001      	movs	r0, #1
    37a8:	f00c ba42 	b.w	fc30 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    37ac:	40001ffc 	.word	0x40001ffc
    37b0:	4807      	ldr	r0, [pc, #28]	; (37d0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    37b2:	b510      	push	{r4, lr}
    37b4:	2101      	movs	r1, #1
    37b6:	6041      	str	r1, [r0, #4]
    37b8:	1e89      	subs	r1, r1, #2
    37ba:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    37be:	200c      	movs	r0, #12
    37c0:	f00c fa43 	bl	fc4a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    37c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    37c8:	200c      	movs	r0, #12
    37ca:	f00c ba31 	b.w	fc30 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    37ce:	0000      	.short	0x0000
    37d0:	4000c000 	.word	0x4000c000

000037d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    37d4:	b50e      	push	{r1, r2, r3, lr}
    37d6:	b672      	cpsid	i
    37d8:	4a0f      	ldr	r2, [pc, #60]	; (3818 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    37da:	6855      	ldr	r5, [r2, #4]
    37dc:	b1d5      	cbz	r5, 3814 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    37de:	2200      	movs	r2, #0
    37e0:	4603      	mov	r3, r0
    37e2:	466e      	mov	r6, sp
    37e4:	240a      	movs	r4, #10
    37e6:	e003      	b.n	37f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    37e8:	fbb0 f0f4 	udiv	r0, r0, r4
    37ec:	1c52      	adds	r2, r2, #1
    37ee:	b2d2      	uxtb	r2, r2
    37f0:	2800      	cmp	r0, #0
    37f2:	d1f9      	bne.n	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    37f4:	54b0      	strb	r0, [r6, r2]
    37f6:	e009      	b.n	380c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    37f8:	fbb3 f0f4 	udiv	r0, r3, r4
    37fc:	fb04 3010 	mls	r0, r4, r0, r3
    3800:	fbb3 f3f4 	udiv	r3, r3, r4
    3804:	1e52      	subs	r2, r2, #1
    3806:	b2d2      	uxtb	r2, r2
    3808:	3030      	adds	r0, #48	; 0x30
    380a:	54b0      	strb	r0, [r6, r2]
    380c:	2a00      	cmp	r2, #0
    380e:	d1f3      	bne.n	37f8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3810:	4630      	mov	r0, r6
    3812:	47a8      	blx	r5
    3814:	f7ff ffa0 	bl	3758 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3818:	2000004c 	.word	0x2000004c

0000381c <mpsl_init>:
    381c:	b570      	push	{r4, r5, r6, lr}
    381e:	4c17      	ldr	r4, [pc, #92]	; (387c <mpsl_init+0x60>)
    3820:	4606      	mov	r6, r0
    3822:	460d      	mov	r5, r1
    3824:	7860      	ldrb	r0, [r4, #1]
    3826:	b110      	cbz	r0, 382e <mpsl_init+0x12>
    3828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    382c:	bd70      	pop	{r4, r5, r6, pc}
    382e:	b906      	cbnz	r6, 3832 <mpsl_init+0x16>
    3830:	4e13      	ldr	r6, [pc, #76]	; (3880 <mpsl_init+0x64>)
    3832:	6062      	str	r2, [r4, #4]
    3834:	7025      	strb	r5, [r4, #0]
    3836:	f7ff ffab 	bl	3790 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    383a:	f7ff ffb9 	bl	37b0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    383e:	4630      	mov	r0, r6
    3840:	f7ff fe9c 	bl	357c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    3844:	0006      	movs	r6, r0
    3846:	d1f1      	bne.n	382c <mpsl_init+0x10>
    3848:	f7fe ff00 	bl	264c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    384c:	f7ff fef6 	bl	363c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3850:	f00c f948 	bl	fae4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    3854:	4628      	mov	r0, r5
    3856:	f00c f9eb 	bl	fc30 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    385a:	2001      	movs	r0, #1
    385c:	2d00      	cmp	r5, #0
    385e:	db09      	blt.n	3874 <mpsl_init+0x58>
    3860:	f005 011f 	and.w	r1, r5, #31
    3864:	fa00 f101 	lsl.w	r1, r0, r1
    3868:	096a      	lsrs	r2, r5, #5
    386a:	0092      	lsls	r2, r2, #2
    386c:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    3870:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    3874:	7060      	strb	r0, [r4, #1]
    3876:	4630      	mov	r0, r6
    3878:	bd70      	pop	{r4, r5, r6, pc}
    387a:	0000      	.short	0x0000
    387c:	2000004c 	.word	0x2000004c
    3880:	0000fc6c 	.word	0x0000fc6c

00003884 <mpsl_is_initialized>:
    3884:	4801      	ldr	r0, [pc, #4]	; (388c <mpsl_is_initialized+0x8>)
    3886:	7840      	ldrb	r0, [r0, #1]
    3888:	4770      	bx	lr
    388a:	0000      	.short	0x0000
    388c:	2000004c 	.word	0x2000004c

00003890 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    3890:	4807      	ldr	r0, [pc, #28]	; (38b0 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    3892:	f990 0000 	ldrsb.w	r0, [r0]
    3896:	2800      	cmp	r0, #0
    3898:	db09      	blt.n	38ae <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    389a:	f000 021f 	and.w	r2, r0, #31
    389e:	2101      	movs	r1, #1
    38a0:	4091      	lsls	r1, r2
    38a2:	0940      	lsrs	r0, r0, #5
    38a4:	0080      	lsls	r0, r0, #2
    38a6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    38aa:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    38ae:	4770      	bx	lr
    38b0:	2000004c 	.word	0x2000004c

000038b4 <mpsl_temperature_get>:
    38b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38b8:	2601      	movs	r6, #1
    38ba:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    38be:	0331      	lsls	r1, r6, #12
    38c0:	f04f 0800 	mov.w	r8, #0
    38c4:	4640      	mov	r0, r8
    38c6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    38ca:	f3bf 8f4f 	dsb	sy
    38ce:	f3bf 8f6f 	isb	sy
    38d2:	4c16      	ldr	r4, [pc, #88]	; (392c <mpsl_temperature_get+0x78>)
    38d4:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    38d8:	200c      	movs	r0, #12
    38da:	f00c f9d5 	bl	fc88 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    38de:	4d14      	ldr	r5, [pc, #80]	; (3930 <mpsl_temperature_get+0x7c>)
    38e0:	6828      	ldr	r0, [r5, #0]
    38e2:	43c0      	mvns	r0, r0
    38e4:	f340 1700 	sbfx	r7, r0, #4, #1
    38e8:	6828      	ldr	r0, [r5, #0]
    38ea:	f040 0010 	orr.w	r0, r0, #16
    38ee:	6028      	str	r0, [r5, #0]
    38f0:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    38f4:	6026      	str	r6, [r4, #0]
    38f6:	1c7f      	adds	r7, r7, #1
    38f8:	e002      	b.n	3900 <mpsl_temperature_get+0x4c>
    38fa:	bf00      	nop
    38fc:	f000 f890 	bl	3a20 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3900:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    3904:	2800      	cmp	r0, #0
    3906:	d0f9      	beq.n	38fc <mpsl_temperature_get+0x48>
    3908:	b91f      	cbnz	r7, 3912 <mpsl_temperature_get+0x5e>
    390a:	6828      	ldr	r0, [r5, #0]
    390c:	f020 0010 	bic.w	r0, r0, #16
    3910:	6028      	str	r0, [r5, #0]
    3912:	4808      	ldr	r0, [pc, #32]	; (3934 <mpsl_temperature_get+0x80>)
    3914:	6805      	ldr	r5, [r0, #0]
    3916:	6066      	str	r6, [r4, #4]
    3918:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    391c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    3920:	200c      	movs	r0, #12
    3922:	f00c f9b1 	bl	fc88 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3926:	4628      	mov	r0, r5
    3928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    392c:	4000c000 	.word	0x4000c000
    3930:	e000ed10 	.word	0xe000ed10
    3934:	4000c508 	.word	0x4000c508

00003938 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    3938:	b510      	push	{r4, lr}
    393a:	4602      	mov	r2, r0
    393c:	2005      	movs	r0, #5
    393e:	490c      	ldr	r1, [pc, #48]	; (3970 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    3940:	e004      	b.n	394c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    3942:	bf00      	nop
    3944:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    3948:	791b      	ldrb	r3, [r3, #4]
    394a:	b133      	cbz	r3, 395a <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    394c:	1e40      	subs	r0, r0, #1
    394e:	b2c0      	uxtb	r0, r0
    3950:	d2f8      	bcs.n	3944 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    3952:	2148      	movs	r1, #72	; 0x48
    3954:	2069      	movs	r0, #105	; 0x69
    3956:	f7ff ff3d 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    395a:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    395e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    3962:	2200      	movs	r2, #0
    3964:	714a      	strb	r2, [r1, #5]
    3966:	718a      	strb	r2, [r1, #6]
    3968:	2201      	movs	r2, #1
    396a:	710a      	strb	r2, [r1, #4]
    396c:	bd10      	pop	{r4, pc}
    396e:	0000      	.short	0x0000
    3970:	20000c48 	.word	0x20000c48

00003974 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    3974:	b510      	push	{r4, lr}
    3976:	2805      	cmp	r0, #5
    3978:	d301      	bcc.n	397e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    397a:	2158      	movs	r1, #88	; 0x58
    397c:	e006      	b.n	398c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    397e:	490a      	ldr	r1, [pc, #40]	; (39a8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    3980:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3984:	7901      	ldrb	r1, [r0, #4]
    3986:	2901      	cmp	r1, #1
    3988:	d003      	beq.n	3992 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    398a:	2159      	movs	r1, #89	; 0x59
    398c:	2069      	movs	r0, #105	; 0x69
    398e:	f7ff ff21 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3992:	7941      	ldrb	r1, [r0, #5]
    3994:	7982      	ldrb	r2, [r0, #6]
    3996:	1c49      	adds	r1, r1, #1
    3998:	b2c9      	uxtb	r1, r1
    399a:	428a      	cmp	r2, r1
    399c:	d000      	beq.n	39a0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    399e:	7141      	strb	r1, [r0, #5]
    39a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    39a4:	f7ff bf74 	b.w	3890 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    39a8:	20000c48 	.word	0x20000c48

000039ac <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    39ac:	b570      	push	{r4, r5, r6, lr}
    39ae:	2505      	movs	r5, #5
    39b0:	4e0e      	ldr	r6, [pc, #56]	; (39ec <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    39b2:	4c0f      	ldr	r4, [pc, #60]	; (39f0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    39b4:	e016      	b.n	39e4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    39b6:	7821      	ldrb	r1, [r4, #0]
    39b8:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    39bc:	7902      	ldrb	r2, [r0, #4]
    39be:	2a01      	cmp	r2, #1
    39c0:	d108      	bne.n	39d4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    39c2:	7942      	ldrb	r2, [r0, #5]
    39c4:	7983      	ldrb	r3, [r0, #6]
    39c6:	429a      	cmp	r2, r3
    39c8:	d004      	beq.n	39d4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    39ca:	7942      	ldrb	r2, [r0, #5]
    39cc:	7182      	strb	r2, [r0, #6]
    39ce:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    39d2:	4780      	blx	r0
    39d4:	7820      	ldrb	r0, [r4, #0]
    39d6:	1c40      	adds	r0, r0, #1
    39d8:	b2c0      	uxtb	r0, r0
    39da:	7020      	strb	r0, [r4, #0]
    39dc:	2805      	cmp	r0, #5
    39de:	d301      	bcc.n	39e4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    39e0:	2000      	movs	r0, #0
    39e2:	7020      	strb	r0, [r4, #0]
    39e4:	1e6d      	subs	r5, r5, #1
    39e6:	b2ed      	uxtb	r5, r5
    39e8:	d2e5      	bcs.n	39b6 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    39ea:	bd70      	pop	{r4, r5, r6, pc}
    39ec:	20000c48 	.word	0x20000c48
    39f0:	20000305 	.word	0x20000305

000039f4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    39f4:	b500      	push	{lr}
    39f6:	f00c f976 	bl	fce6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    39fa:	b940      	cbnz	r0, 3a0e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    39fc:	f00c f97d 	bl	fcfa <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3a00:	b928      	cbnz	r0, 3a0e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3a02:	f00c f991 	bl	fd28 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3a06:	b910      	cbnz	r0, 3a0e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3a08:	f00c f9a2 	bl	fd50 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3a0c:	b108      	cbz	r0, 3a12 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    3a0e:	4802      	ldr	r0, [pc, #8]	; (3a18 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    3a10:	bd00      	pop	{pc}
    3a12:	4802      	ldr	r0, [pc, #8]	; (3a1c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    3a14:	bd00      	pop	{pc}
    3a16:	0000      	.short	0x0000
    3a18:	4000050c 	.word	0x4000050c
    3a1c:	4001e700 	.word	0x4001e700

00003a20 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    3a20:	b510      	push	{r4, lr}
    3a22:	f00c f995 	bl	fd50 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3a26:	b330      	cbz	r0, 3a76 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    3a28:	f3ef 8010 	mrs	r0, PRIMASK
    3a2c:	b1c8      	cbz	r0, 3a62 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    3a2e:	2100      	movs	r1, #0
    3a30:	b672      	cpsid	i
    3a32:	4812      	ldr	r0, [pc, #72]	; (3a7c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    3a34:	6802      	ldr	r2, [r0, #0]
    3a36:	6803      	ldr	r3, [r0, #0]
    3a38:	f3c2 1200 	ubfx	r2, r2, #4, #1
    3a3c:	f043 0310 	orr.w	r3, r3, #16
    3a40:	6003      	str	r3, [r0, #0]
    3a42:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3a46:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    3a4a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    3a4e:	431c      	orrs	r4, r3
    3a50:	d000      	beq.n	3a54 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    3a52:	bf40      	sev
    3a54:	bf20      	wfe
    3a56:	bf00      	nop
    3a58:	bf00      	nop
    3a5a:	bf00      	nop
    3a5c:	bf00      	nop
    3a5e:	b112      	cbz	r2, 3a66 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    3a60:	e005      	b.n	3a6e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    3a62:	2101      	movs	r1, #1
    3a64:	e7e4      	b.n	3a30 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    3a66:	6802      	ldr	r2, [r0, #0]
    3a68:	f022 0210 	bic.w	r2, r2, #16
    3a6c:	6002      	str	r2, [r0, #0]
    3a6e:	2900      	cmp	r1, #0
    3a70:	d000      	beq.n	3a74 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    3a72:	b662      	cpsie	i
    3a74:	bd10      	pop	{r4, pc}
    3a76:	bf20      	wfe
    3a78:	bd10      	pop	{r4, pc}
    3a7a:	0000      	.short	0x0000
    3a7c:	e000ed10 	.word	0xe000ed10
    3a80:	b570      	push	{r4, r5, r6, lr}
    3a82:	4c0e      	ldr	r4, [pc, #56]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3a84:	7860      	ldrb	r0, [r4, #1]
    3a86:	2800      	cmp	r0, #0
    3a88:	d117      	bne.n	3aba <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x22>
    3a8a:	7820      	ldrb	r0, [r4, #0]
    3a8c:	2500      	movs	r5, #0
    3a8e:	2801      	cmp	r0, #1
    3a90:	d106      	bne.n	3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
    3a92:	2002      	movs	r0, #2
    3a94:	7020      	strb	r0, [r4, #0]
    3a96:	6920      	ldr	r0, [r4, #16]
    3a98:	b110      	cbz	r0, 3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
    3a9a:	6920      	ldr	r0, [r4, #16]
    3a9c:	4780      	blx	r0
    3a9e:	6125      	str	r5, [r4, #16]
    3aa0:	7820      	ldrb	r0, [r4, #0]
    3aa2:	2803      	cmp	r0, #3
    3aa4:	d109      	bne.n	3aba <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x22>
    3aa6:	7025      	strb	r5, [r4, #0]
    3aa8:	6920      	ldr	r0, [r4, #16]
    3aaa:	2800      	cmp	r0, #0
    3aac:	d005      	beq.n	3aba <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x22>
    3aae:	6860      	ldr	r0, [r4, #4]
    3ab0:	6940      	ldr	r0, [r0, #20]
    3ab2:	4780      	blx	r0
    3ab4:	6920      	ldr	r0, [r4, #16]
    3ab6:	4780      	blx	r0
    3ab8:	6125      	str	r5, [r4, #16]
    3aba:	bd70      	pop	{r4, r5, r6, pc}
    3abc:	20000054 	.word	0x20000054

00003ac0 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>:
    3ac0:	b510      	push	{r4, lr}
    3ac2:	4c08      	ldr	r4, [pc, #32]	; (3ae4 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x24>)
    3ac4:	7820      	ldrb	r0, [r4, #0]
    3ac6:	2802      	cmp	r0, #2
    3ac8:	d002      	beq.n	3ad0 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x10>
    3aca:	7820      	ldrb	r0, [r4, #0]
    3acc:	2803      	cmp	r0, #3
    3ace:	d102      	bne.n	3ad6 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x16>
    3ad0:	6860      	ldr	r0, [r4, #4]
    3ad2:	6880      	ldr	r0, [r0, #8]
    3ad4:	4780      	blx	r0
    3ad6:	2000      	movs	r0, #0
    3ad8:	70a0      	strb	r0, [r4, #2]
    3ada:	7060      	strb	r0, [r4, #1]
    3adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ae0:	f7ff bfce 	b.w	3a80 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x60>
    3ae4:	20000054 	.word	0x20000054

00003ae8 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>:
    3ae8:	4802      	ldr	r0, [pc, #8]	; (3af4 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI+0xc>)
    3aea:	7800      	ldrb	r0, [r0, #0]
    3aec:	2800      	cmp	r0, #0
    3aee:	d000      	beq.n	3af2 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI+0xa>
    3af0:	2001      	movs	r0, #1
    3af2:	4770      	bx	lr
    3af4:	20000054 	.word	0x20000054

00003af8 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>:
    3af8:	b538      	push	{r3, r4, r5, lr}
    3afa:	4604      	mov	r4, r0
    3afc:	2805      	cmp	r0, #5
    3afe:	d304      	bcc.n	3b0a <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x12>
    3b00:	f240 1137 	movw	r1, #311	; 0x137
    3b04:	2068      	movs	r0, #104	; 0x68
    3b06:	f7ff fe65 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b0a:	f7ff ffb9 	bl	3a80 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x60>
    3b0e:	4d10      	ldr	r5, [pc, #64]	; (3b50 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x58>)
    3b10:	2001      	movs	r0, #1
    3b12:	7068      	strb	r0, [r5, #1]
    3b14:	7828      	ldrb	r0, [r5, #0]
    3b16:	2802      	cmp	r0, #2
    3b18:	d116      	bne.n	3b48 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x50>
    3b1a:	6868      	ldr	r0, [r5, #4]
    3b1c:	68c1      	ldr	r1, [r0, #12]
    3b1e:	4620      	mov	r0, r4
    3b20:	4788      	blx	r1
    3b22:	490c      	ldr	r1, [pc, #48]	; (3b54 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x5c>)
    3b24:	eb01 0244 	add.w	r2, r1, r4, lsl #1
    3b28:	7852      	ldrb	r2, [r2, #1]
    3b2a:	4282      	cmp	r2, r0
    3b2c:	d30d      	bcc.n	3b4a <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x52>
    3b2e:	78a8      	ldrb	r0, [r5, #2]
    3b30:	2801      	cmp	r0, #1
    3b32:	d00a      	beq.n	3b4a <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x52>
    3b34:	f811 0014 	ldrb.w	r0, [r1, r4, lsl #1]
    3b38:	f88d 0000 	strb.w	r0, [sp]
    3b3c:	f88d 4001 	strb.w	r4, [sp, #1]
    3b40:	6868      	ldr	r0, [r5, #4]
    3b42:	6801      	ldr	r1, [r0, #0]
    3b44:	4668      	mov	r0, sp
    3b46:	4788      	blx	r1
    3b48:	bd38      	pop	{r3, r4, r5, pc}
    3b4a:	2001      	movs	r0, #1
    3b4c:	e7f4      	b.n	3b38 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x40>
    3b4e:	0000      	.short	0x0000
    3b50:	20000054 	.word	0x20000054
    3b54:	200010d8 	.word	0x200010d8

00003b58 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>:
    3b58:	4905      	ldr	r1, [pc, #20]	; (3b70 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x18>)
    3b5a:	780a      	ldrb	r2, [r1, #0]
    3b5c:	2a02      	cmp	r2, #2
    3b5e:	d004      	beq.n	3b6a <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
    3b60:	780a      	ldrb	r2, [r1, #0]
    3b62:	2a03      	cmp	r2, #3
    3b64:	d001      	beq.n	3b6a <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
    3b66:	2000      	movs	r0, #0
    3b68:	4770      	bx	lr
    3b6a:	6849      	ldr	r1, [r1, #4]
    3b6c:	6909      	ldr	r1, [r1, #16]
    3b6e:	4708      	bx	r1
    3b70:	20000054 	.word	0x20000054

00003b74 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>:
    3b74:	b510      	push	{r4, lr}
    3b76:	b158      	cbz	r0, 3b90 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x1c>
    3b78:	4908      	ldr	r1, [pc, #32]	; (3b9c <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x28>)
    3b7a:	780a      	ldrb	r2, [r1, #0]
    3b7c:	2a02      	cmp	r2, #2
    3b7e:	d002      	beq.n	3b86 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x12>
    3b80:	780a      	ldrb	r2, [r1, #0]
    3b82:	2a03      	cmp	r2, #3
    3b84:	d109      	bne.n	3b9a <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x26>
    3b86:	6849      	ldr	r1, [r1, #4]
    3b88:	6849      	ldr	r1, [r1, #4]
    3b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3b8e:	4708      	bx	r1
    3b90:	f240 114d 	movw	r1, #333	; 0x14d
    3b94:	2068      	movs	r0, #104	; 0x68
    3b96:	f7ff fe1d 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b9a:	bd10      	pop	{r4, pc}
    3b9c:	20000054 	.word	0x20000054

00003ba0 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>:
    3ba0:	4805      	ldr	r0, [pc, #20]	; (3bb8 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x18>)
    3ba2:	7801      	ldrb	r1, [r0, #0]
    3ba4:	2902      	cmp	r1, #2
    3ba6:	d004      	beq.n	3bb2 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
    3ba8:	7801      	ldrb	r1, [r0, #0]
    3baa:	2903      	cmp	r1, #3
    3bac:	d001      	beq.n	3bb2 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
    3bae:	2000      	movs	r0, #0
    3bb0:	4770      	bx	lr
    3bb2:	6840      	ldr	r0, [r0, #4]
    3bb4:	6980      	ldr	r0, [r0, #24]
    3bb6:	4700      	bx	r0
    3bb8:	20000054 	.word	0x20000054

00003bbc <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    3bbc:	0000ffc1 0000ffdd 0000ffcb 0000ffd7     ................
    3bcc:	0000ffc5 0000ffbf 0000ffbd 0000ffe3     ................
    3bdc:	0000ffd1 0000ffb7 0000ffaf 0000ffb3     ................
    3bec:	0000ffa9                                ....

00003bf0 <mpsl_fem_disable>:
    3bf0:	4801      	ldr	r0, [pc, #4]	; (3bf8 <mpsl_fem_disable+0x8>)
    3bf2:	6800      	ldr	r0, [r0, #0]
    3bf4:	6800      	ldr	r0, [r0, #0]
    3bf6:	4700      	bx	r0
    3bf8:	20000068 	.word	0x20000068

00003bfc <mpsl_fem_lna_configuration_clear>:
    3bfc:	4801      	ldr	r0, [pc, #4]	; (3c04 <mpsl_fem_lna_configuration_clear+0x8>)
    3bfe:	6800      	ldr	r0, [r0, #0]
    3c00:	6900      	ldr	r0, [r0, #16]
    3c02:	4700      	bx	r0
    3c04:	20000068 	.word	0x20000068

00003c08 <mpsl_fem_lna_configuration_set>:
    3c08:	4a01      	ldr	r2, [pc, #4]	; (3c10 <mpsl_fem_lna_configuration_set+0x8>)
    3c0a:	6812      	ldr	r2, [r2, #0]
    3c0c:	6892      	ldr	r2, [r2, #8]
    3c0e:	4710      	bx	r2
    3c10:	20000068 	.word	0x20000068

00003c14 <mpsl_fem_pa_configuration_clear>:
    3c14:	4801      	ldr	r0, [pc, #4]	; (3c1c <mpsl_fem_pa_configuration_clear+0x8>)
    3c16:	6800      	ldr	r0, [r0, #0]
    3c18:	68c0      	ldr	r0, [r0, #12]
    3c1a:	4700      	bx	r0
    3c1c:	20000068 	.word	0x20000068

00003c20 <mpsl_fem_pa_configuration_set>:
    3c20:	4a01      	ldr	r2, [pc, #4]	; (3c28 <mpsl_fem_pa_configuration_set+0x8>)
    3c22:	6812      	ldr	r2, [r2, #0]
    3c24:	6852      	ldr	r2, [r2, #4]
    3c26:	4710      	bx	r2
    3c28:	20000068 	.word	0x20000068

00003c2c <mpsl_fem_pa_is_configured>:
    3c2c:	4901      	ldr	r1, [pc, #4]	; (3c34 <mpsl_fem_pa_is_configured+0x8>)
    3c2e:	6809      	ldr	r1, [r1, #0]
    3c30:	6a09      	ldr	r1, [r1, #32]
    3c32:	4708      	bx	r1
    3c34:	20000068 	.word	0x20000068

00003c38 <mpsl_fem_device_config_254_apply_get>:
    3c38:	4801      	ldr	r0, [pc, #4]	; (3c40 <mpsl_fem_device_config_254_apply_get+0x8>)
    3c3a:	7800      	ldrb	r0, [r0, #0]
    3c3c:	4770      	bx	lr
    3c3e:	0000      	.short	0x0000
    3c40:	20000306 	.word	0x20000306
    3c44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3c46:	4c17      	ldr	r4, [pc, #92]	; (3ca4 <mpsl_fem_device_config_254_apply_get+0x6c>)
    3c48:	7a20      	ldrb	r0, [r4, #8]
    3c4a:	2802      	cmp	r0, #2
    3c4c:	d200      	bcs.n	3c50 <mpsl_fem_device_config_254_apply_get+0x18>
    3c4e:	2002      	movs	r0, #2
    3c50:	f88d 0001 	strb.w	r0, [sp, #1]
    3c54:	79e0      	ldrb	r0, [r4, #7]
    3c56:	2803      	cmp	r0, #3
    3c58:	d200      	bcs.n	3c5c <mpsl_fem_device_config_254_apply_get+0x24>
    3c5a:	2003      	movs	r0, #3
    3c5c:	f88d 0000 	strb.w	r0, [sp]
    3c60:	79a0      	ldrb	r0, [r4, #6]
    3c62:	f8ad 0004 	strh.w	r0, [sp, #4]
    3c66:	7960      	ldrb	r0, [r4, #5]
    3c68:	f8ad 0002 	strh.w	r0, [sp, #2]
    3c6c:	4668      	mov	r0, sp
    3c6e:	f009 fc41 	bl	d4f4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3c72:	b108      	cbz	r0, 3c78 <mpsl_fem_device_config_254_apply_get+0x40>
    3c74:	2184      	movs	r1, #132	; 0x84
    3c76:	e010      	b.n	3c9a <mpsl_fem_device_config_254_apply_get+0x62>
    3c78:	68e0      	ldr	r0, [r4, #12]
    3c7a:	9002      	str	r0, [sp, #8]
    3c7c:	a802      	add	r0, sp, #8
    3c7e:	f009 fc4f 	bl	d520 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3c82:	b108      	cbz	r0, 3c88 <mpsl_fem_device_config_254_apply_get+0x50>
    3c84:	2188      	movs	r1, #136	; 0x88
    3c86:	e008      	b.n	3c9a <mpsl_fem_device_config_254_apply_get+0x62>
    3c88:	4807      	ldr	r0, [pc, #28]	; (3ca8 <mpsl_fem_device_config_254_apply_get+0x70>)
    3c8a:	6800      	ldr	r0, [r0, #0]
    3c8c:	9003      	str	r0, [sp, #12]
    3c8e:	a803      	add	r0, sp, #12
    3c90:	f00f faa5 	bl	131de <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3c94:	2800      	cmp	r0, #0
    3c96:	d003      	beq.n	3ca0 <mpsl_fem_device_config_254_apply_get+0x68>
    3c98:	218c      	movs	r1, #140	; 0x8c
    3c9a:	2003      	movs	r0, #3
    3c9c:	f000 f950 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ca0:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3ca2:	0000      	.short	0x0000
    3ca4:	20000c70 	.word	0x20000c70
    3ca8:	00003fec 	.word	0x00003fec
    3cac:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    3cae:	4604      	mov	r4, r0
    3cb0:	6800      	ldr	r0, [r0, #0]
    3cb2:	460d      	mov	r5, r1
    3cb4:	f100 0003 	add.w	r0, r0, #3
    3cb8:	f020 0003 	bic.w	r0, r0, #3
    3cbc:	6020      	str	r0, [r4, #0]
    3cbe:	f04f 0000 	mov.w	r0, #0
    3cc2:	9000      	str	r0, [sp, #0]
    3cc4:	9001      	str	r0, [sp, #4]
    3cc6:	7808      	ldrb	r0, [r1, #0]
    3cc8:	f88d 0001 	strb.w	r0, [sp, #1]
    3ccc:	7848      	ldrb	r0, [r1, #1]
    3cce:	f88d 0002 	strb.w	r0, [sp, #2]
    3cd2:	7888      	ldrb	r0, [r1, #2]
    3cd4:	f88d 0003 	strb.w	r0, [sp, #3]
    3cd8:	78c8      	ldrb	r0, [r1, #3]
    3cda:	f88d 0004 	strb.w	r0, [sp, #4]
    3cde:	7928      	ldrb	r0, [r5, #4]
    3ce0:	0016      	movs	r6, r2
    3ce2:	f88d 0005 	strb.w	r0, [sp, #5]
    3ce6:	d001      	beq.n	3cec <mpsl_fem_device_config_254_apply_get+0xb4>
    3ce8:	2000      	movs	r0, #0
    3cea:	e000      	b.n	3cee <mpsl_fem_device_config_254_apply_get+0xb6>
    3cec:	6820      	ldr	r0, [r4, #0]
    3cee:	4669      	mov	r1, sp
    3cf0:	f000 fb12 	bl	4318 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    3cf4:	6821      	ldr	r1, [r4, #0]
    3cf6:	4408      	add	r0, r1
    3cf8:	6020      	str	r0, [r4, #0]
    3cfa:	78a9      	ldrb	r1, [r5, #2]
    3cfc:	b141      	cbz	r1, 3d10 <mpsl_fem_device_config_254_apply_get+0xd8>
    3cfe:	8a6b      	ldrh	r3, [r5, #18]
    3d00:	78ea      	ldrb	r2, [r5, #3]
    3d02:	b106      	cbz	r6, 3d06 <mpsl_fem_device_config_254_apply_get+0xce>
    3d04:	2000      	movs	r0, #0
    3d06:	f000 fdd7 	bl	48b8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    3d0a:	6821      	ldr	r1, [r4, #0]
    3d0c:	4408      	add	r0, r1
    3d0e:	6020      	str	r0, [r4, #0]
    3d10:	4819      	ldr	r0, [pc, #100]	; (3d78 <mpsl_fem_device_config_254_apply_get+0x140>)
    3d12:	78c1      	ldrb	r1, [r0, #3]
    3d14:	b179      	cbz	r1, 3d36 <mpsl_fem_device_config_254_apply_get+0xfe>
    3d16:	7c29      	ldrb	r1, [r5, #16]
    3d18:	b169      	cbz	r1, 3d36 <mpsl_fem_device_config_254_apply_get+0xfe>
    3d1a:	7900      	ldrb	r0, [r0, #4]
    3d1c:	b108      	cbz	r0, 3d22 <mpsl_fem_device_config_254_apply_get+0xea>
    3d1e:	22ff      	movs	r2, #255	; 0xff
    3d20:	e000      	b.n	3d24 <mpsl_fem_device_config_254_apply_get+0xec>
    3d22:	2225      	movs	r2, #37	; 0x25
    3d24:	b10e      	cbz	r6, 3d2a <mpsl_fem_device_config_254_apply_get+0xf2>
    3d26:	2000      	movs	r0, #0
    3d28:	e000      	b.n	3d2c <mpsl_fem_device_config_254_apply_get+0xf4>
    3d2a:	6820      	ldr	r0, [r4, #0]
    3d2c:	f000 fe5a 	bl	49e4 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    3d30:	6821      	ldr	r1, [r4, #0]
    3d32:	4408      	add	r0, r1
    3d34:	6020      	str	r0, [r4, #0]
    3d36:	7928      	ldrb	r0, [r5, #4]
    3d38:	b168      	cbz	r0, 3d56 <mpsl_fem_device_config_254_apply_get+0x11e>
    3d3a:	6820      	ldr	r0, [r4, #0]
    3d3c:	1cc0      	adds	r0, r0, #3
    3d3e:	f020 0003 	bic.w	r0, r0, #3
    3d42:	6020      	str	r0, [r4, #0]
    3d44:	7d2a      	ldrb	r2, [r5, #20]
    3d46:	7929      	ldrb	r1, [r5, #4]
    3d48:	b106      	cbz	r6, 3d4c <mpsl_fem_device_config_254_apply_get+0x114>
    3d4a:	2000      	movs	r0, #0
    3d4c:	f009 ffac 	bl	dca8 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I>
    3d50:	6821      	ldr	r1, [r4, #0]
    3d52:	4408      	add	r0, r1
    3d54:	6020      	str	r0, [r4, #0]
    3d56:	7d68      	ldrb	r0, [r5, #21]
    3d58:	2800      	cmp	r0, #0
    3d5a:	d00c      	beq.n	3d76 <mpsl_fem_device_config_254_apply_get+0x13e>
    3d5c:	6820      	ldr	r0, [r4, #0]
    3d5e:	1cc0      	adds	r0, r0, #3
    3d60:	f020 0003 	bic.w	r0, r0, #3
    3d64:	6020      	str	r0, [r4, #0]
    3d66:	7d69      	ldrb	r1, [r5, #21]
    3d68:	b106      	cbz	r6, 3d6c <mpsl_fem_device_config_254_apply_get+0x134>
    3d6a:	2000      	movs	r0, #0
    3d6c:	f000 fe6a 	bl	4a44 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y>
    3d70:	6821      	ldr	r1, [r4, #0]
    3d72:	4408      	add	r0, r1
    3d74:	6020      	str	r0, [r4, #0]
    3d76:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    3d78:	2000006c 	.word	0x2000006c

00003d7c <sdc_build_revision_get>:
    3d7c:	b510      	push	{r4, lr}
    3d7e:	b128      	cbz	r0, 3d8c <sdc_build_revision_get+0x10>
    3d80:	2214      	movs	r2, #20
    3d82:	4904      	ldr	r1, [pc, #16]	; (3d94 <sdc_build_revision_get+0x18>)
    3d84:	f00c f836 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3d88:	2000      	movs	r0, #0
    3d8a:	bd10      	pop	{r4, pc}
    3d8c:	f06f 0015 	mvn.w	r0, #21
    3d90:	bd10      	pop	{r4, pc}
    3d92:	0000      	.short	0x0000
    3d94:	00004008 	.word	0x00004008

00003d98 <sdc_cfg_set>:
    3d98:	b570      	push	{r4, r5, r6, lr}
    3d9a:	b110      	cbz	r0, 3da2 <sdc_cfg_set+0xa>
    3d9c:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    3da0:	bd70      	pop	{r4, r5, r6, pc}
    3da2:	4c2a      	ldr	r4, [pc, #168]	; (3e4c <sdc_cfg_set+0xb4>)
    3da4:	7860      	ldrb	r0, [r4, #1]
    3da6:	b110      	cbz	r0, 3dae <sdc_cfg_set+0x16>
    3da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3dac:	bd70      	pop	{r4, r5, r6, pc}
    3dae:	b309      	cbz	r1, 3df4 <sdc_cfg_set+0x5c>
    3db0:	f06f 0015 	mvn.w	r0, #21
    3db4:	2a00      	cmp	r2, #0
    3db6:	d0f9      	beq.n	3dac <sdc_cfg_set+0x14>
    3db8:	4b25      	ldr	r3, [pc, #148]	; (3e50 <sdc_cfg_set+0xb8>)
    3dba:	290c      	cmp	r1, #12
    3dbc:	d2f6      	bcs.n	3dac <sdc_cfg_set+0x14>
    3dbe:	e8df f001 	tbb	[pc, r1]
    3dc2:	0706      	.short	0x0706
    3dc4:	14110d0a 	.word	0x14110d0a
    3dc8:	2b1a2820 	.word	0x2b1a2820
    3dcc:	332e      	.short	0x332e
    3dce:	e7ed      	b.n	3dac <sdc_cfg_set+0x14>
    3dd0:	7810      	ldrb	r0, [r2, #0]
    3dd2:	7018      	strb	r0, [r3, #0]
    3dd4:	e02c      	b.n	3e30 <sdc_cfg_set+0x98>
    3dd6:	7810      	ldrb	r0, [r2, #0]
    3dd8:	7058      	strb	r0, [r3, #1]
    3dda:	e029      	b.n	3e30 <sdc_cfg_set+0x98>
    3ddc:	6810      	ldr	r0, [r2, #0]
    3dde:	f8c3 0005 	str.w	r0, [r3, #5]
    3de2:	e025      	b.n	3e30 <sdc_cfg_set+0x98>
    3de4:	6810      	ldr	r0, [r2, #0]
    3de6:	60d8      	str	r0, [r3, #12]
    3de8:	e022      	b.n	3e30 <sdc_cfg_set+0x98>
    3dea:	7811      	ldrb	r1, [r2, #0]
    3dec:	78da      	ldrb	r2, [r3, #3]
    3dee:	4291      	cmp	r1, r2
    3df0:	d3dc      	bcc.n	3dac <sdc_cfg_set+0x14>
    3df2:	7099      	strb	r1, [r3, #2]
    3df4:	e01c      	b.n	3e30 <sdc_cfg_set+0x98>
    3df6:	7811      	ldrb	r1, [r2, #0]
    3df8:	789a      	ldrb	r2, [r3, #2]
    3dfa:	4291      	cmp	r1, r2
    3dfc:	d8d6      	bhi.n	3dac <sdc_cfg_set+0x14>
    3dfe:	70d9      	strb	r1, [r3, #3]
    3e00:	e016      	b.n	3e30 <sdc_cfg_set+0x98>
    3e02:	78e1      	ldrb	r1, [r4, #3]
    3e04:	b111      	cbz	r1, 3e0c <sdc_cfg_set+0x74>
    3e06:	7811      	ldrb	r1, [r2, #0]
    3e08:	2902      	cmp	r1, #2
    3e0a:	d3cf      	bcc.n	3dac <sdc_cfg_set+0x14>
    3e0c:	7810      	ldrb	r0, [r2, #0]
    3e0e:	7418      	strb	r0, [r3, #16]
    3e10:	e00e      	b.n	3e30 <sdc_cfg_set+0x98>
    3e12:	8810      	ldrh	r0, [r2, #0]
    3e14:	8258      	strh	r0, [r3, #18]
    3e16:	e00b      	b.n	3e30 <sdc_cfg_set+0x98>
    3e18:	7810      	ldrb	r0, [r2, #0]
    3e1a:	7118      	strb	r0, [r3, #4]
    3e1c:	e008      	b.n	3e30 <sdc_cfg_set+0x98>
    3e1e:	7811      	ldrb	r1, [r2, #0]
    3e20:	2902      	cmp	r1, #2
    3e22:	d3c3      	bcc.n	3dac <sdc_cfg_set+0x14>
    3e24:	7519      	strb	r1, [r3, #20]
    3e26:	e003      	b.n	3e30 <sdc_cfg_set+0x98>
    3e28:	7811      	ldrb	r1, [r2, #0]
    3e2a:	2908      	cmp	r1, #8
    3e2c:	d8be      	bhi.n	3dac <sdc_cfg_set+0x14>
    3e2e:	7559      	strb	r1, [r3, #21]
    3e30:	2201      	movs	r2, #1
    3e32:	4907      	ldr	r1, [pc, #28]	; (3e50 <sdc_cfg_set+0xb8>)
    3e34:	2000      	movs	r0, #0
    3e36:	f00c f8d6 	bl	ffe6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3e3a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3e3e:	db02      	blt.n	3e46 <sdc_cfg_set+0xae>
    3e40:	f06f 000b 	mvn.w	r0, #11
    3e44:	bd70      	pop	{r4, r5, r6, pc}
    3e46:	2101      	movs	r1, #1
    3e48:	70a1      	strb	r1, [r4, #2]
    3e4a:	bd70      	pop	{r4, r5, r6, pc}
    3e4c:	2000006c 	.word	0x2000006c
    3e50:	20000c70 	.word	0x20000c70

00003e54 <sdc_enable>:
    3e54:	b570      	push	{r4, r5, r6, lr}
    3e56:	460c      	mov	r4, r1
    3e58:	0005      	movs	r5, r0
    3e5a:	d019      	beq.n	3e90 <sdc_enable+0x3c>
    3e5c:	b1c4      	cbz	r4, 3e90 <sdc_enable+0x3c>
    3e5e:	f000 f907 	bl	4070 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    3e62:	b1c0      	cbz	r0, 3e96 <sdc_enable+0x42>
    3e64:	4628      	mov	r0, r5
    3e66:	f7ff fd67 	bl	3938 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3e6a:	4d0c      	ldr	r5, [pc, #48]	; (3e9c <sdc_enable+0x48>)
    3e6c:	2200      	movs	r2, #0
    3e6e:	490c      	ldr	r1, [pc, #48]	; (3ea0 <sdc_enable+0x4c>)
    3e70:	7028      	strb	r0, [r5, #0]
    3e72:	4620      	mov	r0, r4
    3e74:	f00c f8b7 	bl	ffe6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3e78:	f00f ff4d 	bl	13d16 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3e7c:	2100      	movs	r1, #0
    3e7e:	7828      	ldrb	r0, [r5, #0]
    3e80:	f009 fe6a 	bl	db58 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3e84:	f7ff fede 	bl	3c44 <mpsl_fem_device_config_254_apply_get+0xc>
    3e88:	2001      	movs	r0, #1
    3e8a:	7068      	strb	r0, [r5, #1]
    3e8c:	2000      	movs	r0, #0
    3e8e:	bd70      	pop	{r4, r5, r6, pc}
    3e90:	f06f 0015 	mvn.w	r0, #21
    3e94:	bd70      	pop	{r4, r5, r6, pc}
    3e96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3e9a:	bd70      	pop	{r4, r5, r6, pc}
    3e9c:	2000006c 	.word	0x2000006c
    3ea0:	20000c70 	.word	0x20000c70

00003ea4 <sdc_init>:
    3ea4:	b530      	push	{r4, r5, lr}
    3ea6:	b087      	sub	sp, #28
    3ea8:	0005      	movs	r5, r0
    3eaa:	d00c      	beq.n	3ec6 <sdc_init+0x22>
    3eac:	f7ff fcea 	bl	3884 <mpsl_is_initialized>
    3eb0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    3eb4:	b120      	cbz	r0, 3ec0 <sdc_init+0x1c>
    3eb6:	f7ff fbb3 	bl	3620 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3eba:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3ebe:	d905      	bls.n	3ecc <sdc_init+0x28>
    3ec0:	4620      	mov	r0, r4
    3ec2:	b007      	add	sp, #28
    3ec4:	bd30      	pop	{r4, r5, pc}
    3ec6:	f06f 0015 	mvn.w	r0, #21
    3eca:	e7fa      	b.n	3ec2 <sdc_init+0x1e>
    3ecc:	4c16      	ldr	r4, [pc, #88]	; (3f28 <sdc_init+0x84>)
    3ece:	4817      	ldr	r0, [pc, #92]	; (3f2c <sdc_init+0x88>)
    3ed0:	60a5      	str	r5, [r4, #8]
    3ed2:	f000 f9fd 	bl	42d0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3ed6:	2000      	movs	r0, #0
    3ed8:	7060      	strb	r0, [r4, #1]
    3eda:	70a0      	strb	r0, [r4, #2]
    3edc:	70e0      	strb	r0, [r4, #3]
    3ede:	7120      	strb	r0, [r4, #4]
    3ee0:	4601      	mov	r1, r0
    3ee2:	2218      	movs	r2, #24
    3ee4:	4668      	mov	r0, sp
    3ee6:	f00b ffff 	bl	fee8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3eea:	2218      	movs	r2, #24
    3eec:	4910      	ldr	r1, [pc, #64]	; (3f30 <sdc_init+0x8c>)
    3eee:	4668      	mov	r0, sp
    3ef0:	f00b ff80 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3ef4:	2218      	movs	r2, #24
    3ef6:	4669      	mov	r1, sp
    3ef8:	480e      	ldr	r0, [pc, #56]	; (3f34 <sdc_init+0x90>)
    3efa:	f00b ff7b 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3efe:	f3ef 8410 	mrs	r4, PRIMASK
    3f02:	b672      	cpsid	i
    3f04:	480c      	ldr	r0, [pc, #48]	; (3f38 <sdc_init+0x94>)
    3f06:	f06f 010c 	mvn.w	r1, #12
    3f0a:	f000 fe33 	bl	4b74 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3f0e:	480b      	ldr	r0, [pc, #44]	; (3f3c <sdc_init+0x98>)
    3f10:	f000 ff00 	bl	4d14 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3f14:	b118      	cbz	r0, 3f1e <sdc_init+0x7a>
    3f16:	219a      	movs	r1, #154	; 0x9a
    3f18:	2003      	movs	r0, #3
    3f1a:	f000 f811 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f1e:	b904      	cbnz	r4, 3f22 <sdc_init+0x7e>
    3f20:	b662      	cpsie	i
    3f22:	2000      	movs	r0, #0
    3f24:	e7cd      	b.n	3ec2 <sdc_init+0x1e>
    3f26:	0000      	.short	0x0000
    3f28:	2000006c 	.word	0x2000006c
    3f2c:	00003c45 	.word	0x00003c45
    3f30:	00003ff0 	.word	0x00003ff0
    3f34:	20000c70 	.word	0x20000c70
    3f38:	4000c000 	.word	0x4000c000
    3f3c:	0000409d 	.word	0x0000409d

00003f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3f40:	b50e      	push	{r1, r2, r3, lr}
    3f42:	b672      	cpsid	i
    3f44:	4a15      	ldr	r2, [pc, #84]	; (3f9c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3f46:	6895      	ldr	r5, [r2, #8]
    3f48:	b1d5      	cbz	r5, 3f80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3f4a:	2200      	movs	r2, #0
    3f4c:	4603      	mov	r3, r0
    3f4e:	466e      	mov	r6, sp
    3f50:	240a      	movs	r4, #10
    3f52:	e003      	b.n	3f5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3f54:	fbb0 f0f4 	udiv	r0, r0, r4
    3f58:	1c52      	adds	r2, r2, #1
    3f5a:	b2d2      	uxtb	r2, r2
    3f5c:	2800      	cmp	r0, #0
    3f5e:	d1f9      	bne.n	3f54 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3f60:	54b0      	strb	r0, [r6, r2]
    3f62:	e009      	b.n	3f78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    3f64:	fbb3 f0f4 	udiv	r0, r3, r4
    3f68:	fb04 3010 	mls	r0, r4, r0, r3
    3f6c:	fbb3 f3f4 	udiv	r3, r3, r4
    3f70:	1e52      	subs	r2, r2, #1
    3f72:	b2d2      	uxtb	r2, r2
    3f74:	3030      	adds	r0, #48	; 0x30
    3f76:	54b0      	strb	r0, [r6, r2]
    3f78:	2a00      	cmp	r2, #0
    3f7a:	d1f3      	bne.n	3f64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3f7c:	4630      	mov	r0, r6
    3f7e:	47a8      	blx	r5
    3f80:	f3bf 8f4f 	dsb	sy
    3f84:	4806      	ldr	r0, [pc, #24]	; (3fa0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3f86:	6801      	ldr	r1, [r0, #0]
    3f88:	4a06      	ldr	r2, [pc, #24]	; (3fa4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3f8a:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3f8e:	4311      	orrs	r1, r2
    3f90:	6001      	str	r1, [r0, #0]
    3f92:	f3bf 8f4f 	dsb	sy
    3f96:	bf00      	nop
    3f98:	e7fd      	b.n	3f96 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    3f9a:	0000      	.short	0x0000
    3f9c:	2000006c 	.word	0x2000006c
    3fa0:	e000ed0c 	.word	0xe000ed0c
    3fa4:	05fa0004 	.word	0x05fa0004

00003fa8 <sdc_support_adv>:
    3fa8:	4806      	ldr	r0, [pc, #24]	; (3fc4 <sdc_support_adv+0x1c>)
    3faa:	b510      	push	{r4, lr}
    3fac:	7881      	ldrb	r1, [r0, #2]
    3fae:	7840      	ldrb	r0, [r0, #1]
    3fb0:	4301      	orrs	r1, r0
    3fb2:	d002      	beq.n	3fba <sdc_support_adv+0x12>
    3fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3fb8:	bd10      	pop	{r4, pc}
    3fba:	f009 fdfd 	bl	dbb8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    3fbe:	2000      	movs	r0, #0
    3fc0:	bd10      	pop	{r4, pc}
    3fc2:	0000      	.short	0x0000
    3fc4:	2000006c 	.word	0x2000006c

00003fc8 <sdc_support_scan>:
    3fc8:	4807      	ldr	r0, [pc, #28]	; (3fe8 <sdc_support_scan+0x20>)
    3fca:	b510      	push	{r4, lr}
    3fcc:	7881      	ldrb	r1, [r0, #2]
    3fce:	7842      	ldrb	r2, [r0, #1]
    3fd0:	4311      	orrs	r1, r2
    3fd2:	d002      	beq.n	3fda <sdc_support_scan+0x12>
    3fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3fd8:	bd10      	pop	{r4, pc}
    3fda:	2101      	movs	r1, #1
    3fdc:	70c1      	strb	r1, [r0, #3]
    3fde:	f009 fdfd 	bl	dbdc <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>
    3fe2:	2000      	movs	r0, #0
    3fe4:	bd10      	pop	{r4, pc}
    3fe6:	0000      	.short	0x0000
    3fe8:	2000006c 	.word	0x2000006c
    3fec:	00000001 	.word	0x00000001
    3ff0:	00010101 	.word	0x00010101
    3ff4:	031b1b00 	.word	0x031b1b00
    3ff8:	00000002 	.word	0x00000002
    3ffc:	00001d4c 	.word	0x00001d4c
    4000:	001f0003 	.word	0x001f0003
    4004:	00000002 	.word	0x00000002
    4008:	66c5e70e 	.word	0x66c5e70e
    400c:	ac3c1867 	.word	0xac3c1867
    4010:	81ccd2b3 	.word	0x81ccd2b3
    4014:	c0f1dca3 	.word	0xc0f1dca3
    4018:	220236c0 	.word	0x220236c0

0000401c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    401c:	4a05      	ldr	r2, [pc, #20]	; (4034 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    401e:	b510      	push	{r4, lr}
    4020:	6852      	ldr	r2, [r2, #4]
    4022:	b112      	cbz	r2, 402a <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    4024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4028:	4710      	bx	r2
    402a:	2183      	movs	r1, #131	; 0x83
    402c:	2004      	movs	r0, #4
    402e:	f7ff ff87 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4032:	0000      	.short	0x0000
    4034:	20000c88 	.word	0x20000c88

00004038 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    4038:	4a05      	ldr	r2, [pc, #20]	; (4050 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    403a:	b510      	push	{r4, lr}
    403c:	6812      	ldr	r2, [r2, #0]
    403e:	b112      	cbz	r2, 4046 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    4040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4044:	4710      	bx	r2
    4046:	217d      	movs	r1, #125	; 0x7d
    4048:	2004      	movs	r0, #4
    404a:	f7ff ff79 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    404e:	0000      	.short	0x0000
    4050:	20000c88 	.word	0x20000c88

00004054 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    4054:	4a05      	ldr	r2, [pc, #20]	; (406c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    4056:	b510      	push	{r4, lr}
    4058:	6892      	ldr	r2, [r2, #8]
    405a:	b112      	cbz	r2, 4062 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    405c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4060:	4710      	bx	r2
    4062:	2189      	movs	r1, #137	; 0x89
    4064:	2004      	movs	r0, #4
    4066:	f7ff ff6b 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    406a:	0000      	.short	0x0000
    406c:	20000c88 	.word	0x20000c88

00004070 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    4070:	4805      	ldr	r0, [pc, #20]	; (4088 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    4072:	6801      	ldr	r1, [r0, #0]
    4074:	b129      	cbz	r1, 4082 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4076:	6841      	ldr	r1, [r0, #4]
    4078:	b119      	cbz	r1, 4082 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    407a:	6880      	ldr	r0, [r0, #8]
    407c:	b108      	cbz	r0, 4082 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    407e:	2001      	movs	r0, #1
    4080:	4770      	bx	lr
    4082:	2000      	movs	r0, #0
    4084:	4770      	bx	lr
    4086:	0000      	.short	0x0000
    4088:	20000c88 	.word	0x20000c88

0000408c <sdc_rand_source_register>:
    408c:	4902      	ldr	r1, [pc, #8]	; (4098 <sdc_rand_source_register+0xc>)
    408e:	c80d      	ldmia	r0, {r0, r2, r3}
    4090:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4094:	2000      	movs	r0, #0
    4096:	4770      	bx	lr
    4098:	20000c88 	.word	0x20000c88

0000409c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    409e:	4c12      	ldr	r4, [pc, #72]	; (40e8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    40a0:	2600      	movs	r6, #0
    40a2:	6825      	ldr	r5, [r4, #0]
    40a4:	e011      	b.n	40ca <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    40a6:	9800      	ldr	r0, [sp, #0]
    40a8:	2802      	cmp	r0, #2
    40aa:	d002      	beq.n	40b2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    40ac:	2803      	cmp	r0, #3
    40ae:	d10c      	bne.n	40ca <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    40b0:	e006      	b.n	40c0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    40b2:	6820      	ldr	r0, [r4, #0]
    40b4:	b110      	cbz	r0, 40bc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    40b6:	2000      	movs	r0, #0
    40b8:	6026      	str	r6, [r4, #0]
    40ba:	e005      	b.n	40c8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    40bc:	2128      	movs	r1, #40	; 0x28
    40be:	e00c      	b.n	40da <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    40c0:	6820      	ldr	r0, [r4, #0]
    40c2:	b168      	cbz	r0, 40e0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    40c4:	2001      	movs	r0, #1
    40c6:	6026      	str	r6, [r4, #0]
    40c8:	47a8      	blx	r5
    40ca:	4668      	mov	r0, sp
    40cc:	f000 fdf4 	bl	4cb8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    40d0:	2800      	cmp	r0, #0
    40d2:	d0e8      	beq.n	40a6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    40d4:	2805      	cmp	r0, #5
    40d6:	d005      	beq.n	40e4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    40d8:	2135      	movs	r1, #53	; 0x35
    40da:	2004      	movs	r0, #4
    40dc:	f7ff ff30 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40e0:	212d      	movs	r1, #45	; 0x2d
    40e2:	e7fa      	b.n	40da <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    40e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40e6:	0000      	.short	0x0000
    40e8:	20000078 	.word	0x20000078
    40ec:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    40ee:	4c1f      	ldr	r4, [pc, #124]	; (416c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
    40f0:	4605      	mov	r5, r0
    40f2:	7820      	ldrb	r0, [r4, #0]
    40f4:	b140      	cbz	r0, 4108 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    40f6:	78a2      	ldrb	r2, [r4, #2]
    40f8:	1c61      	adds	r1, r4, #1
    40fa:	4628      	mov	r0, r5
    40fc:	1c92      	adds	r2, r2, #2
    40fe:	f00b fe79 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4102:	2000      	movs	r0, #0
    4104:	7020      	strb	r0, [r4, #0]
    4106:	e021      	b.n	414c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    4108:	4819      	ldr	r0, [pc, #100]	; (4170 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    410a:	f002 fe09 	bl	6d20 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    410e:	2800      	cmp	r0, #0
    4110:	d01d      	beq.n	414e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4112:	4c17      	ldr	r4, [pc, #92]	; (4170 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4114:	7820      	ldrb	r0, [r4, #0]
    4116:	2814      	cmp	r0, #20
    4118:	d104      	bne.n	4124 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    411a:	210a      	movs	r1, #10
    411c:	203e      	movs	r0, #62	; 0x3e
    411e:	f000 f829 	bl	4174 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    4122:	b118      	cbz	r0, 412c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
    4124:	7820      	ldrb	r0, [r4, #0]
    4126:	280a      	cmp	r0, #10
    4128:	d005      	beq.n	4136 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
    412a:	e009      	b.n	4140 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
    412c:	4910      	ldr	r1, [pc, #64]	; (4170 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    412e:	4628      	mov	r0, r5
    4130:	f00c fa10 	bl	10554 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    4134:	e00a      	b.n	414c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    4136:	2105      	movs	r1, #5
    4138:	203e      	movs	r0, #62	; 0x3e
    413a:	f000 f81b 	bl	4174 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    413e:	b138      	cbz	r0, 4150 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
    4140:	490b      	ldr	r1, [pc, #44]	; (4170 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4142:	4628      	mov	r0, r5
    4144:	f00b ffa4 	bl	10090 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    4148:	2800      	cmp	r0, #0
    414a:	d000      	beq.n	414e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    414c:	2001      	movs	r0, #1
    414e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4150:	88a0      	ldrh	r0, [r4, #4]
    4152:	f8ad 0000 	strh.w	r0, [sp]
    4156:	a901      	add	r1, sp, #4
    4158:	4668      	mov	r0, sp
    415a:	f00c fb24 	bl	107a6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    415e:	2800      	cmp	r0, #0
    4160:	d0f5      	beq.n	414e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4162:	219b      	movs	r1, #155	; 0x9b
    4164:	2008      	movs	r0, #8
    4166:	f7ff feeb 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    416a:	0000      	.short	0x0000
    416c:	20000d9c 	.word	0x20000d9c
    4170:	20000c94 	.word	0x20000c94
    4174:	b570      	push	{r4, r5, r6, lr}
    4176:	460c      	mov	r4, r1
    4178:	4605      	mov	r5, r0
    417a:	f000 f84b 	bl	4214 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    417e:	2800      	cmp	r0, #0
    4180:	d002      	beq.n	4188 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    4182:	2d3e      	cmp	r5, #62	; 0x3e
    4184:	d001      	beq.n	418a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xee>
    4186:	2001      	movs	r0, #1
    4188:	bd70      	pop	{r4, r5, r6, pc}
    418a:	2c12      	cmp	r4, #18
    418c:	d106      	bne.n	419c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x100>
    418e:	4806      	ldr	r0, [pc, #24]	; (41a8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>)
    4190:	7801      	ldrb	r1, [r0, #0]
    4192:	2902      	cmp	r1, #2
    4194:	d002      	beq.n	419c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x100>
    4196:	7840      	ldrb	r0, [r0, #1]
    4198:	2800      	cmp	r0, #0
    419a:	d0f5      	beq.n	4188 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    419c:	4620      	mov	r0, r4
    419e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    41a2:	f000 b853 	b.w	424c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    41a6:	0000      	.short	0x0000
    41a8:	20000307 	.word	0x20000307

000041ac <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>:
    41ac:	4901      	ldr	r1, [pc, #4]	; (41b4 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x8>)
    41ae:	7048      	strb	r0, [r1, #1]
    41b0:	4770      	bx	lr
    41b2:	0000      	.short	0x0000
    41b4:	20000307 	.word	0x20000307
    41b8:	b570      	push	{r4, r5, r6, lr}
    41ba:	780a      	ldrb	r2, [r1, #0]
    41bc:	7082      	strb	r2, [r0, #2]
    41be:	b33a      	cbz	r2, 4210 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
    41c0:	2a01      	cmp	r2, #1
    41c2:	d825      	bhi.n	4210 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
    41c4:	2313      	movs	r3, #19
    41c6:	7003      	strb	r3, [r0, #0]
    41c8:	2300      	movs	r3, #0
    41ca:	e00a      	b.n	41e2 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x36>
    41cc:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    41d0:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    41d4:	78a6      	ldrb	r6, [r4, #2]
    41d6:	70ee      	strb	r6, [r5, #3]
    41d8:	8864      	ldrh	r4, [r4, #2]
    41da:	0a24      	lsrs	r4, r4, #8
    41dc:	1c5b      	adds	r3, r3, #1
    41de:	712c      	strb	r4, [r5, #4]
    41e0:	b2db      	uxtb	r3, r3
    41e2:	4293      	cmp	r3, r2
    41e4:	d3f2      	bcc.n	41cc <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x20>
    41e6:	2300      	movs	r3, #0
    41e8:	e00b      	b.n	4202 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x56>
    41ea:	bf00      	nop
    41ec:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    41f0:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    41f4:	792e      	ldrb	r6, [r5, #4]
    41f6:	7166      	strb	r6, [r4, #5]
    41f8:	88ad      	ldrh	r5, [r5, #4]
    41fa:	0a2d      	lsrs	r5, r5, #8
    41fc:	1c5b      	adds	r3, r3, #1
    41fe:	71a5      	strb	r5, [r4, #6]
    4200:	b2db      	uxtb	r3, r3
    4202:	4293      	cmp	r3, r2
    4204:	d3f2      	bcc.n	41ec <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x40>
    4206:	2101      	movs	r1, #1
    4208:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    420c:	b2c0      	uxtb	r0, r0
    420e:	bd70      	pop	{r4, r5, r6, pc}
    4210:	2000      	movs	r0, #0
    4212:	bd70      	pop	{r4, r5, r6, pc}

00004214 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4214:	2101      	movs	r1, #1
    4216:	4a0c      	ldr	r2, [pc, #48]	; (4248 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    4218:	2840      	cmp	r0, #64	; 0x40
    421a:	d20c      	bcs.n	4236 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    421c:	2820      	cmp	r0, #32
    421e:	d803      	bhi.n	4228 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    4220:	1e40      	subs	r0, r0, #1
    4222:	4081      	lsls	r1, r0
    4224:	6810      	ldr	r0, [r2, #0]
    4226:	e002      	b.n	422e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4228:	3821      	subs	r0, #33	; 0x21
    422a:	4081      	lsls	r1, r0
    422c:	6850      	ldr	r0, [r2, #4]
    422e:	4201      	tst	r1, r0
    4230:	d107      	bne.n	4242 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4232:	2000      	movs	r0, #0
    4234:	4770      	bx	lr
    4236:	28ff      	cmp	r0, #255	; 0xff
    4238:	d003      	beq.n	4242 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    423a:	3840      	subs	r0, #64	; 0x40
    423c:	4081      	lsls	r1, r0
    423e:	6890      	ldr	r0, [r2, #8]
    4240:	e7f5      	b.n	422e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4242:	2001      	movs	r0, #1
    4244:	4770      	bx	lr
    4246:	0000      	.short	0x0000
    4248:	2000007c 	.word	0x2000007c

0000424c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    424c:	2101      	movs	r1, #1
    424e:	1e40      	subs	r0, r0, #1
    4250:	4081      	lsls	r1, r0
    4252:	4804      	ldr	r0, [pc, #16]	; (4264 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    4254:	68c0      	ldr	r0, [r0, #12]
    4256:	4201      	tst	r1, r0
    4258:	d001      	beq.n	425e <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    425a:	2001      	movs	r0, #1
    425c:	4770      	bx	lr
    425e:	2000      	movs	r0, #0
    4260:	4770      	bx	lr
    4262:	0000      	.short	0x0000
    4264:	2000007c 	.word	0x2000007c

00004268 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4268:	4901      	ldr	r1, [pc, #4]	; (4270 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    426a:	6800      	ldr	r0, [r0, #0]
    426c:	60c8      	str	r0, [r1, #12]
    426e:	4770      	bx	lr
    4270:	2000007c 	.word	0x2000007c

00004274 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    4274:	4904      	ldr	r1, [pc, #16]	; (4288 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    4276:	6802      	ldr	r2, [r0, #0]
    4278:	6840      	ldr	r0, [r0, #4]
    427a:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    427e:	600a      	str	r2, [r1, #0]
    4280:	4a02      	ldr	r2, [pc, #8]	; (428c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    4282:	4310      	orrs	r0, r2
    4284:	6048      	str	r0, [r1, #4]
    4286:	4770      	bx	lr
    4288:	2000007c 	.word	0x2000007c
    428c:	024007f8 	.word	0x024007f8

00004290 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4290:	4805      	ldr	r0, [pc, #20]	; (42a8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    4292:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4296:	6001      	str	r1, [r0, #0]
    4298:	0cc9      	lsrs	r1, r1, #19
    429a:	6041      	str	r1, [r0, #4]
    429c:	2100      	movs	r1, #0
    429e:	6081      	str	r1, [r0, #8]
    42a0:	211f      	movs	r1, #31
    42a2:	60c1      	str	r1, [r0, #12]
    42a4:	4770      	bx	lr
    42a6:	0000      	.short	0x0000
    42a8:	2000007c 	.word	0x2000007c

000042ac <sdc_hci_cmd_cb_reset>:
    42ac:	b510      	push	{r4, lr}
    42ae:	f7ff ffef 	bl	4290 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    42b2:	2000      	movs	r0, #0
    42b4:	f7ff ff7a 	bl	41ac <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>
    42b8:	f00f f905 	bl	134c6 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    42bc:	4604      	mov	r4, r0
    42be:	4803      	ldr	r0, [pc, #12]	; (42cc <sdc_hci_cmd_cb_reset+0x20>)
    42c0:	6800      	ldr	r0, [r0, #0]
    42c2:	b100      	cbz	r0, 42c6 <sdc_hci_cmd_cb_reset+0x1a>
    42c4:	4780      	blx	r0
    42c6:	4620      	mov	r0, r4
    42c8:	bd10      	pop	{r4, pc}
    42ca:	0000      	.short	0x0000
    42cc:	2000008c 	.word	0x2000008c

000042d0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    42d0:	4901      	ldr	r1, [pc, #4]	; (42d8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    42d2:	6008      	str	r0, [r1, #0]
    42d4:	4770      	bx	lr
    42d6:	0000      	.short	0x0000
    42d8:	2000008c 	.word	0x2000008c

000042dc <sdc_hci_cmd_vs_zephyr_read_version_info>:
    42dc:	2102      	movs	r1, #2
    42de:	8001      	strh	r1, [r0, #0]
    42e0:	8041      	strh	r1, [r0, #2]
    42e2:	2100      	movs	r1, #0
    42e4:	7101      	strb	r1, [r0, #4]
    42e6:	210e      	movs	r1, #14
    42e8:	7141      	strb	r1, [r0, #5]
    42ea:	f24c 51e7 	movw	r1, #50663	; 0xc5e7
    42ee:	80c1      	strh	r1, [r0, #6]
    42f0:	4901      	ldr	r1, [pc, #4]	; (42f8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    42f2:	6081      	str	r1, [r0, #8]
    42f4:	2000      	movs	r0, #0
    42f6:	4770      	bx	lr
    42f8:	3c186766 	.word	0x3c186766

000042fc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    42fc:	b510      	push	{r4, lr}
    42fe:	2805      	cmp	r0, #5
    4300:	d304      	bcc.n	430c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    4302:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    4306:	2017      	movs	r0, #23
    4308:	f7ff fe1a 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    430c:	4901      	ldr	r1, [pc, #4]	; (4314 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    430e:	5c08      	ldrb	r0, [r1, r0]
    4310:	bd10      	pop	{r4, pc}
    4312:	0000      	.short	0x0000
    4314:	20000ea0 	.word	0x20000ea0

00004318 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    4318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    431a:	4604      	mov	r4, r0
    431c:	788a      	ldrb	r2, [r1, #2]
    431e:	7848      	ldrb	r0, [r1, #1]
    4320:	4402      	add	r2, r0
    4322:	2aff      	cmp	r2, #255	; 0xff
    4324:	d902      	bls.n	432c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x14>
    4326:	f240 115f 	movw	r1, #351	; 0x15f
    432a:	e01d      	b.n	4368 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x50>
    432c:	780a      	ldrb	r2, [r1, #0]
    432e:	4282      	cmp	r2, r0
    4330:	d902      	bls.n	4338 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x20>
    4332:	f240 1163 	movw	r1, #355	; 0x163
    4336:	e017      	b.n	4368 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x50>
    4338:	9400      	str	r4, [sp, #0]
    433a:	b1c4      	cbz	r4, 436e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x56>
    433c:	2600      	movs	r6, #0
    433e:	784b      	ldrb	r3, [r1, #1]
    4340:	f891 c002 	ldrb.w	ip, [r1, #2]
    4344:	794a      	ldrb	r2, [r1, #5]
    4346:	eb0c 0003 	add.w	r0, ip, r3
    434a:	b2c5      	uxtb	r5, r0
    434c:	42aa      	cmp	r2, r5
    434e:	d900      	bls.n	4352 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3a>
    4350:	4615      	mov	r5, r2
    4352:	78c8      	ldrb	r0, [r1, #3]
    4354:	42a8      	cmp	r0, r5
    4356:	d900      	bls.n	435a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x42>
    4358:	4605      	mov	r5, r0
    435a:	1ce7      	adds	r7, r4, #3
    435c:	f027 0703 	bic.w	r7, r7, #3
    4360:	42a7      	cmp	r7, r4
    4362:	d006      	beq.n	4372 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5a>
    4364:	f240 1179 	movw	r1, #377	; 0x179
    4368:	2017      	movs	r0, #23
    436a:	f7ff fde9 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    436e:	2601      	movs	r6, #1
    4370:	e7e5      	b.n	433e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x26>
    4372:	4f15      	ldr	r7, [pc, #84]	; (43c8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xb0>)
    4374:	703b      	strb	r3, [r7, #0]
    4376:	f887 c001 	strb.w	ip, [r7, #1]
    437a:	70b8      	strb	r0, [r7, #2]
    437c:	7908      	ldrb	r0, [r1, #4]
    437e:	70f8      	strb	r0, [r7, #3]
    4380:	713a      	strb	r2, [r7, #4]
    4382:	4631      	mov	r1, r6
    4384:	4668      	mov	r0, sp
    4386:	f000 f90f 	bl	45a8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    438a:	2100      	movs	r1, #0
    438c:	468c      	mov	ip, r1
    438e:	9800      	ldr	r0, [sp, #0]
    4390:	1cc0      	adds	r0, r0, #3
    4392:	f020 0003 	bic.w	r0, r0, #3
    4396:	9000      	str	r0, [sp, #0]
    4398:	b95e      	cbnz	r6, 43b2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x9a>
    439a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
    439e:	61d8      	str	r0, [r3, #28]
    43a0:	2000      	movs	r0, #0
    43a2:	e004      	b.n	43ae <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x96>
    43a4:	69da      	ldr	r2, [r3, #28]
    43a6:	f842 c020 	str.w	ip, [r2, r0, lsl #2]
    43aa:	1c40      	adds	r0, r0, #1
    43ac:	b2c0      	uxtb	r0, r0
    43ae:	42a8      	cmp	r0, r5
    43b0:	d3f8      	bcc.n	43a4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x8c>
    43b2:	9800      	ldr	r0, [sp, #0]
    43b4:	1c49      	adds	r1, r1, #1
    43b6:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    43ba:	b2c9      	uxtb	r1, r1
    43bc:	9000      	str	r0, [sp, #0]
    43be:	2905      	cmp	r1, #5
    43c0:	d3e5      	bcc.n	438e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x76>
    43c2:	1b00      	subs	r0, r0, r4
    43c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43c6:	0000      	.short	0x0000
    43c8:	20000ea0 	.word	0x20000ea0

000043cc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    43cc:	b570      	push	{r4, r5, r6, lr}
    43ce:	4604      	mov	r4, r0
    43d0:	f00c fe86 	bl	110e0 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    43d4:	b108      	cbz	r0, 43da <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    43d6:	2010      	movs	r0, #16
    43d8:	bd70      	pop	{r4, r5, r6, pc}
    43da:	7825      	ldrb	r5, [r4, #0]
    43dc:	f000 f920 	bl	4620 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    43e0:	4602      	mov	r2, r0
    43e2:	480c      	ldr	r0, [pc, #48]	; (4414 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    43e4:	8861      	ldrh	r1, [r4, #2]
    43e6:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    43ea:	e00e      	b.n	440a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    43ec:	69c3      	ldr	r3, [r0, #28]
    43ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    43f2:	b143      	cbz	r3, 4406 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    43f4:	1c4a      	adds	r2, r1, #1
    43f6:	8062      	strh	r2, [r4, #2]
    43f8:	80a1      	strh	r1, [r4, #4]
    43fa:	69c0      	ldr	r0, [r0, #28]
    43fc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4400:	60a0      	str	r0, [r4, #8]
    4402:	2000      	movs	r0, #0
    4404:	bd70      	pop	{r4, r5, r6, pc}
    4406:	1c49      	adds	r1, r1, #1
    4408:	b289      	uxth	r1, r1
    440a:	4291      	cmp	r1, r2
    440c:	d3ee      	bcc.n	43ec <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    440e:	8061      	strh	r1, [r4, #2]
    4410:	2005      	movs	r0, #5
    4412:	bd70      	pop	{r4, r5, r6, pc}
    4414:	20000ea0 	.word	0x20000ea0

00004418 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    441c:	4607      	mov	r7, r0
    441e:	b111      	cbz	r1, 4426 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    4420:	2000      	movs	r0, #0
    4422:	b938      	cbnz	r0, 4434 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1c>
    4424:	e001      	b.n	442a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x12>
    4426:	2001      	movs	r0, #1
    4428:	e7fb      	b.n	4422 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    442a:	2901      	cmp	r1, #1
    442c:	d002      	beq.n	4434 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1c>
    442e:	2000      	movs	r0, #0
    4430:	b938      	cbnz	r0, 4442 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x2a>
    4432:	e001      	b.n	4438 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    4434:	2001      	movs	r0, #1
    4436:	e7fb      	b.n	4430 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x18>
    4438:	2902      	cmp	r1, #2
    443a:	d002      	beq.n	4442 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x2a>
    443c:	2000      	movs	r0, #0
    443e:	b938      	cbnz	r0, 4450 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x38>
    4440:	e001      	b.n	4446 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x2e>
    4442:	2001      	movs	r0, #1
    4444:	e7fb      	b.n	443e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x26>
    4446:	2903      	cmp	r1, #3
    4448:	d002      	beq.n	4450 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x38>
    444a:	2000      	movs	r0, #0
    444c:	b960      	cbnz	r0, 4468 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    444e:	e001      	b.n	4454 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    4450:	2001      	movs	r0, #1
    4452:	e7fb      	b.n	444c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x34>
    4454:	2904      	cmp	r1, #4
    4456:	d007      	beq.n	4468 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    4458:	2000      	movs	r0, #0
    445a:	2800      	cmp	r0, #0
    445c:	d01f      	beq.n	449e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x86>
    445e:	2400      	movs	r4, #0
    4460:	4812      	ldr	r0, [pc, #72]	; (44ac <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x94>)
    4462:	2901      	cmp	r1, #1
    4464:	d002      	beq.n	446c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x54>
    4466:	e002      	b.n	446e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x56>
    4468:	2001      	movs	r0, #1
    446a:	e7f6      	b.n	445a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x42>
    446c:	7804      	ldrb	r4, [r0, #0]
    446e:	2300      	movs	r3, #0
    4470:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4474:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
    4478:	f810 e001 	ldrb.w	lr, [r0, r1]
    447c:	e008      	b.n	4490 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x78>
    447e:	1918      	adds	r0, r3, r4
    4480:	f8dc 501c 	ldr.w	r5, [ip, #28]
    4484:	b280      	uxth	r0, r0
    4486:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
    448a:	b125      	cbz	r5, 4496 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x7e>
    448c:	1c5b      	adds	r3, r3, #1
    448e:	b29b      	uxth	r3, r3
    4490:	459e      	cmp	lr, r3
    4492:	d8f4      	bhi.n	447e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x66>
    4494:	4630      	mov	r0, r6
    4496:	8038      	strh	r0, [r7, #0]
    4498:	42b0      	cmp	r0, r6
    449a:	d102      	bne.n	44a2 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x8a>
    449c:	2000      	movs	r0, #0
    449e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    44a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    44a6:	f000 b835 	b.w	4514 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    44aa:	0000      	.short	0x0000
    44ac:	20000ea0 	.word	0x20000ea0

000044b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    44b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44b4:	4607      	mov	r7, r0
    44b6:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    44ba:	460c      	mov	r4, r1
    44bc:	f243 0602 	movw	r6, #12290	; 0x3002
    44c0:	38ff      	subs	r0, #255	; 0xff
    44c2:	d020      	beq.n	4506 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    44c4:	2c05      	cmp	r4, #5
    44c6:	d302      	bcc.n	44ce <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    44c8:	2007      	movs	r0, #7
    44ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    44ce:	4638      	mov	r0, r7
    44d0:	f000 f85a 	bl	4588 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    44d4:	0005      	movs	r5, r0
    44d6:	d016      	beq.n	4506 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    44d8:	480c      	ldr	r0, [pc, #48]	; (450c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    44da:	4629      	mov	r1, r5
    44dc:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    44e0:	4638      	mov	r0, r7
    44e2:	4790      	blx	r2
    44e4:	480a      	ldr	r0, [pc, #40]	; (4510 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    44e6:	2100      	movs	r1, #0
    44e8:	eb00 0684 	add.w	r6, r0, r4, lsl #2
    44ec:	69f0      	ldr	r0, [r6, #28]
    44ee:	f840 1027 	str.w	r1, [r0, r7, lsl #2]
    44f2:	4620      	mov	r0, r4
    44f4:	f000 f88a 	bl	460c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    44f8:	4602      	mov	r2, r0
    44fa:	4629      	mov	r1, r5
    44fc:	68b0      	ldr	r0, [r6, #8]
    44fe:	f00c fc27 	bl	10d50 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4502:	2000      	movs	r0, #0
    4504:	e7e1      	b.n	44ca <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4506:	4630      	mov	r0, r6
    4508:	e7df      	b.n	44ca <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    450a:	0000      	.short	0x0000
    450c:	0000465c 	.word	0x0000465c
    4510:	20000ea0 	.word	0x20000ea0
    4514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4518:	4690      	mov	r8, r2
    451a:	460e      	mov	r6, r1
    451c:	4607      	mov	r7, r0
    451e:	f00c fc63 	bl	10de8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    4522:	b148      	cbz	r0, 4538 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    4524:	4816      	ldr	r0, [pc, #88]	; (4580 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    4526:	eb00 0486 	add.w	r4, r0, r6, lsl #2
    452a:	69e0      	ldr	r0, [r4, #28]
    452c:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    4530:	b128      	cbz	r0, 453e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    4532:	f44f 719d 	mov.w	r1, #314	; 0x13a
    4536:	e015      	b.n	4564 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4538:	f240 1139 	movw	r1, #313	; 0x139
    453c:	e012      	b.n	4564 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    453e:	68a0      	ldr	r0, [r4, #8]
    4540:	2800      	cmp	r0, #0
    4542:	d01a      	beq.n	457a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    4544:	4630      	mov	r0, r6
    4546:	f000 f861 	bl	460c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    454a:	4601      	mov	r1, r0
    454c:	68a0      	ldr	r0, [r4, #8]
    454e:	f00c fbb1 	bl	10cb4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4552:	0005      	movs	r5, r0
    4554:	d010      	beq.n	4578 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    4556:	69e0      	ldr	r0, [r4, #28]
    4558:	2e05      	cmp	r6, #5
    455a:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
    455e:	d304      	bcc.n	456a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    4560:	f240 1145 	movw	r1, #325	; 0x145
    4564:	2017      	movs	r0, #23
    4566:	f7ff fceb 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    456a:	4806      	ldr	r0, [pc, #24]	; (4584 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    456c:	4642      	mov	r2, r8
    456e:	4629      	mov	r1, r5
    4570:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
    4574:	4638      	mov	r0, r7
    4576:	4798      	blx	r3
    4578:	4628      	mov	r0, r5
    457a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    457e:	0000      	.short	0x0000
    4580:	20000ea0 	.word	0x20000ea0
    4584:	00004648 	.word	0x00004648
    4588:	b570      	push	{r4, r5, r6, lr}
    458a:	460c      	mov	r4, r1
    458c:	4605      	mov	r5, r0
    458e:	f00c fc2b 	bl	10de8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    4592:	2800      	cmp	r0, #0
    4594:	d005      	beq.n	45a2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    4596:	4803      	ldr	r0, [pc, #12]	; (45a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    4598:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    459c:	69c0      	ldr	r0, [r0, #28]
    459e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    45a2:	bd70      	pop	{r4, r5, r6, pc}
    45a4:	20000ea0 	.word	0x20000ea0
    45a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    45ac:	4f16      	ldr	r7, [pc, #88]	; (4608 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    45ae:	4688      	mov	r8, r1
    45b0:	4605      	mov	r5, r0
    45b2:	2400      	movs	r4, #0
    45b4:	6828      	ldr	r0, [r5, #0]
    45b6:	1cc0      	adds	r0, r0, #3
    45b8:	f020 0003 	bic.w	r0, r0, #3
    45bc:	6028      	str	r0, [r5, #0]
    45be:	4620      	mov	r0, r4
    45c0:	f000 f824 	bl	460c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    45c4:	5d39      	ldrb	r1, [r7, r4]
    45c6:	4341      	muls	r1, r0
    45c8:	f1b8 0f00 	cmp.w	r8, #0
    45cc:	d001      	beq.n	45d2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    45ce:	2000      	movs	r0, #0
    45d0:	e000      	b.n	45d4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    45d2:	6828      	ldr	r0, [r5, #0]
    45d4:	9000      	str	r0, [sp, #0]
    45d6:	b118      	cbz	r0, 45e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    45d8:	2600      	movs	r6, #0
    45da:	b11e      	cbz	r6, 45e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x134>
    45dc:	2000      	movs	r0, #0
    45de:	e002      	b.n	45e6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x136>
    45e0:	2601      	movs	r6, #1
    45e2:	e7fa      	b.n	45da <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12a>
    45e4:	4668      	mov	r0, sp
    45e6:	f00c fb92 	bl	10d0e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    45ea:	b91e      	cbnz	r6, 45f4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x144>
    45ec:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    45f0:	9a00      	ldr	r2, [sp, #0]
    45f2:	608a      	str	r2, [r1, #8]
    45f4:	6829      	ldr	r1, [r5, #0]
    45f6:	1c64      	adds	r4, r4, #1
    45f8:	4408      	add	r0, r1
    45fa:	b2e4      	uxtb	r4, r4
    45fc:	6028      	str	r0, [r5, #0]
    45fe:	2c05      	cmp	r4, #5
    4600:	d3d8      	bcc.n	45b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    4602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4606:	0000      	.short	0x0000
    4608:	20000ea0 	.word	0x20000ea0
    460c:	4903      	ldr	r1, [pc, #12]	; (461c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    460e:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4612:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4616:	1cc0      	adds	r0, r0, #3
    4618:	4008      	ands	r0, r1
    461a:	4770      	bx	lr
    461c:	00004670 	.word	0x00004670
    4620:	4b08      	ldr	r3, [pc, #32]	; (4644 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x194>)
    4622:	7818      	ldrb	r0, [r3, #0]
    4624:	7859      	ldrb	r1, [r3, #1]
    4626:	4408      	add	r0, r1
    4628:	b2c1      	uxtb	r1, r0
    462a:	7898      	ldrb	r0, [r3, #2]
    462c:	4281      	cmp	r1, r0
    462e:	d300      	bcc.n	4632 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x182>
    4630:	4608      	mov	r0, r1
    4632:	78da      	ldrb	r2, [r3, #3]
    4634:	4290      	cmp	r0, r2
    4636:	d200      	bcs.n	463a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x18a>
    4638:	4610      	mov	r0, r2
    463a:	7919      	ldrb	r1, [r3, #4]
    463c:	4288      	cmp	r0, r1
    463e:	d200      	bcs.n	4642 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x192>
    4640:	4608      	mov	r0, r1
    4642:	4770      	bx	lr
    4644:	20000ea0 	.word	0x20000ea0
    4648:	00010dfd 	.word	0x00010dfd
    464c:	00010dfd 	.word	0x00010dfd
    4650:	00010dfd 	.word	0x00010dfd
    4654:	00010dfd 	.word	0x00010dfd
    4658:	00010dfd 	.word	0x00010dfd
    465c:	00012933 	.word	0x00012933
    4660:	000125d5 	.word	0x000125d5
    4664:	00011d0d 	.word	0x00011d0d
    4668:	00013d01 	.word	0x00013d01
    466c:	00013d07 	.word	0x00013d07
    4670:	022801e0 	.word	0x022801e0
    4674:	0070010c 	.word	0x0070010c
    4678:	00000060 	.word	0x00000060

0000467c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    467c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4680:	4c26      	ldr	r4, [pc, #152]	; (471c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    4682:	4680      	mov	r8, r0
    4684:	b081      	sub	sp, #4
    4686:	6820      	ldr	r0, [r4, #0]
    4688:	469a      	mov	sl, r3
    468a:	4693      	mov	fp, r2
    468c:	b158      	cbz	r0, 46a6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    468e:	7a02      	ldrb	r2, [r0, #8]
    4690:	4542      	cmp	r2, r8
    4692:	d903      	bls.n	469c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    4694:	6841      	ldr	r1, [r0, #4]
    4696:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    469a:	b140      	cbz	r0, 46ae <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    469c:	f243 0002 	movw	r0, #12290	; 0x3002
    46a0:	b005      	add	sp, #20
    46a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46a6:	21a5      	movs	r1, #165	; 0xa5
    46a8:	2018      	movs	r0, #24
    46aa:	f7ff fc49 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46ae:	4619      	mov	r1, r3
    46b0:	9802      	ldr	r0, [sp, #8]
    46b2:	f00c fbbb 	bl	10e2c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    46b6:	b287      	uxth	r7, r0
    46b8:	4658      	mov	r0, fp
    46ba:	990e      	ldr	r1, [sp, #56]	; 0x38
    46bc:	f00c fbad 	bl	10e1a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    46c0:	b286      	uxth	r6, r0
    46c2:	19b8      	adds	r0, r7, r6
    46c4:	1d00      	adds	r0, r0, #4
    46c6:	b285      	uxth	r5, r0
    46c8:	6820      	ldr	r0, [r4, #0]
    46ca:	46a1      	mov	r9, r4
    46cc:	4629      	mov	r1, r5
    46ce:	6800      	ldr	r0, [r0, #0]
    46d0:	f00c faf0 	bl	10cb4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    46d4:	0004      	movs	r4, r0
    46d6:	d01f      	beq.n	4718 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    46d8:	8065      	strh	r5, [r4, #2]
    46da:	8026      	strh	r6, [r4, #0]
    46dc:	980e      	ldr	r0, [sp, #56]	; 0x38
    46de:	1d25      	adds	r5, r4, #4
    46e0:	9000      	str	r0, [sp, #0]
    46e2:	4631      	mov	r1, r6
    46e4:	465a      	mov	r2, fp
    46e6:	2301      	movs	r3, #1
    46e8:	4628      	mov	r0, r5
    46ea:	f00c fa3c 	bl	10b66 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    46ee:	8820      	ldrh	r0, [r4, #0]
    46f0:	4639      	mov	r1, r7
    46f2:	4428      	add	r0, r5
    46f4:	2301      	movs	r3, #1
    46f6:	9a02      	ldr	r2, [sp, #8]
    46f8:	f8cd a000 	str.w	sl, [sp]
    46fc:	f00c fa33 	bl	10b66 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4700:	8820      	ldrh	r0, [r4, #0]
    4702:	1941      	adds	r1, r0, r5
    4704:	4628      	mov	r0, r5
    4706:	f00c fa61 	bl	10bcc <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    470a:	f8d9 0000 	ldr.w	r0, [r9]
    470e:	6841      	ldr	r1, [r0, #4]
    4710:	2000      	movs	r0, #0
    4712:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    4716:	e7c3      	b.n	46a0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4718:	2004      	movs	r0, #4
    471a:	e7c1      	b.n	46a0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    471c:	20000090 	.word	0x20000090

00004720 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4720:	b570      	push	{r4, r5, r6, lr}
    4722:	4c14      	ldr	r4, [pc, #80]	; (4774 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4724:	6823      	ldr	r3, [r4, #0]
    4726:	b18b      	cbz	r3, 474c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4728:	7a19      	ldrb	r1, [r3, #8]
    472a:	4281      	cmp	r1, r0
    472c:	d912      	bls.n	4754 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    472e:	685a      	ldr	r2, [r3, #4]
    4730:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4734:	b171      	cbz	r1, 4754 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4736:	2500      	movs	r5, #0
    4738:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    473c:	884a      	ldrh	r2, [r1, #2]
    473e:	6818      	ldr	r0, [r3, #0]
    4740:	f00c fb06 	bl	10d50 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4744:	6821      	ldr	r1, [r4, #0]
    4746:	2000      	movs	r0, #0
    4748:	7a0a      	ldrb	r2, [r1, #8]
    474a:	e00c      	b.n	4766 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    474c:	21c8      	movs	r1, #200	; 0xc8
    474e:	2018      	movs	r0, #24
    4750:	f7ff fbf6 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4754:	f243 0002 	movw	r0, #12290	; 0x3002
    4758:	bd70      	pop	{r4, r5, r6, pc}
    475a:	684b      	ldr	r3, [r1, #4]
    475c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4760:	b933      	cbnz	r3, 4770 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    4762:	1c40      	adds	r0, r0, #1
    4764:	b2c0      	uxtb	r0, r0
    4766:	4282      	cmp	r2, r0
    4768:	d8f7      	bhi.n	475a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    476a:	6808      	ldr	r0, [r1, #0]
    476c:	f00c fae5 	bl	10d3a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    4770:	2000      	movs	r0, #0
    4772:	bd70      	pop	{r4, r5, r6, pc}
    4774:	20000090 	.word	0x20000090

00004778 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    477c:	460d      	mov	r5, r1
    477e:	0004      	movs	r4, r0
    4780:	4690      	mov	r8, r2
    4782:	f04f 0600 	mov.w	r6, #0
    4786:	d009      	beq.n	479c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    4788:	2700      	movs	r7, #0
    478a:	1ce0      	adds	r0, r4, #3
    478c:	f020 0003 	bic.w	r0, r0, #3
    4790:	42a0      	cmp	r0, r4
    4792:	d005      	beq.n	47a0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    4794:	2186      	movs	r1, #134	; 0x86
    4796:	2018      	movs	r0, #24
    4798:	f7ff fbd2 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    479c:	2701      	movs	r7, #1
    479e:	e7f4      	b.n	478a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    47a0:	b1cd      	cbz	r5, 47d6 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    47a2:	4611      	mov	r1, r2
    47a4:	2000      	movs	r0, #0
    47a6:	f00c fab2 	bl	10d0e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    47aa:	300c      	adds	r0, #12
    47ac:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    47b0:	b98f      	cbnz	r7, 47d6 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    47b2:	4f0a      	ldr	r7, [pc, #40]	; (47dc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    47b4:	f104 000c 	add.w	r0, r4, #12
    47b8:	00aa      	lsls	r2, r5, #2
    47ba:	603c      	str	r4, [r7, #0]
    47bc:	7225      	strb	r5, [r4, #8]
    47be:	6060      	str	r0, [r4, #4]
    47c0:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    47c4:	6020      	str	r0, [r4, #0]
    47c6:	2100      	movs	r1, #0
    47c8:	6860      	ldr	r0, [r4, #4]
    47ca:	f00b fb8d 	bl	fee8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    47ce:	4641      	mov	r1, r8
    47d0:	6838      	ldr	r0, [r7, #0]
    47d2:	f00c fa9c 	bl	10d0e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    47d6:	4630      	mov	r0, r6
    47d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    47dc:	20000090 	.word	0x20000090

000047e0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    47e0:	4909      	ldr	r1, [pc, #36]	; (4808 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    47e2:	b510      	push	{r4, lr}
    47e4:	4602      	mov	r2, r0
    47e6:	6809      	ldr	r1, [r1, #0]
    47e8:	2000      	movs	r0, #0
    47ea:	b149      	cbz	r1, 4800 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    47ec:	7a0b      	ldrb	r3, [r1, #8]
    47ee:	4293      	cmp	r3, r2
    47f0:	d905      	bls.n	47fe <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    47f2:	6849      	ldr	r1, [r1, #4]
    47f4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    47f8:	2900      	cmp	r1, #0
    47fa:	d000      	beq.n	47fe <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    47fc:	1d08      	adds	r0, r1, #4
    47fe:	bd10      	pop	{r4, pc}
    4800:	21ee      	movs	r1, #238	; 0xee
    4802:	2018      	movs	r0, #24
    4804:	f7ff fb9c 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4808:	20000090 	.word	0x20000090

0000480c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    480c:	490a      	ldr	r1, [pc, #40]	; (4838 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    480e:	b510      	push	{r4, lr}
    4810:	4602      	mov	r2, r0
    4812:	6809      	ldr	r1, [r1, #0]
    4814:	2000      	movs	r0, #0
    4816:	b159      	cbz	r1, 4830 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4818:	7a0b      	ldrb	r3, [r1, #8]
    481a:	4293      	cmp	r3, r2
    481c:	d907      	bls.n	482e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    481e:	6849      	ldr	r1, [r1, #4]
    4820:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4824:	2900      	cmp	r1, #0
    4826:	d002      	beq.n	482e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4828:	f831 0b04 	ldrh.w	r0, [r1], #4
    482c:	4408      	add	r0, r1
    482e:	bd10      	pop	{r4, pc}
    4830:	21fc      	movs	r1, #252	; 0xfc
    4832:	2018      	movs	r0, #24
    4834:	f7ff fb84 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4838:	20000090 	.word	0x20000090
    483c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4840:	4e1c      	ldr	r6, [pc, #112]	; (48b4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xa8>)
    4842:	6845      	ldr	r5, [r0, #4]
    4844:	4604      	mov	r4, r0
    4846:	2200      	movs	r2, #0
    4848:	b1a1      	cbz	r1, 4874 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x68>
    484a:	2001      	movs	r0, #1
    484c:	7060      	strb	r0, [r4, #1]
    484e:	8870      	ldrh	r0, [r6, #2]
    4850:	0883      	lsrs	r3, r0, #2
    4852:	2000      	movs	r0, #0
    4854:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    4858:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    485c:	830a      	strh	r2, [r1, #24]
    485e:	840b      	strh	r3, [r1, #32]
    4860:	fb00 5103 	mla	r1, r0, r3, r5
    4864:	6071      	str	r1, [r6, #4]
    4866:	1821      	adds	r1, r4, r0
    4868:	1c40      	adds	r0, r0, #1
    486a:	750a      	strb	r2, [r1, #20]
    486c:	2804      	cmp	r0, #4
    486e:	d3f1      	bcc.n	4854 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    4870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4874:	7062      	strb	r2, [r4, #1]
    4876:	2000      	movs	r0, #0
    4878:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    487c:	830a      	strh	r2, [r1, #24]
    487e:	840a      	strh	r2, [r1, #32]
    4880:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    4884:	604a      	str	r2, [r1, #4]
    4886:	1821      	adds	r1, r4, r0
    4888:	1c40      	adds	r0, r0, #1
    488a:	750a      	strb	r2, [r1, #20]
    488c:	2804      	cmp	r0, #4
    488e:	d3f3      	bcc.n	4878 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    4890:	8870      	ldrh	r0, [r6, #2]
    4892:	f00c fb49 	bl	10f28 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x12a>
    4896:	4607      	mov	r7, r0
    4898:	8870      	ldrh	r0, [r6, #2]
    489a:	f00c fb4c 	bl	10f36 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x138>
    489e:	6065      	str	r5, [r4, #4]
    48a0:	8420      	strh	r0, [r4, #32]
    48a2:	1829      	adds	r1, r5, r0
    48a4:	60a1      	str	r1, [r4, #8]
    48a6:	8467      	strh	r7, [r4, #34]	; 0x22
    48a8:	60e5      	str	r5, [r4, #12]
    48aa:	84a0      	strh	r0, [r4, #36]	; 0x24
    48ac:	6121      	str	r1, [r4, #16]
    48ae:	84e7      	strh	r7, [r4, #38]	; 0x26
    48b0:	e7de      	b.n	4870 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x64>
    48b2:	0000      	.short	0x0000
    48b4:	20000094 	.word	0x20000094

000048b8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    48b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    48bc:	b180      	cbz	r0, 48e0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
    48be:	2600      	movs	r6, #0
    48c0:	4411      	add	r1, r2
    48c2:	b2cf      	uxtb	r7, r1
    48c4:	f8df 809c 	ldr.w	r8, [pc, #156]	; 4964 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xac>
    48c8:	1cc1      	adds	r1, r0, #3
    48ca:	2400      	movs	r4, #0
    48cc:	f021 0103 	bic.w	r1, r1, #3
    48d0:	f888 7000 	strb.w	r7, [r8]
    48d4:	4281      	cmp	r1, r0
    48d6:	d005      	beq.n	48e4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x2c>
    48d8:	214e      	movs	r1, #78	; 0x4e
    48da:	2009      	movs	r0, #9
    48dc:	f7ff fb30 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48e0:	2601      	movs	r6, #1
    48e2:	e7ed      	b.n	48c0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    48e4:	2b1f      	cmp	r3, #31
    48e6:	d804      	bhi.n	48f2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x3a>
    48e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    48ec:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    48f0:	e009      	b.n	4906 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4e>
    48f2:	0059      	lsls	r1, r3, #1
    48f4:	2bff      	cmp	r3, #255	; 0xff
    48f6:	d90b      	bls.n	4910 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x58>
    48f8:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    48fc:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    4900:	d200      	bcs.n	4904 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4c>
    4902:	4611      	mov	r1, r2
    4904:	b289      	uxth	r1, r1
    4906:	1cc9      	adds	r1, r1, #3
    4908:	f021 0503 	bic.w	r5, r1, #3
    490c:	b136      	cbz	r6, 491c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x64>
    490e:	e009      	b.n	4924 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x6c>
    4910:	227c      	movs	r2, #124	; 0x7c
    4912:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    4916:	d3f5      	bcc.n	4904 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4c>
    4918:	217c      	movs	r1, #124	; 0x7c
    491a:	e7f3      	b.n	4904 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4c>
    491c:	f8c8 0004 	str.w	r0, [r8, #4]
    4920:	f8a8 5002 	strh.w	r5, [r8, #2]
    4924:	eb07 0187 	add.w	r1, r7, r7, lsl #2
    4928:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
    492c:	2100      	movs	r1, #0
    492e:	f04f 0901 	mov.w	r9, #1
    4932:	e00f      	b.n	4954 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>
    4934:	b95e      	cbnz	r6, 494e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x96>
    4936:	f8d8 4004 	ldr.w	r4, [r8, #4]
    493a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    493e:	eb00 0c02 	add.w	ip, r0, r2
    4942:	f804 9033 	strb.w	r9, [r4, r3, lsl #3]
    4946:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    494a:	f8c3 c004 	str.w	ip, [r3, #4]
    494e:	1c49      	adds	r1, r1, #1
    4950:	442a      	add	r2, r5
    4952:	b2c9      	uxtb	r1, r1
    4954:	42b9      	cmp	r1, r7
    4956:	d3ed      	bcc.n	4934 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x7c>
    4958:	1dd2      	adds	r2, r2, #7
    495a:	f022 0007 	bic.w	r0, r2, #7
    495e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4962:	0000      	.short	0x0000
    4964:	20000094 	.word	0x20000094

00004968 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    4968:	b570      	push	{r4, r5, r6, lr}
    496a:	4811      	ldr	r0, [pc, #68]	; (49b0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x48>)
    496c:	2400      	movs	r4, #0
    496e:	4621      	mov	r1, r4
    4970:	7802      	ldrb	r2, [r0, #0]
    4972:	e00c      	b.n	498e <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x26>
    4974:	6845      	ldr	r5, [r0, #4]
    4976:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    497a:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
    497e:	b123      	cbz	r3, 498a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x22>
    4980:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4984:	eb05 04c1 	add.w	r4, r5, r1, lsl #3
    4988:	e003      	b.n	4992 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x2a>
    498a:	1c49      	adds	r1, r1, #1
    498c:	b2c9      	uxtb	r1, r1
    498e:	4291      	cmp	r1, r2
    4990:	d3f0      	bcc.n	4974 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    4992:	b144      	cbz	r4, 49a6 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3e>
    4994:	2500      	movs	r5, #0
    4996:	70a5      	strb	r5, [r4, #2]
    4998:	2101      	movs	r1, #1
    499a:	4620      	mov	r0, r4
    499c:	f7ff ff4e 	bl	483c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    49a0:	7025      	strb	r5, [r4, #0]
    49a2:	4620      	mov	r0, r4
    49a4:	bd70      	pop	{r4, r5, r6, pc}
    49a6:	21a9      	movs	r1, #169	; 0xa9
    49a8:	2009      	movs	r0, #9
    49aa:	f7ff fac9 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    49ae:	0000      	.short	0x0000
    49b0:	20000094 	.word	0x20000094

000049b4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    49b4:	4804      	ldr	r0, [pc, #16]	; (49c8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    49b6:	b510      	push	{r4, lr}
    49b8:	8840      	ldrh	r0, [r0, #2]
    49ba:	0884      	lsrs	r4, r0, #2
    49bc:	f00c fabb 	bl	10f36 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x138>
    49c0:	4284      	cmp	r4, r0
    49c2:	d300      	bcc.n	49c6 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    49c4:	4620      	mov	r0, r4
    49c6:	bd10      	pop	{r4, pc}
    49c8:	20000094 	.word	0x20000094

000049cc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    49cc:	4801      	ldr	r0, [pc, #4]	; (49d4 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    49ce:	7840      	ldrb	r0, [r0, #1]
    49d0:	4770      	bx	lr
    49d2:	0000      	.short	0x0000
    49d4:	2000009c 	.word	0x2000009c

000049d8 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    49d8:	4801      	ldr	r0, [pc, #4]	; (49e0 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    49da:	6840      	ldr	r0, [r0, #4]
    49dc:	4770      	bx	lr
    49de:	0000      	.short	0x0000
    49e0:	2000009c 	.word	0x2000009c

000049e4 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    49e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    49e8:	460c      	mov	r4, r1
    49ea:	4607      	mov	r7, r0
    49ec:	4616      	mov	r6, r2
    49ee:	211c      	movs	r1, #28
    49f0:	4610      	mov	r0, r2
    49f2:	460d      	mov	r5, r1
    49f4:	4622      	mov	r2, r4
    49f6:	f00c f918 	bl	10c2a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    49fa:	4680      	mov	r8, r0
    49fc:	b157      	cbz	r7, 4a14 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    49fe:	4638      	mov	r0, r7
    4a00:	4641      	mov	r1, r8
    4a02:	4632      	mov	r2, r6
    4a04:	462b      	mov	r3, r5
    4a06:	9400      	str	r4, [sp, #0]
    4a08:	f00c f8ad 	bl	10b66 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4a0c:	4803      	ldr	r0, [pc, #12]	; (4a1c <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    4a0e:	6047      	str	r7, [r0, #4]
    4a10:	7004      	strb	r4, [r0, #0]
    4a12:	7046      	strb	r6, [r0, #1]
    4a14:	4640      	mov	r0, r8
    4a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4a1a:	0000      	.short	0x0000
    4a1c:	2000009c 	.word	0x2000009c

00004a20 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    4a20:	4802      	ldr	r0, [pc, #8]	; (4a2c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    4a22:	7842      	ldrb	r2, [r0, #1]
    4a24:	7801      	ldrb	r1, [r0, #0]
    4a26:	6840      	ldr	r0, [r0, #4]
    4a28:	f7ff bfdc 	b.w	49e4 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    4a2c:	2000009c 	.word	0x2000009c

00004a30 <sym_4BWYV6G4KVCKUYOBWE3RR7UUW2WCKQUGSW3GHWI>:
    4a30:	4b03      	ldr	r3, [pc, #12]	; (4a40 <sym_4BWYV6G4KVCKUYOBWE3RR7UUW2WCKQUGSW3GHWI+0x10>)
    4a32:	2100      	movs	r1, #0
    4a34:	7818      	ldrb	r0, [r3, #0]
    4a36:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    4a3a:	6858      	ldr	r0, [r3, #4]
    4a3c:	f00b ba54 	b.w	fee8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4a40:	200000a4 	.word	0x200000a4

00004a44 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y>:
    4a44:	b510      	push	{r4, lr}
    4a46:	460c      	mov	r4, r1
    4a48:	b110      	cbz	r0, 4a50 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0xc>
    4a4a:	2200      	movs	r2, #0
    4a4c:	b112      	cbz	r2, 4a54 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x10>
    4a4e:	e00f      	b.n	4a70 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x2c>
    4a50:	2201      	movs	r2, #1
    4a52:	e7fb      	b.n	4a4c <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x8>
    4a54:	1cc1      	adds	r1, r0, #3
    4a56:	f021 0103 	bic.w	r1, r1, #3
    4a5a:	4281      	cmp	r1, r0
    4a5c:	d003      	beq.n	4a66 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x22>
    4a5e:	2120      	movs	r1, #32
    4a60:	2041      	movs	r0, #65	; 0x41
    4a62:	f7ff fa6d 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a66:	4904      	ldr	r1, [pc, #16]	; (4a78 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x34>)
    4a68:	6048      	str	r0, [r1, #4]
    4a6a:	700c      	strb	r4, [r1, #0]
    4a6c:	f7ff ffe0 	bl	4a30 <sym_4BWYV6G4KVCKUYOBWE3RR7UUW2WCKQUGSW3GHWI>
    4a70:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    4a74:	bd10      	pop	{r4, pc}
    4a76:	0000      	.short	0x0000
    4a78:	200000a4 	.word	0x200000a4
    4a7c:	4909      	ldr	r1, [pc, #36]	; (4aa4 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x60>)
    4a7e:	b510      	push	{r4, lr}
    4a80:	4807      	ldr	r0, [pc, #28]	; (4aa0 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x5c>)
    4a82:	6008      	str	r0, [r1, #0]
    4a84:	4b08      	ldr	r3, [pc, #32]	; (4aa8 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x64>)
    4a86:	2011      	movs	r0, #17
    4a88:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    4a8c:	2200      	movs	r2, #0
    4a8e:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    4a92:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    4a96:	1c40      	adds	r0, r0, #1
    4a98:	b2c0      	uxtb	r0, r0
    4a9a:	2814      	cmp	r0, #20
    4a9c:	d3f4      	bcc.n	4a88 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x44>
    4a9e:	bd10      	pop	{r4, pc}
    4aa0:	fffe0000 	.word	0xfffe0000
    4aa4:	4001f508 	.word	0x4001f508
    4aa8:	4001f000 	.word	0x4001f000
    4aac:	b570      	push	{r4, r5, r6, lr}
    4aae:	2420      	movs	r4, #32
    4ab0:	2100      	movs	r1, #0
    4ab2:	2301      	movs	r3, #1
    4ab4:	fa20 f201 	lsr.w	r2, r0, r1
    4ab8:	07d2      	lsls	r2, r2, #31
    4aba:	d020      	beq.n	4afe <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0xba>
    4abc:	b24a      	sxtb	r2, r1
    4abe:	2a00      	cmp	r2, #0
    4ac0:	db10      	blt.n	4ae4 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0xa0>
    4ac2:	bf00      	nop
    4ac4:	ea4f 1652 	mov.w	r6, r2, lsr #5
    4ac8:	ea4f 0686 	mov.w	r6, r6, lsl #2
    4acc:	f002 051f 	and.w	r5, r2, #31
    4ad0:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    4ad4:	fa03 f505 	lsl.w	r5, r3, r5
    4ad8:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    4adc:	f3bf 8f4f 	dsb	sy
    4ae0:	f3bf 8f6f 	isb	sy
    4ae4:	db0b      	blt.n	4afe <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0xba>
    4ae6:	f002 051f 	and.w	r5, r2, #31
    4aea:	ea4f 1252 	mov.w	r2, r2, lsr #5
    4aee:	ea4f 0282 	mov.w	r2, r2, lsl #2
    4af2:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4af6:	fa03 f505 	lsl.w	r5, r3, r5
    4afa:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    4afe:	f101 0101 	add.w	r1, r1, #1
    4b02:	42a1      	cmp	r1, r4
    4b04:	d3d6      	bcc.n	4ab4 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x70>
    4b06:	bd70      	pop	{r4, r5, r6, pc}
    4b08:	b570      	push	{r4, r5, r6, lr}
    4b0a:	0042      	lsls	r2, r0, #1
    4b0c:	f04f 0100 	mov.w	r1, #0
    4b10:	d501      	bpl.n	4b16 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0xd2>
    4b12:	4a14      	ldr	r2, [pc, #80]	; (4b64 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x120>)
    4b14:	6011      	str	r1, [r2, #0]
    4b16:	f3c0 3280 	ubfx	r2, r0, #14, #1
    4b1a:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    4b1e:	429a      	cmp	r2, r3
    4b20:	d003      	beq.n	4b2a <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0xe6>
    4b22:	2169      	movs	r1, #105	; 0x69
    4b24:	201b      	movs	r0, #27
    4b26:	f7ff fa0b 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b2a:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    4b2e:	d014      	beq.n	4b5a <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x116>
    4b30:	4a0d      	ldr	r2, [pc, #52]	; (4b68 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x124>)
    4b32:	2001      	movs	r0, #1
    4b34:	6050      	str	r0, [r2, #4]
    4b36:	1e83      	subs	r3, r0, #2
    4b38:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4b3c:	4a0b      	ldr	r2, [pc, #44]	; (4b6c <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x128>)
    4b3e:	6090      	str	r0, [r2, #8]
    4b40:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    4b44:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4b48:	4c09      	ldr	r4, [pc, #36]	; (4b70 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x12c>)
    4b4a:	6021      	str	r1, [r4, #0]
    4b4c:	1d25      	adds	r5, r4, #4
    4b4e:	6028      	str	r0, [r5, #0]
    4b50:	6090      	str	r0, [r2, #8]
    4b52:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4b56:	6021      	str	r1, [r4, #0]
    4b58:	6028      	str	r0, [r5, #0]
    4b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4b5e:	f7ff bf8d 	b.w	4a7c <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x38>
    4b62:	0000      	.short	0x0000
    4b64:	4001e504 	.word	0x4001e504
    4b68:	4000e000 	.word	0x4000e000
    4b6c:	4000f000 	.word	0x4000f000
    4b70:	4000f500 	.word	0x4000f500

00004b74 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4b74:	b570      	push	{r4, r5, r6, lr}
    4b76:	4c0a      	ldr	r4, [pc, #40]	; (4ba0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    4b78:	460d      	mov	r5, r1
    4b7a:	6020      	str	r0, [r4, #0]
    4b7c:	f7ff ffc4 	bl	4b08 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0xc4>
    4b80:	6820      	ldr	r0, [r4, #0]
    4b82:	f7ff ff93 	bl	4aac <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x68>
    4b86:	f000 f883 	bl	4c90 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    4b8a:	f7ff ff77 	bl	4a7c <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x38>
    4b8e:	f00c fa9c 	bl	110ca <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    4b92:	4628      	mov	r0, r5
    4b94:	f000 f8b6 	bl	4d04 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    4b98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4b9c:	f000 b8ce 	b.w	4d3c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    4ba0:	200000ac 	.word	0x200000ac

00004ba4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    4ba4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ba8:	4c36      	ldr	r4, [pc, #216]	; (4c84 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe0>)
    4baa:	b082      	sub	sp, #8
    4bac:	f8d4 b504 	ldr.w	fp, [r4, #1284]	; 0x504
    4bb0:	2601      	movs	r6, #1
    4bb2:	4835      	ldr	r0, [pc, #212]	; (4c88 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    4bb4:	f00b f875 	bl	fca2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4bb8:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 4c88 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>
    4bbc:	b920      	cbnz	r0, 4bc8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    4bbe:	2600      	movs	r6, #0
    4bc0:	f109 0001 	add.w	r0, r9, #1
    4bc4:	f00b f884 	bl	fcd0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4bc8:	f44f 7580 	mov.w	r5, #256	; 0x100
    4bcc:	f04f 0800 	mov.w	r8, #0
    4bd0:	1d2f      	adds	r7, r5, #4
    4bd2:	2101      	movs	r1, #1
    4bd4:	6061      	str	r1, [r4, #4]
    4bd6:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4bda:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    4bde:	9802      	ldr	r0, [sp, #8]
    4be0:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
    4be4:	6021      	str	r1, [r4, #0]
    4be6:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 4c8c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe8>
    4bea:	e01c      	b.n	4c26 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    4bec:	f8da 0000 	ldr.w	r0, [sl]
    4bf0:	06c0      	lsls	r0, r0, #27
    4bf2:	d518      	bpl.n	4c26 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    4bf4:	200e      	movs	r0, #14
    4bf6:	f00c fa54 	bl	110a2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    4bfa:	f3ef 8010 	mrs	r0, PRIMASK
    4bfe:	9000      	str	r0, [sp, #0]
    4c00:	b672      	cpsid	i
    4c02:	2103      	movs	r1, #3
    4c04:	4620      	mov	r0, r4
    4c06:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    4c0a:	4629      	mov	r1, r5
    4c0c:	f00c fa56 	bl	110bc <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    4c10:	b930      	cbnz	r0, 4c20 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    4c12:	4639      	mov	r1, r7
    4c14:	4620      	mov	r0, r4
    4c16:	f00c fa51 	bl	110bc <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    4c1a:	b908      	cbnz	r0, 4c20 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    4c1c:	f7fe ff00 	bl	3a20 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4c20:	9800      	ldr	r0, [sp, #0]
    4c22:	b900      	cbnz	r0, 4c26 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    4c24:	b662      	cpsie	i
    4c26:	4629      	mov	r1, r5
    4c28:	4620      	mov	r0, r4
    4c2a:	f00c fa47 	bl	110bc <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    4c2e:	b928      	cbnz	r0, 4c3c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x98>
    4c30:	4639      	mov	r1, r7
    4c32:	4620      	mov	r0, r4
    4c34:	f00c fa42 	bl	110bc <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    4c38:	2800      	cmp	r0, #0
    4c3a:	d0d7      	beq.n	4bec <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x48>
    4c3c:	4639      	mov	r1, r7
    4c3e:	4620      	mov	r0, r4
    4c40:	f00c fa3c 	bl	110bc <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    4c44:	2800      	cmp	r0, #0
    4c46:	d1c4      	bne.n	4bd2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2e>
    4c48:	b136      	cbz	r6, 4c58 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xb4>
    4c4a:	f8c4 b504 	str.w	fp, [r4, #1284]	; 0x504
    4c4e:	f109 0001 	add.w	r0, r9, #1
    4c52:	f00b f826 	bl	fca2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4c56:	e012      	b.n	4c7e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xda>
    4c58:	f109 0001 	add.w	r0, r9, #1
    4c5c:	f00b f821 	bl	fca2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4c60:	2800      	cmp	r0, #0
    4c62:	d1ad      	bne.n	4bc0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    4c64:	2003      	movs	r0, #3
    4c66:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4c6a:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    4c6e:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4c72:	200e      	movs	r0, #14
    4c74:	f00c fa15 	bl	110a2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    4c78:	4803      	ldr	r0, [pc, #12]	; (4c88 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    4c7a:	f00b f829 	bl	fcd0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4c7e:	2000      	movs	r0, #0
    4c80:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c84:	4000e000 	.word	0x4000e000
    4c88:	20000309 	.word	0x20000309
    4c8c:	e000ed10 	.word	0xe000ed10

00004c90 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    4c90:	b510      	push	{r4, lr}
    4c92:	4808      	ldr	r0, [pc, #32]	; (4cb4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4c94:	f00b f818 	bl	fcc8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4c98:	b108      	cbz	r0, 4c9e <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    4c9a:	2125      	movs	r1, #37	; 0x25
    4c9c:	e006      	b.n	4cac <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    4c9e:	4805      	ldr	r0, [pc, #20]	; (4cb4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4ca0:	1c40      	adds	r0, r0, #1
    4ca2:	f00b f811 	bl	fcc8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4ca6:	2800      	cmp	r0, #0
    4ca8:	d003      	beq.n	4cb2 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    4caa:	2129      	movs	r1, #41	; 0x29
    4cac:	201d      	movs	r0, #29
    4cae:	f7ff f947 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cb2:	bd10      	pop	{r4, pc}
    4cb4:	20000309 	.word	0x20000309

00004cb8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    4cb8:	b570      	push	{r4, r5, r6, lr}
    4cba:	4911      	ldr	r1, [pc, #68]	; (4d00 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    4cbc:	680a      	ldr	r2, [r1, #0]
    4cbe:	b1ea      	cbz	r2, 4cfc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    4cc0:	2300      	movs	r3, #0
    4cc2:	461d      	mov	r5, r3
    4cc4:	2401      	movs	r4, #1
    4cc6:	684a      	ldr	r2, [r1, #4]
    4cc8:	1c52      	adds	r2, r2, #1
    4cca:	604a      	str	r2, [r1, #4]
    4ccc:	2a0c      	cmp	r2, #12
    4cce:	d300      	bcc.n	4cd2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    4cd0:	604d      	str	r5, [r1, #4]
    4cd2:	790e      	ldrb	r6, [r1, #4]
    4cd4:	fa04 f206 	lsl.w	r2, r4, r6
    4cd8:	680e      	ldr	r6, [r1, #0]
    4cda:	4216      	tst	r6, r2
    4cdc:	d00b      	beq.n	4cf6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    4cde:	f3ef 8310 	mrs	r3, PRIMASK
    4ce2:	b672      	cpsid	i
    4ce4:	680c      	ldr	r4, [r1, #0]
    4ce6:	4394      	bics	r4, r2
    4ce8:	600c      	str	r4, [r1, #0]
    4cea:	b903      	cbnz	r3, 4cee <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    4cec:	b662      	cpsie	i
    4cee:	6849      	ldr	r1, [r1, #4]
    4cf0:	6001      	str	r1, [r0, #0]
    4cf2:	2000      	movs	r0, #0
    4cf4:	bd70      	pop	{r4, r5, r6, pc}
    4cf6:	1c5b      	adds	r3, r3, #1
    4cf8:	2b0c      	cmp	r3, #12
    4cfa:	d3e4      	bcc.n	4cc6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    4cfc:	2005      	movs	r0, #5
    4cfe:	bd70      	pop	{r4, r5, r6, pc}
    4d00:	200000b0 	.word	0x200000b0

00004d04 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    4d04:	4802      	ldr	r0, [pc, #8]	; (4d10 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    4d06:	2100      	movs	r1, #0
    4d08:	6001      	str	r1, [r0, #0]
    4d0a:	6041      	str	r1, [r0, #4]
    4d0c:	4770      	bx	lr
    4d0e:	0000      	.short	0x0000
    4d10:	200000b0 	.word	0x200000b0

00004d14 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    4d14:	b510      	push	{r4, lr}
    4d16:	4c08      	ldr	r4, [pc, #32]	; (4d38 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    4d18:	7861      	ldrb	r1, [r4, #1]
    4d1a:	b109      	cbz	r1, 4d20 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    4d1c:	200f      	movs	r0, #15
    4d1e:	bd10      	pop	{r4, pc}
    4d20:	f7fe fe0a 	bl	3938 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4d24:	7020      	strb	r0, [r4, #0]
    4d26:	28ff      	cmp	r0, #255	; 0xff
    4d28:	d001      	beq.n	4d2e <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    4d2a:	2000      	movs	r0, #0
    4d2c:	bd10      	pop	{r4, pc}
    4d2e:	2176      	movs	r1, #118	; 0x76
    4d30:	201f      	movs	r0, #31
    4d32:	f7ff f905 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d36:	0000      	.short	0x0000
    4d38:	200000b8 	.word	0x200000b8

00004d3c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4d3c:	4901      	ldr	r1, [pc, #4]	; (4d44 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    4d3e:	2000      	movs	r0, #0
    4d40:	7048      	strb	r0, [r1, #1]
    4d42:	4770      	bx	lr
    4d44:	200000b8 	.word	0x200000b8

00004d48 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    4d48:	4905      	ldr	r1, [pc, #20]	; (4d60 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI+0x18>)
    4d4a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4d4c:	4282      	cmp	r2, r0
    4d4e:	bf18      	it	ne
    4d50:	4770      	bxne	lr
    4d52:	2000      	movs	r0, #0
    4d54:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4d58:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4d5c:	8488      	strh	r0, [r1, #36]	; 0x24
    4d5e:	4770      	bx	lr
    4d60:	200010a8 	.word	0x200010a8

00004d64 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    4d64:	4806      	ldr	r0, [pc, #24]	; (4d80 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    4d66:	4a07      	ldr	r2, [pc, #28]	; (4d84 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    4d68:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4d6a:	8852      	ldrh	r2, [r2, #2]
    4d6c:	4291      	cmp	r1, r2
    4d6e:	d105      	bne.n	4d7c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x18>
    4d70:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    4d74:	2800      	cmp	r0, #0
    4d76:	bf1c      	itt	ne
    4d78:	2000      	movne	r0, #0
    4d7a:	4770      	bxne	lr
    4d7c:	2001      	movs	r0, #1
    4d7e:	4770      	bx	lr
    4d80:	200010a8 	.word	0x200010a8
    4d84:	200002ec 	.word	0x200002ec

00004d88 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    4d88:	4901      	ldr	r1, [pc, #4]	; (4d90 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    4d8a:	8048      	strh	r0, [r1, #2]
    4d8c:	4770      	bx	lr
    4d8e:	0000      	.short	0x0000
    4d90:	200002ec 	.word	0x200002ec

00004d94 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    4d94:	4808      	ldr	r0, [pc, #32]	; (4db8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    4d96:	4a09      	ldr	r2, [pc, #36]	; (4dbc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    4d98:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4d9a:	8852      	ldrh	r2, [r2, #2]
    4d9c:	4291      	cmp	r1, r2
    4d9e:	d109      	bne.n	4db4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4da0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4da4:	8481      	strh	r1, [r0, #36]	; 0x24
    4da6:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4daa:	b119      	cbz	r1, 4db4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4dac:	2100      	movs	r1, #0
    4dae:	7001      	strb	r1, [r0, #0]
    4db0:	2001      	movs	r0, #1
    4db2:	4770      	bx	lr
    4db4:	2000      	movs	r0, #0
    4db6:	4770      	bx	lr
    4db8:	200010a8 	.word	0x200010a8
    4dbc:	200002ec 	.word	0x200002ec

00004dc0 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    4dc0:	4907      	ldr	r1, [pc, #28]	; (4de0 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4dc2:	f101 0022 	add.w	r0, r1, #34	; 0x22
    4dc6:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4dca:	2a01      	cmp	r2, #1
    4dcc:	bf04      	itt	eq
    4dce:	2000      	moveq	r0, #0
    4dd0:	4770      	bxeq	lr
    4dd2:	2201      	movs	r2, #1
    4dd4:	7002      	strb	r2, [r0, #0]
    4dd6:	4803      	ldr	r0, [pc, #12]	; (4de4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    4dd8:	8800      	ldrh	r0, [r0, #0]
    4dda:	8488      	strh	r0, [r1, #36]	; 0x24
    4ddc:	4610      	mov	r0, r2
    4dde:	4770      	bx	lr
    4de0:	200010a8 	.word	0x200010a8
    4de4:	200002ec 	.word	0x200002ec

00004de8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    4de8:	4907      	ldr	r1, [pc, #28]	; (4e08 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    4dea:	4b08      	ldr	r3, [pc, #32]	; (4e0c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x24>)
    4dec:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4dee:	885b      	ldrh	r3, [r3, #2]
    4df0:	429a      	cmp	r2, r3
    4df2:	d106      	bne.n	4e02 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1a>
    4df4:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4df8:	2a00      	cmp	r2, #0
    4dfa:	bf1e      	ittt	ne
    4dfc:	6001      	strne	r1, [r0, #0]
    4dfe:	2001      	movne	r0, #1
    4e00:	4770      	bxne	lr
    4e02:	2000      	movs	r0, #0
    4e04:	4770      	bx	lr
    4e06:	0000      	.short	0x0000
    4e08:	200010a8 	.word	0x200010a8
    4e0c:	200002ec 	.word	0x200002ec

00004e10 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    4e10:	4909      	ldr	r1, [pc, #36]	; (4e38 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4e12:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4e14:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    4e18:	3bff      	subs	r3, #255	; 0xff
    4e1a:	d003      	beq.n	4e24 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x14>
    4e1c:	2100      	movs	r1, #0
    4e1e:	6001      	str	r1, [r0, #0]
    4e20:	4608      	mov	r0, r1
    4e22:	4770      	bx	lr
    4e24:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4e28:	4903      	ldr	r1, [pc, #12]	; (4e38 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4e2a:	2a01      	cmp	r2, #1
    4e2c:	bf1a      	itte	ne
    4e2e:	6001      	strne	r1, [r0, #0]
    4e30:	2001      	movne	r0, #1
    4e32:	2000      	moveq	r0, #0
    4e34:	4770      	bx	lr
    4e36:	0000      	.short	0x0000
    4e38:	200010a8 	.word	0x200010a8

00004e3c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    4e3c:	4901      	ldr	r1, [pc, #4]	; (4e44 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    4e3e:	8008      	strh	r0, [r1, #0]
    4e40:	4770      	bx	lr
    4e42:	0000      	.short	0x0000
    4e44:	200002ec 	.word	0x200002ec

00004e48 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4e48:	4a0a      	ldr	r2, [pc, #40]	; (4e74 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    4e4a:	b110      	cbz	r0, 4e52 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4e4c:	2801      	cmp	r0, #1
    4e4e:	d007      	beq.n	4e60 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    4e50:	e00e      	b.n	4e70 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4e52:	7850      	ldrb	r0, [r2, #1]
    4e54:	b160      	cbz	r0, 4e70 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4e56:	f8d2 0002 	ldr.w	r0, [r2, #2]
    4e5a:	6008      	str	r0, [r1, #0]
    4e5c:	88d0      	ldrh	r0, [r2, #6]
    4e5e:	e004      	b.n	4e6a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    4e60:	7810      	ldrb	r0, [r2, #0]
    4e62:	b128      	cbz	r0, 4e70 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4e64:	6890      	ldr	r0, [r2, #8]
    4e66:	6008      	str	r0, [r1, #0]
    4e68:	8990      	ldrh	r0, [r2, #12]
    4e6a:	8088      	strh	r0, [r1, #4]
    4e6c:	2001      	movs	r0, #1
    4e6e:	4770      	bx	lr
    4e70:	2000      	movs	r0, #0
    4e72:	4770      	bx	lr
    4e74:	2000030b 	.word	0x2000030b

00004e78 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4e78:	4a09      	ldr	r2, [pc, #36]	; (4ea0 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x28>)
    4e7a:	2301      	movs	r3, #1
    4e7c:	b140      	cbz	r0, 4e90 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x18>
    4e7e:	2801      	cmp	r0, #1
    4e80:	bf18      	it	ne
    4e82:	4770      	bxne	lr
    4e84:	7013      	strb	r3, [r2, #0]
    4e86:	6808      	ldr	r0, [r1, #0]
    4e88:	6090      	str	r0, [r2, #8]
    4e8a:	8888      	ldrh	r0, [r1, #4]
    4e8c:	8190      	strh	r0, [r2, #12]
    4e8e:	4770      	bx	lr
    4e90:	7053      	strb	r3, [r2, #1]
    4e92:	6808      	ldr	r0, [r1, #0]
    4e94:	f8c2 0002 	str.w	r0, [r2, #2]
    4e98:	8888      	ldrh	r0, [r1, #4]
    4e9a:	80d0      	strh	r0, [r2, #6]
    4e9c:	4770      	bx	lr
    4e9e:	0000      	.short	0x0000
    4ea0:	2000030b 	.word	0x2000030b

00004ea4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4ea4:	4906      	ldr	r1, [pc, #24]	; (4ec0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4ea6:	b110      	cbz	r0, 4eae <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4ea8:	2801      	cmp	r0, #1
    4eaa:	d003      	beq.n	4eb4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4eac:	e006      	b.n	4ebc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    4eae:	7848      	ldrb	r0, [r1, #1]
    4eb0:	b910      	cbnz	r0, 4eb8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x14>
    4eb2:	e003      	b.n	4ebc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    4eb4:	7808      	ldrb	r0, [r1, #0]
    4eb6:	b108      	cbz	r0, 4ebc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    4eb8:	2001      	movs	r0, #1
    4eba:	4770      	bx	lr
    4ebc:	2000      	movs	r0, #0
    4ebe:	4770      	bx	lr
    4ec0:	2000030b 	.word	0x2000030b

00004ec4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4ec4:	4901      	ldr	r1, [pc, #4]	; (4ecc <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4ec6:	7448      	strb	r0, [r1, #17]
    4ec8:	4770      	bx	lr
    4eca:	0000      	.short	0x0000
    4ecc:	20000882 	.word	0x20000882

00004ed0 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    4ed0:	4901      	ldr	r1, [pc, #4]	; (4ed8 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    4ed2:	2001      	movs	r0, #1
    4ed4:	7188      	strb	r0, [r1, #6]
    4ed6:	4770      	bx	lr
    4ed8:	200000d4 	.word	0x200000d4

00004edc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    4edc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ee0:	4df3      	ldr	r5, [pc, #972]	; (52b0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3d4>)
    4ee2:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    4ee6:	782c      	ldrb	r4, [r5, #0]
    4ee8:	2c00      	cmp	r4, #0
    4eea:	d166      	bne.n	4fba <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xde>
    4eec:	2a00      	cmp	r2, #0
    4eee:	bf1c      	itt	ne
    4ef0:	2b00      	cmpne	r3, #0
    4ef2:	f1bc 0f00 	cmpne.w	ip, #0
    4ef6:	d060      	beq.n	4fba <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xde>
    4ef8:	f8c5 c01c 	str.w	ip, [r5, #28]
    4efc:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    4f00:	f04f 0000 	mov.w	r0, #0
    4f04:	e9c5 2305 	strd	r2, r3, [r5, #20]
    4f08:	71a8      	strb	r0, [r5, #6]
    4f0a:	7168      	strb	r0, [r5, #5]
    4f0c:	70e8      	strb	r0, [r5, #3]
    4f0e:	70a8      	strb	r0, [r5, #2]
    4f10:	7128      	strb	r0, [r5, #4]
    4f12:	f8df 93a0 	ldr.w	r9, [pc, #928]	; 52b4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3d8>
    4f16:	81a8      	strh	r0, [r5, #12]
    4f18:	81e8      	strh	r0, [r5, #14]
    4f1a:	f8d9 0004 	ldr.w	r0, [r9, #4]
    4f1e:	f100 0778 	add.w	r7, r0, #120	; 0x78
    4f22:	4604      	mov	r4, r0
    4f24:	f009 fe9e 	bl	ec64 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4f28:	f009 f846 	bl	dfb8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4f2c:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    4f30:	f009 ff2c 	bl	ed8c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4f34:	f104 0018 	add.w	r0, r4, #24
    4f38:	f00a fa22 	bl	f380 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4f3c:	6920      	ldr	r0, [r4, #16]
    4f3e:	f00a fa15 	bl	f36c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4f42:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
    4f46:	f00a fa7d 	bl	f444 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    4f4a:	f899 0000 	ldrb.w	r0, [r9]
    4f4e:	f641 5a4c 	movw	sl, #7500	; 0x1d4c
    4f52:	2800      	cmp	r0, #0
    4f54:	d036      	beq.n	4fc4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe8>
    4f56:	2004      	movs	r0, #4
    4f58:	f7fe fdce 	bl	3af8 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    4f5c:	68e0      	ldr	r0, [r4, #12]
    4f5e:	4550      	cmp	r0, sl
    4f60:	bf28      	it	cs
    4f62:	2096      	movcs	r0, #150	; 0x96
    4f64:	d203      	bcs.n	4f6e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x92>
    4f66:	2001      	movs	r0, #1
    4f68:	f00a f9ca 	bl	f300 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>
    4f6c:	204d      	movs	r0, #77	; 0x4d
    4f6e:	f009 fd6f 	bl	ea50 <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>
    4f72:	f8d9 0004 	ldr.w	r0, [r9, #4]
    4f76:	f890 0184 	ldrb.w	r0, [r0, #388]	; 0x184
    4f7a:	2800      	cmp	r0, #0
    4f7c:	bf18      	it	ne
    4f7e:	f009 fd57 	blne	ea30 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    4f82:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    4f86:	2001      	movs	r0, #1
    4f88:	f009 fb3e 	bl	e608 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4f8c:	2800      	cmp	r0, #0
    4f8e:	bf08      	it	eq
    4f90:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f94:	48c8      	ldr	r0, [pc, #800]	; (52b8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3dc>)
    4f96:	f009 fce3 	bl	e960 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4f9a:	8820      	ldrh	r0, [r4, #0]
    4f9c:	f7ff fc36 	bl	480c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4fa0:	6328      	str	r0, [r5, #48]	; 0x30
    4fa2:	8820      	ldrh	r0, [r4, #0]
    4fa4:	f7ff fc1c 	bl	47e0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    4fa8:	6368      	str	r0, [r5, #52]	; 0x34
    4faa:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    4fae:	f88d 0000 	strb.w	r0, [sp]
    4fb2:	f89d 0000 	ldrb.w	r0, [sp]
    4fb6:	bb60      	cbnz	r0, 5012 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x136>
    4fb8:	e01b      	b.n	4ff2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x116>
    4fba:	f44f 718a 	mov.w	r1, #276	; 0x114
    4fbe:	2027      	movs	r0, #39	; 0x27
    4fc0:	f7fe ffbe 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4fc4:	2003      	movs	r0, #3
    4fc6:	f7fe fd97 	bl	3af8 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    4fca:	68e0      	ldr	r0, [r4, #12]
    4fcc:	4550      	cmp	r0, sl
    4fce:	bf28      	it	cs
    4fd0:	2096      	movcs	r0, #150	; 0x96
    4fd2:	d203      	bcs.n	4fdc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x100>
    4fd4:	2001      	movs	r0, #1
    4fd6:	f00a f993 	bl	f300 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>
    4fda:	204d      	movs	r0, #77	; 0x4d
    4fdc:	f009 fd38 	bl	ea50 <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>
    4fe0:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    4fe4:	2000      	movs	r0, #0
    4fe6:	f009 fb0f 	bl	e608 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4fea:	2800      	cmp	r0, #0
    4fec:	d1d2      	bne.n	4f94 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xb8>
    4fee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ff2:	6f20      	ldr	r0, [r4, #112]	; 0x70
    4ff4:	b168      	cbz	r0, 5012 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x136>
    4ff6:	8e78      	ldrh	r0, [r7, #50]	; 0x32
    4ff8:	88b9      	ldrh	r1, [r7, #4]
    4ffa:	4288      	cmp	r0, r1
    4ffc:	d109      	bne.n	5012 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x136>
    4ffe:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    5002:	2201      	movs	r2, #1
    5004:	4408      	add	r0, r1
    5006:	8678      	strh	r0, [r7, #50]	; 0x32
    5008:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    500c:	6f21      	ldr	r1, [r4, #112]	; 0x70
    500e:	f7fd fb63 	bl	26d8 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    5012:	f107 0168 	add.w	r1, r7, #104	; 0x68
    5016:	48a9      	ldr	r0, [pc, #676]	; (52bc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3e0>)
    5018:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    501c:	f500 7684 	add.w	r6, r0, #264	; 0x108
    5020:	f04f 0801 	mov.w	r8, #1
    5024:	e886 100e 	stmia.w	r6, {r1, r2, r3, ip}
    5028:	6fb9      	ldr	r1, [r7, #120]	; 0x78
    502a:	f8c0 1121 	str.w	r1, [r0, #289]	; 0x121
    502e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    5030:	f8c0 1125 	str.w	r1, [r0, #293]	; 0x125
    5034:	f8d9 0004 	ldr.w	r0, [r9, #4]
    5038:	f100 0178 	add.w	r1, r0, #120	; 0x78
    503c:	f890 c085 	ldrb.w	ip, [r0, #133]	; 0x85
    5040:	f1bc 0f24 	cmp.w	ip, #36	; 0x24
    5044:	bf1c      	itt	ne
    5046:	7b89      	ldrbne	r1, [r1, #14]
    5048:	2924      	cmpne	r1, #36	; 0x24
    504a:	d00c      	beq.n	5066 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18a>
    504c:	f04f 0208 	mov.w	r2, #8
    5050:	f04f 0302 	mov.w	r3, #2
    5054:	f1bc 0f1f 	cmp.w	ip, #31
    5058:	bf18      	it	ne
    505a:	f1bc 0f20 	cmpne.w	ip, #32
    505e:	d02d      	beq.n	50bc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1e0>
    5060:	2922      	cmp	r1, #34	; 0x22
    5062:	d051      	beq.n	5108 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x22c>
    5064:	e07f      	b.n	5166 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x28a>
    5066:	f899 1000 	ldrb.w	r1, [r9]
    506a:	2900      	cmp	r1, #0
    506c:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    5070:	d013      	beq.n	509a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1be>
    5072:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    5076:	2800      	cmp	r0, #0
    5078:	d079      	beq.n	516e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x292>
    507a:	2908      	cmp	r1, #8
    507c:	bf18      	it	ne
    507e:	2904      	cmpne	r1, #4
    5080:	d06e      	beq.n	5160 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x284>
    5082:	2808      	cmp	r0, #8
    5084:	bf18      	it	ne
    5086:	2804      	cmpne	r0, #4
    5088:	d06a      	beq.n	5160 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x284>
    508a:	2901      	cmp	r1, #1
    508c:	bf18      	it	ne
    508e:	2801      	cmpne	r0, #1
    5090:	d056      	beq.n	5140 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x264>
    5092:	bf00      	nop
    5094:	f04f 0102 	mov.w	r1, #2
    5098:	e069      	b.n	516e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x292>
    509a:	f890 012a 	ldrb.w	r0, [r0, #298]	; 0x12a
    509e:	2800      	cmp	r0, #0
    50a0:	d065      	beq.n	516e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x292>
    50a2:	2908      	cmp	r1, #8
    50a4:	bf18      	it	ne
    50a6:	2904      	cmpne	r1, #4
    50a8:	d05a      	beq.n	5160 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x284>
    50aa:	2808      	cmp	r0, #8
    50ac:	bf18      	it	ne
    50ae:	2804      	cmpne	r0, #4
    50b0:	d056      	beq.n	5160 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x284>
    50b2:	2901      	cmp	r1, #1
    50b4:	bf18      	it	ne
    50b6:	2801      	cmpne	r0, #1
    50b8:	d042      	beq.n	5140 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x264>
    50ba:	e7eb      	b.n	5094 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1b8>
    50bc:	2922      	cmp	r1, #34	; 0x22
    50be:	d023      	beq.n	5108 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x22c>
    50c0:	f899 1000 	ldrb.w	r1, [r9]
    50c4:	b3e9      	cbz	r1, 5142 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x266>
    50c6:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    50ca:	f890 01c0 	ldrb.w	r0, [r0, #448]	; 0x1c0
    50ce:	f010 0f04 	tst.w	r0, #4
    50d2:	bf18      	it	ne
    50d4:	4610      	movne	r0, r2
    50d6:	d00c      	beq.n	50f2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x216>
    50d8:	2908      	cmp	r1, #8
    50da:	bf18      	it	ne
    50dc:	2904      	cmpne	r1, #4
    50de:	d03f      	beq.n	5160 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x284>
    50e0:	2808      	cmp	r0, #8
    50e2:	bf18      	it	ne
    50e4:	2804      	cmpne	r0, #4
    50e6:	d03b      	beq.n	5160 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x284>
    50e8:	2901      	cmp	r1, #1
    50ea:	bf18      	it	ne
    50ec:	2801      	cmpne	r0, #1
    50ee:	d027      	beq.n	5140 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x264>
    50f0:	e7d0      	b.n	5094 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1b8>
    50f2:	f010 0f01 	tst.w	r0, #1
    50f6:	bf18      	it	ne
    50f8:	4640      	movne	r0, r8
    50fa:	d1ed      	bne.n	50d8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1fc>
    50fc:	f010 0f02 	tst.w	r0, #2
    5100:	bf18      	it	ne
    5102:	4618      	movne	r0, r3
    5104:	d1e8      	bne.n	50d8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1fc>
    5106:	e032      	b.n	516e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x292>
    5108:	f899 1000 	ldrb.w	r1, [r9]
    510c:	b1c9      	cbz	r1, 5142 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x266>
    510e:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    5112:	f890 c1c0 	ldrb.w	ip, [r0, #448]	; 0x1c0
    5116:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    511a:	ea0c 0000 	and.w	r0, ip, r0
    511e:	f010 0f04 	tst.w	r0, #4
    5122:	bf18      	it	ne
    5124:	4610      	movne	r0, r2
    5126:	d010      	beq.n	514a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x26e>
    5128:	2908      	cmp	r1, #8
    512a:	bf18      	it	ne
    512c:	2904      	cmpne	r1, #4
    512e:	d017      	beq.n	5160 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x284>
    5130:	2808      	cmp	r0, #8
    5132:	bf18      	it	ne
    5134:	2804      	cmpne	r0, #4
    5136:	d013      	beq.n	5160 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x284>
    5138:	2901      	cmp	r1, #1
    513a:	bf18      	it	ne
    513c:	2801      	cmpne	r0, #1
    513e:	d1a9      	bne.n	5094 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1b8>
    5140:	e000      	b.n	5144 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x268>
    5142:	e010      	b.n	5166 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x28a>
    5144:	f04f 0101 	mov.w	r1, #1
    5148:	e011      	b.n	516e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x292>
    514a:	f010 0f01 	tst.w	r0, #1
    514e:	bf18      	it	ne
    5150:	4640      	movne	r0, r8
    5152:	d1e9      	bne.n	5128 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x24c>
    5154:	f010 0f02 	tst.w	r0, #2
    5158:	bf18      	it	ne
    515a:	4618      	movne	r0, r3
    515c:	d1e4      	bne.n	5128 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x24c>
    515e:	e006      	b.n	516e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x292>
    5160:	f04f 0108 	mov.w	r1, #8
    5164:	e003      	b.n	516e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x292>
    5166:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    516a:	2904      	cmp	r1, #4
    516c:	d0f8      	beq.n	5160 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x284>
    516e:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    5170:	f011 0f0c 	tst.w	r1, #12
    5174:	bf18      	it	ne
    5176:	f44f 6029 	movne.w	r0, #2704	; 0xa90
    517a:	f00c f918 	bl	113ae <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    517e:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    5180:	4281      	cmp	r1, r0
    5182:	bf38      	it	cc
    5184:	4608      	movcc	r0, r1
    5186:	7228      	strb	r0, [r5, #8]
    5188:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    518c:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    518e:	f897 b013 	ldrb.w	fp, [r7, #19]
    5192:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
    5194:	2908      	cmp	r1, #8
    5196:	d036      	beq.n	5206 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x32a>
    5198:	f00c f909 	bl	113ae <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    519c:	f1bb 0f00 	cmp.w	fp, #0
    51a0:	bf04      	itt	eq
    51a2:	1d00      	addeq	r0, r0, #4
    51a4:	b280      	uxtheq	r0, r0
    51a6:	4286      	cmp	r6, r0
    51a8:	bf28      	it	cs
    51aa:	4606      	movcs	r6, r0
    51ac:	f002 f97a 	bl	74a4 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI>
    51b0:	b110      	cbz	r0, 51b8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x2dc>
    51b2:	2e23      	cmp	r6, #35	; 0x23
    51b4:	bf98      	it	ls
    51b6:	2623      	movls	r6, #35	; 0x23
    51b8:	b2f2      	uxtb	r2, r6
    51ba:	726a      	strb	r2, [r5, #9]
    51bc:	7cf9      	ldrb	r1, [r7, #19]
    51be:	2900      	cmp	r1, #0
    51c0:	bf14      	ite	ne
    51c2:	2004      	movne	r0, #4
    51c4:	2000      	moveq	r0, #0
    51c6:	4410      	add	r0, r2
    51c8:	71e8      	strb	r0, [r5, #7]
    51ca:	f899 3000 	ldrb.w	r3, [r9]
    51ce:	483c      	ldr	r0, [pc, #240]	; (52c0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3e4>)
    51d0:	b1eb      	cbz	r3, 520e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x332>
    51d2:	b3e9      	cbz	r1, 5250 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x374>
    51d4:	f880 8018 	strb.w	r8, [r0, #24]
    51d8:	e9d7 1318 	ldrd	r1, r3, [r7, #96]	; 0x60
    51dc:	e9c0 1304 	strd	r1, r3, [r0, #16]
    51e0:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    51e4:	2801      	cmp	r0, #1
    51e6:	bf08      	it	eq
    51e8:	2300      	moveq	r3, #0
    51ea:	d03f      	beq.n	526c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x390>
    51ec:	2802      	cmp	r0, #2
    51ee:	bf08      	it	eq
    51f0:	2301      	moveq	r3, #1
    51f2:	d03b      	beq.n	526c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x390>
    51f4:	2804      	cmp	r0, #4
    51f6:	bf08      	it	eq
    51f8:	2303      	moveq	r3, #3
    51fa:	d037      	beq.n	526c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x390>
    51fc:	2808      	cmp	r0, #8
    51fe:	bf08      	it	eq
    5200:	2302      	moveq	r3, #2
    5202:	d033      	beq.n	526c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x390>
    5204:	e01d      	b.n	5242 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x366>
    5206:	2104      	movs	r1, #4
    5208:	f00c f8d1 	bl	113ae <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    520c:	e7c6      	b.n	519c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x2c0>
    520e:	7cb9      	ldrb	r1, [r7, #18]
    5210:	b341      	cbz	r1, 5264 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x388>
    5212:	f880 8018 	strb.w	r8, [r0, #24]
    5216:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
    521a:	e9c0 1204 	strd	r1, r2, [r0, #16]
    521e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5222:	2801      	cmp	r0, #1
    5224:	bf08      	it	eq
    5226:	2300      	moveq	r3, #0
    5228:	d010      	beq.n	524c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x370>
    522a:	2802      	cmp	r0, #2
    522c:	bf08      	it	eq
    522e:	2301      	moveq	r3, #1
    5230:	d00c      	beq.n	524c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x370>
    5232:	2804      	cmp	r0, #4
    5234:	bf08      	it	eq
    5236:	2303      	moveq	r3, #3
    5238:	d008      	beq.n	524c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x370>
    523a:	2808      	cmp	r0, #8
    523c:	bf08      	it	eq
    523e:	2302      	moveq	r3, #2
    5240:	d004      	beq.n	524c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x370>
    5242:	f240 31ad 	movw	r1, #941	; 0x3ad
    5246:	2006      	movs	r0, #6
    5248:	f7fe fe7a 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    524c:	22fb      	movs	r2, #251	; 0xfb
    524e:	e000      	b.n	5252 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x376>
    5250:	e012      	b.n	5278 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x39c>
    5252:	491b      	ldr	r1, [pc, #108]	; (52c0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3e4>)
    5254:	2000      	movs	r0, #0
    5256:	f008 ff05 	bl	e064 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    525a:	68e0      	ldr	r0, [r4, #12]
    525c:	4550      	cmp	r0, sl
    525e:	bf28      	it	cs
    5260:	f008 ff64 	blcs	e12c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5264:	2001      	movs	r0, #1
    5266:	f000 fc15 	bl	5a94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a0>
    526a:	e008      	b.n	527e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3a2>
    526c:	4914      	ldr	r1, [pc, #80]	; (52c0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3e4>)
    526e:	2001      	movs	r0, #1
    5270:	f008 fef8 	bl	e064 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5274:	f008 ff5a 	bl	e12c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5278:	2001      	movs	r0, #1
    527a:	f000 fbb1 	bl	59e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ec>
    527e:	4811      	ldr	r0, [pc, #68]	; (52c4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3e8>)
    5280:	6800      	ldr	r0, [r0, #0]
    5282:	2803      	cmp	r0, #3
    5284:	bf18      	it	ne
    5286:	280b      	cmpne	r0, #11
    5288:	d00c      	beq.n	52a4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3c8>
    528a:	4d0f      	ldr	r5, [pc, #60]	; (52c8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3ec>)
    528c:	4628      	mov	r0, r5
    528e:	f00e fe54 	bl	13f3a <sym_EYCTNYR4EGC7WLNGYDH3RDAKCGFJGNKW3YTY5LI>
    5292:	88b8      	ldrh	r0, [r7, #4]
    5294:	8068      	strh	r0, [r5, #2]
    5296:	8820      	ldrh	r0, [r4, #0]
    5298:	8028      	strh	r0, [r5, #0]
    529a:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
    529e:	7128      	strb	r0, [r5, #4]
    52a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    52a4:	f240 11c1 	movw	r1, #449	; 0x1c1
    52a8:	2027      	movs	r0, #39	; 0x27
    52aa:	f7fe fe49 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52ae:	0000      	.short	0x0000
    52b0:	200000d4 	.word	0x200000d4
    52b4:	2000010c 	.word	0x2000010c
    52b8:	00005c74 	.word	0x00005c74
    52bc:	20000730 	.word	0x20000730
    52c0:	20000838 	.word	0x20000838
    52c4:	40001550 	.word	0x40001550
    52c8:	20000882 	.word	0x20000882

000052cc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    52cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    52d0:	0006      	movs	r6, r0
    52d2:	4846      	ldr	r0, [pc, #280]	; (53ec <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x120>)
    52d4:	4d46      	ldr	r5, [pc, #280]	; (53f0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x124>)
    52d6:	6840      	ldr	r0, [r0, #4]
    52d8:	f100 0478 	add.w	r4, r0, #120	; 0x78
    52dc:	6a68      	ldr	r0, [r5, #36]	; 0x24
    52de:	f890 9001 	ldrb.w	r9, [r0, #1]
    52e2:	bf18      	it	ne
    52e4:	2e01      	cmpne	r6, #1
    52e6:	d103      	bne.n	52f0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x24>
    52e8:	6b69      	ldr	r1, [r5, #52]	; 0x34
    52ea:	f00a fec0 	bl	1006e <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    52ee:	7068      	strb	r0, [r5, #1]
    52f0:	7868      	ldrb	r0, [r5, #1]
    52f2:	2700      	movs	r7, #0
    52f4:	f04f 0801 	mov.w	r8, #1
    52f8:	b150      	cbz	r0, 5310 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x44>
    52fa:	2801      	cmp	r0, #1
    52fc:	d02f      	beq.n	535e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x92>
    52fe:	2802      	cmp	r0, #2
    5300:	d055      	beq.n	53ae <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xe2>
    5302:	2803      	cmp	r0, #3
    5304:	d067      	beq.n	53d6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x10a>
    5306:	f240 4115 	movw	r1, #1045	; 0x415
    530a:	2027      	movs	r0, #39	; 0x27
    530c:	f7fe fe18 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5310:	2e01      	cmp	r6, #1
    5312:	d012      	beq.n	533a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x6e>
    5314:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5316:	2800      	cmp	r0, #0
    5318:	d044      	beq.n	53a4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>
    531a:	8969      	ldrh	r1, [r5, #10]
    531c:	1cca      	adds	r2, r1, #3
    531e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    5320:	f00a fd68 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5324:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5326:	6268      	str	r0, [r5, #36]	; 0x24
    5328:	2201      	movs	r2, #1
    532a:	4649      	mov	r1, r9
    532c:	6b68      	ldr	r0, [r5, #52]	; 0x34
    532e:	f00b fad2 	bl	108d6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5332:	2e02      	cmp	r6, #2
    5334:	bf08      	it	eq
    5336:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    533a:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
    533e:	1c41      	adds	r1, r0, #1
    5340:	f142 0000 	adc.w	r0, r2, #0
    5344:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
    5348:	7a20      	ldrb	r0, [r4, #8]
    534a:	2801      	cmp	r0, #1
    534c:	d101      	bne.n	5352 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x86>
    534e:	7227      	strb	r7, [r4, #8]
    5350:	e001      	b.n	5356 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x8a>
    5352:	f884 8008 	strb.w	r8, [r4, #8]
    5356:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    535a:	f001 bfef 	b.w	733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    535e:	2e01      	cmp	r6, #1
    5360:	d011      	beq.n	5386 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xba>
    5362:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5364:	b1f0      	cbz	r0, 53a4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>
    5366:	8969      	ldrh	r1, [r5, #10]
    5368:	1cca      	adds	r2, r1, #3
    536a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    536c:	f00a fd42 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5370:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5372:	6268      	str	r0, [r5, #36]	; 0x24
    5374:	2200      	movs	r2, #0
    5376:	4649      	mov	r1, r9
    5378:	6b68      	ldr	r0, [r5, #52]	; 0x34
    537a:	f00b faac 	bl	108d6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    537e:	2e02      	cmp	r6, #2
    5380:	bf08      	it	eq
    5382:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5386:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
    538a:	1c41      	adds	r1, r0, #1
    538c:	f142 0000 	adc.w	r0, r2, #0
    5390:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
    5394:	7a20      	ldrb	r0, [r4, #8]
    5396:	2801      	cmp	r0, #1
    5398:	bf0c      	ite	eq
    539a:	7227      	strbeq	r7, [r4, #8]
    539c:	f884 8008 	strbne.w	r8, [r4, #8]
    53a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    53a4:	f240 415b 	movw	r1, #1115	; 0x45b
    53a8:	2027      	movs	r0, #39	; 0x27
    53aa:	f7fe fdc9 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53ae:	2e01      	cmp	r6, #1
    53b0:	d006      	beq.n	53c0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xf4>
    53b2:	6b68      	ldr	r0, [r5, #52]	; 0x34
    53b4:	f00b fc79 	bl	10caa <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    53b8:	2e02      	cmp	r6, #2
    53ba:	bf08      	it	eq
    53bc:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    53c0:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
    53c4:	1c41      	adds	r1, r0, #1
    53c6:	f142 0000 	adc.w	r0, r2, #0
    53ca:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
    53ce:	7a20      	ldrb	r0, [r4, #8]
    53d0:	2801      	cmp	r0, #1
    53d2:	d1be      	bne.n	5352 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x86>
    53d4:	e7bb      	b.n	534e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x82>
    53d6:	2e01      	cmp	r6, #1
    53d8:	bf08      	it	eq
    53da:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    53de:	6b68      	ldr	r0, [r5, #52]	; 0x34
    53e0:	f00b fc63 	bl	10caa <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    53e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    53e8:	f001 bfa8 	b.w	733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    53ec:	2000010c 	.word	0x2000010c
    53f0:	200000d4 	.word	0x200000d4

000053f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    53f4:	b538      	push	{r3, r4, r5, lr}
    53f6:	481a      	ldr	r0, [pc, #104]	; (5460 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>)
    53f8:	7801      	ldrb	r1, [r0, #0]
    53fa:	f100 0438 	add.w	r4, r0, #56	; 0x38
    53fe:	b149      	cbz	r1, 5414 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20>
    5400:	7821      	ldrb	r1, [r4, #0]
    5402:	7800      	ldrb	r0, [r0, #0]
    5404:	b149      	cbz	r1, 541a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26>
    5406:	2802      	cmp	r0, #2
    5408:	d00e      	beq.n	5428 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>
    540a:	f240 11dd 	movw	r1, #477	; 0x1dd
    540e:	2027      	movs	r0, #39	; 0x27
    5410:	f7fe fd96 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5414:	f000 fa9e 	bl	5954 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x560>
    5418:	e00b      	b.n	5432 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e>
    541a:	2801      	cmp	r0, #1
    541c:	d009      	beq.n	5432 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e>
    541e:	f240 11d9 	movw	r1, #473	; 0x1d9
    5422:	2027      	movs	r0, #39	; 0x27
    5424:	f7fe fd8c 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5428:	6860      	ldr	r0, [r4, #4]
    542a:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    542e:	f009 fa9f 	bl	e970 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    5432:	6860      	ldr	r0, [r4, #4]
    5434:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    5438:	f88d 1000 	strb.w	r1, [sp]
    543c:	f89d 1000 	ldrb.w	r1, [sp]
    5440:	2900      	cmp	r1, #0
    5442:	bf18      	it	ne
    5444:	bd38      	popne	{r3, r4, r5, pc}
    5446:	6f01      	ldr	r1, [r0, #112]	; 0x70
    5448:	2900      	cmp	r1, #0
    544a:	bf08      	it	eq
    544c:	bd38      	popeq	{r3, r4, r5, pc}
    544e:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    5452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5456:	2200      	movs	r2, #0
    5458:	4611      	mov	r1, r2
    545a:	f7fd b93d 	b.w	26d8 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    545e:	0000      	.short	0x0000
    5460:	200000d4 	.word	0x200000d4
    5464:	2901      	cmp	r1, #1
    5466:	bf84      	itt	hi
    5468:	2001      	movhi	r0, #1
    546a:	4770      	bxhi	lr
    546c:	b570      	push	{r4, r5, r6, lr}
    546e:	4c1b      	ldr	r4, [pc, #108]	; (54dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe8>)
    5470:	4605      	mov	r5, r0
    5472:	69a1      	ldr	r1, [r4, #24]
    5474:	4788      	blx	r1
    5476:	2800      	cmp	r0, #0
    5478:	d02c      	beq.n	54d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe0>
    547a:	7960      	ldrb	r0, [r4, #5]
    547c:	bb50      	cbnz	r0, 54d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe0>
    547e:	f104 0038 	add.w	r0, r4, #56	; 0x38
    5482:	7801      	ldrb	r1, [r0, #0]
    5484:	2900      	cmp	r1, #0
    5486:	bf08      	it	eq
    5488:	2d01      	cmpeq	r5, #1
    548a:	d001      	beq.n	5490 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9c>
    548c:	b321      	cbz	r1, 54d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    548e:	bb1d      	cbnz	r5, 54d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    5490:	4813      	ldr	r0, [pc, #76]	; (54e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xec>)
    5492:	7802      	ldrb	r2, [r0, #0]
    5494:	f012 0f10 	tst.w	r2, #16
    5498:	d106      	bne.n	54a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>
    549a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    549c:	7800      	ldrb	r0, [r0, #0]
    549e:	f010 0f10 	tst.w	r0, #16
    54a2:	bf08      	it	eq
    54a4:	2001      	moveq	r0, #1
    54a6:	d001      	beq.n	54ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    54a8:	f04f 0000 	mov.w	r0, #0
    54ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    54ae:	b923      	cbnz	r3, 54ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc6>
    54b0:	8963      	ldrh	r3, [r4, #10]
    54b2:	b113      	cbz	r3, 54ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc6>
    54b4:	f012 0f10 	tst.w	r2, #16
    54b8:	d00c      	beq.n	54d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe0>
    54ba:	2900      	cmp	r1, #0
    54bc:	bf1c      	itt	ne
    54be:	7b21      	ldrbne	r1, [r4, #12]
    54c0:	f011 0f02 	tstne.w	r1, #2
    54c4:	d003      	beq.n	54ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xda>
    54c6:	6a21      	ldr	r1, [r4, #32]
    54c8:	78c9      	ldrb	r1, [r1, #3]
    54ca:	2902      	cmp	r1, #2
    54cc:	d004      	beq.n	54d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    54ce:	89a1      	ldrh	r1, [r4, #12]
    54d0:	4308      	orrs	r0, r1
    54d2:	d001      	beq.n	54d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    54d4:	2001      	movs	r0, #1
    54d6:	bd70      	pop	{r4, r5, r6, pc}
    54d8:	2000      	movs	r0, #0
    54da:	bd70      	pop	{r4, r5, r6, pc}
    54dc:	200000d4 	.word	0x200000d4
    54e0:	200000e4 	.word	0x200000e4
    54e4:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    54e8:	4ed3      	ldr	r6, [pc, #844]	; (5838 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>)
    54ea:	4683      	mov	fp, r0
    54ec:	f1a6 0538 	sub.w	r5, r6, #56	; 0x38
    54f0:	6870      	ldr	r0, [r6, #4]
    54f2:	2700      	movs	r7, #0
    54f4:	f100 0878 	add.w	r8, r0, #120	; 0x78
    54f8:	7828      	ldrb	r0, [r5, #0]
    54fa:	46b9      	mov	r9, r7
    54fc:	2802      	cmp	r0, #2
    54fe:	d004      	beq.n	550a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    5500:	f240 41ba 	movw	r1, #1210	; 0x4ba
    5504:	2027      	movs	r0, #39	; 0x27
    5506:	f7fe fd1b 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    550a:	7ba8      	ldrb	r0, [r5, #14]
    550c:	f010 0f40 	tst.w	r0, #64	; 0x40
    5510:	d107      	bne.n	5522 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12e>
    5512:	2040      	movs	r0, #64	; 0x40
    5514:	696a      	ldr	r2, [r5, #20]
    5516:	2100      	movs	r1, #0
    5518:	4790      	blx	r2
    551a:	89e8      	ldrh	r0, [r5, #14]
    551c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    5520:	81e8      	strh	r0, [r5, #14]
    5522:	f898 0013 	ldrb.w	r0, [r8, #19]
    5526:	f04f 0a01 	mov.w	sl, #1
    552a:	f1bb 0f00 	cmp.w	fp, #0
    552e:	f000 80e9 	beq.w	5704 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>
    5532:	f008 fe2d 	bl	e190 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    5536:	f008 fe0f 	bl	e158 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    553a:	b998      	cbnz	r0, 5564 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x170>
    553c:	f898 0013 	ldrb.w	r0, [r8, #19]
    5540:	b180      	cbz	r0, 5564 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x170>
    5542:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5544:	7841      	ldrb	r1, [r0, #1]
    5546:	b169      	cbz	r1, 5564 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x170>
    5548:	7800      	ldrb	r0, [r0, #0]
    554a:	f898 1008 	ldrb.w	r1, [r8, #8]
    554e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5552:	4288      	cmp	r0, r1
    5554:	d106      	bne.n	5564 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x170>
    5556:	f885 a002 	strb.w	sl, [r5, #2]
    555a:	b002      	add	sp, #8
    555c:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5560:	f000 b9f8 	b.w	5954 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x560>
    5564:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5566:	7841      	ldrb	r1, [r0, #1]
    5568:	8169      	strh	r1, [r5, #10]
    556a:	2900      	cmp	r1, #0
    556c:	bf08      	it	eq
    556e:	62af      	streq	r7, [r5, #40]	; 0x28
    5570:	d003      	beq.n	557a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x186>
    5572:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5574:	f00b fb66 	bl	10c44 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    5578:	62a8      	str	r0, [r5, #40]	; 0x28
    557a:	89e8      	ldrh	r0, [r5, #14]
    557c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    5580:	81e8      	strh	r0, [r5, #14]
    5582:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5584:	f898 1007 	ldrb.w	r1, [r8, #7]
    5588:	7800      	ldrb	r0, [r0, #0]
    558a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    558e:	4288      	cmp	r0, r1
    5590:	d046      	beq.n	5620 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x22c>
    5592:	6870      	ldr	r0, [r6, #4]
    5594:	f100 0478 	add.w	r4, r0, #120	; 0x78
    5598:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    559c:	2800      	cmp	r0, #0
    559e:	d03b      	beq.n	5618 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x224>
    55a0:	2802      	cmp	r0, #2
    55a2:	d10d      	bne.n	55c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1cc>
    55a4:	6b28      	ldr	r0, [r5, #48]	; 0x30
    55a6:	f00b f96f 	bl	10888 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    55aa:	2800      	cmp	r0, #0
    55ac:	d04c      	beq.n	5648 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x254>
    55ae:	e9d4 1016 	ldrd	r1, r0, [r4, #88]	; 0x58
    55b2:	1c49      	adds	r1, r1, #1
    55b4:	f140 0000 	adc.w	r0, r0, #0
    55b8:	e9c4 1016 	strd	r1, r0, [r4, #88]	; 0x58
    55bc:	f001 febe 	bl	733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    55c0:	71a7      	strb	r7, [r4, #6]
    55c2:	7830      	ldrb	r0, [r6, #0]
    55c4:	2800      	cmp	r0, #0
    55c6:	bf1c      	itt	ne
    55c8:	78e0      	ldrbne	r0, [r4, #3]
    55ca:	2800      	cmpne	r0, #0
    55cc:	d009      	beq.n	55e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ee>
    55ce:	70e7      	strb	r7, [r4, #3]
    55d0:	89aa      	ldrh	r2, [r5, #12]
    55d2:	4639      	mov	r1, r7
    55d4:	f042 0210 	orr.w	r2, r2, #16
    55d8:	81aa      	strh	r2, [r5, #12]
    55da:	696a      	ldr	r2, [r5, #20]
    55dc:	f04f 0010 	mov.w	r0, #16
    55e0:	4790      	blx	r2
    55e2:	78a0      	ldrb	r0, [r4, #2]
    55e4:	b190      	cbz	r0, 560c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x218>
    55e6:	70a7      	strb	r7, [r4, #2]
    55e8:	f7ff fbd4 	bl	4d94 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    55ec:	b388      	cbz	r0, 5652 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25e>
    55ee:	89aa      	ldrh	r2, [r5, #12]
    55f0:	2008      	movs	r0, #8
    55f2:	f042 0208 	orr.w	r2, r2, #8
    55f6:	81aa      	strh	r2, [r5, #12]
    55f8:	696a      	ldr	r2, [r5, #20]
    55fa:	2100      	movs	r1, #0
    55fc:	4790      	blx	r2
    55fe:	e9d4 0216 	ldrd	r0, r2, [r4, #88]	; 0x58
    5602:	1c41      	adds	r1, r0, #1
    5604:	f142 0000 	adc.w	r0, r2, #0
    5608:	e9c4 1016 	strd	r1, r0, [r4, #88]	; 0x58
    560c:	79e0      	ldrb	r0, [r4, #7]
    560e:	2801      	cmp	r0, #1
    5610:	bf0c      	ite	eq
    5612:	71e7      	strbeq	r7, [r4, #7]
    5614:	f884 a007 	strbne.w	sl, [r4, #7]
    5618:	89e8      	ldrh	r0, [r5, #14]
    561a:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    561e:	81e8      	strh	r0, [r5, #14]
    5620:	6a69      	ldr	r1, [r5, #36]	; 0x24
    5622:	f898 3008 	ldrb.w	r3, [r8, #8]
    5626:	7808      	ldrb	r0, [r1, #0]
    5628:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    562c:	429a      	cmp	r2, r3
    562e:	d13b      	bne.n	56a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    5630:	6872      	ldr	r2, [r6, #4]
    5632:	f000 0003 	and.w	r0, r0, #3
    5636:	f102 0478 	add.w	r4, r2, #120	; 0x78
    563a:	2801      	cmp	r0, #1
    563c:	bf18      	it	ne
    563e:	2802      	cmpne	r0, #2
    5640:	d01a      	beq.n	5678 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x284>
    5642:	2803      	cmp	r0, #3
    5644:	d00a      	beq.n	565c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x268>
    5646:	e056      	b.n	56f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x302>
    5648:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    564c:	2027      	movs	r0, #39	; 0x27
    564e:	f7fe fc77 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5652:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    5656:	2027      	movs	r0, #39	; 0x27
    5658:	f7fe fc72 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    565c:	f884 a001 	strb.w	sl, [r4, #1]
    5660:	89ea      	ldrh	r2, [r5, #14]
    5662:	4650      	mov	r0, sl
    5664:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    5668:	81ea      	strh	r2, [r5, #14]
    566a:	89aa      	ldrh	r2, [r5, #12]
    566c:	f042 0201 	orr.w	r2, r2, #1
    5670:	81aa      	strh	r2, [r5, #12]
    5672:	696a      	ldr	r2, [r5, #20]
    5674:	4790      	blx	r2
    5676:	e03e      	b.n	56f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x302>
    5678:	7848      	ldrb	r0, [r1, #1]
    567a:	b3e0      	cbz	r0, 56f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x302>
    567c:	89e9      	ldrh	r1, [r5, #14]
    567e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    5682:	81e9      	strh	r1, [r5, #14]
    5684:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    5686:	b179      	cbz	r1, 56a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    5688:	28fb      	cmp	r0, #251	; 0xfb
    568a:	d809      	bhi.n	56a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ac>
    568c:	79a8      	ldrb	r0, [r5, #6]
    568e:	2800      	cmp	r0, #0
    5690:	bf08      	it	eq
    5692:	46d1      	moveq	r9, sl
    5694:	d008      	beq.n	56a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    5696:	2020      	movs	r0, #32
    5698:	696a      	ldr	r2, [r5, #20]
    569a:	2100      	movs	r1, #0
    569c:	4790      	blx	r2
    569e:	e003      	b.n	56a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    56a0:	7968      	ldrb	r0, [r5, #5]
    56a2:	f040 0010 	orr.w	r0, r0, #16
    56a6:	7168      	strb	r0, [r5, #5]
    56a8:	f898 0012 	ldrb.w	r0, [r8, #18]
    56ac:	2800      	cmp	r0, #0
    56ae:	d041      	beq.n	5734 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x340>
    56b0:	7830      	ldrb	r0, [r6, #0]
    56b2:	6874      	ldr	r4, [r6, #4]
    56b4:	2800      	cmp	r0, #0
    56b6:	bf0c      	ite	eq
    56b8:	2101      	moveq	r1, #1
    56ba:	2100      	movne	r1, #0
    56bc:	485f      	ldr	r0, [pc, #380]	; (583c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>)
    56be:	7601      	strb	r1, [r0, #24]
    56c0:	e9d8 1216 	ldrd	r1, r2, [r8, #88]	; 0x58
    56c4:	e9c0 1204 	strd	r1, r2, [r0, #16]
    56c8:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    56cc:	2801      	cmp	r0, #1
    56ce:	bf08      	it	eq
    56d0:	2300      	moveq	r3, #0
    56d2:	d023      	beq.n	571c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x328>
    56d4:	2802      	cmp	r0, #2
    56d6:	bf08      	it	eq
    56d8:	2301      	moveq	r3, #1
    56da:	d01f      	beq.n	571c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x328>
    56dc:	2804      	cmp	r0, #4
    56de:	bf08      	it	eq
    56e0:	2303      	moveq	r3, #3
    56e2:	d01b      	beq.n	571c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x328>
    56e4:	2808      	cmp	r0, #8
    56e6:	bf08      	it	eq
    56e8:	2302      	moveq	r3, #2
    56ea:	d017      	beq.n	571c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x328>
    56ec:	f240 31ad 	movw	r1, #941	; 0x3ad
    56f0:	2006      	movs	r0, #6
    56f2:	f7fe fc25 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56f6:	7a20      	ldrb	r0, [r4, #8]
    56f8:	2801      	cmp	r0, #1
    56fa:	bf0c      	ite	eq
    56fc:	7227      	strbeq	r7, [r4, #8]
    56fe:	f884 a008 	strbne.w	sl, [r4, #8]
    5702:	e7d1      	b.n	56a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    5704:	2800      	cmp	r0, #0
    5706:	bf18      	it	ne
    5708:	f008 fd3c 	blne	e184 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    570c:	78e8      	ldrb	r0, [r5, #3]
    570e:	1c40      	adds	r0, r0, #1
    5710:	70e8      	strb	r0, [r5, #3]
    5712:	89e8      	ldrh	r0, [r5, #14]
    5714:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5718:	81e8      	strh	r0, [r5, #14]
    571a:	e7c5      	b.n	56a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    571c:	22fb      	movs	r2, #251	; 0xfb
    571e:	4947      	ldr	r1, [pc, #284]	; (583c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>)
    5720:	2000      	movs	r0, #0
    5722:	f008 fc9f 	bl	e064 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5726:	68e0      	ldr	r0, [r4, #12]
    5728:	f641 514c 	movw	r1, #7500	; 0x1d4c
    572c:	4288      	cmp	r0, r1
    572e:	bf28      	it	cs
    5730:	f008 fcfc 	blcs	e12c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5734:	4c42      	ldr	r4, [pc, #264]	; (5840 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>)
    5736:	9801      	ldr	r0, [sp, #4]
    5738:	b920      	cbnz	r0, 5744 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x350>
    573a:	78e9      	ldrb	r1, [r5, #3]
    573c:	2001      	movs	r0, #1
    573e:	f7ff fe91 	bl	5464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x70>
    5742:	b3a8      	cbz	r0, 57b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3bc>
    5744:	f009 fde2 	bl	f30c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    5748:	f1b9 0f00 	cmp.w	r9, #0
    574c:	bf1c      	itt	ne
    574e:	2000      	movne	r0, #0
    5750:	f7ff fdbc 	blne	52cc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5754:	f1bb 0f00 	cmp.w	fp, #0
    5758:	d022      	beq.n	57a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ac>
    575a:	70ef      	strb	r7, [r5, #3]
    575c:	7960      	ldrb	r0, [r4, #5]
    575e:	1c40      	adds	r0, r0, #1
    5760:	7160      	strb	r0, [r4, #5]
    5762:	6874      	ldr	r4, [r6, #4]
    5764:	f104 0578 	add.w	r5, r4, #120	; 0x78
    5768:	4629      	mov	r1, r5
    576a:	4620      	mov	r0, r4
    576c:	f00b ff16 	bl	1159c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    5770:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    5774:	2901      	cmp	r1, #1
    5776:	d116      	bne.n	57a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b2>
    5778:	b1a8      	cbz	r0, 57a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b2>
    577a:	7830      	ldrb	r0, [r6, #0]
    577c:	2800      	cmp	r0, #0
    577e:	6870      	ldr	r0, [r6, #4]
    5780:	bf0c      	ite	eq
    5782:	f500 70c6 	addeq.w	r0, r0, #396	; 0x18c
    5786:	f500 7001 	addne.w	r0, r0, #516	; 0x204
    578a:	8821      	ldrh	r1, [r4, #0]
    578c:	8041      	strh	r1, [r0, #2]
    578e:	7a69      	ldrb	r1, [r5, #9]
    5790:	7101      	strb	r1, [r0, #4]
    5792:	7aa9      	ldrb	r1, [r5, #10]
    5794:	7141      	strb	r1, [r0, #5]
    5796:	f880 a000 	strb.w	sl, [r0]
    579a:	f001 fdcf 	bl	733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    579e:	e002      	b.n	57a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b2>
    57a0:	79a0      	ldrb	r0, [r4, #6]
    57a2:	1c40      	adds	r0, r0, #1
    57a4:	71a0      	strb	r0, [r4, #6]
    57a6:	b002      	add	sp, #8
    57a8:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    57ac:	f000 b8d2 	b.w	5954 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x560>
    57b0:	f1b9 0f00 	cmp.w	r9, #0
    57b4:	bf1c      	itt	ne
    57b6:	2001      	movne	r0, #1
    57b8:	f7ff fd88 	blne	52cc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    57bc:	2000      	movs	r0, #0
    57be:	f000 f969 	bl	5a94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a0>
    57c2:	f1b9 0f00 	cmp.w	r9, #0
    57c6:	bf1c      	itt	ne
    57c8:	2002      	movne	r0, #2
    57ca:	f7ff fd7f 	blne	52cc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    57ce:	f1bb 0f00 	cmp.w	fp, #0
    57d2:	d02b      	beq.n	582c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x438>
    57d4:	70ef      	strb	r7, [r5, #3]
    57d6:	7960      	ldrb	r0, [r4, #5]
    57d8:	1c40      	adds	r0, r0, #1
    57da:	7160      	strb	r0, [r4, #5]
    57dc:	6874      	ldr	r4, [r6, #4]
    57de:	f104 0578 	add.w	r5, r4, #120	; 0x78
    57e2:	4629      	mov	r1, r5
    57e4:	4620      	mov	r0, r4
    57e6:	f00b fed9 	bl	1159c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    57ea:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    57ee:	2901      	cmp	r1, #1
    57f0:	bf1c      	itt	ne
    57f2:	b002      	addne	sp, #8
    57f4:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    57f8:	2800      	cmp	r0, #0
    57fa:	bf04      	itt	eq
    57fc:	b002      	addeq	sp, #8
    57fe:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5802:	7830      	ldrb	r0, [r6, #0]
    5804:	2800      	cmp	r0, #0
    5806:	6870      	ldr	r0, [r6, #4]
    5808:	bf0c      	ite	eq
    580a:	f500 70c6 	addeq.w	r0, r0, #396	; 0x18c
    580e:	f500 7001 	addne.w	r0, r0, #516	; 0x204
    5812:	8821      	ldrh	r1, [r4, #0]
    5814:	8041      	strh	r1, [r0, #2]
    5816:	7a69      	ldrb	r1, [r5, #9]
    5818:	7101      	strb	r1, [r0, #4]
    581a:	7aa9      	ldrb	r1, [r5, #10]
    581c:	7141      	strb	r1, [r0, #5]
    581e:	f880 a000 	strb.w	sl, [r0]
    5822:	b002      	add	sp, #8
    5824:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5828:	f001 bd88 	b.w	733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    582c:	79a0      	ldrb	r0, [r4, #6]
    582e:	1c40      	adds	r0, r0, #1
    5830:	71a0      	strb	r0, [r4, #6]
    5832:	b002      	add	sp, #8
    5834:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5838:	2000010c 	.word	0x2000010c
    583c:	20000838 	.word	0x20000838
    5840:	20000882 	.word	0x20000882
    5844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5848:	4e40      	ldr	r6, [pc, #256]	; (594c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x558>)
    584a:	4680      	mov	r8, r0
    584c:	f1a6 0538 	sub.w	r5, r6, #56	; 0x38
    5850:	6870      	ldr	r0, [r6, #4]
    5852:	460f      	mov	r7, r1
    5854:	f100 0478 	add.w	r4, r0, #120	; 0x78
    5858:	7828      	ldrb	r0, [r5, #0]
    585a:	2801      	cmp	r0, #1
    585c:	d004      	beq.n	5868 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x474>
    585e:	f240 416a 	movw	r1, #1130	; 0x46a
    5862:	2027      	movs	r0, #39	; 0x27
    5864:	f7fe fb6c 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5868:	7860      	ldrb	r0, [r4, #1]
    586a:	f04f 0901 	mov.w	r9, #1
    586e:	b168      	cbz	r0, 588c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    5870:	2100      	movs	r1, #0
    5872:	7061      	strb	r1, [r4, #1]
    5874:	89aa      	ldrh	r2, [r5, #12]
    5876:	2004      	movs	r0, #4
    5878:	f042 0204 	orr.w	r2, r2, #4
    587c:	81aa      	strh	r2, [r5, #12]
    587e:	696a      	ldr	r2, [r5, #20]
    5880:	4790      	blx	r2
    5882:	7830      	ldrb	r0, [r6, #0]
    5884:	2800      	cmp	r0, #0
    5886:	bf18      	it	ne
    5888:	f884 9003 	strbne.w	r9, [r4, #3]
    588c:	6a29      	ldr	r1, [r5, #32]
    588e:	f04f 0a03 	mov.w	sl, #3
    5892:	7808      	ldrb	r0, [r1, #0]
    5894:	ea3a 0000 	bics.w	r0, sl, r0
    5898:	d10d      	bne.n	58b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c2>
    589a:	79a0      	ldrb	r0, [r4, #6]
    589c:	b9a0      	cbnz	r0, 58c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d4>
    589e:	89aa      	ldrh	r2, [r5, #12]
    58a0:	2002      	movs	r0, #2
    58a2:	f042 0202 	orr.w	r2, r2, #2
    58a6:	81aa      	strh	r2, [r5, #12]
    58a8:	696a      	ldr	r2, [r5, #20]
    58aa:	4790      	blx	r2
    58ac:	6a28      	ldr	r0, [r5, #32]
    58ae:	7800      	ldrb	r0, [r0, #0]
    58b0:	ea3a 0000 	bics.w	r0, sl, r0
    58b4:	d008      	beq.n	58c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d4>
    58b6:	6a28      	ldr	r0, [r5, #32]
    58b8:	7840      	ldrb	r0, [r0, #1]
    58ba:	2800      	cmp	r0, #0
    58bc:	bf0e      	itee	eq
    58be:	f884 9006 	strbeq.w	r9, [r4, #6]
    58c2:	2002      	movne	r0, #2
    58c4:	71a0      	strbne	r0, [r4, #6]
    58c6:	e001      	b.n	58cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d8>
    58c8:	f884 a006 	strb.w	sl, [r4, #6]
    58cc:	7ce0      	ldrb	r0, [r4, #19]
    58ce:	b358      	cbz	r0, 5928 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x534>
    58d0:	7830      	ldrb	r0, [r6, #0]
    58d2:	7a6a      	ldrb	r2, [r5, #9]
    58d4:	6873      	ldr	r3, [r6, #4]
    58d6:	2800      	cmp	r0, #0
    58d8:	bf0c      	ite	eq
    58da:	2001      	moveq	r0, #1
    58dc:	2000      	movne	r0, #0
    58de:	f080 0101 	eor.w	r1, r0, #1
    58e2:	481b      	ldr	r0, [pc, #108]	; (5950 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x55c>)
    58e4:	7601      	strb	r1, [r0, #24]
    58e6:	e9d4 1c18 	ldrd	r1, ip, [r4, #96]	; 0x60
    58ea:	e9c0 1c04 	strd	r1, ip, [r0, #16]
    58ee:	f893 006b 	ldrb.w	r0, [r3, #107]	; 0x6b
    58f2:	2801      	cmp	r0, #1
    58f4:	bf08      	it	eq
    58f6:	2300      	moveq	r3, #0
    58f8:	d010      	beq.n	591c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x528>
    58fa:	2802      	cmp	r0, #2
    58fc:	bf08      	it	eq
    58fe:	2301      	moveq	r3, #1
    5900:	d00c      	beq.n	591c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x528>
    5902:	2804      	cmp	r0, #4
    5904:	bf08      	it	eq
    5906:	2303      	moveq	r3, #3
    5908:	d008      	beq.n	591c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x528>
    590a:	2808      	cmp	r0, #8
    590c:	bf08      	it	eq
    590e:	2302      	moveq	r3, #2
    5910:	d004      	beq.n	591c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x528>
    5912:	f240 31ad 	movw	r1, #941	; 0x3ad
    5916:	2006      	movs	r0, #6
    5918:	f7fe fb12 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    591c:	490c      	ldr	r1, [pc, #48]	; (5950 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x55c>)
    591e:	2001      	movs	r0, #1
    5920:	f008 fba0 	bl	e064 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5924:	f008 fc02 	bl	e12c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5928:	ea37 0008 	bics.w	r0, r7, r8
    592c:	d004      	beq.n	5938 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x544>
    592e:	2100      	movs	r1, #0
    5930:	4608      	mov	r0, r1
    5932:	f7ff fd97 	bl	5464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x70>
    5936:	b118      	cbz	r0, 5940 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54c>
    5938:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    593c:	f000 b80a 	b.w	5954 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x560>
    5940:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5944:	2000      	movs	r0, #0
    5946:	f000 b84b 	b.w	59e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ec>
    594a:	0000      	.short	0x0000
    594c:	2000010c 	.word	0x2000010c
    5950:	20000838 	.word	0x20000838
    5954:	b510      	push	{r4, lr}
    5956:	f008 fcc7 	bl	e2e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    595a:	f008 fb2d 	bl	dfb8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    595e:	4c0e      	ldr	r4, [pc, #56]	; (5998 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5a4>)
    5960:	2100      	movs	r1, #0
    5962:	6962      	ldr	r2, [r4, #20]
    5964:	89e0      	ldrh	r0, [r4, #14]
    5966:	4790      	blx	r2
    5968:	69e2      	ldr	r2, [r4, #28]
    596a:	7961      	ldrb	r1, [r4, #5]
    596c:	78a0      	ldrb	r0, [r4, #2]
    596e:	4790      	blx	r2
    5970:	490a      	ldr	r1, [pc, #40]	; (599c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5a8>)
    5972:	7c48      	ldrb	r0, [r1, #17]
    5974:	b168      	cbz	r0, 5992 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x59e>
    5976:	f5a1 70a9 	sub.w	r0, r1, #338	; 0x152
    597a:	f8d0 2152 	ldr.w	r2, [r0, #338]	; 0x152
    597e:	f8d0 3156 	ldr.w	r3, [r0, #342]	; 0x156
    5982:	f8c0 215a 	str.w	r2, [r0, #346]	; 0x15a
    5986:	f8c0 315e 	str.w	r3, [r0, #350]	; 0x15e
    598a:	2001      	movs	r0, #1
    598c:	7408      	strb	r0, [r1, #16]
    598e:	f001 fcd5 	bl	733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5992:	2000      	movs	r0, #0
    5994:	7020      	strb	r0, [r4, #0]
    5996:	bd10      	pop	{r4, pc}
    5998:	200000d4 	.word	0x200000d4
    599c:	20000882 	.word	0x20000882
    59a0:	4808      	ldr	r0, [pc, #32]	; (59c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d0>)
    59a2:	b510      	push	{r4, lr}
    59a4:	7800      	ldrb	r0, [r0, #0]
    59a6:	2802      	cmp	r0, #2
    59a8:	d004      	beq.n	59b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c0>
    59aa:	f240 2111 	movw	r1, #529	; 0x211
    59ae:	2027      	movs	r0, #39	; 0x27
    59b0:	f7fe fac6 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59b4:	4904      	ldr	r1, [pc, #16]	; (59c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d4>)
    59b6:	2001      	movs	r0, #1
    59b8:	71c8      	strb	r0, [r1, #7]
    59ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    59be:	f7ff bfc9 	b.w	5954 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x560>
    59c2:	0000      	.short	0x0000
    59c4:	200000d4 	.word	0x200000d4
    59c8:	20000882 	.word	0x20000882
    59cc:	4803      	ldr	r0, [pc, #12]	; (59dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>)
    59ce:	7800      	ldrb	r0, [r0, #0]
    59d0:	2800      	cmp	r0, #0
    59d2:	bf08      	it	eq
    59d4:	4770      	bxeq	lr
    59d6:	f7ff bfbd 	b.w	5954 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x560>
    59da:	0000      	.short	0x0000
    59dc:	200000d4 	.word	0x200000d4
    59e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59e4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 5a88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x694>
    59e8:	0006      	movs	r6, r0
    59ea:	f1a8 0538 	sub.w	r5, r8, #56	; 0x38
    59ee:	f8d8 4004 	ldr.w	r4, [r8, #4]
    59f2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    59f4:	6268      	str	r0, [r5, #36]	; 0x24
    59f6:	4628      	mov	r0, r5
    59f8:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    59fc:	79c0      	ldrb	r0, [r0, #7]
    59fe:	f104 0778 	add.w	r7, r4, #120	; 0x78
    5a02:	bf02      	ittt	eq
    5a04:	28ff      	cmpeq	r0, #255	; 0xff
    5a06:	f894 206a 	ldrbeq.w	r2, [r4, #106]	; 0x6a
    5a0a:	4291      	cmpeq	r1, r2
    5a0c:	d001      	beq.n	5a12 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x61e>
    5a0e:	f009 fcc1 	bl	f394 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    5a12:	7cf8      	ldrb	r0, [r7, #19]
    5a14:	b1c0      	cbz	r0, 5a48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x654>
    5a16:	481d      	ldr	r0, [pc, #116]	; (5a8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x698>)
    5a18:	f009 f9be 	bl	ed98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5a1c:	f898 0000 	ldrb.w	r0, [r8]
    5a20:	2800      	cmp	r0, #0
    5a22:	bf0c      	ite	eq
    5a24:	2001      	moveq	r0, #1
    5a26:	2000      	movne	r0, #0
    5a28:	f080 0101 	eor.w	r1, r0, #1
    5a2c:	4818      	ldr	r0, [pc, #96]	; (5a90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69c>)
    5a2e:	7601      	strb	r1, [r0, #24]
    5a30:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
    5a34:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5a38:	f5a0 7184 	sub.w	r1, r0, #264	; 0x108
    5a3c:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5a3e:	f008 fa77 	bl	df30 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    5a42:	f008 fa89 	bl	df58 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
    5a46:	e004      	b.n	5a52 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65e>
    5a48:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5a4a:	f009 f9a5 	bl	ed98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5a4e:	f008 fab3 	bl	dfb8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5a52:	b93e      	cbnz	r6, 5a64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x670>
    5a54:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5a58:	f010 000c 	ands.w	r0, r0, #12
    5a5c:	bf18      	it	ne
    5a5e:	2028      	movne	r0, #40	; 0x28
    5a60:	f008 ffbc 	bl	e9dc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    5a64:	68e0      	ldr	r0, [r4, #12]
    5a66:	f641 514c 	movw	r1, #7500	; 0x1d4c
    5a6a:	4288      	cmp	r0, r1
    5a6c:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
    5a70:	f04f 0100 	mov.w	r1, #0
    5a74:	bf34      	ite	cc
    5a76:	2001      	movcc	r0, #1
    5a78:	2000      	movcs	r0, #0
    5a7a:	f009 fba3 	bl	f1c4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5a7e:	2002      	movs	r0, #2
    5a80:	7028      	strb	r0, [r5, #0]
    5a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a86:	0000      	.short	0x0000
    5a88:	2000010c 	.word	0x2000010c
    5a8c:	20000730 	.word	0x20000730
    5a90:	20000838 	.word	0x20000838
    5a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a98:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 5c64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x870>
    5a9c:	b083      	sub	sp, #12
    5a9e:	f1a8 0b18 	sub.w	fp, r8, #24
    5aa2:	f8d8 5004 	ldr.w	r5, [r8, #4]
    5aa6:	f1a8 0438 	sub.w	r4, r8, #56	; 0x38
    5aaa:	f105 0678 	add.w	r6, r5, #120	; 0x78
    5aae:	f895 106a 	ldrb.w	r1, [r5, #106]	; 0x6a
    5ab2:	2800      	cmp	r0, #0
    5ab4:	bf01      	itttt	eq
    5ab6:	79e0      	ldrbeq	r0, [r4, #7]
    5ab8:	28ff      	cmpeq	r0, #255	; 0xff
    5aba:	f895 006b 	ldrbeq.w	r0, [r5, #107]	; 0x6b
    5abe:	4288      	cmpeq	r0, r1
    5ac0:	d003      	beq.n	5aca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d6>
    5ac2:	f04f 00ff 	mov.w	r0, #255	; 0xff
    5ac6:	f009 fc65 	bl	f394 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    5aca:	79b0      	ldrb	r0, [r6, #6]
    5acc:	f8df a198 	ldr.w	sl, [pc, #408]	; 5c68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x874>
    5ad0:	f04f 0900 	mov.w	r9, #0
    5ad4:	2701      	movs	r7, #1
    5ad6:	b150      	cbz	r0, 5aee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6fa>
    5ad8:	2801      	cmp	r0, #1
    5ada:	d025      	beq.n	5b28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x734>
    5adc:	2802      	cmp	r0, #2
    5ade:	d036      	beq.n	5b4e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x75a>
    5ae0:	2803      	cmp	r0, #3
    5ae2:	d044      	beq.n	5b6e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x77a>
    5ae4:	f240 21ae 	movw	r1, #686	; 0x2ae
    5ae8:	2027      	movs	r0, #39	; 0x27
    5aea:	f7fe fa29 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5aee:	7a20      	ldrb	r0, [r4, #8]
    5af0:	f8ad 0004 	strh.w	r0, [sp, #4]
    5af4:	f8a5 0050 	strh.w	r0, [r5, #80]	; 0x50
    5af8:	4658      	mov	r0, fp
    5afa:	f7ff f975 	bl	4de8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5afe:	b148      	cbz	r0, 5b14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x720>
    5b00:	89a2      	ldrh	r2, [r4, #12]
    5b02:	6a21      	ldr	r1, [r4, #32]
    5b04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    5b08:	81a2      	strh	r2, [r4, #12]
    5b0a:	6962      	ldr	r2, [r4, #20]
    5b0c:	2080      	movs	r0, #128	; 0x80
    5b0e:	4790      	blx	r2
    5b10:	70b7      	strb	r7, [r6, #2]
    5b12:	e030      	b.n	5b76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x782>
    5b14:	466a      	mov	r2, sp
    5b16:	a901      	add	r1, sp, #4
    5b18:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5b1a:	f00a ffe0 	bl	10ade <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>
    5b1e:	6220      	str	r0, [r4, #32]
    5b20:	b110      	cbz	r0, 5b28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x734>
    5b22:	f896 1045 	ldrb.w	r1, [r6, #69]	; 0x45
    5b26:	b111      	cbz	r1, 5b2e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    5b28:	f8c4 a020 	str.w	sl, [r4, #32]
    5b2c:	e023      	b.n	5b76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x782>
    5b2e:	f89d 1000 	ldrb.w	r1, [sp]
    5b32:	b931      	cbnz	r1, 5b42 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74e>
    5b34:	f8a0 9000 	strh.w	r9, [r0]
    5b38:	f880 9002 	strb.w	r9, [r0, #2]
    5b3c:	2101      	movs	r1, #1
    5b3e:	f00b fda8 	bl	11692 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5b42:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5b46:	6a20      	ldr	r0, [r4, #32]
    5b48:	f00b fd76 	bl	11638 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    5b4c:	e013      	b.n	5b76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x782>
    5b4e:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
    5b52:	f8ad 0004 	strh.w	r0, [sp, #4]
    5b56:	466a      	mov	r2, sp
    5b58:	a901      	add	r1, sp, #4
    5b5a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5b5c:	f00a ffbf 	bl	10ade <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>
    5b60:	6220      	str	r0, [r4, #32]
    5b62:	b940      	cbnz	r0, 5b76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x782>
    5b64:	f240 219f 	movw	r1, #671	; 0x29f
    5b68:	2027      	movs	r0, #39	; 0x27
    5b6a:	f7fe f9e9 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b6e:	4658      	mov	r0, fp
    5b70:	f7ff f93a 	bl	4de8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5b74:	b320      	cbz	r0, 5bc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7cc>
    5b76:	6a20      	ldr	r0, [r4, #32]
    5b78:	2308      	movs	r3, #8
    5b7a:	f04f 0a03 	mov.w	sl, #3
    5b7e:	7801      	ldrb	r1, [r0, #0]
    5b80:	f021 0108 	bic.w	r1, r1, #8
    5b84:	7001      	strb	r1, [r0, #0]
    5b86:	79f2      	ldrb	r2, [r6, #7]
    5b88:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    5b8c:	4311      	orrs	r1, r2
    5b8e:	f021 0104 	bic.w	r1, r1, #4
    5b92:	7001      	strb	r1, [r0, #0]
    5b94:	7a32      	ldrb	r2, [r6, #8]
    5b96:	2304      	movs	r3, #4
    5b98:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    5b9c:	4311      	orrs	r1, r2
    5b9e:	f021 0110 	bic.w	r1, r1, #16
    5ba2:	7001      	strb	r1, [r0, #0]
    5ba4:	ea3a 0101 	bics.w	r1, sl, r1
    5ba8:	bf04      	itt	eq
    5baa:	78c0      	ldrbeq	r0, [r0, #3]
    5bac:	2802      	cmpeq	r0, #2
    5bae:	d015      	beq.n	5bdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e8>
    5bb0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5bb2:	f00a ff6e 	bl	10a92 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    5bb6:	2800      	cmp	r0, #0
    5bb8:	bf18      	it	ne
    5bba:	46b9      	movne	r9, r7
    5bbc:	d005      	beq.n	5bca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d6>
    5bbe:	e00d      	b.n	5bdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e8>
    5bc0:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    5bc4:	2027      	movs	r0, #39	; 0x27
    5bc6:	f7fe f9bb 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5bca:	6a20      	ldr	r0, [r4, #32]
    5bcc:	7800      	ldrb	r0, [r0, #0]
    5bce:	ea3a 0000 	bics.w	r0, sl, r0
    5bd2:	d003      	beq.n	5bdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e8>
    5bd4:	f7ff f8c6 	bl	4d64 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    5bd8:	f080 0901 	eor.w	r9, r0, #1
    5bdc:	6a20      	ldr	r0, [r4, #32]
    5bde:	7801      	ldrb	r1, [r0, #0]
    5be0:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
    5be4:	7001      	strb	r1, [r0, #0]
    5be6:	7cb1      	ldrb	r1, [r6, #18]
    5be8:	f641 594c 	movw	r9, #7500	; 0x1d4c
    5bec:	2900      	cmp	r1, #0
    5bee:	bf1c      	itt	ne
    5bf0:	7841      	ldrbne	r1, [r0, #1]
    5bf2:	2900      	cmpne	r1, #0
    5bf4:	d01c      	beq.n	5c30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x83c>
    5bf6:	481d      	ldr	r0, [pc, #116]	; (5c6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x878>)
    5bf8:	f009 f8ce 	bl	ed98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5bfc:	f898 0000 	ldrb.w	r0, [r8]
    5c00:	2800      	cmp	r0, #0
    5c02:	bf0c      	ite	eq
    5c04:	2101      	moveq	r1, #1
    5c06:	2100      	movne	r1, #0
    5c08:	4819      	ldr	r0, [pc, #100]	; (5c70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x87c>)
    5c0a:	7601      	strb	r1, [r0, #24]
    5c0c:	e9d6 1216 	ldrd	r1, r2, [r6, #88]	; 0x58
    5c10:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5c14:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
    5c18:	6a21      	ldr	r1, [r4, #32]
    5c1a:	f008 f989 	bl	df30 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    5c1e:	68e8      	ldr	r0, [r5, #12]
    5c20:	4548      	cmp	r0, r9
    5c22:	d302      	bcc.n	5c2a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x836>
    5c24:	f008 f9ec 	bl	e000 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
    5c28:	e006      	b.n	5c38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x844>
    5c2a:	f008 fa61 	bl	e0f0 <sym_IGA5ZEPU34KNQ4RFU4J67PZ2YHJD2Q5L4PZMUQY>
    5c2e:	e003      	b.n	5c38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x844>
    5c30:	f009 f8b2 	bl	ed98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5c34:	f008 f9c0 	bl	dfb8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5c38:	68e8      	ldr	r0, [r5, #12]
    5c3a:	f895 206b 	ldrb.w	r2, [r5, #107]	; 0x6b
    5c3e:	4548      	cmp	r0, r9
    5c40:	f04f 0101 	mov.w	r1, #1
    5c44:	bf34      	ite	cc
    5c46:	2001      	movcc	r0, #1
    5c48:	2000      	movcs	r0, #0
    5c4a:	f009 fabb 	bl	f1c4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5c4e:	7127      	strb	r7, [r4, #4]
    5c50:	6a20      	ldr	r0, [r4, #32]
    5c52:	8801      	ldrh	r1, [r0, #0]
    5c54:	8221      	strh	r1, [r4, #16]
    5c56:	7880      	ldrb	r0, [r0, #2]
    5c58:	74a0      	strb	r0, [r4, #18]
    5c5a:	7027      	strb	r7, [r4, #0]
    5c5c:	b003      	add	sp, #12
    5c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c62:	0000      	.short	0x0000
    5c64:	2000010c 	.word	0x2000010c
    5c68:	20000860 	.word	0x20000860
    5c6c:	20000730 	.word	0x20000730
    5c70:	20000838 	.word	0x20000838
    5c74:	000059a1 	.word	0x000059a1
    5c78:	000054e5 	.word	0x000054e5
    5c7c:	00005845 	.word	0x00005845
    5c80:	000059cd 	.word	0x000059cd

00005c84 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    5c84:	4602      	mov	r2, r0
    5c86:	4807      	ldr	r0, [pc, #28]	; (5ca4 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x20>)
    5c88:	b510      	push	{r4, lr}
    5c8a:	7800      	ldrb	r0, [r0, #0]
    5c8c:	b138      	cbz	r0, 5c9e <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1a>
    5c8e:	4806      	ldr	r0, [pc, #24]	; (5ca8 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x24>)
    5c90:	7881      	ldrb	r1, [r0, #2]
    5c92:	b121      	cbz	r1, 5c9e <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1a>
    5c94:	1cc0      	adds	r0, r0, #3
    5c96:	f008 f84b 	bl	dd30 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    5c9a:	2001      	movs	r0, #1
    5c9c:	bd10      	pop	{r4, pc}
    5c9e:	2000      	movs	r0, #0
    5ca0:	bd10      	pop	{r4, pc}
    5ca2:	0000      	.short	0x0000
    5ca4:	200002f0 	.word	0x200002f0
    5ca8:	200010e2 	.word	0x200010e2

00005cac <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    5cac:	4800      	ldr	r0, [pc, #0]	; (5cb0 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    5cae:	4770      	bx	lr
    5cb0:	200012b5 	.word	0x200012b5

00005cb4 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    5cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5cb8:	4c12      	ldr	r4, [pc, #72]	; (5d04 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x50>)
    5cba:	2600      	movs	r6, #0
    5cbc:	4635      	mov	r5, r6
    5cbe:	78a0      	ldrb	r0, [r4, #2]
    5cc0:	2800      	cmp	r0, #0
    5cc2:	bf8c      	ite	hi
    5cc4:	4f10      	ldrhi	r7, [pc, #64]	; (5d08 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x54>)
    5cc6:	e8bd 81f0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, pc}
    5cca:	1960      	adds	r0, r4, r5
    5ccc:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    5cd0:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5cd4:	2a01      	cmp	r2, #1
    5cd6:	d002      	beq.n	5cde <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x2a>
    5cd8:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    5cdc:	b158      	cbz	r0, 5cf6 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x42>
    5cde:	eb04 00c1 	add.w	r0, r4, r1, lsl #3
    5ce2:	55bd      	strb	r5, [r7, r6]
    5ce4:	f890 2153 	ldrb.w	r2, [r0, #339]	; 0x153
    5ce8:	f500 71aa 	add.w	r1, r0, #340	; 0x154
    5cec:	4630      	mov	r0, r6
    5cee:	1c73      	adds	r3, r6, #1
    5cf0:	b2de      	uxtb	r6, r3
    5cf2:	f009 fe2f 	bl	f954 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5cf6:	1c68      	adds	r0, r5, #1
    5cf8:	b2c5      	uxtb	r5, r0
    5cfa:	78a0      	ldrb	r0, [r4, #2]
    5cfc:	42a8      	cmp	r0, r5
    5cfe:	d8e4      	bhi.n	5cca <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x16>
    5d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d04:	200010e2 	.word	0x200010e2
    5d08:	200002f4 	.word	0x200002f4

00005d0c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    5d0c:	4904      	ldr	r1, [pc, #16]	; (5d20 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    5d0e:	788a      	ldrb	r2, [r1, #2]
    5d10:	4282      	cmp	r2, r0
    5d12:	bf86      	itte	hi
    5d14:	4408      	addhi	r0, r1
    5d16:	f890 0143 	ldrbhi.w	r0, [r0, #323]	; 0x143
    5d1a:	2000      	movls	r0, #0
    5d1c:	4770      	bx	lr
    5d1e:	0000      	.short	0x0000
    5d20:	200010e2 	.word	0x200010e2

00005d24 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    5d24:	4904      	ldr	r1, [pc, #16]	; (5d38 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    5d26:	788a      	ldrb	r2, [r1, #2]
    5d28:	4282      	cmp	r2, r0
    5d2a:	bf86      	itte	hi
    5d2c:	eb01 1000 	addhi.w	r0, r1, r0, lsl #4
    5d30:	3083      	addhi	r0, #131	; 0x83
    5d32:	2000      	movls	r0, #0
    5d34:	4770      	bx	lr
    5d36:	0000      	.short	0x0000
    5d38:	200010e2 	.word	0x200010e2

00005d3c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5d3c:	4a05      	ldr	r2, [pc, #20]	; (5d54 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    5d3e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5d42:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    5d46:	6802      	ldr	r2, [r0, #0]
    5d48:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    5d4c:	8880      	ldrh	r0, [r0, #4]
    5d4e:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    5d52:	4770      	bx	lr
    5d54:	200010e2 	.word	0x200010e2

00005d58 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    5d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d5c:	4c13      	ldr	r4, [pc, #76]	; (5dac <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x54>)
    5d5e:	4606      	mov	r6, r0
    5d60:	2500      	movs	r5, #0
    5d62:	78a0      	ldrb	r0, [r4, #2]
    5d64:	2800      	cmp	r0, #0
    5d66:	bf98      	it	ls
    5d68:	e8bd 81f0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d6c:	b2c0      	uxtb	r0, r0
    5d6e:	42a8      	cmp	r0, r5
    5d70:	d914      	bls.n	5d9c <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x44>
    5d72:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    5d76:	3083      	adds	r0, #131	; 0x83
    5d78:	d010      	beq.n	5d9c <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x44>
    5d7a:	1961      	adds	r1, r4, r5
    5d7c:	f891 1143 	ldrb.w	r1, [r1, #323]	; 0x143
    5d80:	b961      	cbnz	r1, 5d9c <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x44>
    5d82:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    5d86:	eb04 0741 	add.w	r7, r4, r1, lsl #1
    5d8a:	f207 110b 	addw	r1, r7, #267	; 0x10b
    5d8e:	4632      	mov	r2, r6
    5d90:	f00b f9bc 	bl	1110c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    5d94:	f8b7 010f 	ldrh.w	r0, [r7, #271]	; 0x10f
    5d98:	f8a7 010f 	strh.w	r0, [r7, #271]	; 0x10f
    5d9c:	1c68      	adds	r0, r5, #1
    5d9e:	b2c5      	uxtb	r5, r0
    5da0:	78a0      	ldrb	r0, [r4, #2]
    5da2:	42a8      	cmp	r0, r5
    5da4:	d8e2      	bhi.n	5d6c <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x14>
    5da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5daa:	0000      	.short	0x0000
    5dac:	200010e2 	.word	0x200010e2

00005db0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    5db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5db4:	460e      	mov	r6, r1
    5db6:	4607      	mov	r7, r0
    5db8:	4615      	mov	r5, r2
    5dba:	2106      	movs	r1, #6
    5dbc:	4630      	mov	r0, r6
    5dbe:	f000 fdb1 	bl	6924 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5dc2:	4c1c      	ldr	r4, [pc, #112]	; (5e34 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x84>)
    5dc4:	b198      	cbz	r0, 5dee <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x3e>
    5dc6:	78a1      	ldrb	r1, [r4, #2]
    5dc8:	b171      	cbz	r1, 5de8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x38>
    5dca:	f504 709d 	add.w	r0, r4, #314	; 0x13a
    5dce:	f011 0f01 	tst.w	r1, #1
    5dd2:	bf18      	it	ne
    5dd4:	f800 5f01 	strbne.w	r5, [r0, #1]!
    5dd8:	78a1      	ldrb	r1, [r4, #2]
    5dda:	0849      	lsrs	r1, r1, #1
    5ddc:	d004      	beq.n	5de8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x38>
    5dde:	7045      	strb	r5, [r0, #1]
    5de0:	f800 5f02 	strb.w	r5, [r0, #2]!
    5de4:	1e49      	subs	r1, r1, #1
    5de6:	d1fa      	bne.n	5dde <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2e>
    5de8:	2001      	movs	r0, #1
    5dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5dee:	4638      	mov	r0, r7
    5df0:	4631      	mov	r1, r6
    5df2:	f000 fb5f 	bl	64b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5df6:	2810      	cmp	r0, #16
    5df8:	d019      	beq.n	5e2e <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x7e>
    5dfa:	78a3      	ldrb	r3, [r4, #2]
    5dfc:	2100      	movs	r1, #0
    5dfe:	2b00      	cmp	r3, #0
    5e00:	d915      	bls.n	5e2e <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x7e>
    5e02:	1862      	adds	r2, r4, r1
    5e04:	f892 2103 	ldrb.w	r2, [r2, #259]	; 0x103
    5e08:	4282      	cmp	r2, r0
    5e0a:	d10b      	bne.n	5e24 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x74>
    5e0c:	2910      	cmp	r1, #16
    5e0e:	bf18      	it	ne
    5e10:	2908      	cmpne	r1, #8
    5e12:	d00c      	beq.n	5e2e <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x7e>
    5e14:	eb04 0001 	add.w	r0, r4, r1
    5e18:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    5e1c:	f04f 0001 	mov.w	r0, #1
    5e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e24:	f101 0101 	add.w	r1, r1, #1
    5e28:	b2c9      	uxtb	r1, r1
    5e2a:	428b      	cmp	r3, r1
    5e2c:	d8e9      	bhi.n	5e02 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x52>
    5e2e:	2000      	movs	r0, #0
    5e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e34:	200010e2 	.word	0x200010e2

00005e38 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    5e38:	4904      	ldr	r1, [pc, #16]	; (5e4c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    5e3a:	788a      	ldrb	r2, [r1, #2]
    5e3c:	4282      	cmp	r2, r0
    5e3e:	bf86      	itte	hi
    5e40:	eb01 1000 	addhi.w	r0, r1, r0, lsl #4
    5e44:	1cc0      	addhi	r0, r0, #3
    5e46:	2000      	movls	r0, #0
    5e48:	4770      	bx	lr
    5e4a:	0000      	.short	0x0000
    5e4c:	200010e2 	.word	0x200010e2

00005e50 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    5e50:	4908      	ldr	r1, [pc, #32]	; (5e74 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    5e52:	788a      	ldrb	r2, [r1, #2]
    5e54:	4282      	cmp	r2, r0
    5e56:	d903      	bls.n	5e60 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    5e58:	180a      	adds	r2, r1, r0
    5e5a:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    5e5e:	b10a      	cbz	r2, 5e64 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    5e60:	2000      	movs	r0, #0
    5e62:	4770      	bx	lr
    5e64:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5e68:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    5e6c:	f200 100b 	addw	r0, r0, #267	; 0x10b
    5e70:	4770      	bx	lr
    5e72:	0000      	.short	0x0000
    5e74:	200010e2 	.word	0x200010e2

00005e78 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    5e78:	b510      	push	{r4, lr}
    5e7a:	f240 12d3 	movw	r2, #467	; 0x1d3
    5e7e:	2100      	movs	r1, #0
    5e80:	4807      	ldr	r0, [pc, #28]	; (5ea0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x28>)
    5e82:	f00a f831 	bl	fee8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5e86:	2208      	movs	r2, #8
    5e88:	21ff      	movs	r1, #255	; 0xff
    5e8a:	4806      	ldr	r0, [pc, #24]	; (5ea4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    5e8c:	f00a f82c 	bl	fee8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5e90:	4805      	ldr	r0, [pc, #20]	; (5ea8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5e92:	2100      	movs	r1, #0
    5e94:	7001      	strb	r1, [r0, #0]
    5e96:	7041      	strb	r1, [r0, #1]
    5e98:	f44f 7161 	mov.w	r1, #900	; 0x384
    5e9c:	8041      	strh	r1, [r0, #2]
    5e9e:	bd10      	pop	{r4, pc}
    5ea0:	200010e2 	.word	0x200010e2
    5ea4:	200002f4 	.word	0x200002f4
    5ea8:	200002f0 	.word	0x200002f0

00005eac <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5eac:	4901      	ldr	r1, [pc, #4]	; (5eb4 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    5eae:	7008      	strb	r0, [r1, #0]
    5eb0:	4770      	bx	lr
    5eb2:	0000      	.short	0x0000
    5eb4:	200002f0 	.word	0x200002f0

00005eb8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    5eb8:	4801      	ldr	r0, [pc, #4]	; (5ec0 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    5eba:	7800      	ldrb	r0, [r0, #0]
    5ebc:	4770      	bx	lr
    5ebe:	0000      	.short	0x0000
    5ec0:	200002f0 	.word	0x200002f0

00005ec4 <sym_CMDXCVZHYNPLMTHXOO2UL3QOD6EXLAZP5GS7LRI>:
    5ec4:	b570      	push	{r4, r5, r6, lr}
    5ec6:	460c      	mov	r4, r1
    5ec8:	4605      	mov	r5, r0
    5eca:	f008 f9ed 	bl	e2a8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    5ece:	f007 ff47 	bl	dd60 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    5ed2:	480a      	ldr	r0, [pc, #40]	; (5efc <sym_CMDXCVZHYNPLMTHXOO2UL3QOD6EXLAZP5GS7LRI+0x38>)
    5ed4:	462a      	mov	r2, r5
    5ed6:	7800      	ldrb	r0, [r0, #0]
    5ed8:	b168      	cbz	r0, 5ef6 <sym_CMDXCVZHYNPLMTHXOO2UL3QOD6EXLAZP5GS7LRI+0x32>
    5eda:	4b09      	ldr	r3, [pc, #36]	; (5f00 <sym_CMDXCVZHYNPLMTHXOO2UL3QOD6EXLAZP5GS7LRI+0x3c>)
    5edc:	7899      	ldrb	r1, [r3, #2]
    5ede:	b151      	cbz	r1, 5ef6 <sym_CMDXCVZHYNPLMTHXOO2UL3QOD6EXLAZP5GS7LRI+0x32>
    5ee0:	2c00      	cmp	r4, #0
    5ee2:	bf0c      	ite	eq
    5ee4:	f103 0083 	addeq.w	r0, r3, #131	; 0x83
    5ee8:	1cd8      	addne	r0, r3, #3
    5eea:	f007 ff21 	bl	dd30 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    5eee:	f007 ff61 	bl	ddb4 <sym_MSITFZMEKFRIBNA2WU2C6VUZYGJRSJIVBH2SBPI>
    5ef2:	2001      	movs	r0, #1
    5ef4:	bd70      	pop	{r4, r5, r6, pc}
    5ef6:	2000      	movs	r0, #0
    5ef8:	bd70      	pop	{r4, r5, r6, pc}
    5efa:	0000      	.short	0x0000
    5efc:	200002f0 	.word	0x200002f0
    5f00:	200010e2 	.word	0x200010e2

00005f04 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    5f04:	4b0b      	ldr	r3, [pc, #44]	; (5f34 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    5f06:	f893 c002 	ldrb.w	ip, [r3, #2]
    5f0a:	4584      	cmp	ip, r0
    5f0c:	bf9c      	itt	ls
    5f0e:	2000      	movls	r0, #0
    5f10:	4770      	bxls	lr
    5f12:	4418      	add	r0, r3
    5f14:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5f18:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5f1c:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5f20:	700b      	strb	r3, [r1, #0]
    5f22:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    5f26:	6011      	str	r1, [r2, #0]
    5f28:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5f2c:	8090      	strh	r0, [r2, #4]
    5f2e:	2001      	movs	r0, #1
    5f30:	4770      	bx	lr
    5f32:	0000      	.short	0x0000
    5f34:	200010e2 	.word	0x200010e2

00005f38 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5f38:	4907      	ldr	r1, [pc, #28]	; (5f58 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    5f3a:	788a      	ldrb	r2, [r1, #2]
    5f3c:	4282      	cmp	r2, r0
    5f3e:	bf9c      	itt	ls
    5f40:	2000      	movls	r0, #0
    5f42:	4770      	bxls	lr
    5f44:	4408      	add	r0, r1
    5f46:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5f4a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5f4e:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5f52:	f000 0001 	and.w	r0, r0, #1
    5f56:	4770      	bx	lr
    5f58:	200010e2 	.word	0x200010e2

00005f5c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    5f5c:	b510      	push	{r4, lr}
    5f5e:	f000 faa9 	bl	64b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5f62:	2810      	cmp	r0, #16
    5f64:	d014      	beq.n	5f90 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    5f66:	4a0b      	ldr	r2, [pc, #44]	; (5f94 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x38>)
    5f68:	4601      	mov	r1, r0
    5f6a:	2000      	movs	r0, #0
    5f6c:	f892 c002 	ldrb.w	ip, [r2, #2]
    5f70:	f1bc 0f00 	cmp.w	ip, #0
    5f74:	d90c      	bls.n	5f90 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    5f76:	1813      	adds	r3, r2, r0
    5f78:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    5f7c:	428b      	cmp	r3, r1
    5f7e:	d103      	bne.n	5f88 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x2c>
    5f80:	2810      	cmp	r0, #16
    5f82:	bf18      	it	ne
    5f84:	bd10      	popne	{r4, pc}
    5f86:	e003      	b.n	5f90 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    5f88:	1c40      	adds	r0, r0, #1
    5f8a:	b2c0      	uxtb	r0, r0
    5f8c:	4584      	cmp	ip, r0
    5f8e:	d8f2      	bhi.n	5f76 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x1a>
    5f90:	2008      	movs	r0, #8
    5f92:	bd10      	pop	{r4, pc}
    5f94:	200010e2 	.word	0x200010e2

00005f98 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    5f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5f9c:	4698      	mov	r8, r3
    5f9e:	4691      	mov	r9, r2
    5fa0:	460f      	mov	r7, r1
    5fa2:	4606      	mov	r6, r0
    5fa4:	f000 fa86 	bl	64b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5fa8:	4c2d      	ldr	r4, [pc, #180]	; (6060 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xc8>)
    5faa:	4605      	mov	r5, r0
    5fac:	2810      	cmp	r0, #16
    5fae:	d017      	beq.n	5fe0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x48>
    5fb0:	78a1      	ldrb	r1, [r4, #2]
    5fb2:	2000      	movs	r0, #0
    5fb4:	2900      	cmp	r1, #0
    5fb6:	d90e      	bls.n	5fd6 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3e>
    5fb8:	1822      	adds	r2, r4, r0
    5fba:	f892 3103 	ldrb.w	r3, [r2, #259]	; 0x103
    5fbe:	42ab      	cmp	r3, r5
    5fc0:	d105      	bne.n	5fce <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x36>
    5fc2:	2810      	cmp	r0, #16
    5fc4:	bf1c      	itt	ne
    5fc6:	2012      	movne	r0, #18
    5fc8:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5fcc:	e003      	b.n	5fd6 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3e>
    5fce:	1c40      	adds	r0, r0, #1
    5fd0:	b2c0      	uxtb	r0, r0
    5fd2:	4281      	cmp	r1, r0
    5fd4:	d8f0      	bhi.n	5fb8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5fd6:	2908      	cmp	r1, #8
    5fd8:	d23f      	bcs.n	605a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xc2>
    5fda:	2d10      	cmp	r5, #16
    5fdc:	d003      	beq.n	5fe6 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x4e>
    5fde:	e018      	b.n	6012 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x7a>
    5fe0:	78a1      	ldrb	r1, [r4, #2]
    5fe2:	2908      	cmp	r1, #8
    5fe4:	d239      	bcs.n	605a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xc2>
    5fe6:	7825      	ldrb	r5, [r4, #0]
    5fe8:	2100      	movs	r1, #0
    5fea:	1c68      	adds	r0, r5, #1
    5fec:	7020      	strb	r0, [r4, #0]
    5fee:	2d10      	cmp	r5, #16
    5ff0:	d303      	bcc.n	5ffa <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x62>
    5ff2:	2146      	movs	r1, #70	; 0x46
    5ff4:	2028      	movs	r0, #40	; 0x28
    5ff6:	f7fd ffa3 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ffa:	eb04 00c5 	add.w	r0, r4, r5, lsl #3
    5ffe:	683a      	ldr	r2, [r7, #0]
    6000:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
    6004:	88ba      	ldrh	r2, [r7, #4]
    6006:	f8a0 2158 	strh.w	r2, [r0, #344]	; 0x158
    600a:	f880 6153 	strb.w	r6, [r0, #339]	; 0x153
    600e:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    6012:	78a6      	ldrb	r6, [r4, #2]
    6014:	2210      	movs	r2, #16
    6016:	1c70      	adds	r0, r6, #1
    6018:	70a0      	strb	r0, [r4, #2]
    601a:	eb04 1706 	add.w	r7, r4, r6, lsl #4
    601e:	1cf8      	adds	r0, r7, #3
    6020:	4649      	mov	r1, r9
    6022:	f000 fc41 	bl	68a8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    6026:	f107 0083 	add.w	r0, r7, #131	; 0x83
    602a:	2210      	movs	r2, #16
    602c:	4641      	mov	r1, r8
    602e:	f000 fc3b 	bl	68a8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    6032:	2110      	movs	r1, #16
    6034:	4640      	mov	r0, r8
    6036:	f000 fc75 	bl	6924 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    603a:	4434      	add	r4, r6
    603c:	2110      	movs	r1, #16
    603e:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    6042:	4648      	mov	r0, r9
    6044:	f000 fc6e 	bl	6924 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6048:	f884 014b 	strb.w	r0, [r4, #331]	; 0x14b
    604c:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
    6050:	2000      	movs	r0, #0
    6052:	f884 013b 	strb.w	r0, [r4, #315]	; 0x13b
    6056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    605a:	2007      	movs	r0, #7
    605c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6060:	200010e2 	.word	0x200010e2

00006064 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    6064:	b470      	push	{r4, r5, r6}
    6066:	484d      	ldr	r0, [pc, #308]	; (619c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x138>)
    6068:	7881      	ldrb	r1, [r0, #2]
    606a:	1e49      	subs	r1, r1, #1
    606c:	b24b      	sxtb	r3, r1
    606e:	2b00      	cmp	r3, #0
    6070:	bfbc      	itt	lt
    6072:	bc70      	poplt	{r4, r5, r6}
    6074:	4770      	bxlt	lr
    6076:	bf00      	nop
    6078:	7881      	ldrb	r1, [r0, #2]
    607a:	f003 0cff 	and.w	ip, r3, #255	; 0xff
    607e:	1e49      	subs	r1, r1, #1
    6080:	b2ca      	uxtb	r2, r1
    6082:	7082      	strb	r2, [r0, #2]
    6084:	fa50 f183 	uxtab	r1, r0, r3
    6088:	f891 1103 	ldrb.w	r1, [r1, #259]	; 0x103
    608c:	4594      	cmp	ip, r2
    608e:	d03e      	beq.n	610e <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xaa>
    6090:	eb00 1502 	add.w	r5, r0, r2, lsl #4
    6094:	eb00 140c 	add.w	r4, r0, ip, lsl #4
    6098:	f8d5 6003 	ldr.w	r6, [r5, #3]
    609c:	f8c4 6003 	str.w	r6, [r4, #3]
    60a0:	f8d5 6007 	ldr.w	r6, [r5, #7]
    60a4:	f8c4 6007 	str.w	r6, [r4, #7]
    60a8:	f8d5 600b 	ldr.w	r6, [r5, #11]
    60ac:	f8c4 600b 	str.w	r6, [r4, #11]
    60b0:	f8d5 600f 	ldr.w	r6, [r5, #15]
    60b4:	f8c4 600f 	str.w	r6, [r4, #15]
    60b8:	f8d5 6083 	ldr.w	r6, [r5, #131]	; 0x83
    60bc:	f8c4 6083 	str.w	r6, [r4, #131]	; 0x83
    60c0:	f8d5 6087 	ldr.w	r6, [r5, #135]	; 0x87
    60c4:	f8c4 6087 	str.w	r6, [r4, #135]	; 0x87
    60c8:	f8d5 608b 	ldr.w	r6, [r5, #139]	; 0x8b
    60cc:	f8c4 608b 	str.w	r6, [r4, #139]	; 0x8b
    60d0:	f8d5 508f 	ldr.w	r5, [r5, #143]	; 0x8f
    60d4:	f8c4 508f 	str.w	r5, [r4, #143]	; 0x8f
    60d8:	1885      	adds	r5, r0, r2
    60da:	eb00 040c 	add.w	r4, r0, ip
    60de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    60e2:	f895 6103 	ldrb.w	r6, [r5, #259]	; 0x103
    60e6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    60ea:	eb00 0242 	add.w	r2, r0, r2, lsl #1
    60ee:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
    60f2:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    60f6:	f8d2 610b 	ldr.w	r6, [r2, #267]	; 0x10b
    60fa:	f8cc 610b 	str.w	r6, [ip, #267]	; 0x10b
    60fe:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    6102:	f8ac 210f 	strh.w	r2, [ip, #271]	; 0x10f
    6106:	f895 213b 	ldrb.w	r2, [r5, #315]	; 0x13b
    610a:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
    610e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    6112:	f892 215a 	ldrb.w	r2, [r2, #346]	; 0x15a
    6116:	f012 0f01 	tst.w	r2, #1
    611a:	d133      	bne.n	6184 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    611c:	f890 c002 	ldrb.w	ip, [r0, #2]
    6120:	2200      	movs	r2, #0
    6122:	f1bc 0f00 	cmp.w	ip, #0
    6126:	d90b      	bls.n	6140 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xdc>
    6128:	1884      	adds	r4, r0, r2
    612a:	f894 5103 	ldrb.w	r5, [r4, #259]	; 0x103
    612e:	428d      	cmp	r5, r1
    6130:	d102      	bne.n	6138 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xd4>
    6132:	2a10      	cmp	r2, #16
    6134:	d126      	bne.n	6184 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    6136:	e003      	b.n	6140 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xdc>
    6138:	1c52      	adds	r2, r2, #1
    613a:	b2d2      	uxtb	r2, r2
    613c:	4594      	cmp	ip, r2
    613e:	d8f3      	bhi.n	6128 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc4>
    6140:	7802      	ldrb	r2, [r0, #0]
    6142:	1e52      	subs	r2, r2, #1
    6144:	b2d2      	uxtb	r2, r2
    6146:	7002      	strb	r2, [r0, #0]
    6148:	428a      	cmp	r2, r1
    614a:	d01b      	beq.n	6184 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    614c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    6150:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
    6154:	f8d2 4153 	ldr.w	r4, [r2, #339]	; 0x153
    6158:	f8cc 4153 	str.w	r4, [ip, #339]	; 0x153
    615c:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    6160:	f8cc 2157 	str.w	r2, [ip, #343]	; 0x157
    6164:	7884      	ldrb	r4, [r0, #2]
    6166:	f890 c000 	ldrb.w	ip, [r0]
    616a:	2200      	movs	r2, #0
    616c:	2c00      	cmp	r4, #0
    616e:	d909      	bls.n	6184 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    6170:	1885      	adds	r5, r0, r2
    6172:	f895 5103 	ldrb.w	r5, [r5, #259]	; 0x103
    6176:	4565      	cmp	r5, ip
    6178:	d10b      	bne.n	6192 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x12e>
    617a:	2a10      	cmp	r2, #16
    617c:	bf1c      	itt	ne
    617e:	4402      	addne	r2, r0
    6180:	f882 1103 	strbne.w	r1, [r2, #259]	; 0x103
    6184:	1e59      	subs	r1, r3, #1
    6186:	b24b      	sxtb	r3, r1
    6188:	2b00      	cmp	r3, #0
    618a:	f6bf af75 	bge.w	6078 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x14>
    618e:	bc70      	pop	{r4, r5, r6}
    6190:	4770      	bx	lr
    6192:	1c52      	adds	r2, r2, #1
    6194:	b2d2      	uxtb	r2, r2
    6196:	4294      	cmp	r4, r2
    6198:	d8ea      	bhi.n	6170 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x10c>
    619a:	e7f3      	b.n	6184 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    619c:	200010e2 	.word	0x200010e2

000061a0 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    61a0:	b510      	push	{r4, lr}
    61a2:	f000 f987 	bl	64b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    61a6:	2810      	cmp	r0, #16
    61a8:	d016      	beq.n	61d8 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x38>
    61aa:	4a0c      	ldr	r2, [pc, #48]	; (61dc <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x3c>)
    61ac:	4601      	mov	r1, r0
    61ae:	2000      	movs	r0, #0
    61b0:	7893      	ldrb	r3, [r2, #2]
    61b2:	2b00      	cmp	r3, #0
    61b4:	d910      	bls.n	61d8 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x38>
    61b6:	bf00      	nop
    61b8:	eb02 0c00 	add.w	ip, r2, r0
    61bc:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    61c0:	458c      	cmp	ip, r1
    61c2:	d105      	bne.n	61d0 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x30>
    61c4:	2810      	cmp	r0, #16
    61c6:	d007      	beq.n	61d8 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x38>
    61c8:	f000 f998 	bl	64fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xec>
    61cc:	2001      	movs	r0, #1
    61ce:	bd10      	pop	{r4, pc}
    61d0:	1c40      	adds	r0, r0, #1
    61d2:	b2c0      	uxtb	r0, r0
    61d4:	4283      	cmp	r3, r0
    61d6:	d8ef      	bhi.n	61b8 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x18>
    61d8:	2000      	movs	r0, #0
    61da:	bd10      	pop	{r4, pc}
    61dc:	200010e2 	.word	0x200010e2

000061e0 <sym_NILI2ETYIVMR32XQ6WFMUWXYMXNONBSH2DACBCQ>:
    61e0:	4602      	mov	r2, r0
    61e2:	4806      	ldr	r0, [pc, #24]	; (61fc <sym_NILI2ETYIVMR32XQ6WFMUWXYMXNONBSH2DACBCQ+0x1c>)
    61e4:	b510      	push	{r4, lr}
    61e6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    61ea:	2101      	movs	r1, #1
    61ec:	3083      	adds	r0, #131	; 0x83
    61ee:	f007 fd9f 	bl	dd30 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    61f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    61f6:	f007 bddd 	b.w	ddb4 <sym_MSITFZMEKFRIBNA2WU2C6VUZYGJRSJIVBH2SBPI>
    61fa:	0000      	.short	0x0000
    61fc:	200010e2 	.word	0x200010e2

00006200 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    6200:	4801      	ldr	r0, [pc, #4]	; (6208 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    6202:	8840      	ldrh	r0, [r0, #2]
    6204:	4770      	bx	lr
    6206:	0000      	.short	0x0000
    6208:	200002f0 	.word	0x200002f0

0000620c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    620c:	b138      	cbz	r0, 621e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    620e:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    6212:	4288      	cmp	r0, r1
    6214:	d803      	bhi.n	621e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    6216:	4903      	ldr	r1, [pc, #12]	; (6224 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    6218:	8048      	strh	r0, [r1, #2]
    621a:	2001      	movs	r0, #1
    621c:	4770      	bx	lr
    621e:	2000      	movs	r0, #0
    6220:	4770      	bx	lr
    6222:	0000      	.short	0x0000
    6224:	200002f0 	.word	0x200002f0

00006228 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
    6228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    622c:	4617      	mov	r7, r2
    622e:	2501      	movs	r5, #1
    6230:	2200      	movs	r2, #0
    6232:	461e      	mov	r6, r3
    6234:	462c      	mov	r4, r5
    6236:	703a      	strb	r2, [r7, #0]
    6238:	f000 f93c 	bl	64b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    623c:	2810      	cmp	r0, #16
    623e:	d027      	beq.n	6290 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x68>
    6240:	4918      	ldr	r1, [pc, #96]	; (62a4 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x7c>)
    6242:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
    6246:	f892 215a 	ldrb.w	r2, [r2, #346]	; 0x15a
    624a:	f002 0201 	and.w	r2, r2, #1
    624e:	703a      	strb	r2, [r7, #0]
    6250:	788b      	ldrb	r3, [r1, #2]
    6252:	2200      	movs	r2, #0
    6254:	2b00      	cmp	r3, #0
    6256:	d91b      	bls.n	6290 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x68>
    6258:	eb01 0c02 	add.w	ip, r1, r2
    625c:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    6260:	4584      	cmp	ip, r0
    6262:	d119      	bne.n	6298 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x70>
    6264:	2a10      	cmp	r2, #16
    6266:	d013      	beq.n	6290 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x68>
    6268:	2e00      	cmp	r6, #0
    626a:	bf18      	it	ne
    626c:	7032      	strbne	r2, [r6, #0]
    626e:	7888      	ldrb	r0, [r1, #2]
    6270:	4290      	cmp	r0, r2
    6272:	d90d      	bls.n	6290 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x68>
    6274:	eb01 1002 	add.w	r0, r1, r2, lsl #4
    6278:	f110 0f03 	cmn.w	r0, #3
    627c:	d008      	beq.n	6290 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x68>
    627e:	1888      	adds	r0, r1, r2
    6280:	f890 414b 	ldrb.w	r4, [r0, #331]	; 0x14b
    6284:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6288:	2801      	cmp	r0, #1
    628a:	bf0c      	ite	eq
    628c:	2501      	moveq	r5, #1
    628e:	2500      	movne	r5, #0
    6290:	ea45 0004 	orr.w	r0, r5, r4
    6294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6298:	1c52      	adds	r2, r2, #1
    629a:	b2d2      	uxtb	r2, r2
    629c:	4293      	cmp	r3, r2
    629e:	d8db      	bhi.n	6258 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x30>
    62a0:	e7f6      	b.n	6290 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x68>
    62a2:	0000      	.short	0x0000
    62a4:	200010e2 	.word	0x200010e2

000062a8 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    62a8:	4906      	ldr	r1, [pc, #24]	; (62c4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x1c>)
    62aa:	788a      	ldrb	r2, [r1, #2]
    62ac:	4282      	cmp	r2, r0
    62ae:	d906      	bls.n	62be <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x16>
    62b0:	4408      	add	r0, r1
    62b2:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    62b6:	2800      	cmp	r0, #0
    62b8:	bf04      	itt	eq
    62ba:	2001      	moveq	r0, #1
    62bc:	4770      	bxeq	lr
    62be:	2000      	movs	r0, #0
    62c0:	4770      	bx	lr
    62c2:	0000      	.short	0x0000
    62c4:	200010e2 	.word	0x200010e2

000062c8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    62c8:	b570      	push	{r4, r5, r6, lr}
    62ca:	460d      	mov	r5, r1
    62cc:	4604      	mov	r4, r0
    62ce:	f000 f8f1 	bl	64b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    62d2:	4a1a      	ldr	r2, [pc, #104]	; (633c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x74>)
    62d4:	2810      	cmp	r0, #16
    62d6:	d014      	beq.n	6302 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3a>
    62d8:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
    62dc:	f891 015a 	ldrb.w	r0, [r1, #346]	; 0x15a
    62e0:	f010 0f01 	tst.w	r0, #1
    62e4:	bf1c      	itt	ne
    62e6:	2001      	movne	r0, #1
    62e8:	bd70      	popne	{r4, r5, r6, pc}
    62ea:	7850      	ldrb	r0, [r2, #1]
    62ec:	2808      	cmp	r0, #8
    62ee:	bf3c      	itt	cc
    62f0:	2001      	movcc	r0, #1
    62f2:	f881 015a 	strbcc.w	r0, [r1, #346]	; 0x15a
    62f6:	d21e      	bcs.n	6336 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
    62f8:	7850      	ldrb	r0, [r2, #1]
    62fa:	1c40      	adds	r0, r0, #1
    62fc:	7050      	strb	r0, [r2, #1]
    62fe:	2001      	movs	r0, #1
    6300:	bd70      	pop	{r4, r5, r6, pc}
    6302:	7850      	ldrb	r0, [r2, #1]
    6304:	2808      	cmp	r0, #8
    6306:	d216      	bcs.n	6336 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
    6308:	7813      	ldrb	r3, [r2, #0]
    630a:	2001      	movs	r0, #1
    630c:	1c59      	adds	r1, r3, #1
    630e:	7011      	strb	r1, [r2, #0]
    6310:	2b10      	cmp	r3, #16
    6312:	d303      	bcc.n	631c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x54>
    6314:	2146      	movs	r1, #70	; 0x46
    6316:	2028      	movs	r0, #40	; 0x28
    6318:	f7fd fe12 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    631c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6320:	6829      	ldr	r1, [r5, #0]
    6322:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
    6326:	88a9      	ldrh	r1, [r5, #4]
    6328:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    632c:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    6330:	f883 015a 	strb.w	r0, [r3, #346]	; 0x15a
    6334:	e7e0      	b.n	62f8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x30>
    6336:	2000      	movs	r0, #0
    6338:	bd70      	pop	{r4, r5, r6, pc}
    633a:	0000      	.short	0x0000
    633c:	200010e2 	.word	0x200010e2

00006340 <sym_WPF5GN3T7F3CCL7OKOL6G2LW47JA44MC6XIU4NQ>:
    6340:	4801      	ldr	r0, [pc, #4]	; (6348 <sym_WPF5GN3T7F3CCL7OKOL6G2LW47JA44MC6XIU4NQ+0x8>)
    6342:	7840      	ldrb	r0, [r0, #1]
    6344:	4770      	bx	lr
    6346:	0000      	.short	0x0000
    6348:	200002f0 	.word	0x200002f0

0000634c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    634c:	4901      	ldr	r1, [pc, #4]	; (6354 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    634e:	7048      	strb	r0, [r1, #1]
    6350:	4770      	bx	lr
    6352:	0000      	.short	0x0000
    6354:	200002f0 	.word	0x200002f0

00006358 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    6358:	b470      	push	{r4, r5, r6}
    635a:	482b      	ldr	r0, [pc, #172]	; (6408 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb0>)
    635c:	2500      	movs	r5, #0
    635e:	7801      	ldrb	r1, [r0, #0]
    6360:	1e49      	subs	r1, r1, #1
    6362:	b24b      	sxtb	r3, r1
    6364:	2b00      	cmp	r3, #0
    6366:	db46      	blt.n	63f6 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x9e>
    6368:	eb00 01c3 	add.w	r1, r0, r3, lsl #3
    636c:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    6370:	f011 0f01 	tst.w	r1, #1
    6374:	d03b      	beq.n	63ee <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    6376:	7842      	ldrb	r2, [r0, #1]
    6378:	b2d9      	uxtb	r1, r3
    637a:	1e52      	subs	r2, r2, #1
    637c:	7042      	strb	r2, [r0, #1]
    637e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    6382:	f882 515a 	strb.w	r5, [r2, #346]	; 0x15a
    6386:	f890 c002 	ldrb.w	ip, [r0, #2]
    638a:	2200      	movs	r2, #0
    638c:	f1bc 0f00 	cmp.w	ip, #0
    6390:	d90b      	bls.n	63aa <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
    6392:	1884      	adds	r4, r0, r2
    6394:	f894 6103 	ldrb.w	r6, [r4, #259]	; 0x103
    6398:	428e      	cmp	r6, r1
    639a:	d102      	bne.n	63a2 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x4a>
    639c:	2a10      	cmp	r2, #16
    639e:	d126      	bne.n	63ee <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    63a0:	e003      	b.n	63aa <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
    63a2:	1c52      	adds	r2, r2, #1
    63a4:	b2d2      	uxtb	r2, r2
    63a6:	4594      	cmp	ip, r2
    63a8:	d8f3      	bhi.n	6392 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x3a>
    63aa:	7802      	ldrb	r2, [r0, #0]
    63ac:	1e52      	subs	r2, r2, #1
    63ae:	b2d2      	uxtb	r2, r2
    63b0:	7002      	strb	r2, [r0, #0]
    63b2:	428a      	cmp	r2, r1
    63b4:	d01b      	beq.n	63ee <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    63b6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    63ba:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
    63be:	f8d2 4153 	ldr.w	r4, [r2, #339]	; 0x153
    63c2:	f8cc 4153 	str.w	r4, [ip, #339]	; 0x153
    63c6:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    63ca:	f8cc 2157 	str.w	r2, [ip, #343]	; 0x157
    63ce:	7884      	ldrb	r4, [r0, #2]
    63d0:	f890 c000 	ldrb.w	ip, [r0]
    63d4:	2200      	movs	r2, #0
    63d6:	2c00      	cmp	r4, #0
    63d8:	d909      	bls.n	63ee <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    63da:	1886      	adds	r6, r0, r2
    63dc:	f896 6103 	ldrb.w	r6, [r6, #259]	; 0x103
    63e0:	4566      	cmp	r6, ip
    63e2:	d10c      	bne.n	63fe <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xa6>
    63e4:	2a10      	cmp	r2, #16
    63e6:	bf1c      	itt	ne
    63e8:	4402      	addne	r2, r0
    63ea:	f882 1103 	strbne.w	r1, [r2, #259]	; 0x103
    63ee:	1e59      	subs	r1, r3, #1
    63f0:	b24b      	sxtb	r3, r1
    63f2:	2b00      	cmp	r3, #0
    63f4:	dab8      	bge.n	6368 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x10>
    63f6:	4805      	ldr	r0, [pc, #20]	; (640c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb4>)
    63f8:	7045      	strb	r5, [r0, #1]
    63fa:	bc70      	pop	{r4, r5, r6}
    63fc:	4770      	bx	lr
    63fe:	1c52      	adds	r2, r2, #1
    6400:	b2d2      	uxtb	r2, r2
    6402:	4294      	cmp	r4, r2
    6404:	d8e9      	bhi.n	63da <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x82>
    6406:	e7f2      	b.n	63ee <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    6408:	200010e2 	.word	0x200010e2
    640c:	200002f0 	.word	0x200002f0

00006410 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    6410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6414:	4d25      	ldr	r5, [pc, #148]	; (64ac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    6416:	2600      	movs	r6, #0
    6418:	4634      	mov	r4, r6
    641a:	7828      	ldrb	r0, [r5, #0]
    641c:	2800      	cmp	r0, #0
    641e:	bf8c      	ite	hi
    6420:	4f23      	ldrhi	r7, [pc, #140]	; (64b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    6422:	e8bd 81f0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, pc}
    6426:	bf00      	nop
    6428:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    642c:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    6430:	f011 0f01 	tst.w	r1, #1
    6434:	d032      	beq.n	649c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    6436:	78aa      	ldrb	r2, [r5, #2]
    6438:	2100      	movs	r1, #0
    643a:	4623      	mov	r3, r4
    643c:	2a00      	cmp	r2, #0
    643e:	d909      	bls.n	6454 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x44>
    6440:	eb05 0c01 	add.w	ip, r5, r1
    6444:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    6448:	459c      	cmp	ip, r3
    644a:	d004      	beq.n	6456 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x46>
    644c:	1c49      	adds	r1, r1, #1
    644e:	b2c9      	uxtb	r1, r1
    6450:	428a      	cmp	r2, r1
    6452:	d8f5      	bhi.n	6440 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x30>
    6454:	2110      	movs	r1, #16
    6456:	428a      	cmp	r2, r1
    6458:	bf86      	itte	hi
    645a:	eb05 1201 	addhi.w	r2, r5, r1, lsl #4
    645e:	1cd3      	addhi	r3, r2, #3
    6460:	2300      	movls	r3, #0
    6462:	2200      	movs	r2, #0
    6464:	2910      	cmp	r1, #16
    6466:	d00c      	beq.n	6482 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
    6468:	eb05 0c01 	add.w	ip, r5, r1
    646c:	f89c 813b 	ldrb.w	r8, [ip, #315]	; 0x13b
    6470:	f1b8 0f01 	cmp.w	r8, #1
    6474:	d004      	beq.n	6480 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>
    6476:	f89c c14b 	ldrb.w	ip, [ip, #331]	; 0x14b
    647a:	f1bc 0f00 	cmp.w	ip, #0
    647e:	d000      	beq.n	6482 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
    6480:	2201      	movs	r2, #1
    6482:	1e52      	subs	r2, r2, #1
    6484:	4213      	tst	r3, r2
    6486:	d109      	bne.n	649c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    6488:	55b9      	strb	r1, [r7, r6]
    648a:	f890 2153 	ldrb.w	r2, [r0, #339]	; 0x153
    648e:	f500 71aa 	add.w	r1, r0, #340	; 0x154
    6492:	4630      	mov	r0, r6
    6494:	1c73      	adds	r3, r6, #1
    6496:	b2de      	uxtb	r6, r3
    6498:	f009 fa5c 	bl	f954 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    649c:	1c60      	adds	r0, r4, #1
    649e:	b2c4      	uxtb	r4, r0
    64a0:	7828      	ldrb	r0, [r5, #0]
    64a2:	42a0      	cmp	r0, r4
    64a4:	d8c0      	bhi.n	6428 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18>
    64a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64aa:	0000      	.short	0x0000
    64ac:	200010e2 	.word	0x200010e2
    64b0:	200002f4 	.word	0x200002f4
    64b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64b8:	4d0f      	ldr	r5, [pc, #60]	; (64f8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe8>)
    64ba:	4606      	mov	r6, r0
    64bc:	2400      	movs	r4, #0
    64be:	7828      	ldrb	r0, [r5, #0]
    64c0:	460f      	mov	r7, r1
    64c2:	2800      	cmp	r0, #0
    64c4:	d912      	bls.n	64ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xdc>
    64c6:	bf00      	nop
    64c8:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    64cc:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    64d0:	42b1      	cmp	r1, r6
    64d2:	d106      	bne.n	64e2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd2>
    64d4:	2206      	movs	r2, #6
    64d6:	4639      	mov	r1, r7
    64d8:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    64dc:	f009 fc78 	bl	fdd0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    64e0:	b138      	cbz	r0, 64f2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe2>
    64e2:	1c60      	adds	r0, r4, #1
    64e4:	b2c4      	uxtb	r4, r0
    64e6:	7828      	ldrb	r0, [r5, #0]
    64e8:	42a0      	cmp	r0, r4
    64ea:	d8ed      	bhi.n	64c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb8>
    64ec:	2010      	movs	r0, #16
    64ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64f2:	4620      	mov	r0, r4
    64f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64f8:	200010e2 	.word	0x200010e2
    64fc:	b470      	push	{r4, r5, r6}
    64fe:	4949      	ldr	r1, [pc, #292]	; (6624 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x214>)
    6500:	180d      	adds	r5, r1, r0
    6502:	788a      	ldrb	r2, [r1, #2]
    6504:	1e52      	subs	r2, r2, #1
    6506:	b2d3      	uxtb	r3, r2
    6508:	708b      	strb	r3, [r1, #2]
    650a:	f895 2103 	ldrb.w	r2, [r5, #259]	; 0x103
    650e:	4298      	cmp	r0, r3
    6510:	d03d      	beq.n	658e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x17e>
    6512:	eb01 1400 	add.w	r4, r1, r0, lsl #4
    6516:	eb01 1c03 	add.w	ip, r1, r3, lsl #4
    651a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    651e:	f8dc 6003 	ldr.w	r6, [ip, #3]
    6522:	f8c4 6003 	str.w	r6, [r4, #3]
    6526:	f8dc 6007 	ldr.w	r6, [ip, #7]
    652a:	f8c4 6007 	str.w	r6, [r4, #7]
    652e:	f8dc 600b 	ldr.w	r6, [ip, #11]
    6532:	f8c4 600b 	str.w	r6, [r4, #11]
    6536:	f8dc 600f 	ldr.w	r6, [ip, #15]
    653a:	f8c4 600f 	str.w	r6, [r4, #15]
    653e:	f8dc 6083 	ldr.w	r6, [ip, #131]	; 0x83
    6542:	f8c4 6083 	str.w	r6, [r4, #131]	; 0x83
    6546:	f8dc 6087 	ldr.w	r6, [ip, #135]	; 0x87
    654a:	f8c4 6087 	str.w	r6, [r4, #135]	; 0x87
    654e:	f8dc 608b 	ldr.w	r6, [ip, #139]	; 0x8b
    6552:	f8c4 608b 	str.w	r6, [r4, #139]	; 0x8b
    6556:	f8dc c08f 	ldr.w	ip, [ip, #143]	; 0x8f
    655a:	f8c4 c08f 	str.w	ip, [r4, #143]	; 0x8f
    655e:	eb01 0c03 	add.w	ip, r1, r3
    6562:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6566:	f89c 4103 	ldrb.w	r4, [ip, #259]	; 0x103
    656a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    656e:	f885 4103 	strb.w	r4, [r5, #259]	; 0x103
    6572:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6576:	f8d3 410b 	ldr.w	r4, [r3, #267]	; 0x10b
    657a:	f8c0 410b 	str.w	r4, [r0, #267]	; 0x10b
    657e:	f8b3 310f 	ldrh.w	r3, [r3, #271]	; 0x10f
    6582:	f8a0 310f 	strh.w	r3, [r0, #271]	; 0x10f
    6586:	f89c 013b 	ldrb.w	r0, [ip, #315]	; 0x13b
    658a:	f885 013b 	strb.w	r0, [r5, #315]	; 0x13b
    658e:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    6592:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6596:	f010 0f01 	tst.w	r0, #1
    659a:	bf1c      	itt	ne
    659c:	bc70      	popne	{r4, r5, r6}
    659e:	4770      	bxne	lr
    65a0:	2000      	movs	r0, #0
    65a2:	788c      	ldrb	r4, [r1, #2]
    65a4:	2c00      	cmp	r4, #0
    65a6:	d90d      	bls.n	65c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1b4>
    65a8:	180b      	adds	r3, r1, r0
    65aa:	f893 c103 	ldrb.w	ip, [r3, #259]	; 0x103
    65ae:	4594      	cmp	ip, r2
    65b0:	d104      	bne.n	65bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ac>
    65b2:	2810      	cmp	r0, #16
    65b4:	bf1c      	itt	ne
    65b6:	bc70      	popne	{r4, r5, r6}
    65b8:	4770      	bxne	lr
    65ba:	e003      	b.n	65c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1b4>
    65bc:	1c40      	adds	r0, r0, #1
    65be:	b2c0      	uxtb	r0, r0
    65c0:	4284      	cmp	r4, r0
    65c2:	d8f1      	bhi.n	65a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    65c4:	7808      	ldrb	r0, [r1, #0]
    65c6:	1e40      	subs	r0, r0, #1
    65c8:	b2c0      	uxtb	r0, r0
    65ca:	7008      	strb	r0, [r1, #0]
    65cc:	4290      	cmp	r0, r2
    65ce:	bf04      	itt	eq
    65d0:	bc70      	popeq	{r4, r5, r6}
    65d2:	4770      	bxeq	lr
    65d4:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
    65d8:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    65dc:	f8d0 c153 	ldr.w	ip, [r0, #339]	; 0x153
    65e0:	f8c3 c153 	str.w	ip, [r3, #339]	; 0x153
    65e4:	f8d0 0157 	ldr.w	r0, [r0, #343]	; 0x157
    65e8:	f8c3 0157 	str.w	r0, [r3, #343]	; 0x157
    65ec:	788c      	ldrb	r4, [r1, #2]
    65ee:	780b      	ldrb	r3, [r1, #0]
    65f0:	2000      	movs	r0, #0
    65f2:	2c00      	cmp	r4, #0
    65f4:	bf9c      	itt	ls
    65f6:	bc70      	popls	{r4, r5, r6}
    65f8:	4770      	bxls	lr
    65fa:	bf00      	nop
    65fc:	eb01 0c00 	add.w	ip, r1, r0
    6600:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    6604:	459c      	cmp	ip, r3
    6606:	d106      	bne.n	6616 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x206>
    6608:	2810      	cmp	r0, #16
    660a:	bf1c      	itt	ne
    660c:	4408      	addne	r0, r1
    660e:	f880 2103 	strbne.w	r2, [r0, #259]	; 0x103
    6612:	bc70      	pop	{r4, r5, r6}
    6614:	4770      	bx	lr
    6616:	1c40      	adds	r0, r0, #1
    6618:	b2c0      	uxtb	r0, r0
    661a:	4284      	cmp	r4, r0
    661c:	d8ee      	bhi.n	65fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ec>
    661e:	bc70      	pop	{r4, r5, r6}
    6620:	4770      	bx	lr
    6622:	0000      	.short	0x0000
    6624:	200010e2 	.word	0x200010e2
    6628:	4925      	ldr	r1, [pc, #148]	; (66c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x2b0>)
    662a:	b410      	push	{r4}
    662c:	784a      	ldrb	r2, [r1, #1]
    662e:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    6632:	1e52      	subs	r2, r2, #1
    6634:	704a      	strb	r2, [r1, #1]
    6636:	2200      	movs	r2, #0
    6638:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    663c:	f891 c002 	ldrb.w	ip, [r1, #2]
    6640:	f1bc 0f00 	cmp.w	ip, #0
    6644:	d90d      	bls.n	6662 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x252>
    6646:	188b      	adds	r3, r1, r2
    6648:	f893 4103 	ldrb.w	r4, [r3, #259]	; 0x103
    664c:	4284      	cmp	r4, r0
    664e:	d104      	bne.n	665a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x24a>
    6650:	2a10      	cmp	r2, #16
    6652:	bf1c      	itt	ne
    6654:	bc10      	popne	{r4}
    6656:	4770      	bxne	lr
    6658:	e003      	b.n	6662 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x252>
    665a:	1c52      	adds	r2, r2, #1
    665c:	b2d2      	uxtb	r2, r2
    665e:	4594      	cmp	ip, r2
    6660:	d8f1      	bhi.n	6646 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x236>
    6662:	780a      	ldrb	r2, [r1, #0]
    6664:	1e52      	subs	r2, r2, #1
    6666:	b2d2      	uxtb	r2, r2
    6668:	700a      	strb	r2, [r1, #0]
    666a:	4282      	cmp	r2, r0
    666c:	bf04      	itt	eq
    666e:	bc10      	popeq	{r4}
    6670:	4770      	bxeq	lr
    6672:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    6676:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    667a:	f8d2 c153 	ldr.w	ip, [r2, #339]	; 0x153
    667e:	f8c3 c153 	str.w	ip, [r3, #339]	; 0x153
    6682:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    6686:	f8c3 2157 	str.w	r2, [r3, #343]	; 0x157
    668a:	788c      	ldrb	r4, [r1, #2]
    668c:	f891 c000 	ldrb.w	ip, [r1]
    6690:	2200      	movs	r2, #0
    6692:	2c00      	cmp	r4, #0
    6694:	bf9c      	itt	ls
    6696:	bc10      	popls	{r4}
    6698:	4770      	bxls	lr
    669a:	188b      	adds	r3, r1, r2
    669c:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    66a0:	4563      	cmp	r3, ip
    66a2:	d106      	bne.n	66b2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x2a2>
    66a4:	2a10      	cmp	r2, #16
    66a6:	bf1c      	itt	ne
    66a8:	4411      	addne	r1, r2
    66aa:	f881 0103 	strbne.w	r0, [r1, #259]	; 0x103
    66ae:	bc10      	pop	{r4}
    66b0:	4770      	bx	lr
    66b2:	1c52      	adds	r2, r2, #1
    66b4:	b2d2      	uxtb	r2, r2
    66b6:	4294      	cmp	r4, r2
    66b8:	d8ef      	bhi.n	669a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x28a>
    66ba:	bc10      	pop	{r4}
    66bc:	4770      	bx	lr
    66be:	0000      	.short	0x0000
    66c0:	200010e2 	.word	0x200010e2

000066c4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    66c4:	b570      	push	{r4, r5, r6, lr}
    66c6:	b08c      	sub	sp, #48	; 0x30
    66c8:	f100 0410 	add.w	r4, r0, #16
    66cc:	461d      	mov	r5, r3
    66ce:	4616      	mov	r6, r2
    66d0:	f10d 3cff 	add.w	ip, sp, #4294967295	; 0xffffffff
    66d4:	f05f 0008 	movs.w	r0, #8
    66d8:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    66dc:	f88c 2001 	strb.w	r2, [ip, #1]
    66e0:	f814 2d02 	ldrb.w	r2, [r4, #-2]!
    66e4:	f80c 2f02 	strb.w	r2, [ip, #2]!
    66e8:	1e40      	subs	r0, r0, #1
    66ea:	d1f5      	bne.n	66d8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x14>
    66ec:	f101 0c10 	add.w	ip, r1, #16
    66f0:	466c      	mov	r4, sp
    66f2:	f10d 010f 	add.w	r1, sp, #15
    66f6:	2008      	movs	r0, #8
    66f8:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
    66fc:	704a      	strb	r2, [r1, #1]
    66fe:	f81c 2d02 	ldrb.w	r2, [ip, #-2]!
    6702:	f801 2f02 	strb.w	r2, [r1, #2]!
    6706:	1e40      	subs	r0, r0, #1
    6708:	d1f6      	bne.n	66f8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x34>
    670a:	4620      	mov	r0, r4
    670c:	f00a fcdb 	bl	110c6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    6710:	b17e      	cbz	r6, 6732 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x6e>
    6712:	1e6a      	subs	r2, r5, #1
    6714:	f104 0030 	add.w	r0, r4, #48	; 0x30
    6718:	f05f 0108 	movs.w	r1, #8
    671c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    6720:	7053      	strb	r3, [r2, #1]
    6722:	f810 3d02 	ldrb.w	r3, [r0, #-2]!
    6726:	f802 3f02 	strb.w	r3, [r2, #2]!
    672a:	1e49      	subs	r1, r1, #1
    672c:	d1f6      	bne.n	671c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x58>
    672e:	b00c      	add	sp, #48	; 0x30
    6730:	bd70      	pop	{r4, r5, r6, pc}
    6732:	9808      	ldr	r0, [sp, #32]
    6734:	6028      	str	r0, [r5, #0]
    6736:	9809      	ldr	r0, [sp, #36]	; 0x24
    6738:	6068      	str	r0, [r5, #4]
    673a:	980a      	ldr	r0, [sp, #40]	; 0x28
    673c:	60a8      	str	r0, [r5, #8]
    673e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6740:	60e8      	str	r0, [r5, #12]
    6742:	b00c      	add	sp, #48	; 0x30
    6744:	bd70      	pop	{r4, r5, r6, pc}
	...

00006748 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
    6748:	b570      	push	{r4, r5, r6, lr}
    674a:	4604      	mov	r4, r0
    674c:	b169      	cbz	r1, 676a <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x22>
    674e:	2901      	cmp	r1, #1
    6750:	d027      	beq.n	67a2 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x5a>
    6752:	2902      	cmp	r1, #2
    6754:	d03d      	beq.n	67d2 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x8a>
    6756:	2903      	cmp	r1, #3
    6758:	bf18      	it	ne
    675a:	bd70      	popne	{r4, r5, r6, pc}
    675c:	f104 018e 	add.w	r1, r4, #142	; 0x8e
    6760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6764:	308d      	adds	r0, #141	; 0x8d
    6766:	f000 ba1f 	b.w	6ba8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    676a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    676e:	2100      	movs	r1, #0
    6770:	f009 fbba 	bl	fee8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6774:	f104 0578 	add.w	r5, r4, #120	; 0x78
    6778:	f007 fa62 	bl	dc40 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    677c:	f644 112b 	movw	r1, #18731	; 0x492b
    6780:	4008      	ands	r0, r1
    6782:	2101      	movs	r1, #1
    6784:	7569      	strb	r1, [r5, #21]
    6786:	f885 004e 	strb.w	r0, [r5, #78]	; 0x4e
    678a:	0a00      	lsrs	r0, r0, #8
    678c:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    6790:	20fe      	movs	r0, #254	; 0xfe
    6792:	f885 0084 	strb.w	r0, [r5, #132]	; 0x84
    6796:	207f      	movs	r0, #127	; 0x7f
    6798:	7268      	strb	r0, [r5, #9]
    679a:	2020      	movs	r0, #32
    679c:	f884 0125 	strb.w	r0, [r4, #293]	; 0x125
    67a0:	bd70      	pop	{r4, r5, r6, pc}
    67a2:	68e1      	ldr	r1, [r4, #12]
    67a4:	4810      	ldr	r0, [pc, #64]	; (67e8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xa0>)
    67a6:	460a      	mov	r2, r1
    67a8:	4408      	add	r0, r1
    67aa:	fbb0 f0f1 	udiv	r0, r0, r1
    67ae:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    67b2:	f640 30b8 	movw	r0, #3000	; 0xbb8
    67b6:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    67ba:	8ae3      	ldrh	r3, [r4, #22]
    67bc:	f104 0078 	add.w	r0, r4, #120	; 0x78
    67c0:	f000 f8d4 	bl	696c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x48>
    67c4:	f104 018e 	add.w	r1, r4, #142	; 0x8e
    67c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    67cc:	1e48      	subs	r0, r1, #1
    67ce:	f000 b9eb 	b.w	6ba8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    67d2:	f8b4 315a 	ldrh.w	r3, [r4, #346]	; 0x15a
    67d6:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
    67da:	68e1      	ldr	r1, [r4, #12]
    67dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    67e0:	3078      	adds	r0, #120	; 0x78
    67e2:	f000 b8c3 	b.w	696c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x48>
    67e6:	0000      	.short	0x0000
    67e8:	01c9c37f 	.word	0x01c9c37f

000067ec <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    67ec:	b570      	push	{r4, r5, r6, lr}
    67ee:	4604      	mov	r4, r0
    67f0:	2601      	movs	r6, #1
    67f2:	b169      	cbz	r1, 6810 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x24>
    67f4:	2901      	cmp	r1, #1
    67f6:	d022      	beq.n	683e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x52>
    67f8:	2902      	cmp	r1, #2
    67fa:	d049      	beq.n	6890 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa4>
    67fc:	2903      	cmp	r1, #3
    67fe:	bf18      	it	ne
    6800:	bd70      	popne	{r4, r5, r6, pc}
    6802:	f104 018e 	add.w	r1, r4, #142	; 0x8e
    6806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    680a:	308d      	adds	r0, #141	; 0x8d
    680c:	f000 b9cc 	b.w	6ba8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6810:	f44f 720a 	mov.w	r2, #552	; 0x228
    6814:	2100      	movs	r1, #0
    6816:	f009 fb67 	bl	fee8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    681a:	3478      	adds	r4, #120	; 0x78
    681c:	f007 fa10 	bl	dc40 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6820:	f644 112b 	movw	r1, #18731	; 0x492b
    6824:	4008      	ands	r0, r1
    6826:	7566      	strb	r6, [r4, #21]
    6828:	f884 004e 	strb.w	r0, [r4, #78]	; 0x4e
    682c:	0a00      	lsrs	r0, r0, #8
    682e:	f884 004f 	strb.w	r0, [r4, #79]	; 0x4f
    6832:	20fe      	movs	r0, #254	; 0xfe
    6834:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    6838:	207f      	movs	r0, #127	; 0x7f
    683a:	7260      	strb	r0, [r4, #9]
    683c:	bd70      	pop	{r4, r5, r6, pc}
    683e:	2500      	movs	r5, #0
    6840:	f8a4 511e 	strh.w	r5, [r4, #286]	; 0x11e
    6844:	f884 5113 	strb.w	r5, [r4, #275]	; 0x113
    6848:	68e1      	ldr	r1, [r4, #12]
    684a:	4816      	ldr	r0, [pc, #88]	; (68a4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb8>)
    684c:	460a      	mov	r2, r1
    684e:	4408      	add	r0, r1
    6850:	fbb0 f0f1 	udiv	r0, r0, r1
    6854:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    6858:	f640 30b8 	movw	r0, #3000	; 0xbb8
    685c:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    6860:	8ae3      	ldrh	r3, [r4, #22]
    6862:	f104 0078 	add.w	r0, r4, #120	; 0x78
    6866:	f000 f881 	bl	696c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x48>
    686a:	f104 018e 	add.w	r1, r4, #142	; 0x8e
    686e:	1e48      	subs	r0, r1, #1
    6870:	f000 f99a 	bl	6ba8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6874:	f009 fa88 	bl	fd88 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    6878:	b138      	cbz	r0, 688a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x9e>
    687a:	6920      	ldr	r0, [r4, #16]
    687c:	f000 fe80 	bl	7580 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    6880:	2800      	cmp	r0, #0
    6882:	bf04      	itt	eq
    6884:	f884 6184 	strbeq.w	r6, [r4, #388]	; 0x184
    6888:	bd70      	popeq	{r4, r5, r6, pc}
    688a:	f884 5184 	strb.w	r5, [r4, #388]	; 0x184
    688e:	bd70      	pop	{r4, r5, r6, pc}
    6890:	f8b4 31b2 	ldrh.w	r3, [r4, #434]	; 0x1b2
    6894:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
    6898:	68e1      	ldr	r1, [r4, #12]
    689a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    689e:	3078      	adds	r0, #120	; 0x78
    68a0:	f000 b864 	b.w	696c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x48>
    68a4:	01c9c37f 	.word	0x01c9c37f

000068a8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    68a8:	2a00      	cmp	r2, #0
    68aa:	bf08      	it	eq
    68ac:	4770      	bxeq	lr
    68ae:	4411      	add	r1, r2
    68b0:	1e40      	subs	r0, r0, #1
    68b2:	f012 0f01 	tst.w	r2, #1
    68b6:	d003      	beq.n	68c0 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x18>
    68b8:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    68bc:	f800 3f01 	strb.w	r3, [r0, #1]!
    68c0:	0852      	lsrs	r2, r2, #1
    68c2:	bf08      	it	eq
    68c4:	4770      	bxeq	lr
    68c6:	bf00      	nop
    68c8:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    68cc:	7043      	strb	r3, [r0, #1]
    68ce:	f811 3d02 	ldrb.w	r3, [r1, #-2]!
    68d2:	f800 3f02 	strb.w	r3, [r0, #2]!
    68d6:	1e52      	subs	r2, r2, #1
    68d8:	d1f6      	bne.n	68c8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x20>
    68da:	4770      	bx	lr

000068dc <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    68dc:	f641 524c 	movw	r2, #7500	; 0x1d4c
    68e0:	4291      	cmp	r1, r2
    68e2:	bf3d      	ittte	cc
    68e4:	4905      	ldrcc	r1, [pc, #20]	; (68fc <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI+0x20>)
    68e6:	fba1 1000 	umullcc	r1, r0, r1, r0
    68ea:	0940      	lsrcc	r0, r0, #5
    68ec:	f240 41e2 	movwcs	r1, #1250	; 0x4e2
    68f0:	bf28      	it	cs
    68f2:	fbb0 f0f1 	udivcs	r0, r0, r1
    68f6:	b280      	uxth	r0, r0
    68f8:	4770      	bx	lr
    68fa:	0000      	.short	0x0000
    68fc:	51eb851f 	.word	0x51eb851f

00006900 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    6900:	f641 524c 	movw	r2, #7500	; 0x1d4c
    6904:	4291      	cmp	r1, r2
    6906:	bf3d      	ittte	cc
    6908:	4905      	ldrcc	r1, [pc, #20]	; (6920 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x20>)
    690a:	fba1 1000 	umullcc	r1, r0, r1, r0
    690e:	0940      	lsrcc	r0, r0, #5
    6910:	f240 41e2 	movwcs	r1, #1250	; 0x4e2
    6914:	bf28      	it	cs
    6916:	fbb0 f0f1 	udivcs	r0, r0, r1
    691a:	b2c0      	uxtb	r0, r0
    691c:	4770      	bx	lr
    691e:	0000      	.short	0x0000
    6920:	51eb851f 	.word	0x51eb851f

00006924 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    6924:	b430      	push	{r4, r5}
    6926:	2200      	movs	r2, #0
    6928:	f1a1 0c01 	sub.w	ip, r1, #1
    692c:	f1bc 0f00 	cmp.w	ip, #0
    6930:	dd12      	ble.n	6958 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x34>
    6932:	1e43      	subs	r3, r0, #1
    6934:	f011 0f01 	tst.w	r1, #1
    6938:	bf08      	it	eq
    693a:	f813 2f01 	ldrbeq.w	r2, [r3, #1]!
    693e:	785c      	ldrb	r4, [r3, #1]
    6940:	ea5f 0c6c 	movs.w	ip, ip, asr #1
    6944:	d008      	beq.n	6958 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x34>
    6946:	bf00      	nop
    6948:	f813 5f02 	ldrb.w	r5, [r3, #2]!
    694c:	4322      	orrs	r2, r4
    694e:	785c      	ldrb	r4, [r3, #1]
    6950:	432a      	orrs	r2, r5
    6952:	f1bc 0c01 	subs.w	ip, ip, #1
    6956:	d1f7      	bne.n	6948 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x24>
    6958:	1e49      	subs	r1, r1, #1
    695a:	bf5c      	itt	pl
    695c:	5c40      	ldrbpl	r0, [r0, r1]
    695e:	4302      	orrpl	r2, r0
    6960:	2a00      	cmp	r2, #0
    6962:	bf0c      	ite	eq
    6964:	2001      	moveq	r0, #1
    6966:	2000      	movne	r0, #0
    6968:	bc30      	pop	{r4, r5}
    696a:	4770      	bx	lr
    696c:	b410      	push	{r4}
    696e:	f04f 0c00 	mov.w	ip, #0
    6972:	f8a0 c036 	strh.w	ip, [r0, #54]	; 0x36
    6976:	f8b0 c03a 	ldrh.w	ip, [r0, #58]	; 0x3a
    697a:	4c16      	ldr	r4, [pc, #88]	; (69d4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb0>)
    697c:	fb0c fc01 	mul.w	ip, ip, r1
    6980:	fbbc fcf2 	udiv	ip, ip, r2
    6984:	f8a0 c03a 	strh.w	ip, [r0, #58]	; 0x3a
    6988:	f242 7c10 	movw	ip, #10000	; 0x2710
    698c:	fb03 f30c 	mul.w	r3, r3, ip
    6990:	fbb3 f3f2 	udiv	r3, r3, r2
    6994:	1c5b      	adds	r3, r3, #1
    6996:	b29b      	uxth	r3, r3
    6998:	fb03 fc02 	mul.w	ip, r3, r2
    699c:	8703      	strh	r3, [r0, #56]	; 0x38
    699e:	45a4      	cmp	ip, r4
    69a0:	bf84      	itt	hi
    69a2:	1e5b      	subhi	r3, r3, #1
    69a4:	8703      	strhhi	r3, [r0, #56]	; 0x38
    69a6:	4b0c      	ldr	r3, [pc, #48]	; (69d8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb4>)
    69a8:	f240 2c71 	movw	ip, #625	; 0x271
    69ac:	fbb3 f3f2 	udiv	r3, r3, r2
    69b0:	1c5b      	adds	r3, r3, #1
    69b2:	87c3      	strh	r3, [r0, #62]	; 0x3e
    69b4:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    69b6:	fb03 f30c 	mul.w	r3, r3, ip
    69ba:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    69be:	1e5b      	subs	r3, r3, #1
    69c0:	fbb3 f3f2 	udiv	r3, r3, r2
    69c4:	62c3      	str	r3, [r0, #44]	; 0x2c
    69c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
    69c8:	4359      	muls	r1, r3
    69ca:	fbb1 f1f2 	udiv	r1, r1, r2
    69ce:	6281      	str	r1, [r0, #40]	; 0x28
    69d0:	bc10      	pop	{r4}
    69d2:	4770      	bx	lr
    69d4:	01e84800 	.word	0x01e84800
    69d8:	02625a00 	.word	0x02625a00

000069dc <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    69dc:	4907      	ldr	r1, [pc, #28]	; (69fc <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x20>)
    69de:	b508      	push	{r3, lr}
    69e0:	7809      	ldrb	r1, [r1, #0]
    69e2:	f88d 1000 	strb.w	r1, [sp]
    69e6:	f89d 1000 	ldrb.w	r1, [sp]
    69ea:	2900      	cmp	r1, #0
    69ec:	bf1c      	itt	ne
    69ee:	2000      	movne	r0, #0
    69f0:	bd08      	popne	{r3, pc}
    69f2:	4903      	ldr	r1, [pc, #12]	; (6a00 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x24>)
    69f4:	f00d faa5 	bl	13f42 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    69f8:	2001      	movs	r0, #1
    69fa:	bd08      	pop	{r3, pc}
    69fc:	20000319 	.word	0x20000319
    6a00:	2000031a 	.word	0x2000031a

00006a04 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    6a04:	b570      	push	{r4, r5, r6, lr}
    6a06:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    6a0a:	b289      	uxth	r1, r1
    6a0c:	7ac4      	ldrb	r4, [r0, #11]
    6a0e:	404a      	eors	r2, r1
    6a10:	f05f 0300 	movs.w	r3, #0
    6a14:	f002 0cff 	and.w	ip, r2, #255	; 0xff
    6a18:	0a12      	lsrs	r2, r2, #8
    6a1a:	fa92 f2a2 	rbit	r2, r2
    6a1e:	fa9c fcac 	rbit	ip, ip
    6a22:	0e12      	lsrs	r2, r2, #24
    6a24:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
    6a28:	ea4c 2202 	orr.w	r2, ip, r2, lsl #8
    6a2c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
    6a30:	1c5b      	adds	r3, r3, #1
    6a32:	440a      	add	r2, r1
    6a34:	b2db      	uxtb	r3, r3
    6a36:	b292      	uxth	r2, r2
    6a38:	2b03      	cmp	r3, #3
    6a3a:	d3eb      	bcc.n	6a14 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    6a3c:	f8df c088 	ldr.w	ip, [pc, #136]	; 6ac8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xc4>
    6a40:	4051      	eors	r1, r2
    6a42:	4663      	mov	r3, ip
    6a44:	2200      	movs	r2, #0
    6a46:	fbe1 320c 	umlal	r3, r2, r1, ip
    6a4a:	0912      	lsrs	r2, r2, #4
    6a4c:	f06f 0324 	mvn.w	r3, #36	; 0x24
    6a50:	fb02 1203 	mla	r2, r2, r3, r1
    6a54:	b2d2      	uxtb	r2, r2
    6a56:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    6a5a:	f002 0c07 	and.w	ip, r2, #7
    6a5e:	785d      	ldrb	r5, [r3, #1]
    6a60:	2301      	movs	r3, #1
    6a62:	fa03 fc0c 	lsl.w	ip, r3, ip
    6a66:	ea15 0f0c 	tst.w	r5, ip
    6a6a:	bf1c      	itt	ne
    6a6c:	4610      	movne	r0, r2
    6a6e:	bd70      	popne	{r4, r5, r6, pc}
    6a70:	4361      	muls	r1, r4
    6a72:	0c09      	lsrs	r1, r1, #16
    6a74:	1c49      	adds	r1, r1, #1
    6a76:	b2c9      	uxtb	r1, r1
    6a78:	f05f 0400 	movs.w	r4, #0
    6a7c:	eb00 0c04 	add.w	ip, r0, r4
    6a80:	f89c 2006 	ldrb.w	r2, [ip, #6]
    6a84:	428a      	cmp	r2, r1
    6a86:	bf27      	ittee	cs
    6a88:	2200      	movcs	r2, #0
    6a8a:	f89c c001 	ldrbcs.w	ip, [ip, #1]
    6a8e:	1a89      	subcc	r1, r1, r2
    6a90:	b2c9      	uxtbcc	r1, r1
    6a92:	d30b      	bcc.n	6aac <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    6a94:	fa03 f502 	lsl.w	r5, r3, r2
    6a98:	ea1c 0f05 	tst.w	ip, r5
    6a9c:	bf1c      	itt	ne
    6a9e:	1e49      	subne	r1, r1, #1
    6aa0:	b2c9      	uxtbne	r1, r1
    6aa2:	b161      	cbz	r1, 6abe <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xba>
    6aa4:	1c52      	adds	r2, r2, #1
    6aa6:	b2d2      	uxtb	r2, r2
    6aa8:	2a08      	cmp	r2, #8
    6aaa:	d3f3      	bcc.n	6a94 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    6aac:	1c62      	adds	r2, r4, #1
    6aae:	b2d4      	uxtb	r4, r2
    6ab0:	2c05      	cmp	r4, #5
    6ab2:	d3e3      	bcc.n	6a7c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x78>
    6ab4:	f240 110d 	movw	r1, #269	; 0x10d
    6ab8:	2046      	movs	r0, #70	; 0x46
    6aba:	f7fd fa41 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6abe:	eb02 00c4 	add.w	r0, r2, r4, lsl #3
    6ac2:	b2c0      	uxtb	r0, r0
    6ac4:	bd70      	pop	{r4, r5, r6, pc}
    6ac6:	0000      	.short	0x0000
    6ac8:	6eb3e453 	.word	0x6eb3e453

00006acc <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    6acc:	b570      	push	{r4, r5, r6, lr}
    6ace:	4604      	mov	r4, r0
    6ad0:	f890 0020 	ldrb.w	r0, [r0, #32]
    6ad4:	b108      	cbz	r0, 6ada <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    6ad6:	2825      	cmp	r0, #37	; 0x25
    6ad8:	d901      	bls.n	6ade <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    6ada:	2012      	movs	r0, #18
    6adc:	bd70      	pop	{r4, r5, r6, pc}
    6ade:	2a00      	cmp	r2, #0
    6ae0:	bf04      	itt	eq
    6ae2:	2000      	moveq	r0, #0
    6ae4:	bd70      	popeq	{r4, r5, r6, pc}
    6ae6:	7d60      	ldrb	r0, [r4, #21]
    6ae8:	b110      	cbz	r0, 6af0 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    6aea:	2801      	cmp	r0, #1
    6aec:	d050      	beq.n	6b90 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xc4>
    6aee:	e047      	b.n	6b80 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xb4>
    6af0:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    6af4:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    6af8:	4b2a      	ldr	r3, [pc, #168]	; (6ba4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xd8>)
    6afa:	fb01 0002 	mla	r0, r1, r2, r0
    6afe:	2500      	movs	r5, #0
    6b00:	461a      	mov	r2, r3
    6b02:	4629      	mov	r1, r5
    6b04:	fbe0 2103 	umlal	r2, r1, r0, r3
    6b08:	0909      	lsrs	r1, r1, #4
    6b0a:	f06f 0224 	mvn.w	r2, #36	; 0x24
    6b0e:	fb01 0002 	mla	r0, r1, r2, r0
    6b12:	b2c0      	uxtb	r0, r0
    6b14:	eb04 02d0 	add.w	r2, r4, r0, lsr #3
    6b18:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
    6b1c:	f000 0107 	and.w	r1, r0, #7
    6b20:	7d92      	ldrb	r2, [r2, #22]
    6b22:	2301      	movs	r3, #1
    6b24:	fa03 f101 	lsl.w	r1, r3, r1
    6b28:	420a      	tst	r2, r1
    6b2a:	bf1e      	ittt	ne
    6b2c:	f884 0023 	strbne.w	r0, [r4, #35]	; 0x23
    6b30:	4628      	movne	r0, r5
    6b32:	bd70      	popne	{r4, r5, r6, pc}
    6b34:	f894 1020 	ldrb.w	r1, [r4, #32]
    6b38:	fbb0 f2f1 	udiv	r2, r0, r1
    6b3c:	fb01 0012 	mls	r0, r1, r2, r0
    6b40:	1c40      	adds	r0, r0, #1
    6b42:	b2c1      	uxtb	r1, r0
    6b44:	f05f 0000 	movs.w	r0, #0
    6b48:	eb04 0c00 	add.w	ip, r4, r0
    6b4c:	f89c 201b 	ldrb.w	r2, [ip, #27]
    6b50:	428a      	cmp	r2, r1
    6b52:	bf27      	ittee	cs
    6b54:	2200      	movcs	r2, #0
    6b56:	f89c c016 	ldrbcs.w	ip, [ip, #22]
    6b5a:	1a89      	subcc	r1, r1, r2
    6b5c:	b2c9      	uxtbcc	r1, r1
    6b5e:	d30b      	bcc.n	6b78 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xac>
    6b60:	fa03 f602 	lsl.w	r6, r3, r2
    6b64:	ea1c 0f06 	tst.w	ip, r6
    6b68:	bf1c      	itt	ne
    6b6a:	1e49      	subne	r1, r1, #1
    6b6c:	b2c9      	uxtbne	r1, r1
    6b6e:	b149      	cbz	r1, 6b84 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xb8>
    6b70:	1c52      	adds	r2, r2, #1
    6b72:	b2d2      	uxtb	r2, r2
    6b74:	2a08      	cmp	r2, #8
    6b76:	d3f3      	bcc.n	6b60 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x94>
    6b78:	1c40      	adds	r0, r0, #1
    6b7a:	b2c0      	uxtb	r0, r0
    6b7c:	2805      	cmp	r0, #5
    6b7e:	d3e3      	bcc.n	6b48 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x7c>
    6b80:	201f      	movs	r0, #31
    6b82:	bd70      	pop	{r4, r5, r6, pc}
    6b84:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    6b88:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    6b8c:	4628      	mov	r0, r5
    6b8e:	bd70      	pop	{r4, r5, r6, pc}
    6b90:	88a2      	ldrh	r2, [r4, #4]
    6b92:	6909      	ldr	r1, [r1, #16]
    6b94:	f104 0015 	add.w	r0, r4, #21
    6b98:	f7ff ff34 	bl	6a04 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    6b9c:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    6ba0:	2000      	movs	r0, #0
    6ba2:	bd70      	pop	{r4, r5, r6, pc}
    6ba4:	6eb3e453 	.word	0x6eb3e453

00006ba8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    6ba8:	b510      	push	{r4, lr}
    6baa:	4604      	mov	r4, r0
    6bac:	1c40      	adds	r0, r0, #1
    6bae:	4288      	cmp	r0, r1
    6bb0:	bf18      	it	ne
    6bb2:	f00d f9c6 	blne	13f42 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    6bb6:	7960      	ldrb	r0, [r4, #5]
    6bb8:	f000 001f 	and.w	r0, r0, #31
    6bbc:	7160      	strb	r0, [r4, #5]
    6bbe:	2000      	movs	r0, #0
    6bc0:	f884 000b 	strb.w	r0, [r4, #11]
    6bc4:	eb04 0c00 	add.w	ip, r4, r0
    6bc8:	1c40      	adds	r0, r0, #1
    6bca:	f89c 2001 	ldrb.w	r2, [ip, #1]
    6bce:	f002 0101 	and.w	r1, r2, #1
    6bd2:	0852      	lsrs	r2, r2, #1
    6bd4:	f002 0301 	and.w	r3, r2, #1
    6bd8:	4419      	add	r1, r3
    6bda:	0852      	lsrs	r2, r2, #1
    6bdc:	f002 0301 	and.w	r3, r2, #1
    6be0:	4419      	add	r1, r3
    6be2:	0852      	lsrs	r2, r2, #1
    6be4:	f002 0301 	and.w	r3, r2, #1
    6be8:	440b      	add	r3, r1
    6bea:	0851      	lsrs	r1, r2, #1
    6bec:	f001 0201 	and.w	r2, r1, #1
    6bf0:	441a      	add	r2, r3
    6bf2:	0849      	lsrs	r1, r1, #1
    6bf4:	f001 0301 	and.w	r3, r1, #1
    6bf8:	441a      	add	r2, r3
    6bfa:	0849      	lsrs	r1, r1, #1
    6bfc:	f001 0301 	and.w	r3, r1, #1
    6c00:	441a      	add	r2, r3
    6c02:	eb02 0151 	add.w	r1, r2, r1, lsr #1
    6c06:	f88c 1006 	strb.w	r1, [ip, #6]
    6c0a:	7ae2      	ldrb	r2, [r4, #11]
    6c0c:	2805      	cmp	r0, #5
    6c0e:	4411      	add	r1, r2
    6c10:	72e1      	strb	r1, [r4, #11]
    6c12:	dbd7      	blt.n	6bc4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1c>
    6c14:	bd10      	pop	{r4, pc}
    6c16:	0000      	movs	r0, r0
    6c18:	78c3      	ldrb	r3, [r0, #3]
    6c1a:	4602      	mov	r2, r0
    6c1c:	f013 003f 	ands.w	r0, r3, #63	; 0x3f
    6c20:	bf08      	it	eq
    6c22:	4770      	bxeq	lr
    6c24:	2005      	movs	r0, #5
    6c26:	7912      	ldrb	r2, [r2, #4]
    6c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6c2c:	f012 0f01 	tst.w	r2, #1
    6c30:	d037      	beq.n	6ca2 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xfa>
    6c32:	2900      	cmp	r1, #0
    6c34:	bf14      	ite	ne
    6c36:	200b      	movne	r0, #11
    6c38:	4770      	bxeq	lr
    6c3a:	bf00      	nop
    6c3c:	f012 0f02 	tst.w	r2, #2
    6c40:	d032      	beq.n	6ca8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x100>
    6c42:	2901      	cmp	r1, #1
    6c44:	bf14      	ite	ne
    6c46:	1d80      	addne	r0, r0, #6
    6c48:	4770      	bxeq	lr
    6c4a:	bf00      	nop
    6c4c:	f012 0f04 	tst.w	r2, #4
    6c50:	d02d      	beq.n	6cae <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x106>
    6c52:	2902      	cmp	r1, #2
    6c54:	bf14      	ite	ne
    6c56:	1c40      	addne	r0, r0, #1
    6c58:	4770      	bxeq	lr
    6c5a:	bf00      	nop
    6c5c:	f012 0f08 	tst.w	r2, #8
    6c60:	d028      	beq.n	6cb4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x10c>
    6c62:	2903      	cmp	r1, #3
    6c64:	bf14      	ite	ne
    6c66:	1c80      	addne	r0, r0, #2
    6c68:	4770      	bxeq	lr
    6c6a:	bf00      	nop
    6c6c:	f012 0f10 	tst.w	r2, #16
    6c70:	d023      	beq.n	6cba <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x112>
    6c72:	2904      	cmp	r1, #4
    6c74:	bf14      	ite	ne
    6c76:	1cc0      	addne	r0, r0, #3
    6c78:	4770      	bxeq	lr
    6c7a:	bf00      	nop
    6c7c:	f012 0f20 	tst.w	r2, #32
    6c80:	d01e      	beq.n	6cc0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x118>
    6c82:	2905      	cmp	r1, #5
    6c84:	bf1a      	itte	ne
    6c86:	3012      	addne	r0, #18
    6c88:	b2c0      	uxtbne	r0, r0
    6c8a:	4770      	bxeq	lr
    6c8c:	f012 0f40 	tst.w	r2, #64	; 0x40
    6c90:	d019      	beq.n	6cc6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x11e>
    6c92:	2906      	cmp	r1, #6
    6c94:	bf1a      	itte	ne
    6c96:	1c40      	addne	r0, r0, #1
    6c98:	b2c0      	uxtbne	r0, r0
    6c9a:	4770      	bxeq	lr
    6c9c:	2907      	cmp	r1, #7
    6c9e:	d119      	bne.n	6cd4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12c>
    6ca0:	e014      	b.n	6ccc <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x124>
    6ca2:	2900      	cmp	r1, #0
    6ca4:	d1ca      	bne.n	6c3c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x94>
    6ca6:	e015      	b.n	6cd4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12c>
    6ca8:	2901      	cmp	r1, #1
    6caa:	d1cf      	bne.n	6c4c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xa4>
    6cac:	e012      	b.n	6cd4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12c>
    6cae:	2902      	cmp	r1, #2
    6cb0:	d1d4      	bne.n	6c5c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    6cb2:	e00f      	b.n	6cd4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12c>
    6cb4:	2903      	cmp	r1, #3
    6cb6:	d1d9      	bne.n	6c6c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xc4>
    6cb8:	e00c      	b.n	6cd4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12c>
    6cba:	2904      	cmp	r1, #4
    6cbc:	d1de      	bne.n	6c7c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xd4>
    6cbe:	e009      	b.n	6cd4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12c>
    6cc0:	2905      	cmp	r1, #5
    6cc2:	d1e3      	bne.n	6c8c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xe4>
    6cc4:	e006      	b.n	6cd4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12c>
    6cc6:	2906      	cmp	r1, #6
    6cc8:	d1e8      	bne.n	6c9c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xf4>
    6cca:	e003      	b.n	6cd4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12c>
    6ccc:	1f41      	subs	r1, r0, #5
    6cce:	428b      	cmp	r3, r1
    6cd0:	bfc8      	it	gt
    6cd2:	4770      	bxgt	lr
    6cd4:	2000      	movs	r0, #0
    6cd6:	4770      	bx	lr

00006cd8 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    6cd8:	7841      	ldrb	r1, [r0, #1]
    6cda:	b141      	cbz	r1, 6cee <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6cdc:	78c0      	ldrb	r0, [r0, #3]
    6cde:	2819      	cmp	r0, #25
    6ce0:	d203      	bcs.n	6cea <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    6ce2:	4a04      	ldr	r2, [pc, #16]	; (6cf4 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    6ce4:	5c10      	ldrb	r0, [r2, r0]
    6ce6:	4288      	cmp	r0, r1
    6ce8:	d101      	bne.n	6cee <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6cea:	2001      	movs	r0, #1
    6cec:	4770      	bx	lr
    6cee:	2000      	movs	r0, #0
    6cf0:	4770      	bx	lr
    6cf2:	0000      	.short	0x0000
    6cf4:	00013f54 	.word	0x00013f54

00006cf8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    6cf8:	b510      	push	{r4, lr}
    6cfa:	2201      	movs	r2, #1
    6cfc:	70c1      	strb	r1, [r0, #3]
    6cfe:	2919      	cmp	r1, #25
    6d00:	bf3c      	itt	cc
    6d02:	4a06      	ldrcc	r2, [pc, #24]	; (6d1c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    6d04:	5c52      	ldrbcc	r2, [r2, r1]
    6d06:	d306      	bcc.n	6d16 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6d08:	29ff      	cmp	r1, #255	; 0xff
    6d0a:	d004      	beq.n	6d16 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6d0c:	f240 31d5 	movw	r1, #981	; 0x3d5
    6d10:	202a      	movs	r0, #42	; 0x2a
    6d12:	f7fd f915 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d16:	7042      	strb	r2, [r0, #1]
    6d18:	bd10      	pop	{r4, pc}
    6d1a:	0000      	.short	0x0000
    6d1c:	00013f54 	.word	0x00013f54

00006d20 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    6d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d24:	b08f      	sub	sp, #60	; 0x3c
    6d26:	0004      	movs	r4, r0
    6d28:	d010      	beq.n	6d4c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2c>
    6d2a:	f8df a400 	ldr.w	sl, [pc, #1024]	; 712c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x40c>
    6d2e:	f04f 0900 	mov.w	r9, #0
    6d32:	f89a 0000 	ldrb.w	r0, [sl]
    6d36:	b170      	cbz	r0, 6d56 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    6d38:	f884 9001 	strb.w	r9, [r4, #1]
    6d3c:	2003      	movs	r0, #3
    6d3e:	7020      	strb	r0, [r4, #0]
    6d40:	2001      	movs	r0, #1
    6d42:	7120      	strb	r0, [r4, #4]
    6d44:	f88a 9000 	strb.w	r9, [sl]
    6d48:	f000 bad2 	b.w	72f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d0>
    6d4c:	f240 21da 	movw	r1, #730	; 0x2da
    6d50:	2010      	movs	r0, #16
    6d52:	f7fd f8f5 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d56:	4ef6      	ldr	r6, [pc, #984]	; (7130 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x410>)
    6d58:	7830      	ldrb	r0, [r6, #0]
    6d5a:	2800      	cmp	r0, #0
    6d5c:	d136      	bne.n	6dcc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>
    6d5e:	1cb5      	adds	r5, r6, #2
    6d60:	f7fd facc 	bl	42fc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6d64:	4607      	mov	r7, r0
    6d66:	2001      	movs	r0, #1
    6d68:	f7fd fac8 	bl	42fc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6d6c:	4438      	add	r0, r7
    6d6e:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    6d72:	2002      	movs	r0, #2
    6d74:	f7fd fac2 	bl	42fc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6d78:	1c47      	adds	r7, r0, #1
    6d7a:	2004      	movs	r0, #4
    6d7c:	f7fd fabe 	bl	42fc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6d80:	4438      	add	r0, r7
    6d82:	4440      	add	r0, r8
    6d84:	f010 07ff 	ands.w	r7, r0, #255	; 0xff
    6d88:	f04f 0b00 	mov.w	fp, #0
    6d8c:	d016      	beq.n	6dbc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9c>
    6d8e:	8828      	ldrh	r0, [r5, #0]
    6d90:	1c40      	adds	r0, r0, #1
    6d92:	b280      	uxth	r0, r0
    6d94:	8028      	strh	r0, [r5, #0]
    6d96:	42b8      	cmp	r0, r7
    6d98:	bf28      	it	cs
    6d9a:	f8a5 9000 	strhcs.w	r9, [r5]
    6d9e:	8828      	ldrh	r0, [r5, #0]
    6da0:	4540      	cmp	r0, r8
    6da2:	d301      	bcc.n	6da8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    6da4:	42b8      	cmp	r0, r7
    6da6:	d311      	bcc.n	6dcc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>
    6da8:	a906      	add	r1, sp, #24
    6daa:	f00a fa31 	bl	11210 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6dae:	b168      	cbz	r0, 6dcc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>
    6db0:	f10b 0001 	add.w	r0, fp, #1
    6db4:	f000 0bff 	and.w	fp, r0, #255	; 0xff
    6db8:	45bb      	cmp	fp, r7
    6dba:	d3e8      	bcc.n	6d8e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6e>
    6dbc:	f64f 70ff 	movw	r0, #65535	; 0xffff
    6dc0:	8028      	strh	r0, [r5, #0]
    6dc2:	f240 21e9 	movw	r1, #745	; 0x2e9
    6dc6:	2010      	movs	r0, #16
    6dc8:	f7fd f8ba 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dcc:	8870      	ldrh	r0, [r6, #2]
    6dce:	900a      	str	r0, [sp, #40]	; 0x28
    6dd0:	2000      	movs	r0, #0
    6dd2:	f7fd fa93 	bl	42fc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6dd6:	4605      	mov	r5, r0
    6dd8:	2001      	movs	r0, #1
    6dda:	f7fd fa8f 	bl	42fc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6dde:	4428      	add	r0, r5
    6de0:	b2c0      	uxtb	r0, r0
    6de2:	9009      	str	r0, [sp, #36]	; 0x24
    6de4:	1c40      	adds	r0, r0, #1
    6de6:	b2c1      	uxtb	r1, r0
    6de8:	2002      	movs	r0, #2
    6dea:	9104      	str	r1, [sp, #16]
    6dec:	f7fd fa86 	bl	42fc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6df0:	9904      	ldr	r1, [sp, #16]
    6df2:	4408      	add	r0, r1
    6df4:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    6df8:	4dce      	ldr	r5, [pc, #824]	; (7134 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x414>)
    6dfa:	6828      	ldr	r0, [r5, #0]
    6dfc:	2800      	cmp	r0, #0
    6dfe:	d04a      	beq.n	6e96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x176>
    6e00:	8870      	ldrh	r0, [r6, #2]
    6e02:	9904      	ldr	r1, [sp, #16]
    6e04:	4288      	cmp	r0, r1
    6e06:	bf28      	it	cs
    6e08:	4580      	cmpcs	r8, r0
    6e0a:	d944      	bls.n	6e96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x176>
    6e0c:	1a40      	subs	r0, r0, r1
    6e0e:	b2c0      	uxtb	r0, r0
    6e10:	2102      	movs	r1, #2
    6e12:	f009 ffce 	bl	10db2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6e16:	2800      	cmp	r0, #0
    6e18:	f000 8215 	beq.w	7246 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x526>
    6e1c:	682a      	ldr	r2, [r5, #0]
    6e1e:	4607      	mov	r7, r0
    6e20:	2a00      	cmp	r2, #0
    6e22:	f000 8210 	beq.w	7246 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x526>
    6e26:	4621      	mov	r1, r4
    6e28:	4790      	blx	r2
    6e2a:	2800      	cmp	r0, #0
    6e2c:	f000 820b 	beq.w	7246 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x526>
    6e30:	7820      	ldrb	r0, [r4, #0]
    6e32:	2814      	cmp	r0, #20
    6e34:	d003      	beq.n	6e3e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    6e36:	2817      	cmp	r0, #23
    6e38:	d00b      	beq.n	6e52 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x132>
    6e3a:	f000 ba59 	b.w	72f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d0>
    6e3e:	7920      	ldrb	r0, [r4, #4]
    6e40:	b990      	cbnz	r0, 6e68 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x148>
    6e42:	f006 fe9b 	bl	db7c <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    6e46:	2800      	cmp	r0, #0
    6e48:	bf08      	it	eq
    6e4a:	2001      	moveq	r0, #1
    6e4c:	f040 8250 	bne.w	72f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d0>
    6e50:	e007      	b.n	6e62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x142>
    6e52:	7920      	ldrb	r0, [r4, #4]
    6e54:	b128      	cbz	r0, 6e62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x142>
    6e56:	4638      	mov	r0, r7
    6e58:	f00b f913 	bl	12082 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6e5c:	b120      	cbz	r0, 6e68 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x148>
    6e5e:	f000 ba47 	b.w	72f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d0>
    6e62:	7030      	strb	r0, [r6, #0]
    6e64:	f000 ba44 	b.w	72f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d0>
    6e68:	88e4      	ldrh	r4, [r4, #6]
    6e6a:	2101      	movs	r1, #1
    6e6c:	4620      	mov	r0, r4
    6e6e:	f009 ffa0 	bl	10db2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6e72:	2800      	cmp	r0, #0
    6e74:	f000 823c 	beq.w	72f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d0>
    6e78:	8800      	ldrh	r0, [r0, #0]
    6e7a:	f7fd ff65 	bl	4d48 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6e7e:	2101      	movs	r1, #1
    6e80:	4620      	mov	r0, r4
    6e82:	f7fd fb15 	bl	44b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6e86:	2800      	cmp	r0, #0
    6e88:	f000 8232 	beq.w	72f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d0>
    6e8c:	f240 1171 	movw	r1, #369	; 0x171
    6e90:	2010      	movs	r0, #16
    6e92:	f7fd f855 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e96:	4da8      	ldr	r5, [pc, #672]	; (7138 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x418>)
    6e98:	6828      	ldr	r0, [r5, #0]
    6e9a:	b338      	cbz	r0, 6eec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1cc>
    6e9c:	8870      	ldrh	r0, [r6, #2]
    6e9e:	4540      	cmp	r0, r8
    6ea0:	d324      	bcc.n	6eec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1cc>
    6ea2:	eba0 0008 	sub.w	r0, r0, r8
    6ea6:	b2c0      	uxtb	r0, r0
    6ea8:	2104      	movs	r1, #4
    6eaa:	f009 ff82 	bl	10db2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6eae:	0007      	movs	r7, r0
    6eb0:	f000 81c9 	beq.w	7246 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x526>
    6eb4:	682a      	ldr	r2, [r5, #0]
    6eb6:	4621      	mov	r1, r4
    6eb8:	4790      	blx	r2
    6eba:	2800      	cmp	r0, #0
    6ebc:	f000 81c3 	beq.w	7246 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x526>
    6ec0:	7820      	ldrb	r0, [r4, #0]
    6ec2:	281b      	cmp	r0, #27
    6ec4:	d006      	beq.n	6ed4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b4>
    6ec6:	2819      	cmp	r0, #25
    6ec8:	f040 8212 	bne.w	72f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d0>
    6ecc:	7920      	ldrb	r0, [r4, #4]
    6ece:	2800      	cmp	r0, #0
    6ed0:	f000 820e 	beq.w	72f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d0>
    6ed4:	8938      	ldrh	r0, [r7, #8]
    6ed6:	2104      	movs	r1, #4
    6ed8:	f7fd faea 	bl	44b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6edc:	2800      	cmp	r0, #0
    6ede:	f000 8207 	beq.w	72f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d0>
    6ee2:	f44f 714b 	mov.w	r1, #812	; 0x32c
    6ee6:	2010      	movs	r0, #16
    6ee8:	f7fd f82a 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6eec:	4893      	ldr	r0, [pc, #588]	; (713c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x41c>)
    6eee:	6801      	ldr	r1, [r0, #0]
    6ef0:	2900      	cmp	r1, #0
    6ef2:	d07d      	beq.n	6ff0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2d0>
    6ef4:	8872      	ldrh	r2, [r6, #2]
    6ef6:	9809      	ldr	r0, [sp, #36]	; 0x24
    6ef8:	4282      	cmp	r2, r0
    6efa:	d179      	bne.n	6ff0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2d0>
    6efc:	4620      	mov	r0, r4
    6efe:	4788      	blx	r1
    6f00:	2800      	cmp	r0, #0
    6f02:	d076      	beq.n	6ff2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2d2>
    6f04:	7820      	ldrb	r0, [r4, #0]
    6f06:	2818      	cmp	r0, #24
    6f08:	d003      	beq.n	6f12 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1f2>
    6f0a:	2805      	cmp	r0, #5
    6f0c:	d01b      	beq.n	6f46 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x226>
    6f0e:	f000 b9ef 	b.w	72f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d0>
    6f12:	7920      	ldrb	r0, [r4, #4]
    6f14:	2801      	cmp	r0, #1
    6f16:	f040 81eb 	bne.w	72f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d0>
    6f1a:	88e0      	ldrh	r0, [r4, #6]
    6f1c:	2100      	movs	r1, #0
    6f1e:	f009 ff48 	bl	10db2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6f22:	0004      	movs	r4, r0
    6f24:	f000 81e4 	beq.w	72f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d0>
    6f28:	8820      	ldrh	r0, [r4, #0]
    6f2a:	f7fd ff0d 	bl	4d48 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6f2e:	8820      	ldrh	r0, [r4, #0]
    6f30:	2100      	movs	r1, #0
    6f32:	f7fd fabd 	bl	44b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6f36:	2800      	cmp	r0, #0
    6f38:	f000 81da 	beq.w	72f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d0>
    6f3c:	f44f 7185 	mov.w	r1, #266	; 0x10a
    6f40:	2010      	movs	r0, #16
    6f42:	f7fc fffd 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f46:	f006 fe19 	bl	db7c <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    6f4a:	2800      	cmp	r0, #0
    6f4c:	f000 81d0 	beq.w	72f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d0>
    6f50:	7820      	ldrb	r0, [r4, #0]
    6f52:	2805      	cmp	r0, #5
    6f54:	d003      	beq.n	6f5e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x23e>
    6f56:	216d      	movs	r1, #109	; 0x6d
    6f58:	2010      	movs	r0, #16
    6f5a:	f7fc fff1 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f5e:	7ba0      	ldrb	r0, [r4, #14]
    6f60:	f010 0f10 	tst.w	r0, #16
    6f64:	d029      	beq.n	6fba <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x29a>
    6f66:	1d21      	adds	r1, r4, #4
    6f68:	4875      	ldr	r0, [pc, #468]	; (7140 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x420>)
    6f6a:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    6f6e:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    6f72:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
    6f76:	69e3      	ldr	r3, [r4, #28]
    6f78:	6183      	str	r3, [r0, #24]
    6f7a:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6f7e:	7b22      	ldrb	r2, [r4, #12]
    6f80:	f104 0120 	add.w	r1, r4, #32
    6f84:	301c      	adds	r0, #28
    6f86:	f008 ff35 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6f8a:	496d      	ldr	r1, [pc, #436]	; (7140 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x420>)
    6f8c:	7a88      	ldrb	r0, [r1, #10]
    6f8e:	f010 0f04 	tst.w	r0, #4
    6f92:	d002      	beq.n	6f9a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x27a>
    6f94:	7cc8      	ldrb	r0, [r1, #19]
    6f96:	28fe      	cmp	r0, #254	; 0xfe
    6f98:	d015      	beq.n	6fc6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2a6>
    6f9a:	f04f 0204 	mov.w	r2, #4
    6f9e:	7022      	strb	r2, [r4, #0]
    6fa0:	6808      	ldr	r0, [r1, #0]
    6fa2:	6060      	str	r0, [r4, #4]
    6fa4:	6848      	ldr	r0, [r1, #4]
    6fa6:	60a0      	str	r0, [r4, #8]
    6fa8:	8908      	ldrh	r0, [r1, #8]
    6faa:	81a0      	strh	r0, [r4, #12]
    6fac:	7a88      	ldrb	r0, [r1, #10]
    6fae:	f010 0f08 	tst.w	r0, #8
    6fb2:	bf18      	it	ne
    6fb4:	73a2      	strbne	r2, [r4, #14]
    6fb6:	d12b      	bne.n	7010 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2f0>
    6fb8:	e022      	b.n	7000 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2e0>
    6fba:	f04f 016e 	mov.w	r1, #110	; 0x6e
    6fbe:	f04f 0010 	mov.w	r0, #16
    6fc2:	f7fc ffbd 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fc6:	2013      	movs	r0, #19
    6fc8:	7020      	strb	r0, [r4, #0]
    6fca:	7808      	ldrb	r0, [r1, #0]
    6fcc:	7120      	strb	r0, [r4, #4]
    6fce:	2001      	movs	r0, #1
    6fd0:	7160      	strb	r0, [r4, #5]
    6fd2:	7848      	ldrb	r0, [r1, #1]
    6fd4:	71a0      	strb	r0, [r4, #6]
    6fd6:	f8d1 0002 	ldr.w	r0, [r1, #2]
    6fda:	f8c4 0007 	str.w	r0, [r4, #7]
    6fde:	88c8      	ldrh	r0, [r1, #6]
    6fe0:	f8a4 000b 	strh.w	r0, [r4, #11]
    6fe4:	20fe      	movs	r0, #254	; 0xfe
    6fe6:	7360      	strb	r0, [r4, #13]
    6fe8:	6948      	ldr	r0, [r1, #20]
    6fea:	f8c4 000e 	str.w	r0, [r4, #14]
    6fee:	e001      	b.n	6ff4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2d4>
    6ff0:	e048      	b.n	7084 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x364>
    6ff2:	e031      	b.n	7058 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x338>
    6ff4:	8b08      	ldrh	r0, [r1, #24]
    6ff6:	8260      	strh	r0, [r4, #18]
    6ff8:	7a48      	ldrb	r0, [r1, #9]
    6ffa:	7520      	strb	r0, [r4, #20]
    6ffc:	f000 b978 	b.w	72f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d0>
    7000:	f010 0f01 	tst.w	r0, #1
    7004:	bf1c      	itt	ne
    7006:	f010 0f02 	tstne.w	r0, #2
    700a:	2000      	movne	r0, #0
    700c:	d007      	beq.n	701e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2fe>
    700e:	73a0      	strb	r0, [r4, #14]
    7010:	7a0a      	ldrb	r2, [r1, #8]
    7012:	2a1f      	cmp	r2, #31
    7014:	d919      	bls.n	704a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x32a>
    7016:	21b8      	movs	r1, #184	; 0xb8
    7018:	2010      	movs	r0, #16
    701a:	f7fc ff91 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    701e:	f010 0f04 	tst.w	r0, #4
    7022:	bf18      	it	ne
    7024:	2001      	movne	r0, #1
    7026:	d1f2      	bne.n	700e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2ee>
    7028:	f010 0f01 	tst.w	r0, #1
    702c:	d104      	bne.n	7038 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x318>
    702e:	f010 0f02 	tst.w	r0, #2
    7032:	bf18      	it	ne
    7034:	2002      	movne	r0, #2
    7036:	d1ea      	bne.n	700e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2ee>
    7038:	f010 0f03 	tst.w	r0, #3
    703c:	bf08      	it	eq
    703e:	2003      	moveq	r0, #3
    7040:	d0e5      	beq.n	700e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2ee>
    7042:	21b5      	movs	r1, #181	; 0xb5
    7044:	2010      	movs	r0, #16
    7046:	f7fc ff7b 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    704a:	493e      	ldr	r1, [pc, #248]	; (7144 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x424>)
    704c:	f104 000f 	add.w	r0, r4, #15
    7050:	f008 fed0 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7054:	f000 b94c 	b.w	72f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d0>
    7058:	4834      	ldr	r0, [pc, #208]	; (712c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x40c>)
    705a:	7840      	ldrb	r0, [r0, #1]
    705c:	2800      	cmp	r0, #0
    705e:	d064      	beq.n	712a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x40a>
    7060:	2000      	movs	r0, #0
    7062:	7060      	strb	r0, [r4, #1]
    7064:	2114      	movs	r1, #20
    7066:	7021      	strb	r1, [r4, #0]
    7068:	6060      	str	r0, [r4, #4]
    706a:	60a0      	str	r0, [r4, #8]
    706c:	60e0      	str	r0, [r4, #12]
    706e:	6120      	str	r0, [r4, #16]
    7070:	6160      	str	r0, [r4, #20]
    7072:	61a0      	str	r0, [r4, #24]
    7074:	61e0      	str	r0, [r4, #28]
    7076:	2102      	movs	r1, #2
    7078:	6220      	str	r0, [r4, #32]
    707a:	7121      	strb	r1, [r4, #4]
    707c:	492b      	ldr	r1, [pc, #172]	; (712c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x40c>)
    707e:	7048      	strb	r0, [r1, #1]
    7080:	f000 b936 	b.w	72f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d0>
    7084:	4d30      	ldr	r5, [pc, #192]	; (7148 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x428>)
    7086:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 714c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x42c>
    708a:	6828      	ldr	r0, [r5, #0]
    708c:	f8da 1000 	ldr.w	r1, [sl]
    7090:	4308      	orrs	r0, r1
    7092:	d04a      	beq.n	712a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x40a>
    7094:	8877      	ldrh	r7, [r6, #2]
    7096:	a906      	add	r1, sp, #24
    7098:	4638      	mov	r0, r7
    709a:	f00a f8b9 	bl	11210 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    709e:	2800      	cmp	r0, #0
    70a0:	d143      	bne.n	712a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x40a>
    70a2:	bf00      	nop
    70a4:	f89d 0018 	ldrb.w	r0, [sp, #24]
    70a8:	2800      	cmp	r0, #0
    70aa:	9807      	ldr	r0, [sp, #28]
    70ac:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    70b0:	d00e      	beq.n	70d0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3b0>
    70b2:	2800      	cmp	r0, #0
    70b4:	d039      	beq.n	712a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x40a>
    70b6:	f8da 2000 	ldr.w	r2, [sl]
    70ba:	b332      	cbz	r2, 710a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3ea>
    70bc:	4621      	mov	r1, r4
    70be:	4638      	mov	r0, r7
    70c0:	4790      	blx	r2
    70c2:	b310      	cbz	r0, 710a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3ea>
    70c4:	4620      	mov	r0, r4
    70c6:	f000 f94f 	bl	7368 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x10>
    70ca:	2800      	cmp	r0, #0
    70cc:	d1ea      	bne.n	70a4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x384>
    70ce:	e10f      	b.n	72f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d0>
    70d0:	2800      	cmp	r0, #0
    70d2:	d02a      	beq.n	712a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x40a>
    70d4:	481c      	ldr	r0, [pc, #112]	; (7148 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x428>)
    70d6:	6802      	ldr	r2, [r0, #0]
    70d8:	b14a      	cbz	r2, 70ee <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3ce>
    70da:	4621      	mov	r1, r4
    70dc:	4638      	mov	r0, r7
    70de:	4790      	blx	r2
    70e0:	b128      	cbz	r0, 70ee <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3ce>
    70e2:	4620      	mov	r0, r4
    70e4:	f000 f940 	bl	7368 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x10>
    70e8:	2800      	cmp	r0, #0
    70ea:	d1db      	bne.n	70a4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x384>
    70ec:	e100      	b.n	72f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d0>
    70ee:	9807      	ldr	r0, [sp, #28]
    70f0:	f100 0578 	add.w	r5, r0, #120	; 0x78
    70f4:	f890 0124 	ldrb.w	r0, [r0, #292]	; 0x124
    70f8:	bb50      	cbnz	r0, 7150 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x430>
    70fa:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    70fe:	f88d 0008 	strb.w	r0, [sp, #8]
    7102:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7106:	b968      	cbnz	r0, 7124 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x404>
    7108:	e023      	b.n	7152 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x432>
    710a:	9807      	ldr	r0, [sp, #28]
    710c:	f100 0578 	add.w	r5, r0, #120	; 0x78
    7110:	f890 0144 	ldrb.w	r0, [r0, #324]	; 0x144
    7114:	b9e0      	cbnz	r0, 7150 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x430>
    7116:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    711a:	f88d 0008 	strb.w	r0, [sp, #8]
    711e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7122:	b1a8      	cbz	r0, 7150 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x430>
    7124:	f04f 0901 	mov.w	r9, #1
    7128:	e015      	b.n	7156 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x436>
    712a:	e08c      	b.n	7246 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x526>
    712c:	200002fd 	.word	0x200002fd
    7130:	20000300 	.word	0x20000300
    7134:	20000114 	.word	0x20000114
    7138:	20000120 	.word	0x20000120
    713c:	20000124 	.word	0x20000124
    7140:	20000ef0 	.word	0x20000ef0
    7144:	20000f0c 	.word	0x20000f0c
    7148:	2000011c 	.word	0x2000011c
    714c:	20000128 	.word	0x20000128
    7150:	e7ff      	b.n	7152 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x432>
    7152:	f04f 0900 	mov.w	r9, #0
    7156:	f895 0047 	ldrb.w	r0, [r5, #71]	; 0x47
    715a:	2800      	cmp	r0, #0
    715c:	bf1c      	itt	ne
    715e:	f895 0048 	ldrbne.w	r0, [r5, #72]	; 0x48
    7162:	f010 0f02 	tstne.w	r0, #2
    7166:	d019      	beq.n	719c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x47c>
    7168:	f04f 0000 	mov.w	r0, #0
    716c:	7060      	strb	r0, [r4, #1]
    716e:	f04f 0101 	mov.w	r1, #1
    7172:	7021      	strb	r1, [r4, #0]
    7174:	7120      	strb	r0, [r4, #4]
    7176:	f8a4 7005 	strh.w	r7, [r4, #5]
    717a:	f895 1049 	ldrb.w	r1, [r5, #73]	; 0x49
    717e:	71e1      	strb	r1, [r4, #7]
    7180:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
    7184:	8122      	strh	r2, [r4, #8]
    7186:	f8b5 204c 	ldrh.w	r2, [r5, #76]	; 0x4c
    718a:	8162      	strh	r2, [r4, #10]
    718c:	f885 0047 	strb.w	r0, [r5, #71]	; 0x47
    7190:	4620      	mov	r0, r4
    7192:	f000 f8e9 	bl	7368 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x10>
    7196:	2800      	cmp	r0, #0
    7198:	d184      	bne.n	70a4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x384>
    719a:	e0a9      	b.n	72f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d0>
    719c:	4638      	mov	r0, r7
    719e:	f7fd fb35 	bl	480c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    71a2:	ea5f 0b00 	movs.w	fp, r0
    71a6:	d01b      	beq.n	71e0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c0>
    71a8:	f009 fc21 	bl	109ee <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    71ac:	b1e8      	cbz	r0, 71ea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4ca>
    71ae:	2100      	movs	r1, #0
    71b0:	7061      	strb	r1, [r4, #1]
    71b2:	210f      	movs	r1, #15
    71b4:	7021      	strb	r1, [r4, #0]
    71b6:	80e7      	strh	r7, [r4, #6]
    71b8:	8120      	strh	r0, [r4, #8]
    71ba:	2201      	movs	r2, #1
    71bc:	1e40      	subs	r0, r0, #1
    71be:	7122      	strb	r2, [r4, #4]
    71c0:	b285      	uxth	r5, r0
    71c2:	2200      	movs	r2, #0
    71c4:	4611      	mov	r1, r2
    71c6:	4658      	mov	r0, fp
    71c8:	f009 fd03 	bl	10bd2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    71cc:	1e69      	subs	r1, r5, #1
    71ce:	b28d      	uxth	r5, r1
    71d0:	d2f7      	bcs.n	71c2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4a2>
    71d2:	4620      	mov	r0, r4
    71d4:	f000 f8c8 	bl	7368 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x10>
    71d8:	2800      	cmp	r0, #0
    71da:	f47f af63 	bne.w	70a4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x384>
    71de:	e087      	b.n	72f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d0>
    71e0:	f240 2133 	movw	r1, #563	; 0x233
    71e4:	2010      	movs	r0, #16
    71e6:	f7fc feab 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    71ea:	4638      	mov	r0, r7
    71ec:	f7fd faf8 	bl	47e0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    71f0:	b320      	cbz	r0, 723c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x51c>
    71f2:	f1b9 0f00 	cmp.w	r9, #0
    71f6:	d026      	beq.n	7246 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x526>
    71f8:	f009 fb3e 	bl	10878 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    71fc:	b318      	cbz	r0, 7246 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x526>
    71fe:	4638      	mov	r0, r7
    7200:	f7fd fda2 	bl	4d48 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    7204:	2100      	movs	r1, #0
    7206:	4638      	mov	r0, r7
    7208:	f7fd f952 	bl	44b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    720c:	2101      	movs	r1, #1
    720e:	4638      	mov	r0, r7
    7210:	f7fd f94e 	bl	44b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7214:	2000      	movs	r0, #0
    7216:	7060      	strb	r0, [r4, #1]
    7218:	210c      	movs	r1, #12
    721a:	7021      	strb	r1, [r4, #0]
    721c:	7120      	strb	r0, [r4, #4]
    721e:	f8a4 7005 	strh.w	r7, [r4, #5]
    7222:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
    7226:	4621      	mov	r1, r4
    7228:	71e2      	strb	r2, [r4, #7]
    722a:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    722e:	4608      	mov	r0, r1
    7230:	f000 f89a 	bl	7368 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x10>
    7234:	2800      	cmp	r0, #0
    7236:	f47f af35 	bne.w	70a4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x384>
    723a:	e059      	b.n	72f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d0>
    723c:	f240 2151 	movw	r1, #593	; 0x251
    7240:	2010      	movs	r0, #16
    7242:	f7fc fe7d 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7246:	1cb5      	adds	r5, r6, #2
    7248:	2000      	movs	r0, #0
    724a:	f7fd f857 	bl	42fc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    724e:	4607      	mov	r7, r0
    7250:	2001      	movs	r0, #1
    7252:	f7fd f853 	bl	42fc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    7256:	4438      	add	r0, r7
    7258:	f000 0aff 	and.w	sl, r0, #255	; 0xff
    725c:	2002      	movs	r0, #2
    725e:	f7fd f84d 	bl	42fc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    7262:	1c47      	adds	r7, r0, #1
    7264:	2004      	movs	r0, #4
    7266:	f7fd f849 	bl	42fc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    726a:	4438      	add	r0, r7
    726c:	4450      	add	r0, sl
    726e:	f010 07ff 	ands.w	r7, r0, #255	; 0xff
    7272:	f04f 0900 	mov.w	r9, #0
    7276:	bf18      	it	ne
    7278:	f04f 0b00 	movne.w	fp, #0
    727c:	d016      	beq.n	72ac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58c>
    727e:	8828      	ldrh	r0, [r5, #0]
    7280:	1c40      	adds	r0, r0, #1
    7282:	b280      	uxth	r0, r0
    7284:	8028      	strh	r0, [r5, #0]
    7286:	42b8      	cmp	r0, r7
    7288:	bf28      	it	cs
    728a:	f8a5 b000 	strhcs.w	fp, [r5]
    728e:	8828      	ldrh	r0, [r5, #0]
    7290:	4550      	cmp	r0, sl
    7292:	d301      	bcc.n	7298 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x578>
    7294:	42b8      	cmp	r0, r7
    7296:	d30d      	bcc.n	72b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x594>
    7298:	a90c      	add	r1, sp, #48	; 0x30
    729a:	f009 ffb9 	bl	11210 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    729e:	b148      	cbz	r0, 72b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x594>
    72a0:	f109 0001 	add.w	r0, r9, #1
    72a4:	f000 09ff 	and.w	r9, r0, #255	; 0xff
    72a8:	45b9      	cmp	r9, r7
    72aa:	d3e8      	bcc.n	727e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x55e>
    72ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
    72b0:	8028      	strh	r0, [r5, #0]
    72b2:	e004      	b.n	72be <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x59e>
    72b4:	8871      	ldrh	r1, [r6, #2]
    72b6:	980a      	ldr	r0, [sp, #40]	; 0x28
    72b8:	4281      	cmp	r1, r0
    72ba:	f47f ad9d 	bne.w	6df8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd8>
    72be:	480e      	ldr	r0, [pc, #56]	; (72f8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d8>)
    72c0:	6801      	ldr	r1, [r0, #0]
    72c2:	b111      	cbz	r1, 72ca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5aa>
    72c4:	4620      	mov	r0, r4
    72c6:	4788      	blx	r1
    72c8:	b990      	cbnz	r0, 72f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d0>
    72ca:	480c      	ldr	r0, [pc, #48]	; (72fc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5dc>)
    72cc:	6801      	ldr	r1, [r0, #0]
    72ce:	b111      	cbz	r1, 72d6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5b6>
    72d0:	4620      	mov	r0, r4
    72d2:	4788      	blx	r1
    72d4:	b960      	cbnz	r0, 72f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5d0>
    72d6:	480a      	ldr	r0, [pc, #40]	; (7300 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5e0>)
    72d8:	7881      	ldrb	r1, [r0, #2]
    72da:	2900      	cmp	r1, #0
    72dc:	bf02      	ittt	eq
    72de:	2000      	moveq	r0, #0
    72e0:	b00f      	addeq	sp, #60	; 0x3c
    72e2:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    72e6:	2100      	movs	r1, #0
    72e8:	7061      	strb	r1, [r4, #1]
    72ea:	2224      	movs	r2, #36	; 0x24
    72ec:	7022      	strb	r2, [r4, #0]
    72ee:	7081      	strb	r1, [r0, #2]
    72f0:	b00f      	add	sp, #60	; 0x3c
    72f2:	2001      	movs	r0, #1
    72f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    72f8:	2000012c 	.word	0x2000012c
    72fc:	20000118 	.word	0x20000118
    7300:	200002fd 	.word	0x200002fd

00007304 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    7304:	4905      	ldr	r1, [pc, #20]	; (731c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x18>)
    7306:	f64f 73ff 	movw	r3, #65535	; 0xffff
    730a:	7008      	strb	r0, [r1, #0]
    730c:	2000      	movs	r0, #0
    730e:	1d0a      	adds	r2, r1, #4
    7310:	7010      	strb	r0, [r2, #0]
    7312:	8053      	strh	r3, [r2, #2]
    7314:	f8a1 0001 	strh.w	r0, [r1, #1]
    7318:	70c8      	strb	r0, [r1, #3]
    731a:	4770      	bx	lr
    731c:	200002fc 	.word	0x200002fc

00007320 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    7320:	4805      	ldr	r0, [pc, #20]	; (7338 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x18>)
    7322:	2100      	movs	r1, #0
    7324:	f64f 72ff 	movw	r2, #65535	; 0xffff
    7328:	7001      	strb	r1, [r0, #0]
    732a:	8042      	strh	r2, [r0, #2]
    732c:	1f00      	subs	r0, r0, #4
    732e:	f8a0 1001 	strh.w	r1, [r0, #1]
    7332:	70c1      	strb	r1, [r0, #3]
    7334:	4770      	bx	lr
    7336:	0000      	.short	0x0000
    7338:	20000300 	.word	0x20000300

0000733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    733c:	4801      	ldr	r0, [pc, #4]	; (7344 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    733e:	7800      	ldrb	r0, [r0, #0]
    7340:	f7fc bb18 	b.w	3974 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7344:	200002fc 	.word	0x200002fc

00007348 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    7348:	4902      	ldr	r1, [pc, #8]	; (7354 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    734a:	4801      	ldr	r0, [pc, #4]	; (7350 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    734c:	6008      	str	r0, [r1, #0]
    734e:	4770      	bx	lr
    7350:	00011dc9 	.word	0x00011dc9
    7354:	20000114 	.word	0x20000114

00007358 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>:
    7358:	4902      	ldr	r1, [pc, #8]	; (7364 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc>)
    735a:	4801      	ldr	r0, [pc, #4]	; (7360 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x8>)
    735c:	6008      	str	r0, [r1, #0]
    735e:	4770      	bx	lr
    7360:	000090a5 	.word	0x000090a5
    7364:	20000124 	.word	0x20000124
    7368:	b510      	push	{r4, lr}
    736a:	4933      	ldr	r1, [pc, #204]	; (7438 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe0>)
    736c:	b086      	sub	sp, #24
    736e:	7d8a      	ldrb	r2, [r1, #22]
    7370:	7801      	ldrb	r1, [r0, #0]
    7372:	f012 0f01 	tst.w	r2, #1
    7376:	bf08      	it	eq
    7378:	2920      	cmpeq	r1, #32
    737a:	d00a      	beq.n	7392 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x3a>
    737c:	291f      	cmp	r1, #31
    737e:	d02b      	beq.n	73d8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x80>
    7380:	2915      	cmp	r1, #21
    7382:	bf02      	ittt	eq
    7384:	f012 0f04 	tsteq.w	r2, #4
    7388:	7b80      	ldrbeq	r0, [r0, #14]
    738a:	f010 0f01 	tsteq.w	r0, #1
    738e:	d050      	beq.n	7432 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xda>
    7390:	e025      	b.n	73de <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x86>
    7392:	8880      	ldrh	r0, [r0, #4]
    7394:	f8ad 0000 	strh.w	r0, [sp]
    7398:	a902      	add	r1, sp, #8
    739a:	f009 ff39 	bl	11210 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    739e:	b120      	cbz	r0, 73aa <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x52>
    73a0:	f44f 71c4 	mov.w	r1, #392	; 0x188
    73a4:	2010      	movs	r0, #16
    73a6:	f7fc fdcb 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    73aa:	9803      	ldr	r0, [sp, #12]
    73ac:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    73b0:	f88d 1002 	strb.w	r1, [sp, #2]
    73b4:	f890 1067 	ldrb.w	r1, [r0, #103]	; 0x67
    73b8:	f88d 1003 	strb.w	r1, [sp, #3]
    73bc:	f8b0 0068 	ldrh.w	r0, [r0, #104]	; 0x68
    73c0:	f8ad 0004 	strh.w	r0, [sp, #4]
    73c4:	2102      	movs	r1, #2
    73c6:	4668      	mov	r0, sp
    73c8:	f006 f8d6 	bl	d578 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    73cc:	b388      	cbz	r0, 7432 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xda>
    73ce:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    73d2:	2010      	movs	r0, #16
    73d4:	f7fc fdb4 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    73d8:	f012 0f02 	tst.w	r2, #2
    73dc:	d003      	beq.n	73e6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x8e>
    73de:	b006      	add	sp, #24
    73e0:	f04f 0000 	mov.w	r0, #0
    73e4:	bd10      	pop	{r4, pc}
    73e6:	8884      	ldrh	r4, [r0, #4]
    73e8:	a903      	add	r1, sp, #12
    73ea:	4620      	mov	r0, r4
    73ec:	f00b fe60 	bl	130b0 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    73f0:	b120      	cbz	r0, 73fc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xa4>
    73f2:	f240 11a5 	movw	r1, #421	; 0x1a5
    73f6:	2010      	movs	r0, #16
    73f8:	f7fc fda2 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    73fc:	f8ad 4000 	strh.w	r4, [sp]
    7400:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    7404:	f8ad 0002 	strh.w	r0, [sp, #2]
    7408:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    740c:	f8ad 0004 	strh.w	r0, [sp, #4]
    7410:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    7414:	f8ad 0006 	strh.w	r0, [sp, #6]
    7418:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    741c:	f8ad 0008 	strh.w	r0, [sp, #8]
    7420:	4668      	mov	r0, sp
    7422:	f00b feea 	bl	131fa <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    7426:	b120      	cbz	r0, 7432 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xda>
    7428:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    742c:	2010      	movs	r0, #16
    742e:	f7fc fd87 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7432:	b006      	add	sp, #24
    7434:	2001      	movs	r0, #1
    7436:	bd10      	pop	{r4, pc}
    7438:	20000ed0 	.word	0x20000ed0

0000743c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    743c:	b430      	push	{r4, r5}
    743e:	f890 506a 	ldrb.w	r5, [r0, #106]	; 0x6a
    7442:	888c      	ldrh	r4, [r1, #4]
    7444:	f8b1 c008 	ldrh.w	ip, [r1, #8]
    7448:	f015 0f0c 	tst.w	r5, #12
    744c:	d01b      	beq.n	7486 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x4a>
    744e:	bf00      	nop
    7450:	f5b4 6f29 	cmp.w	r4, #2704	; 0xa90
    7454:	bf98      	it	ls
    7456:	f44f 6429 	movls.w	r4, #2704	; 0xa90
    745a:	f890 506b 	ldrb.w	r5, [r0, #107]	; 0x6b
    745e:	f015 0f0c 	tst.w	r5, #12
    7462:	d017      	beq.n	7494 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x58>
    7464:	f5bc 6f29 	cmp.w	ip, #2704	; 0xa90
    7468:	bf98      	it	ls
    746a:	f44f 6c29 	movls.w	ip, #2704	; 0xa90
    746e:	884a      	ldrh	r2, [r1, #2]
    7470:	88c9      	ldrh	r1, [r1, #6]
    7472:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    7476:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    747a:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    747e:	f8a0 c04e 	strh.w	ip, [r0, #78]	; 0x4e
    7482:	bc30      	pop	{r4, r5}
    7484:	4770      	bx	lr
    7486:	2b00      	cmp	r3, #0
    7488:	bf1c      	itt	ne
    748a:	7815      	ldrbne	r5, [r2, #0]
    748c:	f015 0f0c 	tstne.w	r5, #12
    7490:	d1de      	bne.n	7450 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x14>
    7492:	e7e2      	b.n	745a <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x1e>
    7494:	2b00      	cmp	r3, #0
    7496:	bf1c      	itt	ne
    7498:	7852      	ldrbne	r2, [r2, #1]
    749a:	f012 0f0c 	tstne.w	r2, #12
    749e:	d1e1      	bne.n	7464 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x28>
    74a0:	e7e5      	b.n	746e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x32>
	...

000074a4 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI>:
    74a4:	4801      	ldr	r0, [pc, #4]	; (74ac <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0x8>)
    74a6:	7800      	ldrb	r0, [r0, #0]
    74a8:	4770      	bx	lr
    74aa:	0000      	.short	0x0000
    74ac:	2000031f 	.word	0x2000031f
    74b0:	b430      	push	{r4, r5}
    74b2:	f8b0 c034 	ldrh.w	ip, [r0, #52]	; 0x34
    74b6:	f012 0f0c 	tst.w	r2, #12
    74ba:	f44f 7474 	mov.w	r4, #976	; 0x3d0
    74be:	bf1c      	itt	ne
    74c0:	eb04 1c8c 	addne.w	ip, r4, ip, lsl #6
    74c4:	fa1f fc8c 	uxthne.w	ip, ip
    74c8:	d007      	beq.n	74da <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0x36>
    74ca:	bf00      	nop
    74cc:	f012 0f0c 	tst.w	r2, #12
    74d0:	bf18      	it	ne
    74d2:	f44f 6229 	movne.w	r2, #2704	; 0xa90
    74d6:	d114      	bne.n	7502 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0x5e>
    74d8:	e00c      	b.n	74f4 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0x50>
    74da:	2a02      	cmp	r2, #2
    74dc:	bf07      	ittee	eq
    74de:	ea4f 0c8c 	moveq.w	ip, ip, lsl #2
    74e2:	f10c 0c3c 	addeq.w	ip, ip, #60	; 0x3c
    74e6:	ea4f 0ccc 	movne.w	ip, ip, lsl #3
    74ea:	f10c 0c70 	addne.w	ip, ip, #112	; 0x70
    74ee:	fa1f fc8c 	uxth.w	ip, ip
    74f2:	e7eb      	b.n	74cc <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0x28>
    74f4:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
    74f8:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
    74fc:	4295      	cmp	r5, r2
    74fe:	bf38      	it	cc
    7500:	462a      	movcc	r2, r5
    7502:	4562      	cmp	r2, ip
    7504:	bf38      	it	cc
    7506:	4694      	movcc	ip, r2
    7508:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    750a:	f013 0f0c 	tst.w	r3, #12
    750e:	bf1c      	itt	ne
    7510:	eb04 1282 	addne.w	r2, r4, r2, lsl #6
    7514:	b294      	uxthne	r4, r2
    7516:	d006      	beq.n	7526 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0x82>
    7518:	f013 0f0c 	tst.w	r3, #12
    751c:	bf18      	it	ne
    751e:	f44f 6229 	movne.w	r2, #2704	; 0xa90
    7522:	d10f      	bne.n	7544 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0xa0>
    7524:	e007      	b.n	7536 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0x92>
    7526:	2b02      	cmp	r3, #2
    7528:	bf07      	ittee	eq
    752a:	0092      	lsleq	r2, r2, #2
    752c:	323c      	addeq	r2, #60	; 0x3c
    752e:	00d2      	lslne	r2, r2, #3
    7530:	3270      	addne	r2, #112	; 0x70
    7532:	b294      	uxth	r4, r2
    7534:	e7f0      	b.n	7518 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0x74>
    7536:	f8b0 204e 	ldrh.w	r2, [r0, #78]	; 0x4e
    753a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    753e:	4282      	cmp	r2, r0
    7540:	bf28      	it	cs
    7542:	4602      	movcs	r2, r0
    7544:	42a2      	cmp	r2, r4
    7546:	bf28      	it	cs
    7548:	4622      	movcs	r2, r4
    754a:	480c      	ldr	r0, [pc, #48]	; (757c <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0xd8>)
    754c:	7800      	ldrb	r0, [r0, #0]
    754e:	b140      	cbz	r0, 7562 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0xbe>
    7550:	f013 0f0c 	tst.w	r3, #12
    7554:	bf18      	it	ne
    7556:	f44f 6049 	movne.w	r0, #3216	; 0xc90
    755a:	d008      	beq.n	756e <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0xca>
    755c:	4282      	cmp	r2, r0
    755e:	bf98      	it	ls
    7560:	4602      	movls	r2, r0
    7562:	eb0c 0002 	add.w	r0, ip, r2
    7566:	4408      	add	r0, r1
    7568:	bc30      	pop	{r4, r5}
    756a:	1d80      	adds	r0, r0, #6
    756c:	4770      	bx	lr
    756e:	2b02      	cmp	r3, #2
    7570:	bf0c      	ite	eq
    7572:	20c8      	moveq	r0, #200	; 0xc8
    7574:	f44f 70c4 	movne.w	r0, #392	; 0x188
    7578:	e7f0      	b.n	755c <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0xb8>
    757a:	0000      	.short	0x0000
    757c:	2000031f 	.word	0x2000031f

00007580 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    7580:	b470      	push	{r4, r5, r6}
    7582:	f06f 021f 	mvn.w	r2, #31
    7586:	0c01      	lsrs	r1, r0, #16
    7588:	ea02 2590 	and.w	r5, r2, r0, lsr #10
    758c:	231f      	movs	r3, #31
    758e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    7592:	3854      	subs	r0, #84	; 0x54
    7594:	bf1c      	itt	ne
    7596:	f5a1 40aa 	subne.w	r0, r1, #21760	; 0x5500
    759a:	f1b0 0055 	subsne.w	r0, r0, #85	; 0x55
    759e:	d009      	beq.n	75b4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    75a0:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    75a4:	38aa      	subs	r0, #170	; 0xaa
    75a6:	bf1e      	ittt	ne
    75a8:	f5a1 402a 	subne.w	r0, r1, #43520	; 0xaa00
    75ac:	f1b0 00aa 	subsne.w	r0, r0, #170	; 0xaa
    75b0:	2001      	movne	r0, #1
    75b2:	d100      	bne.n	75b6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x36>
    75b4:	2000      	movs	r0, #0
    75b6:	f04f 0c00 	mov.w	ip, #0
    75ba:	4662      	mov	r2, ip
    75bc:	ea4f 040c 	mov.w	r4, ip
    75c0:	ea8c 0601 	eor.w	r6, ip, r1
    75c4:	43f6      	mvns	r6, r6
    75c6:	4316      	orrs	r6, r2
    75c8:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    75cc:	d011      	beq.n	75f2 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x72>
    75ce:	f005 0601 	and.w	r6, r5, #1
    75d2:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
    75d6:	ea4c 3cc6 	orr.w	ip, ip, r6, lsl #15
    75da:	f003 0601 	and.w	r6, r3, #1
    75de:	0852      	lsrs	r2, r2, #1
    75e0:	086d      	lsrs	r5, r5, #1
    75e2:	085b      	lsrs	r3, r3, #1
    75e4:	1c64      	adds	r4, r4, #1
    75e6:	ea42 32c6 	orr.w	r2, r2, r6, lsl #15
    75ea:	2c16      	cmp	r4, #22
    75ec:	d3e8      	bcc.n	75c0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x40>
    75ee:	bc70      	pop	{r4, r5, r6}
    75f0:	4770      	bx	lr
    75f2:	bc70      	pop	{r4, r5, r6}
    75f4:	2000      	movs	r0, #0
    75f6:	4770      	bx	lr

000075f8 <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA>:
    75f8:	4801      	ldr	r0, [pc, #4]	; (7600 <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA+0x8>)
    75fa:	f00a bb47 	b.w	11c8c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    75fe:	0000      	.short	0x0000
    7600:	20000130 	.word	0x20000130

00007604 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>:
    7604:	e9d0 2100 	ldrd	r2, r1, [r0]
    7608:	4b08      	ldr	r3, [pc, #32]	; (762c <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x28>)
    760a:	4353      	muls	r3, r2
    760c:	4051      	eors	r1, r2
    760e:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    7612:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    7616:	ea4f 41f1 	mov.w	r1, r1, ror #19
    761a:	e9c0 2100 	strd	r2, r1, [r0]
    761e:	ea4f 63f3 	mov.w	r3, r3, ror #27
    7622:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7626:	4618      	mov	r0, r3
    7628:	4770      	bx	lr
    762a:	0000      	.short	0x0000
    762c:	9e3779bb 	.word	0x9e3779bb

00007630 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    7630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7634:	4604      	mov	r4, r0
    7636:	7c80      	ldrb	r0, [r0, #18]
    7638:	2800      	cmp	r0, #0
    763a:	bf16      	itet	ne
    763c:	2802      	cmpne	r0, #2
    763e:	2000      	moveq	r0, #0
    7640:	2001      	movne	r0, #1
    7642:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
    7646:	b318      	cbz	r0, 7690 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x60>
    7648:	7e60      	ldrb	r0, [r4, #25]
    764a:	b368      	cbz	r0, 76a8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x78>
    764c:	f8d4 0013 	ldr.w	r0, [r4, #19]
    7650:	f8c4 005d 	str.w	r0, [r4, #93]	; 0x5d
    7654:	f8b4 0017 	ldrh.w	r0, [r4, #23]
    7658:	f8a4 0061 	strh.w	r0, [r4, #97]	; 0x61
    765c:	7ca0      	ldrb	r0, [r4, #18]
    765e:	2802      	cmp	r0, #2
    7660:	bf16      	itet	ne
    7662:	2803      	cmpne	r0, #3
    7664:	2101      	moveq	r1, #1
    7666:	2100      	movne	r1, #0
    7668:	76a1      	strb	r1, [r4, #26]
    766a:	f04f 0008 	mov.w	r0, #8
    766e:	76e0      	strb	r0, [r4, #27]
    7670:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
    7674:	f04f 0701 	mov.w	r7, #1
    7678:	f04f 0500 	mov.w	r5, #0
    767c:	2801      	cmp	r0, #1
    767e:	bf04      	itt	eq
    7680:	f894 2062 	ldrbeq.w	r2, [r4, #98]	; 0x62
    7684:	f012 0fc0 	tsteq.w	r2, #192	; 0xc0
    7688:	d01b      	beq.n	76c2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x92>
    768a:	2801      	cmp	r0, #1
    768c:	d011      	beq.n	76b2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x82>
    768e:	e016      	b.n	76be <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8e>
    7690:	f104 015d 	add.w	r1, r4, #93	; 0x5d
    7694:	2000      	movs	r0, #0
    7696:	f7fd fbd7 	bl	4e48 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    769a:	2800      	cmp	r0, #0
    769c:	d1de      	bne.n	765c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x2c>
    769e:	f240 41aa 	movw	r1, #1194	; 0x4aa
    76a2:	202d      	movs	r0, #45	; 0x2d
    76a4:	f7fc fc4c 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    76a8:	f240 41ae 	movw	r1, #1198	; 0x4ae
    76ac:	202d      	movs	r0, #45	; 0x2d
    76ae:	f7fc fc47 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    76b2:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    76b6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    76ba:	2840      	cmp	r0, #64	; 0x40
    76bc:	d001      	beq.n	76c2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x92>
    76be:	2000      	movs	r0, #0
    76c0:	e000      	b.n	76c4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x94>
    76c2:	2001      	movs	r0, #1
    76c4:	7720      	strb	r0, [r4, #28]
    76c6:	b131      	cbz	r1, 76d6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xa6>
    76c8:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    76cc:	f104 0164 	add.w	r1, r4, #100	; 0x64
    76d0:	f7fe fc44 	bl	5f5c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    76d4:	76e0      	strb	r0, [r4, #27]
    76d6:	6565      	str	r5, [r4, #84]	; 0x54
    76d8:	f008 fa17 	bl	fb0a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    76dc:	65a0      	str	r0, [r4, #88]	; 0x58
    76de:	f04f 0800 	mov.w	r8, #0
    76e2:	7ee0      	ldrb	r0, [r4, #27]
    76e4:	f7fe fb1e 	bl	5d24 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    76e8:	4606      	mov	r6, r0
    76ea:	7ea0      	ldrb	r0, [r4, #26]
    76ec:	2800      	cmp	r0, #0
    76ee:	bf18      	it	ne
    76f0:	2e00      	cmpne	r6, #0
    76f2:	d003      	beq.n	76fc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xcc>
    76f4:	7ee0      	ldrb	r0, [r4, #27]
    76f6:	f7fe fb09 	bl	5d0c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    76fa:	b158      	cbz	r0, 7714 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xe4>
    76fc:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    7700:	2800      	cmp	r0, #0
    7702:	bf1c      	itt	ne
    7704:	7f20      	ldrbne	r0, [r4, #28]
    7706:	2800      	cmpne	r0, #0
    7708:	d01d      	beq.n	7746 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x116>
    770a:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
    770e:	2801      	cmp	r0, #1
    7710:	d00e      	beq.n	7730 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x100>
    7712:	e013      	b.n	773c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10c>
    7714:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
    7718:	4642      	mov	r2, r8
    771a:	f104 015d 	add.w	r1, r4, #93	; 0x5d
    771e:	4630      	mov	r0, r6
    7720:	f009 fcf4 	bl	1110c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7724:	7ee1      	ldrb	r1, [r4, #27]
    7726:	f104 005d 	add.w	r0, r4, #93	; 0x5d
    772a:	f7fe fb07 	bl	5d3c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    772e:	e00a      	b.n	7746 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x116>
    7730:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    7734:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    7738:	2840      	cmp	r0, #64	; 0x40
    773a:	d02f      	beq.n	779c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x16c>
    773c:	4629      	mov	r1, r5
    773e:	f104 005d 	add.w	r0, r4, #93	; 0x5d
    7742:	f009 fcd2 	bl	110ea <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    7746:	f884 506a 	strb.w	r5, [r4, #106]	; 0x6a
    774a:	78a0      	ldrb	r0, [r4, #2]
    774c:	f010 0f04 	tst.w	r0, #4
    7750:	bf08      	it	eq
    7752:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    7756:	2600      	movs	r6, #0
    7758:	7ee0      	ldrb	r0, [r4, #27]
    775a:	f7fe fb6d 	bl	5e38 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    775e:	0005      	movs	r5, r0
    7760:	bf08      	it	eq
    7762:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    7766:	2110      	movs	r1, #16
    7768:	f7ff f8dc 	bl	6924 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    776c:	2800      	cmp	r0, #0
    776e:	bf18      	it	ne
    7770:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    7774:	f884 706a 	strb.w	r7, [r4, #106]	; 0x6a
    7778:	4632      	mov	r2, r6
    777a:	f104 016b 	add.w	r1, r4, #107	; 0x6b
    777e:	4628      	mov	r0, r5
    7780:	f009 fcc4 	bl	1110c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7784:	f104 016b 	add.w	r1, r4, #107	; 0x6b
    7788:	4c08      	ldr	r4, [pc, #32]	; (77ac <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x17c>)
    778a:	6860      	ldr	r0, [r4, #4]
    778c:	f00a f963 	bl	11a56 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7790:	6860      	ldr	r0, [r4, #4]
    7792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7796:	2101      	movs	r1, #1
    7798:	f00a b964 	b.w	11a64 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    779c:	f7fe fa86 	bl	5cac <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    77a0:	4642      	mov	r2, r8
    77a2:	f104 015d 	add.w	r1, r4, #93	; 0x5d
    77a6:	f009 fcb1 	bl	1110c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    77aa:	e7cc      	b.n	7746 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x116>
    77ac:	20000138 	.word	0x20000138

000077b0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    77b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    77b4:	4680      	mov	r8, r0
    77b6:	b089      	sub	sp, #36	; 0x24
    77b8:	460c      	mov	r4, r1
    77ba:	69c2      	ldr	r2, [r0, #28]
    77bc:	e9d8 0105 	ldrd	r0, r1, [r8, #20]
    77c0:	e9d8 7600 	ldrd	r7, r6, [r8]
    77c4:	e9d8 ba03 	ldrd	fp, sl, [r8, #12]
    77c8:	9203      	str	r2, [sp, #12]
    77ca:	e9cd 0101 	strd	r0, r1, [sp, #4]
    77ce:	f8d8 0020 	ldr.w	r0, [r8, #32]
    77d2:	9006      	str	r0, [sp, #24]
    77d4:	a804      	add	r0, sp, #16
    77d6:	f00a fda4 	bl	12322 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    77da:	7aa0      	ldrb	r0, [r4, #10]
    77dc:	f360 4a17 	bfi	sl, r0, #16, #8
    77e0:	7820      	ldrb	r0, [r4, #0]
    77e2:	f360 0707 	bfi	r7, r0, #0, #8
    77e6:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    77ea:	f8ad 0000 	strh.w	r0, [sp]
    77ee:	f89d 0000 	ldrb.w	r0, [sp]
    77f2:	f000 0101 	and.w	r1, r0, #1
    77f6:	f3c0 0240 	ubfx	r2, r0, #1, #1
    77fa:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    77fe:	f3c0 0280 	ubfx	r2, r0, #2, #1
    7802:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    7806:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    780a:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    780e:	f3c0 1200 	ubfx	r2, r0, #4, #1
    7812:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    7816:	f3c0 1240 	ubfx	r2, r0, #5, #1
    781a:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    781e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7822:	ea41 1980 	orr.w	r9, r1, r0, lsl #6
    7826:	7d20      	ldrb	r0, [r4, #20]
    7828:	f369 471f 	bfi	r7, r9, #16, #16
    782c:	2801      	cmp	r0, #1
    782e:	bf18      	it	ne
    7830:	2802      	cmpne	r0, #2
    7832:	d003      	beq.n	783c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x8c>
    7834:	2803      	cmp	r0, #3
    7836:	bf08      	it	eq
    7838:	2008      	moveq	r0, #8
    783a:	d10e      	bne.n	785a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xaa>
    783c:	7861      	ldrb	r1, [r4, #1]
    783e:	f360 0607 	bfi	r6, r0, #0, #8
    7842:	f011 0f10 	tst.w	r1, #16
    7846:	d10f      	bne.n	7868 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xb8>
    7848:	7da1      	ldrb	r1, [r4, #22]
    784a:	2901      	cmp	r1, #1
    784c:	bf18      	it	ne
    784e:	2902      	cmpne	r1, #2
    7850:	d008      	beq.n	7864 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xb4>
    7852:	2903      	cmp	r1, #3
    7854:	bf08      	it	eq
    7856:	2108      	moveq	r1, #8
    7858:	d004      	beq.n	7864 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xb4>
    785a:	f240 2175 	movw	r1, #629	; 0x275
    785e:	2006      	movs	r0, #6
    7860:	f7fc fb6e 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7864:	f361 260f 	bfi	r6, r1, #8, #8
    7868:	f3cb 4107 	ubfx	r1, fp, #16, #8
    786c:	2901      	cmp	r1, #1
    786e:	d008      	beq.n	7882 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xd2>
    7870:	7a61      	ldrb	r1, [r4, #9]
    7872:	a804      	add	r0, sp, #16
    7874:	f00a fd30 	bl	122d8 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    7878:	7d20      	ldrb	r0, [r4, #20]
    787a:	2101      	movs	r1, #1
    787c:	2802      	cmp	r0, #2
    787e:	d10f      	bne.n	78a0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    7880:	e00b      	b.n	789a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xea>
    7882:	2104      	movs	r1, #4
    7884:	2808      	cmp	r0, #8
    7886:	bf08      	it	eq
    7888:	f361 0607 	bfieq	r6, r1, #0, #8
    788c:	f3c6 2007 	ubfx	r0, r6, #8, #8
    7890:	2808      	cmp	r0, #8
    7892:	bf08      	it	eq
    7894:	f361 260f 	bfieq	r6, r1, #8, #8
    7898:	e7ea      	b.n	7870 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xc0>
    789a:	7d60      	ldrb	r0, [r4, #21]
    789c:	1c40      	adds	r0, r0, #1
    789e:	b2c1      	uxtb	r1, r0
    78a0:	7ea0      	ldrb	r0, [r4, #26]
    78a2:	1c40      	adds	r0, r0, #1
    78a4:	b2c2      	uxtb	r2, r0
    78a6:	a804      	add	r0, sp, #16
    78a8:	f00a fcac 	bl	12204 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    78ac:	0c38      	lsrs	r0, r7, #16
    78ae:	f010 0f08 	tst.w	r0, #8
    78b2:	f04f 0500 	mov.w	r5, #0
    78b6:	d124      	bne.n	7902 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x152>
    78b8:	a804      	add	r0, sp, #16
    78ba:	f00a fcba 	bl	12232 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    78be:	7861      	ldrb	r1, [r4, #1]
    78c0:	f011 0f10 	tst.w	r1, #16
    78c4:	d041      	beq.n	794a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x19a>
    78c6:	2228      	movs	r2, #40	; 0x28
    78c8:	4649      	mov	r1, r9
    78ca:	f001 f8d3 	bl	8a74 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    78ce:	bf00      	nop
    78d0:	f240 2171 	movw	r1, #625	; 0x271
    78d4:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    78d8:	fbb0 f0f1 	udiv	r0, r0, r1
    78dc:	fb00 f501 	mul.w	r5, r0, r1
    78e0:	f8d4 0002 	ldr.w	r0, [r4, #2]
    78e4:	f240 2271 	movw	r2, #625	; 0x271
    78e8:	0a00      	lsrs	r0, r0, #8
    78ea:	4341      	muls	r1, r0
    78ec:	f8d4 0005 	ldr.w	r0, [r4, #5]
    78f0:	0a00      	lsrs	r0, r0, #8
    78f2:	4350      	muls	r0, r2
    78f4:	428d      	cmp	r5, r1
    78f6:	bf98      	it	ls
    78f8:	460d      	movls	r5, r1
    78fa:	d902      	bls.n	7902 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x152>
    78fc:	4285      	cmp	r5, r0
    78fe:	bf88      	it	hi
    7900:	4605      	movhi	r5, r0
    7902:	7ca0      	ldrb	r0, [r4, #18]
    7904:	f360 2a0f 	bfi	sl, r0, #8, #8
    7908:	7e20      	ldrb	r0, [r4, #24]
    790a:	2801      	cmp	r0, #1
    790c:	bf18      	it	ne
    790e:	2000      	movne	r0, #0
    7910:	f360 0b07 	bfi	fp, r0, #0, #8
    7914:	f8d8 0040 	ldr.w	r0, [r8, #64]	; 0x40
    7918:	f009 fb19 	bl	10f4e <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    791c:	4681      	mov	r9, r0
    791e:	f8d8 0040 	ldr.w	r0, [r8, #64]	; 0x40
    7922:	f009 fbbb 	bl	1109c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    7926:	4581      	cmp	r9, r0
    7928:	bf28      	it	cs
    792a:	4648      	movcs	r0, r9
    792c:	b3e8      	cbz	r0, 79aa <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x1fa>
    792e:	a904      	add	r1, sp, #16
    7930:	0c3a      	lsrs	r2, r7, #16
    7932:	f362 030f 	bfi	r3, r2, #0, #16
    7936:	9300      	str	r3, [sp, #0]
    7938:	0a33      	lsrs	r3, r6, #8
    793a:	f366 0907 	bfi	r9, r6, #0, #8
    793e:	f363 290f 	bfi	r9, r3, #8, #8
    7942:	f012 0f18 	tst.w	r2, #24
    7946:	d00f      	beq.n	7968 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x1b8>
    7948:	e02f      	b.n	79aa <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x1fa>
    794a:	b2f1      	uxtb	r1, r6
    794c:	f00a fc1c 	bl	12188 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x16>
    7950:	4605      	mov	r5, r0
    7952:	f7fd f82f 	bl	49b4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
    7956:	0c39      	lsrs	r1, r7, #16
    7958:	9100      	str	r1, [sp, #0]
    795a:	f3c6 2207 	ubfx	r2, r6, #8, #8
    795e:	2301      	movs	r3, #1
    7960:	4629      	mov	r1, r5
    7962:	f000 fd83 	bl	846c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46c>
    7966:	e7b3      	b.n	78d0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x120>
    7968:	9007      	str	r0, [sp, #28]
    796a:	4608      	mov	r0, r1
    796c:	f00a fc61 	bl	12232 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7970:	f009 01ff 	and.w	r1, r9, #255	; 0xff
    7974:	f3c9 2907 	ubfx	r9, r9, #8, #8
    7978:	2904      	cmp	r1, #4
    797a:	bf08      	it	eq
    797c:	2108      	moveq	r1, #8
    797e:	f1b9 0f04 	cmp.w	r9, #4
    7982:	bf08      	it	eq
    7984:	f04f 0908 	moveq.w	r9, #8
    7988:	f00a fbfe 	bl	12188 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x16>
    798c:	9900      	ldr	r1, [sp, #0]
    798e:	2300      	movs	r3, #0
    7990:	b289      	uxth	r1, r1
    7992:	9100      	str	r1, [sp, #0]
    7994:	4601      	mov	r1, r0
    7996:	464a      	mov	r2, r9
    7998:	9807      	ldr	r0, [sp, #28]
    799a:	f000 fd67 	bl	846c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46c>
    799e:	4285      	cmp	r5, r0
    79a0:	bf3e      	ittt	cc
    79a2:	2045      	movcc	r0, #69	; 0x45
    79a4:	b009      	addcc	sp, #36	; 0x24
    79a6:	e8bd 8ff0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    79aa:	f8c8 b00c 	str.w	fp, [r8, #12]
    79ae:	f8c8 7000 	str.w	r7, [r8]
    79b2:	e9c8 6501 	strd	r6, r5, [r8, #4]
    79b6:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
    79ba:	9a03      	ldr	r2, [sp, #12]
    79bc:	f8c8 a010 	str.w	sl, [r8, #16]
    79c0:	f8c8 201c 	str.w	r2, [r8, #28]
    79c4:	e9c8 0105 	strd	r0, r1, [r8, #20]
    79c8:	9806      	ldr	r0, [sp, #24]
    79ca:	f8c8 0020 	str.w	r0, [r8, #32]
    79ce:	9804      	ldr	r0, [sp, #16]
    79d0:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
    79d4:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    79d8:	f8a8 0028 	strh.w	r0, [r8, #40]	; 0x28
    79dc:	7ae0      	ldrb	r0, [r4, #11]
    79de:	2800      	cmp	r0, #0
    79e0:	bf16      	itet	ne
    79e2:	2802      	cmpne	r0, #2
    79e4:	2000      	moveq	r0, #0
    79e6:	2001      	movne	r0, #1
    79e8:	f888 0063 	strb.w	r0, [r8, #99]	; 0x63
    79ec:	68e0      	ldr	r0, [r4, #12]
    79ee:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
    79f2:	8a20      	ldrh	r0, [r4, #16]
    79f4:	f8a8 0068 	strh.w	r0, [r8, #104]	; 0x68
    79f8:	7de0      	ldrb	r0, [r4, #23]
    79fa:	f898 103a 	ldrb.w	r1, [r8, #58]	; 0x3a
    79fe:	f360 1107 	bfi	r1, r0, #4, #4
    7a02:	f888 103a 	strb.w	r1, [r8, #58]	; 0x3a
    7a06:	b009      	add	sp, #36	; 0x24
    7a08:	f04f 0000 	mov.w	r0, #0
    7a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00007a10 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    7a10:	4a10      	ldr	r2, [pc, #64]	; (7a54 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x44>)
    7a12:	b510      	push	{r4, lr}
    7a14:	2100      	movs	r1, #0
    7a16:	7011      	strb	r1, [r2, #0]
    7a18:	4c0f      	ldr	r4, [pc, #60]	; (7a58 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x48>)
    7a1a:	6060      	str	r0, [r4, #4]
    7a1c:	7810      	ldrb	r0, [r2, #0]
    7a1e:	b120      	cbz	r0, 7a2a <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x1a>
    7a20:	f240 312a 	movw	r1, #810	; 0x32a
    7a24:	202d      	movs	r0, #45	; 0x2d
    7a26:	f7fc fa8b 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a2a:	6011      	str	r1, [r2, #0]
    7a2c:	6051      	str	r1, [r2, #4]
    7a2e:	6091      	str	r1, [r2, #8]
    7a30:	60d1      	str	r1, [r2, #12]
    7a32:	6111      	str	r1, [r2, #16]
    7a34:	6151      	str	r1, [r2, #20]
    7a36:	6191      	str	r1, [r2, #24]
    7a38:	61d1      	str	r1, [r2, #28]
    7a3a:	f006 fc35 	bl	e2a8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7a3e:	f006 f98f 	bl	dd60 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7a42:	68a0      	ldr	r0, [r4, #8]
    7a44:	2800      	cmp	r0, #0
    7a46:	bf18      	it	ne
    7a48:	bd10      	popne	{r4, pc}
    7a4a:	f240 312d 	movw	r1, #813	; 0x32d
    7a4e:	202d      	movs	r0, #45	; 0x2d
    7a50:	f7fc fa76 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a54:	20000f2c 	.word	0x20000f2c
    7a58:	20000138 	.word	0x20000138

00007a5c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    7a5c:	4902      	ldr	r1, [pc, #8]	; (7a68 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    7a5e:	4801      	ldr	r0, [pc, #4]	; (7a64 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    7a60:	6088      	str	r0, [r1, #8]
    7a62:	4770      	bx	lr
    7a64:	00008a5c 	.word	0x00008a5c
    7a68:	20000138 	.word	0x20000138

00007a6c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    7a6c:	4902      	ldr	r1, [pc, #8]	; (7a78 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    7a6e:	6008      	str	r0, [r1, #0]
    7a70:	6889      	ldr	r1, [r1, #8]
    7a72:	6809      	ldr	r1, [r1, #0]
    7a74:	4708      	bx	r1
    7a76:	0000      	.short	0x0000
    7a78:	20000138 	.word	0x20000138

00007a7c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    7a7c:	490b      	ldr	r1, [pc, #44]	; (7aac <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x30>)
    7a7e:	b510      	push	{r4, lr}
    7a80:	7808      	ldrb	r0, [r1, #0]
    7a82:	2800      	cmp	r0, #0
    7a84:	bf18      	it	ne
    7a86:	240c      	movne	r4, #12
    7a88:	d001      	beq.n	7a8e <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x12>
    7a8a:	4620      	mov	r0, r4
    7a8c:	bd10      	pop	{r4, pc}
    7a8e:	2400      	movs	r4, #0
    7a90:	600c      	str	r4, [r1, #0]
    7a92:	604c      	str	r4, [r1, #4]
    7a94:	608c      	str	r4, [r1, #8]
    7a96:	60cc      	str	r4, [r1, #12]
    7a98:	610c      	str	r4, [r1, #16]
    7a9a:	614c      	str	r4, [r1, #20]
    7a9c:	618c      	str	r4, [r1, #24]
    7a9e:	61cc      	str	r4, [r1, #28]
    7aa0:	f006 fc02 	bl	e2a8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7aa4:	f006 f95c 	bl	dd60 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7aa8:	e7ef      	b.n	7a8a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    7aaa:	0000      	.short	0x0000
    7aac:	20000f2c 	.word	0x20000f2c

00007ab0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    7ab0:	4905      	ldr	r1, [pc, #20]	; (7ac8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>)
    7ab2:	b510      	push	{r4, lr}
    7ab4:	7809      	ldrb	r1, [r1, #0]
    7ab6:	2901      	cmp	r1, #1
    7ab8:	bf1c      	itt	ne
    7aba:	2000      	movne	r0, #0
    7abc:	bd10      	popne	{r4, pc}
    7abe:	f000 febd 	bl	883c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x83c>
    7ac2:	2000      	movs	r0, #0
    7ac4:	bd10      	pop	{r4, pc}
    7ac6:	0000      	.short	0x0000
    7ac8:	20000f2c 	.word	0x20000f2c
    7acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ad0:	4e6e      	ldr	r6, [pc, #440]	; (7c8c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1dc>)
    7ad2:	000f      	movs	r7, r1
    7ad4:	4604      	mov	r4, r0
    7ad6:	d027      	beq.n	7b28 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x78>
    7ad8:	f104 0024 	add.w	r0, r4, #36	; 0x24
    7adc:	f00a fbfe 	bl	122dc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7ae0:	b9c0      	cbnz	r0, 7b14 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x64>
    7ae2:	78a0      	ldrb	r0, [r4, #2]
    7ae4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7ae8:	2800      	cmp	r0, #0
    7aea:	d038      	beq.n	7b5e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xae>
    7aec:	f104 0024 	add.w	r0, r4, #36	; 0x24
    7af0:	f00a fb9f 	bl	12232 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7af4:	4605      	mov	r5, r0
    7af6:	f104 0024 	add.w	r0, r4, #36	; 0x24
    7afa:	f00a fbef 	bl	122dc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7afe:	1a28      	subs	r0, r5, r0
    7b00:	b2c0      	uxtb	r0, r0
    7b02:	f00a fc1b 	bl	1233c <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7b06:	6871      	ldr	r1, [r6, #4]
    7b08:	4408      	add	r0, r1
    7b0a:	6070      	str	r0, [r6, #4]
    7b0c:	f104 0024 	add.w	r0, r4, #36	; 0x24
    7b10:	f00a fc0f 	bl	12332 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7b14:	f104 0024 	add.w	r0, r4, #36	; 0x24
    7b18:	f00a fb9b 	bl	12252 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    7b1c:	f007 fc92 	bl	f444 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    7b20:	7921      	ldrb	r1, [r4, #4]
    7b22:	2025      	movs	r0, #37	; 0x25
    7b24:	f007 fc6a 	bl	f3fc <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    7b28:	4d59      	ldr	r5, [pc, #356]	; (7c90 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1e0>)
    7b2a:	f894 806a 	ldrb.w	r8, [r4, #106]	; 0x6a
    7b2e:	2100      	movs	r1, #0
    7b30:	6868      	ldr	r0, [r5, #4]
    7b32:	8001      	strh	r1, [r0, #0]
    7b34:	7801      	ldrb	r1, [r0, #0]
    7b36:	f021 0120 	bic.w	r1, r1, #32
    7b3a:	7001      	strb	r1, [r0, #0]
    7b3c:	8861      	ldrh	r1, [r4, #2]
    7b3e:	2913      	cmp	r1, #19
    7b40:	d02b      	beq.n	7b9a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xea>
    7b42:	dc11      	bgt.n	7b68 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xb8>
    7b44:	2910      	cmp	r1, #16
    7b46:	bf08      	it	eq
    7b48:	2102      	moveq	r1, #2
    7b4a:	d039      	beq.n	7bc0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x110>
    7b4c:	2912      	cmp	r1, #18
    7b4e:	bf08      	it	eq
    7b50:	2106      	moveq	r1, #6
    7b52:	d035      	beq.n	7bc0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x110>
    7b54:	f240 616c 	movw	r1, #1644	; 0x66c
    7b58:	202d      	movs	r0, #45	; 0x2d
    7b5a:	f7fc f9f1 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b5e:	4620      	mov	r0, r4
    7b60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7b64:	f000 be6a 	b.w	883c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x83c>
    7b68:	2915      	cmp	r1, #21
    7b6a:	bf18      	it	ne
    7b6c:	291d      	cmpne	r1, #29
    7b6e:	d1f1      	bne.n	7b54 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xa4>
    7b70:	f04f 0101 	mov.w	r1, #1
    7b74:	f009 ff4d 	bl	11a12 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7b78:	6868      	ldr	r0, [r5, #4]
    7b7a:	f1b8 0f00 	cmp.w	r8, #0
    7b7e:	7801      	ldrb	r1, [r0, #0]
    7b80:	f041 0120 	orr.w	r1, r1, #32
    7b84:	7001      	strb	r1, [r0, #0]
    7b86:	d011      	beq.n	7bac <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xfc>
    7b88:	f104 016b 	add.w	r1, r4, #107	; 0x6b
    7b8c:	f009 ff63 	bl	11a56 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7b90:	2101      	movs	r1, #1
    7b92:	6868      	ldr	r0, [r5, #4]
    7b94:	f009 ff66 	bl	11a64 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7b98:	e014      	b.n	7bc4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x114>
    7b9a:	2100      	movs	r1, #0
    7b9c:	f009 ff39 	bl	11a12 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7ba0:	6868      	ldr	r0, [r5, #4]
    7ba2:	7801      	ldrb	r1, [r0, #0]
    7ba4:	f041 0120 	orr.w	r1, r1, #32
    7ba8:	7001      	strb	r1, [r0, #0]
    7baa:	e00b      	b.n	7bc4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x114>
    7bac:	f104 0164 	add.w	r1, r4, #100	; 0x64
    7bb0:	f009 ff51 	bl	11a56 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7bb4:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
    7bb8:	6868      	ldr	r0, [r5, #4]
    7bba:	f009 ff53 	bl	11a64 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7bbe:	e001      	b.n	7bc4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x114>
    7bc0:	f009 ff27 	bl	11a12 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7bc4:	46a0      	mov	r8, r4
    7bc6:	f104 015d 	add.w	r1, r4, #93	; 0x5d
    7bca:	6868      	ldr	r0, [r5, #4]
    7bcc:	f009 ff53 	bl	11a76 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7bd0:	f898 105c 	ldrb.w	r1, [r8, #92]	; 0x5c
    7bd4:	6868      	ldr	r0, [r5, #4]
    7bd6:	f009 ff55 	bl	11a84 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    7bda:	8860      	ldrh	r0, [r4, #2]
    7bdc:	281d      	cmp	r0, #29
    7bde:	bf18      	it	ne
    7be0:	2815      	cmpne	r0, #21
    7be2:	d005      	beq.n	7bf0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x140>
    7be4:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
    7be8:	6c61      	ldr	r1, [r4, #68]	; 0x44
    7bea:	6868      	ldr	r0, [r5, #4]
    7bec:	f009 ff01 	bl	119f2 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    7bf0:	6868      	ldr	r0, [r5, #4]
    7bf2:	f007 f8d1 	bl	ed98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7bf6:	2004      	movs	r0, #4
    7bf8:	7030      	strb	r0, [r6, #0]
    7bfa:	b327      	cbz	r7, 7c46 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x196>
    7bfc:	8860      	ldrh	r0, [r4, #2]
    7bfe:	2810      	cmp	r0, #16
    7c00:	d031      	beq.n	7c66 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1b6>
    7c02:	f104 0024 	add.w	r0, r4, #36	; 0x24
    7c06:	68b5      	ldr	r5, [r6, #8]
    7c08:	f00a fb13 	bl	12232 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7c0c:	4607      	mov	r7, r0
    7c0e:	f104 0024 	add.w	r0, r4, #36	; 0x24
    7c12:	f00a fb63 	bl	122dc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7c16:	1a38      	subs	r0, r7, r0
    7c18:	1e40      	subs	r0, r0, #1
    7c1a:	b2c0      	uxtb	r0, r0
    7c1c:	8861      	ldrh	r1, [r4, #2]
    7c1e:	2228      	movs	r2, #40	; 0x28
    7c20:	f000 ff4e 	bl	8ac0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    7c24:	4405      	add	r5, r0
    7c26:	78a0      	ldrb	r0, [r4, #2]
    7c28:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7c2c:	b130      	cbz	r0, 7c3c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18c>
    7c2e:	6870      	ldr	r0, [r6, #4]
    7c30:	4405      	add	r5, r0
    7c32:	f00a fb87 	bl	12344 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    7c36:	4428      	add	r0, r5
    7c38:	f8c4 00e8 	str.w	r0, [r4, #232]	; 0xe8
    7c3c:	7922      	ldrb	r2, [r4, #4]
    7c3e:	4629      	mov	r1, r5
    7c40:	2000      	movs	r0, #0
    7c42:	f007 f8f1 	bl	ee28 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    7c46:	8860      	ldrh	r0, [r4, #2]
    7c48:	2813      	cmp	r0, #19
    7c4a:	d015      	beq.n	7c78 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1c8>
    7c4c:	dc10      	bgt.n	7c70 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1c0>
    7c4e:	2810      	cmp	r0, #16
    7c50:	bf08      	it	eq
    7c52:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c56:	2812      	cmp	r0, #18
    7c58:	d00e      	beq.n	7c78 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1c8>
    7c5a:	bf00      	nop
    7c5c:	f640 5185 	movw	r1, #3461	; 0xd85
    7c60:	202d      	movs	r0, #45	; 0x2d
    7c62:	f7fc f96d 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c66:	7921      	ldrb	r1, [r4, #4]
    7c68:	2000      	movs	r0, #0
    7c6a:	f006 fba9 	bl	e3c0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    7c6e:	e7ea      	b.n	7c46 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x196>
    7c70:	2815      	cmp	r0, #21
    7c72:	bf18      	it	ne
    7c74:	281d      	cmpne	r0, #29
    7c76:	d1f1      	bne.n	7c5c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1ac>
    7c78:	7922      	ldrb	r2, [r4, #4]
    7c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7c7e:	f04f 0101 	mov.w	r1, #1
    7c82:	f04f 0000 	mov.w	r0, #0
    7c86:	f007 ba9d 	b.w	f1c4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7c8a:	0000      	.short	0x0000
    7c8c:	20000f2c 	.word	0x20000f2c
    7c90:	20000138 	.word	0x20000138
    7c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7c98:	4e4a      	ldr	r6, [pc, #296]	; (7dc4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x314>)
    7c9a:	4680      	mov	r8, r0
    7c9c:	7830      	ldrb	r0, [r6, #0]
    7c9e:	2802      	cmp	r0, #2
    7ca0:	bf1c      	itt	ne
    7ca2:	7830      	ldrbne	r0, [r6, #0]
    7ca4:	2803      	cmpne	r0, #3
    7ca6:	d005      	beq.n	7cb4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x204>
    7ca8:	f640 41f7 	movw	r1, #3319	; 0xcf7
    7cac:	f04f 002d 	mov.w	r0, #45	; 0x2d
    7cb0:	f7fc f946 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7cb4:	4c44      	ldr	r4, [pc, #272]	; (7dc8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x318>)
    7cb6:	6825      	ldr	r5, [r4, #0]
    7cb8:	7b28      	ldrb	r0, [r5, #12]
    7cba:	b140      	cbz	r0, 7cce <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x21e>
    7cbc:	f105 003b 	add.w	r0, r5, #59	; 0x3b
    7cc0:	f007 fb2c 	bl	f31c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    7cc4:	2800      	cmp	r0, #0
    7cc6:	bf04      	itt	eq
    7cc8:	207f      	moveq	r0, #127	; 0x7f
    7cca:	f885 003b 	strbeq.w	r0, [r5, #59]	; 0x3b
    7cce:	6860      	ldr	r0, [r4, #4]
    7cd0:	6821      	ldr	r1, [r4, #0]
    7cd2:	f04f 0900 	mov.w	r9, #0
    7cd6:	7802      	ldrb	r2, [r0, #0]
    7cd8:	6a0b      	ldr	r3, [r1, #32]
    7cda:	f002 070f 	and.w	r7, r2, #15
    7cde:	2b00      	cmp	r3, #0
    7ce0:	bf18      	it	ne
    7ce2:	f893 906f 	ldrbne.w	r9, [r3, #111]	; 0x6f
    7ce6:	f1b8 0f00 	cmp.w	r8, #0
    7cea:	d04e      	beq.n	7d8a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2da>
    7cec:	f101 035d 	add.w	r3, r1, #93	; 0x5d
    7cf0:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    7cf4:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
    7cf8:	d147      	bne.n	7d8a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2da>
    7cfa:	2206      	movs	r2, #6
    7cfc:	4619      	mov	r1, r3
    7cfe:	3009      	adds	r0, #9
    7d00:	f008 f866 	bl	fdd0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    7d04:	2800      	cmp	r0, #0
    7d06:	d140      	bne.n	7d8a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2da>
    7d08:	6825      	ldr	r5, [r4, #0]
    7d0a:	f04f 0801 	mov.w	r8, #1
    7d0e:	2f05      	cmp	r7, #5
    7d10:	d11d      	bne.n	7d4e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x29e>
    7d12:	6860      	ldr	r0, [r4, #4]
    7d14:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    7d18:	f000 001f 	and.w	r0, r0, #31
    7d1c:	2810      	cmp	r0, #16
    7d1e:	d916      	bls.n	7d4e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x29e>
    7d20:	7be8      	ldrb	r0, [r5, #15]
    7d22:	b1a0      	cbz	r0, 7d4e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x29e>
    7d24:	20ff      	movs	r0, #255	; 0xff
    7d26:	f88d 0000 	strb.w	r0, [sp]
    7d2a:	466a      	mov	r2, sp
    7d2c:	2105      	movs	r1, #5
    7d2e:	4628      	mov	r0, r5
    7d30:	f000 fb0c 	bl	834c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34c>
    7d34:	b348      	cbz	r0, 7d8a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2da>
    7d36:	6860      	ldr	r0, [r4, #4]
    7d38:	2222      	movs	r2, #34	; 0x22
    7d3a:	1cc1      	adds	r1, r0, #3
    7d3c:	f105 00b5 	add.w	r0, r5, #181	; 0xb5
    7d40:	f008 f858 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7d44:	f885 80b4 	strb.w	r8, [r5, #180]	; 0xb4
    7d48:	f7ff faf8 	bl	733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7d4c:	e01d      	b.n	7d8a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2da>
    7d4e:	4649      	mov	r1, r9
    7d50:	6860      	ldr	r0, [r4, #4]
    7d52:	f009 fda0 	bl	11896 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    7d56:	b1c0      	cbz	r0, 7d8a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2da>
    7d58:	7832      	ldrb	r2, [r6, #0]
    7d5a:	6820      	ldr	r0, [r4, #0]
    7d5c:	4639      	mov	r1, r7
    7d5e:	2a02      	cmp	r2, #2
    7d60:	bf1c      	itt	ne
    7d62:	7832      	ldrbne	r2, [r6, #0]
    7d64:	2a03      	cmpne	r2, #3
    7d66:	d005      	beq.n	7d74 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2c4>
    7d68:	f44f 614d 	mov.w	r1, #3280	; 0xcd0
    7d6c:	f04f 002d 	mov.w	r0, #45	; 0x2d
    7d70:	f7fc f8e6 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d74:	68a2      	ldr	r2, [r4, #8]
    7d76:	7833      	ldrb	r3, [r6, #0]
    7d78:	6952      	ldr	r2, [r2, #20]
    7d7a:	f06f 0c07 	mvn.w	ip, #7
    7d7e:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
    7d82:	58d2      	ldr	r2, [r2, r3]
    7d84:	4790      	blx	r2
    7d86:	4605      	mov	r5, r0
    7d88:	e000      	b.n	7d8c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2dc>
    7d8a:	2501      	movs	r5, #1
    7d8c:	7bb0      	ldrb	r0, [r6, #14]
    7d8e:	b118      	cbz	r0, 7d98 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2e8>
    7d90:	f006 fa8a 	bl	e2a8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7d94:	f005 ffe4 	bl	dd60 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7d98:	2d00      	cmp	r5, #0
    7d9a:	bf08      	it	eq
    7d9c:	e8bd 83f8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7da0:	6820      	ldr	r0, [r4, #0]
    7da2:	f00a fae1 	bl	12368 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7da6:	b138      	cbz	r0, 7db8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x308>
    7da8:	f006 fa9e 	bl	e2e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7dac:	68a0      	ldr	r0, [r4, #8]
    7dae:	6880      	ldr	r0, [r0, #8]
    7db0:	b001      	add	sp, #4
    7db2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7db6:	4700      	bx	r0
    7db8:	6820      	ldr	r0, [r4, #0]
    7dba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7dbe:	f000 bd3d 	b.w	883c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x83c>
    7dc2:	0000      	.short	0x0000
    7dc4:	20000f2c 	.word	0x20000f2c
    7dc8:	20000138 	.word	0x20000138
    7dcc:	b530      	push	{r4, r5, lr}
    7dce:	b083      	sub	sp, #12
    7dd0:	2903      	cmp	r1, #3
    7dd2:	d002      	beq.n	7dda <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x32a>
    7dd4:	2905      	cmp	r1, #5
    7dd6:	d072      	beq.n	7ebe <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x40e>
    7dd8:	e06d      	b.n	7eb6 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x406>
    7dda:	4604      	mov	r4, r0
    7ddc:	20ff      	movs	r0, #255	; 0xff
    7dde:	f88d 0008 	strb.w	r0, [sp, #8]
    7de2:	aa02      	add	r2, sp, #8
    7de4:	2103      	movs	r1, #3
    7de6:	4620      	mov	r0, r4
    7de8:	f000 fab0 	bl	834c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34c>
    7dec:	2800      	cmp	r0, #0
    7dee:	d062      	beq.n	7eb6 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x406>
    7df0:	7b20      	ldrb	r0, [r4, #12]
    7df2:	4d37      	ldr	r5, [pc, #220]	; (7ed0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x420>)
    7df4:	2800      	cmp	r0, #0
    7df6:	d03c      	beq.n	7e72 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x3c2>
    7df8:	f894 00aa 	ldrb.w	r0, [r4, #170]	; 0xaa
    7dfc:	f88d 0000 	strb.w	r0, [sp]
    7e00:	f89d 0000 	ldrb.w	r0, [sp]
    7e04:	bba8      	cbnz	r0, 7e72 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x3c2>
    7e06:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7e0a:	7821      	ldrb	r1, [r4, #0]
    7e0c:	f884 10ab 	strb.w	r1, [r4, #171]	; 0xab
    7e10:	28ff      	cmp	r0, #255	; 0xff
    7e12:	d011      	beq.n	7e38 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x388>
    7e14:	f104 02ad 	add.w	r2, r4, #173	; 0xad
    7e18:	1e51      	subs	r1, r2, #1
    7e1a:	f7fe f873 	bl	5f04 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7e1e:	b130      	cbz	r0, 7e2e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x37e>
    7e20:	f894 00ac 	ldrb.w	r0, [r4, #172]	; 0xac
    7e24:	f040 0102 	orr.w	r1, r0, #2
    7e28:	f884 10ac 	strb.w	r1, [r4, #172]	; 0xac
    7e2c:	e012      	b.n	7e54 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x3a4>
    7e2e:	f640 71bc 	movw	r1, #4028	; 0xfbc
    7e32:	202d      	movs	r0, #45	; 0x2d
    7e34:	f7fc f884 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e38:	6868      	ldr	r0, [r5, #4]
    7e3a:	7801      	ldrb	r1, [r0, #0]
    7e3c:	f3c1 1280 	ubfx	r2, r1, #6, #1
    7e40:	f884 20ac 	strb.w	r2, [r4, #172]	; 0xac
    7e44:	f8d0 2003 	ldr.w	r2, [r0, #3]
    7e48:	f8c4 20ad 	str.w	r2, [r4, #173]	; 0xad
    7e4c:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    7e50:	f8a4 00b1 	strh.w	r0, [r4, #177]	; 0xb1
    7e54:	f994 003b 	ldrsb.w	r0, [r4, #59]	; 0x3b
    7e58:	287f      	cmp	r0, #127	; 0x7f
    7e5a:	d027      	beq.n	7eac <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x3fc>
    7e5c:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
    7e60:	217f      	movs	r1, #127	; 0x7f
    7e62:	4620      	mov	r0, r4
    7e64:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
    7e68:	2101      	movs	r1, #1
    7e6a:	f880 10aa 	strb.w	r1, [r0, #170]	; 0xaa
    7e6e:	f7ff fa65 	bl	733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7e72:	6868      	ldr	r0, [r5, #4]
    7e74:	2100      	movs	r1, #0
    7e76:	8001      	strh	r1, [r0, #0]
    7e78:	2104      	movs	r1, #4
    7e7a:	f009 fdca 	bl	11a12 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7e7e:	f104 015d 	add.w	r1, r4, #93	; 0x5d
    7e82:	6868      	ldr	r0, [r5, #4]
    7e84:	f009 fdf7 	bl	11a76 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7e88:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
    7e8c:	6868      	ldr	r0, [r5, #4]
    7e8e:	f009 fdf9 	bl	11a84 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    7e92:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
    7e96:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    7e98:	6868      	ldr	r0, [r5, #4]
    7e9a:	f009 fdfc 	bl	11a96 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    7e9e:	490d      	ldr	r1, [pc, #52]	; (7ed4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x424>)
    7ea0:	2005      	movs	r0, #5
    7ea2:	7008      	strb	r0, [r1, #0]
    7ea4:	6868      	ldr	r0, [r5, #4]
    7ea6:	f006 ff77 	bl	ed98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7eaa:	e00e      	b.n	7eca <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x41a>
    7eac:	f640 6137 	movw	r1, #3639	; 0xe37
    7eb0:	202d      	movs	r0, #45	; 0x2d
    7eb2:	f7fc f845 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7eb6:	b003      	add	sp, #12
    7eb8:	2001      	movs	r0, #1
    7eba:	bd30      	pop	{r4, r5, pc}
    7ebc:	e7ff      	b.n	7ebe <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x40e>
    7ebe:	4906      	ldr	r1, [pc, #24]	; (7ed8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x428>)
    7ec0:	6809      	ldr	r1, [r1, #0]
    7ec2:	b111      	cbz	r1, 7eca <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x41a>
    7ec4:	4788      	blx	r1
    7ec6:	2800      	cmp	r0, #0
    7ec8:	d0f5      	beq.n	7eb6 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x406>
    7eca:	b003      	add	sp, #12
    7ecc:	2000      	movs	r0, #0
    7ece:	bd30      	pop	{r4, r5, pc}
    7ed0:	20000138 	.word	0x20000138
    7ed4:	20000f2c 	.word	0x20000f2c
    7ed8:	20000144 	.word	0x20000144
    7edc:	4a09      	ldr	r2, [pc, #36]	; (7f04 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x454>)
    7ede:	0003      	movs	r3, r0
    7ee0:	6810      	ldr	r0, [r2, #0]
    7ee2:	d001      	beq.n	7ee8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x438>
    7ee4:	f000 bcaa 	b.w	883c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x83c>
    7ee8:	2900      	cmp	r1, #0
    7eea:	bf08      	it	eq
    7eec:	4770      	bxeq	lr
    7eee:	6891      	ldr	r1, [r2, #8]
    7ef0:	4a05      	ldr	r2, [pc, #20]	; (7f08 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x458>)
    7ef2:	6909      	ldr	r1, [r1, #16]
    7ef4:	7812      	ldrb	r2, [r2, #0]
    7ef6:	f06f 030f 	mvn.w	r3, #15
    7efa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    7efe:	5889      	ldr	r1, [r1, r2]
    7f00:	4708      	bx	r1
    7f02:	0000      	.short	0x0000
    7f04:	20000138 	.word	0x20000138
    7f08:	20000f2c 	.word	0x20000f2c
    7f0c:	b570      	push	{r4, r5, r6, lr}
    7f0e:	4604      	mov	r4, r0
    7f10:	8840      	ldrh	r0, [r0, #2]
    7f12:	2810      	cmp	r0, #16
    7f14:	d010      	beq.n	7f38 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x488>
    7f16:	4d11      	ldr	r5, [pc, #68]	; (7f5c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x4ac>)
    7f18:	7ba8      	ldrb	r0, [r5, #14]
    7f1a:	b120      	cbz	r0, 7f26 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x476>
    7f1c:	f005 ff60 	bl	dde0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    7f20:	2040      	movs	r0, #64	; 0x40
    7f22:	f006 f9cf 	bl	e2c4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    7f26:	480e      	ldr	r0, [pc, #56]	; (7f60 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x4b0>)
    7f28:	6840      	ldr	r0, [r0, #4]
    7f2a:	f006 ff35 	bl	ed98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7f2e:	78a0      	ldrb	r0, [r4, #2]
    7f30:	f010 0f04 	tst.w	r0, #4
    7f34:	d10b      	bne.n	7f4e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x49e>
    7f36:	e005      	b.n	7f44 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x494>
    7f38:	4620      	mov	r0, r4
    7f3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7f3e:	2101      	movs	r1, #1
    7f40:	f7ff bdc4 	b.w	7acc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1c>
    7f44:	2100      	movs	r1, #0
    7f46:	7922      	ldrb	r2, [r4, #4]
    7f48:	4608      	mov	r0, r1
    7f4a:	f007 f93b 	bl	f1c4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7f4e:	2000      	movs	r0, #0
    7f50:	f006 fd44 	bl	e9dc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    7f54:	2002      	movs	r0, #2
    7f56:	7028      	strb	r0, [r5, #0]
    7f58:	bd70      	pop	{r4, r5, r6, pc}
    7f5a:	0000      	.short	0x0000
    7f5c:	20000f2c 	.word	0x20000f2c
    7f60:	20000138 	.word	0x20000138
    7f64:	b570      	push	{r4, r5, r6, lr}
    7f66:	4c1f      	ldr	r4, [pc, #124]	; (7fe4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x534>)
    7f68:	6825      	ldr	r5, [r4, #0]
    7f6a:	7b28      	ldrb	r0, [r5, #12]
    7f6c:	b140      	cbz	r0, 7f80 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x4d0>
    7f6e:	f105 003b 	add.w	r0, r5, #59	; 0x3b
    7f72:	f007 f9d3 	bl	f31c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    7f76:	2800      	cmp	r0, #0
    7f78:	bf04      	itt	eq
    7f7a:	207f      	moveq	r0, #127	; 0x7f
    7f7c:	f885 003b 	strbeq.w	r0, [r5, #59]	; 0x3b
    7f80:	4d19      	ldr	r5, [pc, #100]	; (7fe8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x538>)
    7f82:	7ba8      	ldrb	r0, [r5, #14]
    7f84:	b118      	cbz	r0, 7f8e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x4de>
    7f86:	f006 f98f 	bl	e2a8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7f8a:	f005 fee9 	bl	dd60 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7f8e:	6820      	ldr	r0, [r4, #0]
    7f90:	f00a f9ea 	bl	12368 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7f94:	b1a8      	cbz	r0, 7fc2 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x512>
    7f96:	6820      	ldr	r0, [r4, #0]
    7f98:	8841      	ldrh	r1, [r0, #2]
    7f9a:	f3c1 1200 	ubfx	r2, r1, #4, #1
    7f9e:	2a00      	cmp	r2, #0
    7fa0:	bf04      	itt	eq
    7fa2:	f3c1 01c0 	ubfxeq	r1, r1, #3, #1
    7fa6:	2900      	cmpeq	r1, #0
    7fa8:	d00b      	beq.n	7fc2 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x512>
    7faa:	7829      	ldrb	r1, [r5, #0]
    7fac:	2902      	cmp	r1, #2
    7fae:	bf1c      	itt	ne
    7fb0:	7829      	ldrbne	r1, [r5, #0]
    7fb2:	2903      	cmpne	r1, #3
    7fb4:	d00a      	beq.n	7fcc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x51c>
    7fb6:	f640 31fe 	movw	r1, #3070	; 0xbfe
    7fba:	f04f 002d 	mov.w	r0, #45	; 0x2d
    7fbe:	f7fb ffbf 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fc2:	6820      	ldr	r0, [r4, #0]
    7fc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7fc8:	f000 bc38 	b.w	883c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x83c>
    7fcc:	68a1      	ldr	r1, [r4, #8]
    7fce:	782a      	ldrb	r2, [r5, #0]
    7fd0:	68c9      	ldr	r1, [r1, #12]
    7fd2:	f06f 0307 	mvn.w	r3, #7
    7fd6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    7fda:	5889      	ldr	r1, [r1, r2]
    7fdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7fe0:	4708      	bx	r1
    7fe2:	0000      	.short	0x0000
    7fe4:	20000138 	.word	0x20000138
    7fe8:	20000f2c 	.word	0x20000f2c

00007fec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    7fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ff0:	4da3      	ldr	r5, [pc, #652]	; (8280 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x280>)
    7ff2:	4604      	mov	r4, r0
    7ff4:	b089      	sub	sp, #36	; 0x24
    7ff6:	7828      	ldrb	r0, [r5, #0]
    7ff8:	2800      	cmp	r0, #0
    7ffa:	d17d      	bne.n	80f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf8>
    7ffc:	7820      	ldrb	r0, [r4, #0]
    7ffe:	28ff      	cmp	r0, #255	; 0xff
    8000:	d07a      	beq.n	80f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf8>
    8002:	2600      	movs	r6, #0
    8004:	81ae      	strh	r6, [r5, #12]
    8006:	606e      	str	r6, [r5, #4]
    8008:	706e      	strb	r6, [r5, #1]
    800a:	70ae      	strb	r6, [r5, #2]
    800c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
    8010:	4b9c      	ldr	r3, [pc, #624]	; (8284 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x284>)
    8012:	af02      	add	r7, sp, #8
    8014:	f8df 8270 	ldr.w	r8, [pc, #624]	; 8288 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x288>
    8018:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    801a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    801e:	f8d8 0008 	ldr.w	r0, [r8, #8]
    8022:	6840      	ldr	r0, [r0, #4]
    8024:	9005      	str	r0, [sp, #20]
    8026:	a802      	add	r0, sp, #8
    8028:	f006 fc9a 	bl	e960 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    802c:	f006 fe1a 	bl	ec64 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    8030:	f007 fcc6 	bl	f9c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    8034:	f006 f938 	bl	e2a8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8038:	f005 fe92 	bl	dd60 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    803c:	4893      	ldr	r0, [pc, #588]	; (828c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28c>)
    803e:	f007 f995 	bl	f36c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    8042:	4893      	ldr	r0, [pc, #588]	; (8290 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x290>)
    8044:	f007 f99c 	bl	f380 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    8048:	2000      	movs	r0, #0
    804a:	f7fb fd55 	bl	3af8 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    804e:	f104 0024 	add.w	r0, r4, #36	; 0x24
    8052:	f00a f96e 	bl	12332 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    8056:	f104 0024 	add.w	r0, r4, #36	; 0x24
    805a:	f00a f8fa 	bl	12252 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    805e:	f007 f9f1 	bl	f444 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    8062:	7921      	ldrb	r1, [r4, #4]
    8064:	2025      	movs	r0, #37	; 0x25
    8066:	f007 f9c9 	bl	f3fc <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    806a:	f994 0010 	ldrsb.w	r0, [r4, #16]
    806e:	f006 fe8d 	bl	ed8c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    8072:	7921      	ldrb	r1, [r4, #4]
    8074:	2000      	movs	r0, #0
    8076:	f006 fac7 	bl	e608 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    807a:	2701      	movs	r7, #1
    807c:	60a8      	str	r0, [r5, #8]
    807e:	2800      	cmp	r0, #0
    8080:	bf01      	itttt	eq
    8082:	702f      	strbeq	r7, [r5, #0]
    8084:	2000      	moveq	r0, #0
    8086:	b009      	addeq	sp, #36	; 0x24
    8088:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    808c:	7f20      	ldrb	r0, [r4, #28]
    808e:	2800      	cmp	r0, #0
    8090:	bf01      	itttt	eq
    8092:	7ea0      	ldrbeq	r0, [r4, #26]
    8094:	2800      	cmpeq	r0, #0
    8096:	78a0      	ldrbeq	r0, [r4, #2]
    8098:	f010 0f04 	tsteq.w	r0, #4
    809c:	d067      	beq.n	816e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16e>
    809e:	f007 fd34 	bl	fb0a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    80a2:	4681      	mov	r9, r0
    80a4:	4649      	mov	r1, r9
    80a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    80a8:	f7f9 fa94 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    80ac:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8294 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x294>
    80b0:	4683      	mov	fp, r0
    80b2:	fb90 f0fa 	sdiv	r0, r0, sl
    80b6:	fb0a b010 	mls	r0, sl, r0, fp
    80ba:	4241      	negs	r1, r0
    80bc:	4648      	mov	r0, r9
    80be:	f7f9 fa57 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    80c2:	65a0      	str	r0, [r4, #88]	; 0x58
    80c4:	fb9b f0fa 	sdiv	r0, fp, sl
    80c8:	6d61      	ldr	r1, [r4, #84]	; 0x54
    80ca:	4408      	add	r0, r1
    80cc:	6560      	str	r0, [r4, #84]	; 0x54
    80ce:	f7fe f897 	bl	6200 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    80d2:	6d61      	ldr	r1, [r4, #84]	; 0x54
    80d4:	4288      	cmp	r0, r1
    80d6:	d866      	bhi.n	81a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a6>
    80d8:	e9c4 6915 	strd	r6, r9, [r4, #84]	; 0x54
    80dc:	f04f 0a01 	mov.w	sl, #1
    80e0:	7ee0      	ldrb	r0, [r4, #27]
    80e2:	f7fd fe1f 	bl	5d24 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    80e6:	4681      	mov	r9, r0
    80e8:	7ea0      	ldrb	r0, [r4, #26]
    80ea:	2800      	cmp	r0, #0
    80ec:	bf18      	it	ne
    80ee:	f1b9 0f00 	cmpne.w	r9, #0
    80f2:	d005      	beq.n	8100 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100>
    80f4:	7ee0      	ldrb	r0, [r4, #27]
    80f6:	e000      	b.n	80fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfa>
    80f8:	e00e      	b.n	8118 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x118>
    80fa:	f7fd fe07 	bl	5d0c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    80fe:	b178      	cbz	r0, 8120 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x120>
    8100:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    8104:	2800      	cmp	r0, #0
    8106:	bf1c      	itt	ne
    8108:	7f20      	ldrbne	r0, [r4, #28]
    810a:	2800      	cmpne	r0, #0
    810c:	d021      	beq.n	8152 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x152>
    810e:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
    8112:	2801      	cmp	r0, #1
    8114:	d012      	beq.n	813c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13c>
    8116:	e017      	b.n	8148 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x148>
    8118:	b009      	add	sp, #36	; 0x24
    811a:	200c      	movs	r0, #12
    811c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8120:	463a      	mov	r2, r7
    8122:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
    8126:	f104 015d 	add.w	r1, r4, #93	; 0x5d
    812a:	4648      	mov	r0, r9
    812c:	f008 ffee 	bl	1110c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    8130:	7ee1      	ldrb	r1, [r4, #27]
    8132:	f104 005d 	add.w	r0, r4, #93	; 0x5d
    8136:	f7fd fe01 	bl	5d3c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    813a:	e00a      	b.n	8152 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x152>
    813c:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    8140:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    8144:	2840      	cmp	r0, #64	; 0x40
    8146:	d013      	beq.n	8170 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x170>
    8148:	4651      	mov	r1, sl
    814a:	f104 005d 	add.w	r0, r4, #93	; 0x5d
    814e:	f008 ffcc 	bl	110ea <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    8152:	78a0      	ldrb	r0, [r4, #2]
    8154:	f010 0f04 	tst.w	r0, #4
    8158:	d025      	beq.n	81a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a6>
    815a:	7ee0      	ldrb	r0, [r4, #27]
    815c:	f7fd fe6c 	bl	5e38 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    8160:	ea5f 0900 	movs.w	r9, r0
    8164:	d01f      	beq.n	81a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a6>
    8166:	2110      	movs	r1, #16
    8168:	f7fe fbdc 	bl	6924 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    816c:	b140      	cbz	r0, 8180 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x180>
    816e:	e01a      	b.n	81a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a6>
    8170:	f7fd fd9c 	bl	5cac <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    8174:	463a      	mov	r2, r7
    8176:	f104 015d 	add.w	r1, r4, #93	; 0x5d
    817a:	f008 ffc7 	bl	1110c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    817e:	e7e8      	b.n	8152 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x152>
    8180:	463a      	mov	r2, r7
    8182:	f884 706a 	strb.w	r7, [r4, #106]	; 0x6a
    8186:	f104 016b 	add.w	r1, r4, #107	; 0x6b
    818a:	4648      	mov	r0, r9
    818c:	f008 ffbe 	bl	1110c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    8190:	f104 016b 	add.w	r1, r4, #107	; 0x6b
    8194:	f8d8 0004 	ldr.w	r0, [r8, #4]
    8198:	f009 fc5d 	bl	11a56 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    819c:	2101      	movs	r1, #1
    819e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    81a2:	f009 fc5f 	bl	11a64 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    81a6:	f104 0144 	add.w	r1, r4, #68	; 0x44
    81aa:	6c20      	ldr	r0, [r4, #64]	; 0x40
    81ac:	f008 ff44 	bl	11038 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    81b0:	4607      	mov	r7, r0
    81b2:	f104 014c 	add.w	r1, r4, #76	; 0x4c
    81b6:	6c20      	ldr	r0, [r4, #64]	; 0x40
    81b8:	f008 ff41 	bl	1103e <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    81bc:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
    81c0:	4338      	orrs	r0, r7
    81c2:	f88d 1004 	strb.w	r1, [sp, #4]
    81c6:	f89d 1004 	ldrb.w	r1, [sp, #4]
    81ca:	4308      	orrs	r0, r1
    81cc:	d023      	beq.n	8216 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x216>
    81ce:	78a0      	ldrb	r0, [r4, #2]
    81d0:	f3c0 1000 	ubfx	r0, r0, #4, #1
    81d4:	b9f8      	cbnz	r0, 8216 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x216>
    81d6:	f8b4 0039 	ldrh.w	r0, [r4, #57]	; 0x39
    81da:	2102      	movs	r1, #2
    81dc:	f3c0 070b 	ubfx	r7, r0, #0, #12
    81e0:	f8ad 7000 	strh.w	r7, [sp]
    81e4:	4668      	mov	r0, sp
    81e6:	f7fb ff19 	bl	401c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    81ea:	b128      	cbz	r0, 81f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f8>
    81ec:	f8bd 0000 	ldrh.w	r0, [sp]
    81f0:	f3c0 000b 	ubfx	r0, r0, #0, #12
    81f4:	42b8      	cmp	r0, r7
    81f6:	d104      	bne.n	8202 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x202>
    81f8:	f8bd 0000 	ldrh.w	r0, [sp]
    81fc:	1c40      	adds	r0, r0, #1
    81fe:	f8ad 0000 	strh.w	r0, [sp]
    8202:	f8bd 0000 	ldrh.w	r0, [sp]
    8206:	f8b4 1039 	ldrh.w	r1, [r4, #57]	; 0x39
    820a:	f360 010b 	bfi	r1, r0, #0, #12
    820e:	f8a4 1039 	strh.w	r1, [r4, #57]	; 0x39
    8212:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
    8216:	f7fe f8fb 	bl	6410 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    821a:	f8d8 0004 	ldr.w	r0, [r8, #4]
    821e:	1cc0      	adds	r0, r0, #3
    8220:	f7fd fd30 	bl	5c84 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    8224:	73a8      	strb	r0, [r5, #14]
    8226:	78a0      	ldrb	r0, [r4, #2]
    8228:	f010 0f01 	tst.w	r0, #1
    822c:	d023      	beq.n	8276 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x276>
    822e:	a906      	add	r1, sp, #24
    8230:	2001      	movs	r0, #1
    8232:	f008 fdc8 	bl	10dc6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8236:	b120      	cbz	r0, 8242 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x242>
    8238:	f640 11c9 	movw	r1, #2505	; 0x9c9
    823c:	202d      	movs	r0, #45	; 0x2d
    823e:	f7fb fe7f 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8242:	20ff      	movs	r0, #255	; 0xff
    8244:	7628      	strb	r0, [r5, #24]
    8246:	a806      	add	r0, sp, #24
    8248:	f7fc f8c0 	bl	43cc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    824c:	b998      	cbnz	r0, 8276 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x276>
    824e:	9808      	ldr	r0, [sp, #32]
    8250:	6a21      	ldr	r1, [r4, #32]
    8252:	4281      	cmp	r1, r0
    8254:	d00a      	beq.n	826c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26c>
    8256:	7881      	ldrb	r1, [r0, #2]
    8258:	7629      	strb	r1, [r5, #24]
    825a:	f8d0 1003 	ldr.w	r1, [r0, #3]
    825e:	f8c5 1019 	str.w	r1, [r5, #25]
    8262:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    8266:	f8a5 001d 	strh.w	r0, [r5, #29]
    826a:	e004      	b.n	8276 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x276>
    826c:	a806      	add	r0, sp, #24
    826e:	f7fc f8ad 	bl	43cc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8272:	2800      	cmp	r0, #0
    8274:	d0eb      	beq.n	824e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24e>
    8276:	b009      	add	sp, #36	; 0x24
    8278:	2000      	movs	r0, #0
    827a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    827e:	0000      	.short	0x0000
    8280:	20000f2c 	.word	0x20000f2c
    8284:	00008a3c 	.word	0x00008a3c
    8288:	20000138 	.word	0x20000138
    828c:	8e89bed6 	.word	0x8e89bed6
    8290:	00008a39 	.word	0x00008a39
    8294:	000f4240 	.word	0x000f4240
    8298:	b510      	push	{r4, lr}
    829a:	4604      	mov	r4, r0
    829c:	f7ff fea6 	bl	7fec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    82a0:	2800      	cmp	r0, #0
    82a2:	bf18      	it	ne
    82a4:	bd10      	popne	{r4, pc}
    82a6:	4805      	ldr	r0, [pc, #20]	; (82bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2bc>)
    82a8:	7800      	ldrb	r0, [r0, #0]
    82aa:	2801      	cmp	r0, #1
    82ac:	d003      	beq.n	82b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b6>
    82ae:	2100      	movs	r1, #0
    82b0:	4620      	mov	r0, r4
    82b2:	f7ff fc0b 	bl	7acc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1c>
    82b6:	2000      	movs	r0, #0
    82b8:	bd10      	pop	{r4, pc}
    82ba:	0000      	.short	0x0000
    82bc:	20000f2c 	.word	0x20000f2c
    82c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82c4:	4f1f      	ldr	r7, [pc, #124]	; (8344 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x344>)
    82c6:	4d20      	ldr	r5, [pc, #128]	; (8348 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x348>)
    82c8:	683c      	ldr	r4, [r7, #0]
    82ca:	7828      	ldrb	r0, [r5, #0]
    82cc:	2800      	cmp	r0, #0
    82ce:	bf08      	it	eq
    82d0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    82d4:	7828      	ldrb	r0, [r5, #0]
    82d6:	2802      	cmp	r0, #2
    82d8:	bf1c      	itt	ne
    82da:	7828      	ldrbne	r0, [r5, #0]
    82dc:	2803      	cmpne	r0, #3
    82de:	d111      	bne.n	8304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x304>
    82e0:	7b20      	ldrb	r0, [r4, #12]
    82e2:	b148      	cbz	r0, 82f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f8>
    82e4:	4626      	mov	r6, r4
    82e6:	f104 003b 	add.w	r0, r4, #59	; 0x3b
    82ea:	f007 f817 	bl	f31c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    82ee:	2800      	cmp	r0, #0
    82f0:	bf04      	itt	eq
    82f2:	207f      	moveq	r0, #127	; 0x7f
    82f4:	f886 003b 	strbeq.w	r0, [r6, #59]	; 0x3b
    82f8:	7ba8      	ldrb	r0, [r5, #14]
    82fa:	b118      	cbz	r0, 8304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x304>
    82fc:	f005 ffd4 	bl	e2a8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8300:	f005 fd2e 	bl	dd60 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    8304:	f7fb fbdc 	bl	3ac0 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>
    8308:	4620      	mov	r0, r4
    830a:	f00a f82d 	bl	12368 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    830e:	b1a0      	cbz	r0, 833a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x33a>
    8310:	6838      	ldr	r0, [r7, #0]
    8312:	7881      	ldrb	r1, [r0, #2]
    8314:	f3c1 01c0 	ubfx	r1, r1, #3, #1
    8318:	b121      	cbz	r1, 8324 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x324>
    831a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    831e:	2101      	movs	r1, #1
    8320:	f7ff bbd4 	b.w	7acc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1c>
    8324:	4604      	mov	r4, r0
    8326:	3024      	adds	r0, #36	; 0x24
    8328:	f009 ffd8 	bl	122dc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    832c:	b128      	cbz	r0, 833a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x33a>
    832e:	4620      	mov	r0, r4
    8330:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8334:	2101      	movs	r1, #1
    8336:	f7ff bbc9 	b.w	7acc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1c>
    833a:	4620      	mov	r0, r4
    833c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8340:	f000 ba7c 	b.w	883c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x83c>
    8344:	20000138 	.word	0x20000138
    8348:	20000f2c 	.word	0x20000f2c
    834c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8350:	4690      	mov	r8, r2
    8352:	460e      	mov	r6, r1
    8354:	4604      	mov	r4, r0
    8356:	2903      	cmp	r1, #3
    8358:	bf1b      	ittet	ne
    835a:	f894 0074 	ldrbne.w	r0, [r4, #116]	; 0x74
    835e:	2800      	cmpne	r0, #0
    8360:	f04f 0900 	moveq.w	r9, #0
    8364:	f04f 0901 	movne.w	r9, #1
    8368:	f005 ffb8 	bl	e2dc <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    836c:	4605      	mov	r5, r0
    836e:	2e03      	cmp	r6, #3
    8370:	d008      	beq.n	8384 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x384>
    8372:	2701      	movs	r7, #1
    8374:	2e05      	cmp	r6, #5
    8376:	bf02      	ittt	eq
    8378:	78a0      	ldrbeq	r0, [r4, #2]
    837a:	f010 0001 	andseq.w	r0, r0, #1
    837e:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8382:	e007      	b.n	8394 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x394>
    8384:	78a0      	ldrb	r0, [r4, #2]
    8386:	2702      	movs	r7, #2
    8388:	f3c0 0040 	ubfx	r0, r0, #1, #1
    838c:	2800      	cmp	r0, #0
    838e:	bf08      	it	eq
    8390:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8394:	f1b9 0f00 	cmp.w	r9, #0
    8398:	d161      	bne.n	845e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x45e>
    839a:	4832      	ldr	r0, [pc, #200]	; (8464 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x464>)
    839c:	7b80      	ldrb	r0, [r0, #14]
    839e:	b140      	cbz	r0, 83b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3b2>
    83a0:	f008 ff20 	bl	111e4 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    83a4:	f888 0000 	strb.w	r0, [r8]
    83a8:	28ff      	cmp	r0, #255	; 0xff
    83aa:	d002      	beq.n	83b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3b2>
    83ac:	f7fd fdc4 	bl	5f38 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    83b0:	4305      	orrs	r5, r0
    83b2:	4e2d      	ldr	r6, [pc, #180]	; (8468 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x468>)
    83b4:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
    83b8:	6870      	ldr	r0, [r6, #4]
    83ba:	7801      	ldrb	r1, [r0, #0]
    83bc:	f3c1 1180 	ubfx	r1, r1, #6, #1
    83c0:	4291      	cmp	r1, r2
    83c2:	d109      	bne.n	83d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d8>
    83c4:	2206      	movs	r2, #6
    83c6:	f104 0164 	add.w	r1, r4, #100	; 0x64
    83ca:	1cc0      	adds	r0, r0, #3
    83cc:	f007 fd00 	bl	fdd0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    83d0:	2800      	cmp	r0, #0
    83d2:	bf08      	it	eq
    83d4:	2001      	moveq	r0, #1
    83d6:	d000      	beq.n	83da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3da>
    83d8:	2000      	movs	r0, #0
    83da:	f898 1000 	ldrb.w	r1, [r8]
    83de:	29ff      	cmp	r1, #255	; 0xff
    83e0:	d004      	beq.n	83ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ec>
    83e2:	b9b8      	cbnz	r0, 8414 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x414>
    83e4:	7ee0      	ldrb	r0, [r4, #27]
    83e6:	4288      	cmp	r0, r1
    83e8:	d116      	bne.n	8418 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x418>
    83ea:	e013      	b.n	8414 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x414>
    83ec:	b1a0      	cbz	r0, 8418 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x418>
    83ee:	6871      	ldr	r1, [r6, #4]
    83f0:	f811 0b03 	ldrb.w	r0, [r1], #3
    83f4:	f3c0 1080 	ubfx	r0, r0, #6, #1
    83f8:	f7fd fdb0 	bl	5f5c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    83fc:	4680      	mov	r8, r0
    83fe:	f7fd ff53 	bl	62a8 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    8402:	b138      	cbz	r0, 8414 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x414>
    8404:	4640      	mov	r0, r8
    8406:	f7fd fd17 	bl	5e38 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    840a:	b118      	cbz	r0, 8414 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x414>
    840c:	2110      	movs	r1, #16
    840e:	f7fe fa89 	bl	6924 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    8412:	b108      	cbz	r0, 8418 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x418>
    8414:	2001      	movs	r0, #1
    8416:	e000      	b.n	841a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x41a>
    8418:	2000      	movs	r0, #0
    841a:	78a1      	ldrb	r1, [r4, #2]
    841c:	f011 0f04 	tst.w	r1, #4
    8420:	d001      	beq.n	8426 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x426>
    8422:	b1e0      	cbz	r0, 845e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x45e>
    8424:	e018      	b.n	8458 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x458>
    8426:	b9bd      	cbnz	r5, 8458 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x458>
    8428:	7c60      	ldrb	r0, [r4, #17]
    842a:	2800      	cmp	r0, #0
    842c:	bf18      	it	ne
    842e:	42b8      	cmpne	r0, r7
    8430:	d115      	bne.n	845e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x45e>
    8432:	6871      	ldr	r1, [r6, #4]
    8434:	f811 0b03 	ldrb.w	r0, [r1], #3
    8438:	f3c0 1080 	ubfx	r0, r0, #6, #1
    843c:	f7fd fd8e 	bl	5f5c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    8440:	4604      	mov	r4, r0
    8442:	f7fd ff31 	bl	62a8 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    8446:	b138      	cbz	r0, 8458 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x458>
    8448:	4620      	mov	r0, r4
    844a:	f7fd fcf5 	bl	5e38 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    844e:	b118      	cbz	r0, 8458 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x458>
    8450:	2110      	movs	r1, #16
    8452:	f7fe fa67 	bl	6924 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    8456:	b110      	cbz	r0, 845e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x45e>
    8458:	2001      	movs	r0, #1
    845a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    845e:	2000      	movs	r0, #0
    8460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8464:	20000f2c 	.word	0x20000f2c
    8468:	20000138 	.word	0x20000138
    846c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8470:	f244 2555 	movw	r5, #16981	; 0x4255
    8474:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    8478:	f00c 0401 	and.w	r4, ip, #1
    847c:	f3cc 0a40 	ubfx	sl, ip, #1, #1
    8480:	f1a0 0ceb 	sub.w	ip, r0, #235	; 0xeb
    8484:	9400      	str	r4, [sp, #0]
    8486:	ea54 0b0a 	orrs.w	fp, r4, sl
    848a:	fa1f fc8c 	uxth.w	ip, ip
    848e:	f10c 04f6 	add.w	r4, ip, #246	; 0xf6
    8492:	fb04 f405 	mul.w	r4, r4, r5
    8496:	ea4f 5994 	mov.w	r9, r4, lsr #22
    849a:	fb0c f405 	mul.w	r4, ip, r5
    849e:	ea4f 5794 	mov.w	r7, r4, lsr #22
    84a2:	b2fc      	uxtb	r4, r7
    84a4:	f06f 05f6 	mvn.w	r5, #246	; 0xf6
    84a8:	fb14 f405 	smulbb	r4, r4, r5
    84ac:	eb04 060c 	add.w	r6, r4, ip
    84b0:	fa1f fc86 	uxth.w	ip, r6
    84b4:	f10c 0805 	add.w	r8, ip, #5
    84b8:	f04f 0c00 	mov.w	ip, #0
    84bc:	f44f 74c8 	mov.w	r4, #400	; 0x190
    84c0:	f44f 75bf 	mov.w	r5, #382	; 0x17e
    84c4:	f000 8148 	beq.w	8758 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x758>
    84c8:	f501 71a5 	add.w	r1, r1, #330	; 0x14a
    84cc:	f1ba 0f00 	cmp.w	sl, #0
    84d0:	d01b      	beq.n	850a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50a>
    84d2:	2a08      	cmp	r2, #8
    84d4:	bf04      	itt	eq
    84d6:	46a3      	moveq	fp, r4
    84d8:	f04f 0a40 	moveq.w	sl, #64	; 0x40
    84dc:	d00f      	beq.n	84fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4fe>
    84de:	2a04      	cmp	r2, #4
    84e0:	bf04      	itt	eq
    84e2:	46ab      	moveq	fp, r5
    84e4:	f04f 0a10 	moveq.w	sl, #16
    84e8:	d009      	beq.n	84fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4fe>
    84ea:	2a02      	cmp	r2, #2
    84ec:	bf07      	ittee	eq
    84ee:	f10c 0b18 	addeq.w	fp, ip, #24
    84f2:	f04f 0a04 	moveq.w	sl, #4
    84f6:	f10c 0b28 	addne.w	fp, ip, #40	; 0x28
    84fa:	f04f 0a08 	movne.w	sl, #8
    84fe:	eb0a 0e8a 	add.w	lr, sl, sl, lsl #2
    8502:	eb0e 1a8a 	add.w	sl, lr, sl, lsl #6
    8506:	44da      	add	sl, fp
    8508:	e01a      	b.n	8540 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x540>
    850a:	b1db      	cbz	r3, 8544 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x544>
    850c:	2a08      	cmp	r2, #8
    850e:	bf04      	itt	eq
    8510:	46a3      	moveq	fp, r4
    8512:	f04f 0a40 	moveq.w	sl, #64	; 0x40
    8516:	d00f      	beq.n	8538 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x538>
    8518:	2a04      	cmp	r2, #4
    851a:	bf04      	itt	eq
    851c:	46ab      	moveq	fp, r5
    851e:	f04f 0a10 	moveq.w	sl, #16
    8522:	d009      	beq.n	8538 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x538>
    8524:	2a02      	cmp	r2, #2
    8526:	bf07      	ittee	eq
    8528:	f10c 0b18 	addeq.w	fp, ip, #24
    852c:	f04f 0a04 	moveq.w	sl, #4
    8530:	f10c 0b28 	addne.w	fp, ip, #40	; 0x28
    8534:	f04f 0a08 	movne.w	sl, #8
    8538:	eb0a 1a8a 	add.w	sl, sl, sl, lsl #6
    853c:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
    8540:	4451      	add	r1, sl
    8542:	e021      	b.n	8588 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x588>
    8544:	28ff      	cmp	r0, #255	; 0xff
    8546:	bf34      	ite	cc
    8548:	4682      	movcc	sl, r0
    854a:	f04f 0aff 	movcs.w	sl, #255	; 0xff
    854e:	f10a 0b05 	add.w	fp, sl, #5
    8552:	2a08      	cmp	r2, #8
    8554:	bf04      	itt	eq
    8556:	f04f 0a40 	moveq.w	sl, #64	; 0x40
    855a:	fb0b 110a 	mlaeq	r1, fp, sl, r1
    855e:	d027      	beq.n	85b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b0>
    8560:	2a04      	cmp	r2, #4
    8562:	d01f      	beq.n	85a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a4>
    8564:	2a02      	cmp	r2, #2
    8566:	bf0c      	ite	eq
    8568:	f04f 0a04 	moveq.w	sl, #4
    856c:	f04f 0a08 	movne.w	sl, #8
    8570:	fb0b 110a 	mla	r1, fp, sl, r1
    8574:	bf07      	ittee	eq
    8576:	46e2      	moveq	sl, ip
    8578:	f04f 0b18 	moveq.w	fp, #24
    857c:	f04f 0a00 	movne.w	sl, #0
    8580:	f04f 0b28 	movne.w	fp, #40	; 0x28
    8584:	44da      	add	sl, fp
    8586:	4451      	add	r1, sl
    8588:	319c      	adds	r1, #156	; 0x9c
    858a:	f002 0a0c 	and.w	sl, r2, #12
    858e:	f1ba 0f00 	cmp.w	sl, #0
    8592:	bf18      	it	ne
    8594:	f04f 0a28 	movne.w	sl, #40	; 0x28
    8598:	4451      	add	r1, sl
    859a:	bf18      	it	ne
    859c:	f501 6141 	addne.w	r1, r1, #3088	; 0xc10
    85a0:	d126      	bne.n	85f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5f0>
    85a2:	e008      	b.n	85b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b6>
    85a4:	f04f 0a10 	mov.w	sl, #16
    85a8:	fb0b 110a 	mla	r1, fp, sl, r1
    85ac:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
    85b0:	f44f 7ba8 	mov.w	fp, #336	; 0x150
    85b4:	e7e6      	b.n	8584 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x584>
    85b6:	2a08      	cmp	r2, #8
    85b8:	bf04      	itt	eq
    85ba:	46a3      	moveq	fp, r4
    85bc:	f04f 0a40 	moveq.w	sl, #64	; 0x40
    85c0:	d00f      	beq.n	85e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e2>
    85c2:	2a04      	cmp	r2, #4
    85c4:	bf04      	itt	eq
    85c6:	46ab      	moveq	fp, r5
    85c8:	f04f 0a10 	moveq.w	sl, #16
    85cc:	d009      	beq.n	85e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e2>
    85ce:	2a02      	cmp	r2, #2
    85d0:	bf07      	ittee	eq
    85d2:	f10c 0b18 	addeq.w	fp, ip, #24
    85d6:	f04f 0a04 	moveq.w	sl, #4
    85da:	f10c 0b28 	addne.w	fp, ip, #40	; 0x28
    85de:	f04f 0a08 	movne.w	sl, #8
    85e2:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
    85e6:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    85ea:	eb0b 0a4a 	add.w	sl, fp, sl, lsl #1
    85ee:	4451      	add	r1, sl
    85f0:	f101 0a98 	add.w	sl, r1, #152	; 0x98
    85f4:	9900      	ldr	r1, [sp, #0]
    85f6:	b1c1      	cbz	r1, 862a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x62a>
    85f8:	2a08      	cmp	r2, #8
    85fa:	bf08      	it	eq
    85fc:	2040      	moveq	r0, #64	; 0x40
    85fe:	d00c      	beq.n	861a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x61a>
    8600:	2a04      	cmp	r2, #4
    8602:	bf04      	itt	eq
    8604:	462c      	moveq	r4, r5
    8606:	2010      	moveq	r0, #16
    8608:	d007      	beq.n	861a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x61a>
    860a:	2a02      	cmp	r2, #2
    860c:	bf07      	ittee	eq
    860e:	f10c 0418 	addeq.w	r4, ip, #24
    8612:	2004      	moveq	r0, #4
    8614:	f10c 0428 	addne.w	r4, ip, #40	; 0x28
    8618:	2008      	movne	r0, #8
    861a:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    861e:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    8622:	4420      	add	r0, r4
    8624:	eb00 010a 	add.w	r1, r0, sl
    8628:	e091      	b.n	874e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74e>
    862a:	b1bb      	cbz	r3, 865c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x65c>
    862c:	2a08      	cmp	r2, #8
    862e:	bf04      	itt	eq
    8630:	46a3      	moveq	fp, r4
    8632:	2140      	moveq	r1, #64	; 0x40
    8634:	d00c      	beq.n	8650 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x650>
    8636:	2a04      	cmp	r2, #4
    8638:	bf04      	itt	eq
    863a:	46ab      	moveq	fp, r5
    863c:	2110      	moveq	r1, #16
    863e:	d007      	beq.n	8650 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x650>
    8640:	2a02      	cmp	r2, #2
    8642:	bf07      	ittee	eq
    8644:	f10c 0b18 	addeq.w	fp, ip, #24
    8648:	2104      	moveq	r1, #4
    864a:	f10c 0b28 	addne.w	fp, ip, #40	; 0x28
    864e:	2108      	movne	r1, #8
    8650:	eb01 1181 	add.w	r1, r1, r1, lsl #6
    8654:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
    8658:	4451      	add	r1, sl
    865a:	e01c      	b.n	8696 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x696>
    865c:	28ff      	cmp	r0, #255	; 0xff
    865e:	bf34      	ite	cc
    8660:	4601      	movcc	r1, r0
    8662:	21ff      	movcs	r1, #255	; 0xff
    8664:	f101 0b05 	add.w	fp, r1, #5
    8668:	2a08      	cmp	r2, #8
    866a:	bf04      	itt	eq
    866c:	2140      	moveq	r1, #64	; 0x40
    866e:	fb0b aa01 	mlaeq	sl, fp, r1, sl
    8672:	d01e      	beq.n	86b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6b2>
    8674:	2a04      	cmp	r2, #4
    8676:	d018      	beq.n	86aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6aa>
    8678:	2a02      	cmp	r2, #2
    867a:	bf0c      	ite	eq
    867c:	2104      	moveq	r1, #4
    867e:	2108      	movne	r1, #8
    8680:	fb0b aa01 	mla	sl, fp, r1, sl
    8684:	bf07      	ittee	eq
    8686:	4661      	moveq	r1, ip
    8688:	f04f 0b18 	moveq.w	fp, #24
    868c:	2100      	movne	r1, #0
    868e:	f04f 0b28 	movne.w	fp, #40	; 0x28
    8692:	4459      	add	r1, fp
    8694:	4451      	add	r1, sl
    8696:	28eb      	cmp	r0, #235	; 0xeb
    8698:	d959      	bls.n	874e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74e>
    869a:	b313      	cbz	r3, 86e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6e2>
    869c:	2a08      	cmp	r2, #8
    869e:	d00e      	beq.n	86be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6be>
    86a0:	2a04      	cmp	r2, #4
    86a2:	d009      	beq.n	86b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6b8>
    86a4:	2a02      	cmp	r2, #2
    86a6:	d00c      	beq.n	86c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c2>
    86a8:	e00f      	b.n	86ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6ca>
    86aa:	2110      	movs	r1, #16
    86ac:	fb0b aa01 	mla	sl, fp, r1, sl
    86b0:	212e      	movs	r1, #46	; 0x2e
    86b2:	f44f 7ba8 	mov.w	fp, #336	; 0x150
    86b6:	e7ec      	b.n	8692 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x692>
    86b8:	462c      	mov	r4, r5
    86ba:	2010      	movs	r0, #16
    86bc:	e008      	b.n	86d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6d0>
    86be:	2040      	movs	r0, #64	; 0x40
    86c0:	e006      	b.n	86d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6d0>
    86c2:	f10c 0418 	add.w	r4, ip, #24
    86c6:	2004      	movs	r0, #4
    86c8:	e002      	b.n	86d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6d0>
    86ca:	f10c 0428 	add.w	r4, ip, #40	; 0x28
    86ce:	2008      	movs	r0, #8
    86d0:	eb00 1080 	add.w	r0, r0, r0, lsl #6
    86d4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    86d8:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    86dc:	fb09 1100 	mla	r1, r9, r0, r1
    86e0:	e035      	b.n	874e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74e>
    86e2:	b2fb      	uxtb	r3, r7
    86e4:	2a08      	cmp	r2, #8
    86e6:	bf04      	itt	eq
    86e8:	4620      	moveq	r0, r4
    86ea:	2740      	moveq	r7, #64	; 0x40
    86ec:	d00c      	beq.n	8708 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x708>
    86ee:	2a04      	cmp	r2, #4
    86f0:	bf04      	itt	eq
    86f2:	4628      	moveq	r0, r5
    86f4:	2710      	moveq	r7, #16
    86f6:	d007      	beq.n	8708 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x708>
    86f8:	2a02      	cmp	r2, #2
    86fa:	bf07      	ittee	eq
    86fc:	f10c 0018 	addeq.w	r0, ip, #24
    8700:	2704      	moveq	r7, #4
    8702:	f10c 0028 	addne.w	r0, ip, #40	; 0x28
    8706:	2708      	movne	r7, #8
    8708:	eb07 1787 	add.w	r7, r7, r7, lsl #6
    870c:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    8710:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    8714:	fb03 1100 	mla	r1, r3, r0, r1
    8718:	0430      	lsls	r0, r6, #16
    871a:	0c00      	lsrs	r0, r0, #16
    871c:	d017      	beq.n	874e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74e>
    871e:	2a08      	cmp	r2, #8
    8720:	d007      	beq.n	8732 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x732>
    8722:	2a04      	cmp	r2, #4
    8724:	d002      	beq.n	872c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x72c>
    8726:	2a02      	cmp	r2, #2
    8728:	d005      	beq.n	8736 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x736>
    872a:	e008      	b.n	873e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x73e>
    872c:	462c      	mov	r4, r5
    872e:	2010      	movs	r0, #16
    8730:	e008      	b.n	8744 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x744>
    8732:	2040      	movs	r0, #64	; 0x40
    8734:	e006      	b.n	8744 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x744>
    8736:	f10c 0418 	add.w	r4, ip, #24
    873a:	2004      	movs	r0, #4
    873c:	e002      	b.n	8744 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x744>
    873e:	f10c 0428 	add.w	r4, ip, #40	; 0x28
    8742:	2008      	movs	r0, #8
    8744:	fb08 1000 	mla	r0, r8, r0, r1
    8748:	4420      	add	r0, r4
    874a:	f500 71a5 	add.w	r1, r0, #330	; 0x14a
    874e:	f101 00e8 	add.w	r0, r1, #232	; 0xe8
    8752:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8756:	bf00      	nop
    8758:	f501 7aa5 	add.w	sl, r1, #330	; 0x14a
    875c:	b1bb      	cbz	r3, 878e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78e>
    875e:	2a08      	cmp	r2, #8
    8760:	bf04      	itt	eq
    8762:	46a3      	moveq	fp, r4
    8764:	2140      	moveq	r1, #64	; 0x40
    8766:	d00c      	beq.n	8782 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x782>
    8768:	2a04      	cmp	r2, #4
    876a:	bf04      	itt	eq
    876c:	46ab      	moveq	fp, r5
    876e:	2110      	moveq	r1, #16
    8770:	d007      	beq.n	8782 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x782>
    8772:	2a02      	cmp	r2, #2
    8774:	bf07      	ittee	eq
    8776:	f10c 0b18 	addeq.w	fp, ip, #24
    877a:	2104      	moveq	r1, #4
    877c:	f10c 0b28 	addne.w	fp, ip, #40	; 0x28
    8780:	2108      	movne	r1, #8
    8782:	eb01 1181 	add.w	r1, r1, r1, lsl #6
    8786:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
    878a:	4451      	add	r1, sl
    878c:	e01c      	b.n	87c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7c8>
    878e:	28ff      	cmp	r0, #255	; 0xff
    8790:	bf34      	ite	cc
    8792:	4601      	movcc	r1, r0
    8794:	21ff      	movcs	r1, #255	; 0xff
    8796:	f101 0b05 	add.w	fp, r1, #5
    879a:	2a08      	cmp	r2, #8
    879c:	bf04      	itt	eq
    879e:	2140      	moveq	r1, #64	; 0x40
    87a0:	fb0b aa01 	mlaeq	sl, fp, r1, sl
    87a4:	d021      	beq.n	87ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7ea>
    87a6:	2a04      	cmp	r2, #4
    87a8:	d01b      	beq.n	87e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7e2>
    87aa:	2a02      	cmp	r2, #2
    87ac:	bf0c      	ite	eq
    87ae:	2104      	moveq	r1, #4
    87b0:	2108      	movne	r1, #8
    87b2:	fb0b aa01 	mla	sl, fp, r1, sl
    87b6:	bf07      	ittee	eq
    87b8:	4661      	moveq	r1, ip
    87ba:	f04f 0b18 	moveq.w	fp, #24
    87be:	2100      	movne	r1, #0
    87c0:	f04f 0b28 	movne.w	fp, #40	; 0x28
    87c4:	4459      	add	r1, fp
    87c6:	4451      	add	r1, sl
    87c8:	28eb      	cmp	r0, #235	; 0xeb
    87ca:	d9c0      	bls.n	874e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74e>
    87cc:	b183      	cbz	r3, 87f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7f0>
    87ce:	2a08      	cmp	r2, #8
    87d0:	f43f af75 	beq.w	86be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6be>
    87d4:	2a04      	cmp	r2, #4
    87d6:	f43f af6f 	beq.w	86b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6b8>
    87da:	2a02      	cmp	r2, #2
    87dc:	f47f af75 	bne.w	86ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6ca>
    87e0:	e76f      	b.n	86c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c2>
    87e2:	2110      	movs	r1, #16
    87e4:	fb0b aa01 	mla	sl, fp, r1, sl
    87e8:	212e      	movs	r1, #46	; 0x2e
    87ea:	f44f 7ba8 	mov.w	fp, #336	; 0x150
    87ee:	e7e9      	b.n	87c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7c4>
    87f0:	b2fb      	uxtb	r3, r7
    87f2:	2a08      	cmp	r2, #8
    87f4:	bf04      	itt	eq
    87f6:	4627      	moveq	r7, r4
    87f8:	2040      	moveq	r0, #64	; 0x40
    87fa:	d00c      	beq.n	8816 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x816>
    87fc:	2a04      	cmp	r2, #4
    87fe:	bf04      	itt	eq
    8800:	462f      	moveq	r7, r5
    8802:	2010      	moveq	r0, #16
    8804:	d007      	beq.n	8816 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x816>
    8806:	2a02      	cmp	r2, #2
    8808:	bf07      	ittee	eq
    880a:	f10c 0718 	addeq.w	r7, ip, #24
    880e:	2004      	moveq	r0, #4
    8810:	f10c 0728 	addne.w	r7, ip, #40	; 0x28
    8814:	2008      	movne	r0, #8
    8816:	eb00 1080 	add.w	r0, r0, r0, lsl #6
    881a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    881e:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    8822:	fb03 1100 	mla	r1, r3, r0, r1
    8826:	0430      	lsls	r0, r6, #16
    8828:	0c00      	lsrs	r0, r0, #16
    882a:	d090      	beq.n	874e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74e>
    882c:	2a08      	cmp	r2, #8
    882e:	d080      	beq.n	8732 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x732>
    8830:	2a04      	cmp	r2, #4
    8832:	f43f af7b 	beq.w	872c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x72c>
    8836:	2a02      	cmp	r2, #2
    8838:	d181      	bne.n	873e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x73e>
    883a:	e77c      	b.n	8736 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x736>
    883c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8840:	4604      	mov	r4, r0
    8842:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    8844:	4e34      	ldr	r6, [pc, #208]	; (8918 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x918>)
    8846:	1c40      	adds	r0, r0, #1
    8848:	63e0      	str	r0, [r4, #60]	; 0x3c
    884a:	7bb0      	ldrb	r0, [r6, #14]
    884c:	2500      	movs	r5, #0
    884e:	b120      	cbz	r0, 885a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x85a>
    8850:	f005 fd2a 	bl	e2a8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8854:	f005 fa84 	bl	dd60 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    8858:	73b5      	strb	r5, [r6, #14]
    885a:	7035      	strb	r5, [r6, #0]
    885c:	f894 0075 	ldrb.w	r0, [r4, #117]	; 0x75
    8860:	b128      	cbz	r0, 886e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x86e>
    8862:	4620      	mov	r0, r4
    8864:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8868:	2101      	movs	r1, #1
    886a:	f000 b95b 	b.w	8b24 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    886e:	7b60      	ldrb	r0, [r4, #13]
    8870:	2800      	cmp	r0, #0
    8872:	d04b      	beq.n	890c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90c>
    8874:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    8876:	4288      	cmp	r0, r1
    8878:	d848      	bhi.n	890c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90c>
    887a:	2101      	movs	r1, #1
    887c:	4620      	mov	r0, r4
    887e:	f000 f951 	bl	8b24 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    8882:	78a0      	ldrb	r0, [r4, #2]
    8884:	f04f 0601 	mov.w	r6, #1
    8888:	f010 0f01 	tst.w	r0, #1
    888c:	d01f      	beq.n	88ce <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8ce>
    888e:	6a20      	ldr	r0, [r4, #32]
    8890:	2743      	movs	r7, #67	; 0x43
    8892:	f8b0 8000 	ldrh.w	r8, [r0]
    8896:	f7fe fd51 	bl	733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    889a:	f005 f96f 	bl	db7c <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    889e:	2800      	cmp	r0, #0
    88a0:	bf18      	it	ne
    88a2:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    88a6:	7820      	ldrb	r0, [r4, #0]
    88a8:	f884 009f 	strb.w	r0, [r4, #159]	; 0x9f
    88ac:	f8a4 80a0 	strh.w	r8, [r4, #160]	; 0xa0
    88b0:	f884 709e 	strb.w	r7, [r4, #158]	; 0x9e
    88b4:	7b60      	ldrb	r0, [r4, #13]
    88b6:	2800      	cmp	r0, #0
    88b8:	bf1a      	itte	ne
    88ba:	f894 003c 	ldrbne.w	r0, [r4, #60]	; 0x3c
    88be:	f884 00a2 	strbne.w	r0, [r4, #162]	; 0xa2
    88c2:	f884 50a2 	strbeq.w	r5, [r4, #162]	; 0xa2
    88c6:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
    88ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    88ce:	f64f 78ff 	movw	r8, #65535	; 0xffff
    88d2:	2743      	movs	r7, #67	; 0x43
    88d4:	f7fe fd32 	bl	733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    88d8:	f005 f950 	bl	db7c <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    88dc:	2800      	cmp	r0, #0
    88de:	bf18      	it	ne
    88e0:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    88e4:	7820      	ldrb	r0, [r4, #0]
    88e6:	f884 009f 	strb.w	r0, [r4, #159]	; 0x9f
    88ea:	f8a4 80a0 	strh.w	r8, [r4, #160]	; 0xa0
    88ee:	f884 709e 	strb.w	r7, [r4, #158]	; 0x9e
    88f2:	7b60      	ldrb	r0, [r4, #13]
    88f4:	2800      	cmp	r0, #0
    88f6:	bf1a      	itte	ne
    88f8:	f894 003c 	ldrbne.w	r0, [r4, #60]	; 0x3c
    88fc:	f884 00a2 	strbne.w	r0, [r4, #162]	; 0xa2
    8900:	f884 50a2 	strbeq.w	r5, [r4, #162]	; 0xa2
    8904:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
    8908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    890c:	4620      	mov	r0, r4
    890e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8912:	2100      	movs	r1, #0
    8914:	f000 b906 	b.w	8b24 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    8918:	20000f2c 	.word	0x20000f2c
    891c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    891e:	4604      	mov	r4, r0
    8920:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
    8924:	4616      	mov	r6, r2
    8926:	460d      	mov	r5, r1
    8928:	f88d 0000 	strb.w	r0, [sp]
    892c:	f89d 0000 	ldrb.w	r0, [sp]
    8930:	b120      	cbz	r0, 893c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x93c>
    8932:	f640 4132 	movw	r1, #3122	; 0xc32
    8936:	202d      	movs	r0, #45	; 0x2d
    8938:	f7fb fb02 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    893c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    8940:	8828      	ldrh	r0, [r5, #0]
    8942:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    8946:	2b00      	cmp	r3, #0
    8948:	bf18      	it	ne
    894a:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    894c:	68e8      	ldr	r0, [r5, #12]
    894e:	f008 fc83 	bl	11258 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    8952:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    8956:	8aa8      	ldrh	r0, [r5, #20]
    8958:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
    895c:	8ae8      	ldrh	r0, [r5, #22]
    895e:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    8962:	f895 0185 	ldrb.w	r0, [r5, #389]	; 0x185
    8966:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
    896a:	7ea0      	ldrb	r0, [r4, #26]
    896c:	2100      	movs	r1, #0
    896e:	b148      	cbz	r0, 8984 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x984>
    8970:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
    8974:	2801      	cmp	r0, #1
    8976:	d105      	bne.n	8984 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x984>
    8978:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    897c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    8980:	2840      	cmp	r0, #64	; 0x40
    8982:	d02e      	beq.n	89e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9e2>
    8984:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    8988:	b140      	cbz	r0, 899c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x99c>
    898a:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
    898e:	2801      	cmp	r0, #1
    8990:	bf04      	itt	eq
    8992:	f894 0062 	ldrbeq.w	r0, [r4, #98]	; 0x62
    8996:	f010 0fc0 	tsteq.w	r0, #192	; 0xc0
    899a:	d022      	beq.n	89e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9e2>
    899c:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
    89a0:	f8a4 108c 	strh.w	r1, [r4, #140]	; 0x8c
    89a4:	481e      	ldr	r0, [pc, #120]	; (8a20 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa20>)
    89a6:	2eff      	cmp	r6, #255	; 0xff
    89a8:	6840      	ldr	r0, [r0, #4]
    89aa:	7801      	ldrb	r1, [r0, #0]
    89ac:	f3c1 1180 	ubfx	r1, r1, #6, #1
    89b0:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
    89b4:	f8d0 1003 	ldr.w	r1, [r0, #3]
    89b8:	d021      	beq.n	89fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9fe>
    89ba:	f8c4 108e 	str.w	r1, [r4, #142]	; 0x8e
    89be:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    89c2:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    89c6:	f104 0282 	add.w	r2, r4, #130	; 0x82
    89ca:	1e51      	subs	r1, r2, #1
    89cc:	4630      	mov	r0, r6
    89ce:	f7fd fa99 	bl	5f04 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    89d2:	b178      	cbz	r0, 89f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9f4>
    89d4:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    89d8:	f040 0002 	orr.w	r0, r0, #2
    89dc:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
    89e0:	e017      	b.n	8a12 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa12>
    89e2:	f8d4 005d 	ldr.w	r0, [r4, #93]	; 0x5d
    89e6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    89ea:	f8b4 0061 	ldrh.w	r0, [r4, #97]	; 0x61
    89ee:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    89f2:	e7d7      	b.n	89a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9a4>
    89f4:	f640 4153 	movw	r1, #3155	; 0xc53
    89f8:	202d      	movs	r0, #45	; 0x2d
    89fa:	f7fb faa1 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89fe:	f8c4 1082 	str.w	r1, [r4, #130]	; 0x82
    8a02:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    8a06:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    8a0a:	f104 008e 	add.w	r0, r4, #142	; 0x8e
    8a0e:	f00b fa9d 	bl	13f4c <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
    8a12:	8828      	ldrh	r0, [r5, #0]
    8a14:	f7fb fee4 	bl	47e0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8a18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8a1c:	f008 b88f 	b.w	10b3e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    8a20:	20000138 	.word	0x20000138
    8a24:	4802      	ldr	r0, [pc, #8]	; (8a30 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa30>)
    8a26:	2101      	movs	r1, #1
    8a28:	6800      	ldr	r0, [r0, #0]
    8a2a:	f7ff b84f 	b.w	7acc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1c>
    8a2e:	0000      	.short	0x0000
    8a30:	20000138 	.word	0x20000138
    8a34:	00000003 	.word	0x00000003
    8a38:	55555501 	.word	0x55555501
    8a3c:	00007f65 	.word	0x00007f65
    8a40:	00007c95 	.word	0x00007c95
    8a44:	00007edd 	.word	0x00007edd
    8a48:	00000000 	.word	0x00000000
    8a4c:	00007dcd 	.word	0x00007dcd
    8a50:	00007f0d 	.word	0x00007f0d
    8a54:	0001217d 	.word	0x0001217d
    8a58:	00012183 	.word	0x00012183
    8a5c:	00008299 	.word	0x00008299
    8a60:	000082c1 	.word	0x000082c1
    8a64:	00008a25 	.word	0x00008a25
    8a68:	00008a58 	.word	0x00008a58
    8a6c:	00008a50 	.word	0x00008a50
    8a70:	00008a4c 	.word	0x00008a4c

00008a74 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    8a74:	b510      	push	{r4, lr}
    8a76:	1e42      	subs	r2, r0, #1
    8a78:	2a02      	cmp	r2, #2
    8a7a:	d903      	bls.n	8a84 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x10>
    8a7c:	21ca      	movs	r1, #202	; 0xca
    8a7e:	202f      	movs	r0, #47	; 0x2f
    8a80:	f7fb fa5e 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a84:	1e40      	subs	r0, r0, #1
    8a86:	2910      	cmp	r1, #16
    8a88:	bf02      	ittt	eq
    8a8a:	490a      	ldreq	r1, [pc, #40]	; (8ab4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x40>)
    8a8c:	f831 0010 	ldrheq.w	r0, [r1, r0, lsl #1]
    8a90:	bd10      	popeq	{r4, pc}
    8a92:	2912      	cmp	r1, #18
    8a94:	bf14      	ite	ne
    8a96:	2913      	cmpne	r1, #19
    8a98:	4907      	ldreq	r1, [pc, #28]	; (8ab8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x44>)
    8a9a:	d007      	beq.n	8aac <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x38>
    8a9c:	2915      	cmp	r1, #21
    8a9e:	bf08      	it	eq
    8aa0:	4906      	ldreq	r1, [pc, #24]	; (8abc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x48>)
    8aa2:	d003      	beq.n	8aac <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x38>
    8aa4:	21d8      	movs	r1, #216	; 0xd8
    8aa6:	202f      	movs	r0, #47	; 0x2f
    8aa8:	f7fb fa4a 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8aac:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    8ab0:	bd10      	pop	{r4, pc}
    8ab2:	0000      	.short	0x0000
    8ab4:	0001235c 	.word	0x0001235c
    8ab8:	00012356 	.word	0x00012356
    8abc:	00012362 	.word	0x00012362

00008ac0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    8ac0:	1e42      	subs	r2, r0, #1
    8ac2:	b510      	push	{r4, lr}
    8ac4:	b2d2      	uxtb	r2, r2
    8ac6:	2a01      	cmp	r2, #1
    8ac8:	d905      	bls.n	8ad6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x16>
    8aca:	291d      	cmp	r1, #29
    8acc:	d01e      	beq.n	8b0c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x4c>
    8ace:	21ee      	movs	r1, #238	; 0xee
    8ad0:	202f      	movs	r0, #47	; 0x2f
    8ad2:	f7fb fa35 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ad6:	2913      	cmp	r1, #19
    8ad8:	d014      	beq.n	8b04 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x44>
    8ada:	dc08      	bgt.n	8aee <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    8adc:	2910      	cmp	r1, #16
    8ade:	bf02      	ittt	eq
    8ae0:	480d      	ldreq	r0, [pc, #52]	; (8b18 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x58>)
    8ae2:	f830 0012 	ldrheq.w	r0, [r0, r2, lsl #1]
    8ae6:	bd10      	popeq	{r4, pc}
    8ae8:	2912      	cmp	r1, #18
    8aea:	d00b      	beq.n	8b04 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x44>
    8aec:	e005      	b.n	8afa <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3a>
    8aee:	2915      	cmp	r1, #21
    8af0:	bf08      	it	eq
    8af2:	480a      	ldreq	r0, [pc, #40]	; (8b1c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x5c>)
    8af4:	d007      	beq.n	8b06 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x46>
    8af6:	291d      	cmp	r1, #29
    8af8:	d008      	beq.n	8b0c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x4c>
    8afa:	f44f 7181 	mov.w	r1, #258	; 0x102
    8afe:	202f      	movs	r0, #47	; 0x2f
    8b00:	f7fb fa1e 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b04:	4806      	ldr	r0, [pc, #24]	; (8b20 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x60>)
    8b06:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    8b0a:	bd10      	pop	{r4, pc}
    8b0c:	f240 315a 	movw	r1, #858	; 0x35a
    8b10:	fb10 f001 	smulbb	r0, r0, r1
    8b14:	bd10      	pop	{r4, pc}
    8b16:	0000      	.short	0x0000
    8b18:	0001234a 	.word	0x0001234a
    8b1c:	00012352 	.word	0x00012352
    8b20:	0001234e 	.word	0x0001234e

00008b24 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    8b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8b28:	2700      	movs	r7, #0
    8b2a:	b131      	cbz	r1, 8b3a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x16>
    8b2c:	2901      	cmp	r1, #1
    8b2e:	d078      	beq.n	8c22 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xfe>
    8b30:	f240 718b 	movw	r1, #1931	; 0x78b
    8b34:	2030      	movs	r0, #48	; 0x30
    8b36:	f7fb fa03 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b3a:	4604      	mov	r4, r0
    8b3c:	f890 00d9 	ldrb.w	r0, [r0, #217]	; 0xd9
    8b40:	2600      	movs	r6, #0
    8b42:	b140      	cbz	r0, 8b56 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x32>
    8b44:	483b      	ldr	r0, [pc, #236]	; (8c34 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x110>)
    8b46:	f7fe fd5d 	bl	7604 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>
    8b4a:	f242 7110 	movw	r1, #10000	; 0x2710
    8b4e:	fbb0 f2f1 	udiv	r2, r0, r1
    8b52:	fb01 0612 	mls	r6, r1, r2, r0
    8b56:	4620      	mov	r0, r4
    8b58:	f009 f9ef 	bl	11f3a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    8b5c:	1981      	adds	r1, r0, r6
    8b5e:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
    8b62:	f7f8 fd05 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8b66:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    8b6a:	f884 70f0 	strb.w	r7, [r4, #240]	; 0xf0
    8b6e:	f04f 0801 	mov.w	r8, #1
    8b72:	f884 80fb 	strb.w	r8, [r4, #251]	; 0xfb
    8b76:	2003      	movs	r0, #3
    8b78:	f884 00fa 	strb.w	r0, [r4, #250]	; 0xfa
    8b7c:	4620      	mov	r0, r4
    8b7e:	f009 fa84 	bl	1208a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    8b82:	2800      	cmp	r0, #0
    8b84:	bf08      	it	eq
    8b86:	256b      	moveq	r5, #107	; 0x6b
    8b88:	d017      	beq.n	8bba <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x96>
    8b8a:	4620      	mov	r0, r4
    8b8c:	f009 fa6f 	bl	1206e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    8b90:	b930      	cbnz	r0, 8ba0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x7c>
    8b92:	4620      	mov	r0, r4
    8b94:	f009 fa7d 	bl	12092 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    8b98:	2800      	cmp	r0, #0
    8b9a:	bf08      	it	eq
    8b9c:	2542      	moveq	r5, #66	; 0x42
    8b9e:	d000      	beq.n	8ba2 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x7e>
    8ba0:	2549      	movs	r5, #73	; 0x49
    8ba2:	f00b f8f7 	bl	13d94 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    8ba6:	b910      	cbnz	r0, 8bae <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x8a>
    8ba8:	f00b f8ea 	bl	13d80 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    8bac:	b100      	cbz	r0, 8bb0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x8c>
    8bae:	1ded      	adds	r5, r5, #7
    8bb0:	f7fa ff9a 	bl	3ae8 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    8bb4:	2800      	cmp	r0, #0
    8bb6:	bf18      	it	ne
    8bb8:	3518      	addne	r5, #24
    8bba:	f8a4 50f8 	strh.w	r5, [r4, #248]	; 0xf8
    8bbe:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
    8bc2:	bb08      	cbnz	r0, 8c08 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xe4>
    8bc4:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    8bc8:	b1b8      	cbz	r0, 8bfa <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xd6>
    8bca:	4620      	mov	r0, r4
    8bcc:	f009 f9b5 	bl	11f3a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    8bd0:	1985      	adds	r5, r0, r6
    8bd2:	4620      	mov	r0, r4
    8bd4:	f009 f9f0 	bl	11fb8 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    8bd8:	f200 1009 	addw	r0, r0, #265	; 0x109
    8bdc:	1941      	adds	r1, r0, r5
    8bde:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    8be2:	4288      	cmp	r0, r1
    8be4:	bf24      	itt	cs
    8be6:	1b41      	subcs	r1, r0, r5
    8be8:	f8c4 1104 	strcs.w	r1, [r4, #260]	; 0x104
    8bec:	d205      	bcs.n	8bfa <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xd6>
    8bee:	4620      	mov	r0, r4
    8bf0:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    8bf4:	f009 fa6c 	bl	120d0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    8bf8:	e006      	b.n	8c08 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xe4>
    8bfa:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
    8bfe:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
    8c02:	f7f8 fe2f 	bl	1864 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    8c06:	b138      	cbz	r0, 8c18 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xf4>
    8c08:	f8a4 7100 	strh.w	r7, [r4, #256]	; 0x100
    8c0c:	f005 ffe0 	bl	ebd0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8c10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8c14:	f7f9 bbc8 	b.w	23a8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8c18:	f240 61eb 	movw	r1, #1771	; 0x6eb
    8c1c:	2030      	movs	r0, #48	; 0x30
    8c1e:	f7fb f98f 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c22:	f880 70e0 	strb.w	r7, [r0, #224]	; 0xe0
    8c26:	f005 ffd3 	bl	ebd0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8c2e:	f7f9 bbbb 	b.w	23a8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8c32:	0000      	.short	0x0000
    8c34:	20000160 	.word	0x20000160

00008c38 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    8c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c3c:	4604      	mov	r4, r0
    8c3e:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
    8c42:	4616      	mov	r6, r2
    8c44:	460d      	mov	r5, r1
    8c46:	2800      	cmp	r0, #0
    8c48:	d13b      	bne.n	8cc2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x8a>
    8c4a:	4621      	mov	r1, r4
    8c4c:	4864      	ldr	r0, [pc, #400]	; (8de0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x1a8>)
    8c4e:	f7f9 fb83 	bl	2358 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    8c52:	2820      	cmp	r0, #32
    8c54:	d035      	beq.n	8cc2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x8a>
    8c56:	2700      	movs	r7, #0
    8c58:	f8c4 70d8 	str.w	r7, [r4, #216]	; 0xd8
    8c5c:	f8c4 70e0 	str.w	r7, [r4, #224]	; 0xe0
    8c60:	f8c4 70e4 	str.w	r7, [r4, #228]	; 0xe4
    8c64:	f8c4 70e8 	str.w	r7, [r4, #232]	; 0xe8
    8c68:	f8c4 70ec 	str.w	r7, [r4, #236]	; 0xec
    8c6c:	f8c4 70f0 	str.w	r7, [r4, #240]	; 0xf0
    8c70:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
    8c74:	f8c4 70f8 	str.w	r7, [r4, #248]	; 0xf8
    8c78:	f8c4 70fc 	str.w	r7, [r4, #252]	; 0xfc
    8c7c:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
    8c80:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
    8c84:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
    8c88:	f884 00d8 	strb.w	r0, [r4, #216]	; 0xd8
    8c8c:	f04f 0801 	mov.w	r8, #1
    8c90:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
    8c94:	f884 80ec 	strb.w	r8, [r4, #236]	; 0xec
    8c98:	b13d      	cbz	r5, 8caa <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x72>
    8c9a:	4852      	ldr	r0, [pc, #328]	; (8de4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x1ac>)
    8c9c:	f7fe fcb2 	bl	7604 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>
    8ca0:	f000 0007 	and.w	r0, r0, #7
    8ca4:	1c40      	adds	r0, r0, #1
    8ca6:	f885 0134 	strb.w	r0, [r5, #308]	; 0x134
    8caa:	4620      	mov	r0, r4
    8cac:	f009 f9ed 	bl	1208a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    8cb0:	2800      	cmp	r0, #0
    8cb2:	bf08      	it	eq
    8cb4:	256b      	moveq	r5, #107	; 0x6b
    8cb6:	d01b      	beq.n	8cf0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xb8>
    8cb8:	4620      	mov	r0, r4
    8cba:	f009 f9d8 	bl	1206e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    8cbe:	b118      	cbz	r0, 8cc8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x90>
    8cc0:	e009      	b.n	8cd6 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x9e>
    8cc2:	200c      	movs	r0, #12
    8cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8cc8:	4620      	mov	r0, r4
    8cca:	f009 f9e2 	bl	12092 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    8cce:	2800      	cmp	r0, #0
    8cd0:	bf08      	it	eq
    8cd2:	2542      	moveq	r5, #66	; 0x42
    8cd4:	d000      	beq.n	8cd8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xa0>
    8cd6:	2549      	movs	r5, #73	; 0x49
    8cd8:	f00b f85c 	bl	13d94 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    8cdc:	b910      	cbnz	r0, 8ce4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xac>
    8cde:	f00b f84f 	bl	13d80 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    8ce2:	b100      	cbz	r0, 8ce6 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xae>
    8ce4:	1ded      	adds	r5, r5, #7
    8ce6:	f7fa feff 	bl	3ae8 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    8cea:	2800      	cmp	r0, #0
    8cec:	bf18      	it	ne
    8cee:	3518      	addne	r5, #24
    8cf0:	f8a4 50f8 	strh.w	r5, [r4, #248]	; 0xf8
    8cf4:	2003      	movs	r0, #3
    8cf6:	f884 00fa 	strb.w	r0, [r4, #250]	; 0xfa
    8cfa:	f884 80fb 	strb.w	r8, [r4, #251]	; 0xfb
    8cfe:	f884 70f0 	strb.w	r7, [r4, #240]	; 0xf0
    8d02:	f7f8 fda5 	bl	1850 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    8d06:	4601      	mov	r1, r0
    8d08:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
    8d0c:	4281      	cmp	r1, r0
    8d0e:	bf88      	it	hi
    8d10:	4608      	movhi	r0, r1
    8d12:	f200 60bf 	addw	r0, r0, #1727	; 0x6bf
    8d16:	b285      	uxth	r5, r0
    8d18:	4620      	mov	r0, r4
    8d1a:	f009 f9b2 	bl	12082 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    8d1e:	b368      	cbz	r0, 8d7c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x144>
    8d20:	f00a ffd4 	bl	13ccc <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    8d24:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    8d28:	b281      	uxth	r1, r0
    8d2a:	4630      	mov	r0, r6
    8d2c:	f006 ff21 	bl	fb72 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8d30:	4430      	add	r0, r6
    8d32:	f8c4 00f4 	str.w	r0, [r4, #244]	; 0xf4
    8d36:	f006 fee8 	bl	fb0a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8d3a:	4629      	mov	r1, r5
    8d3c:	f7f8 fc18 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8d40:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    8d44:	f884 70d9 	strb.w	r7, [r4, #217]	; 0xd9
    8d48:	f884 80e0 	strb.w	r8, [r4, #224]	; 0xe0
    8d4c:	4620      	mov	r0, r4
    8d4e:	f009 f992 	bl	12076 <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ>
    8d52:	b140      	cbz	r0, 8d66 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x12e>
    8d54:	4620      	mov	r0, r4
    8d56:	f009 f92f 	bl	11fb8 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    8d5a:	f200 1009 	addw	r0, r0, #265	; 0x109
    8d5e:	1a30      	subs	r0, r6, r0
    8d60:	f5a0 707f 	sub.w	r0, r0, #1020	; 0x3fc
    8d64:	e005      	b.n	8d72 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13a>
    8d66:	2001      	movs	r0, #1
    8d68:	f009 fae8 	bl	1233c <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    8d6c:	f200 1009 	addw	r0, r0, #265	; 0x109
    8d70:	1a30      	subs	r0, r6, r0
    8d72:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
    8d76:	f8c4 00e4 	str.w	r0, [r4, #228]	; 0xe4
    8d7a:	e01c      	b.n	8db6 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x17e>
    8d7c:	4620      	mov	r0, r4
    8d7e:	f009 f91b 	bl	11fb8 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    8d82:	f200 1009 	addw	r0, r0, #265	; 0x109
    8d86:	f8c4 00f4 	str.w	r0, [r4, #244]	; 0xf4
    8d8a:	f884 80d9 	strb.w	r8, [r4, #217]	; 0xd9
    8d8e:	f006 febc 	bl	fb0a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8d92:	4680      	mov	r8, r0
    8d94:	4813      	ldr	r0, [pc, #76]	; (8de4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x1ac>)
    8d96:	f7fe fc35 	bl	7604 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>
    8d9a:	f242 7110 	movw	r1, #10000	; 0x2710
    8d9e:	fbb0 f2f1 	udiv	r2, r0, r1
    8da2:	fb01 0012 	mls	r0, r1, r2, r0
    8da6:	1941      	adds	r1, r0, r5
    8da8:	4640      	mov	r0, r8
    8daa:	f7f8 fbe1 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8dae:	f8c4 6104 	str.w	r6, [r4, #260]	; 0x104
    8db2:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    8db6:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
    8dba:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
    8dbe:	f7f8 fd51 	bl	1864 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    8dc2:	b140      	cbz	r0, 8dd6 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x19e>
    8dc4:	f8a4 7100 	strh.w	r7, [r4, #256]	; 0x100
    8dc8:	2100      	movs	r1, #0
    8dca:	4620      	mov	r0, r4
    8dcc:	f009 f97d 	bl	120ca <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8dd0:	2000      	movs	r0, #0
    8dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8dd6:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
    8dda:	2030      	movs	r0, #48	; 0x30
    8ddc:	f7fb f8b0 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8de0:	000123f9 	.word	0x000123f9
    8de4:	20000168 	.word	0x20000168

00008de8 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    8de8:	4808      	ldr	r0, [pc, #32]	; (8e0c <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
    8dea:	b510      	push	{r4, lr}
    8dec:	2100      	movs	r1, #0
    8dee:	7001      	strb	r1, [r0, #0]
    8df0:	2201      	movs	r2, #1
    8df2:	7082      	strb	r2, [r0, #2]
    8df4:	7041      	strb	r1, [r0, #1]
    8df6:	3018      	adds	r0, #24
    8df8:	f008 ff48 	bl	11c8c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    8dfc:	4804      	ldr	r0, [pc, #16]	; (8e10 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x28>)
    8dfe:	f008 ff45 	bl	11c8c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    8e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8e06:	f000 b805 	b.w	8e14 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    8e0a:	0000      	.short	0x0000
    8e0c:	20000148 	.word	0x20000148
    8e10:	20000168 	.word	0x20000168

00008e14 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    8e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e18:	b086      	sub	sp, #24
    8e1a:	4669      	mov	r1, sp
    8e1c:	2002      	movs	r0, #2
    8e1e:	f007 ffd2 	bl	10dc6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8e22:	b120      	cbz	r0, 8e2e <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1a>
    8e24:	f44f 71a1 	mov.w	r1, #322	; 0x142
    8e28:	2030      	movs	r0, #48	; 0x30
    8e2a:	f7fb f889 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e2e:	4668      	mov	r0, sp
    8e30:	f7fb facc 	bl	43cc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8e34:	2601      	movs	r6, #1
    8e36:	2500      	movs	r5, #0
    8e38:	bb10      	cbnz	r0, 8e80 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x6c>
    8e3a:	9c02      	ldr	r4, [sp, #8]
    8e3c:	f894 00ec 	ldrb.w	r0, [r4, #236]	; 0xec
    8e40:	b1c8      	cbz	r0, 8e76 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x62>
    8e42:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
    8e46:	2101      	movs	r1, #1
    8e48:	4620      	mov	r0, r4
    8e4a:	f009 f93e 	bl	120ca <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8e4e:	f894 00ec 	ldrb.w	r0, [r4, #236]	; 0xec
    8e52:	b180      	cbz	r0, 8e76 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x62>
    8e54:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
    8e58:	f7f9 f834 	bl	1ec4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    8e5c:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
    8e60:	f7f9 f96e 	bl	2140 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8e64:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
    8e68:	f7f9 f948 	bl	20fc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    8e6c:	2800      	cmp	r0, #0
    8e6e:	bf18      	it	ne
    8e70:	f884 50ec 	strbne.w	r5, [r4, #236]	; 0xec
    8e74:	d010      	beq.n	8e98 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x84>
    8e76:	4668      	mov	r0, sp
    8e78:	f7fb faa8 	bl	43cc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8e7c:	2800      	cmp	r0, #0
    8e7e:	d0dc      	beq.n	8e3a <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x26>
    8e80:	4f2c      	ldr	r7, [pc, #176]	; (8f34 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x120>)
    8e82:	707e      	strb	r6, [r7, #1]
    8e84:	a903      	add	r1, sp, #12
    8e86:	2001      	movs	r0, #1
    8e88:	f007 ff9d 	bl	10dc6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8e8c:	2800      	cmp	r0, #0
    8e8e:	bf08      	it	eq
    8e90:	f64f 76ff 	movweq	r6, #65535	; 0xffff
    8e94:	d02d      	beq.n	8ef2 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xde>
    8e96:	e027      	b.n	8ee8 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xd4>
    8e98:	f240 2103 	movw	r1, #515	; 0x203
    8e9c:	2030      	movs	r0, #48	; 0x30
    8e9e:	f7fb f84f 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ea2:	9805      	ldr	r0, [sp, #20]
    8ea4:	2800      	cmp	r0, #0
    8ea6:	bf1c      	itt	ne
    8ea8:	f890 1144 	ldrbne.w	r1, [r0, #324]	; 0x144
    8eac:	2900      	cmpne	r1, #0
    8eae:	d020      	beq.n	8ef2 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xde>
    8eb0:	8800      	ldrh	r0, [r0, #0]
    8eb2:	42b0      	cmp	r0, r6
    8eb4:	bf18      	it	ne
    8eb6:	f04f 0820 	movne.w	r8, #32
    8eba:	d035      	beq.n	8f28 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x114>
    8ebc:	2101      	movs	r1, #1
    8ebe:	f007 ff78 	bl	10db2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8ec2:	0004      	movs	r4, r0
    8ec4:	d01b      	beq.n	8efe <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xea>
    8ec6:	f894 0178 	ldrb.w	r0, [r4, #376]	; 0x178
    8eca:	f7f9 f939 	bl	2140 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8ece:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    8ed2:	f894 0178 	ldrb.w	r0, [r4, #376]	; 0x178
    8ed6:	f7f9 f911 	bl	20fc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    8eda:	f884 8178 	strb.w	r8, [r4, #376]	; 0x178
    8ede:	a903      	add	r1, sp, #12
    8ee0:	2001      	movs	r0, #1
    8ee2:	f007 ff70 	bl	10dc6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8ee6:	b1d0      	cbz	r0, 8f1e <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x10a>
    8ee8:	f44f 7187 	mov.w	r1, #270	; 0x10e
    8eec:	2030      	movs	r0, #48	; 0x30
    8eee:	f7fb f827 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ef2:	a803      	add	r0, sp, #12
    8ef4:	f7fb fa6a 	bl	43cc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8ef8:	2800      	cmp	r0, #0
    8efa:	d0d2      	beq.n	8ea2 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x8e>
    8efc:	e014      	b.n	8f28 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x114>
    8efe:	f44f 7197 	mov.w	r1, #302	; 0x12e
    8f02:	2030      	movs	r0, #48	; 0x30
    8f04:	f7fb f81c 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f08:	9805      	ldr	r0, [sp, #20]
    8f0a:	2800      	cmp	r0, #0
    8f0c:	bf1c      	itt	ne
    8f0e:	f890 1144 	ldrbne.w	r1, [r0, #324]	; 0x144
    8f12:	2900      	cmpne	r1, #0
    8f14:	d003      	beq.n	8f1e <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x10a>
    8f16:	8800      	ldrh	r0, [r0, #0]
    8f18:	42b0      	cmp	r0, r6
    8f1a:	d1cf      	bne.n	8ebc <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xa8>
    8f1c:	e004      	b.n	8f28 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x114>
    8f1e:	a803      	add	r0, sp, #12
    8f20:	f7fb fa54 	bl	43cc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8f24:	2800      	cmp	r0, #0
    8f26:	d0ef      	beq.n	8f08 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xf4>
    8f28:	707d      	strb	r5, [r7, #1]
    8f2a:	b006      	add	sp, #24
    8f2c:	2000      	movs	r0, #0
    8f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8f32:	0000      	.short	0x0000
    8f34:	20000148 	.word	0x20000148

00008f38 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    8f38:	4901      	ldr	r1, [pc, #4]	; (8f40 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    8f3a:	7008      	strb	r0, [r1, #0]
    8f3c:	4770      	bx	lr
    8f3e:	0000      	.short	0x0000
    8f40:	20000148 	.word	0x20000148

00008f44 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    8f44:	4905      	ldr	r1, [pc, #20]	; (8f5c <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x18>)
    8f46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8f4a:	fbb1 f1f2 	udiv	r1, r1, r2
    8f4e:	b510      	push	{r4, lr}
    8f50:	f201 11d7 	addw	r1, r1, #471	; 0x1d7
    8f54:	f008 fe8f 	bl	11c76 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    8f58:	b280      	uxth	r0, r0
    8f5a:	bd10      	pop	{r4, pc}
    8f5c:	0001527d 	.word	0x0001527d

00008f60 <sym_JH5ADKYUIEBFPMKUMAVM7RVFHSJKEQWWRBLQ2AQ>:
    8f60:	b510      	push	{r4, lr}
    8f62:	4c11      	ldr	r4, [pc, #68]	; (8fa8 <sym_JH5ADKYUIEBFPMKUMAVM7RVFHSJKEQWWRBLQ2AQ+0x48>)
    8f64:	6862      	ldr	r2, [r4, #4]
    8f66:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
    8f6a:	2a03      	cmp	r2, #3
    8f6c:	d004      	beq.n	8f78 <sym_JH5ADKYUIEBFPMKUMAVM7RVFHSJKEQWWRBLQ2AQ+0x18>
    8f6e:	f640 3191 	movw	r1, #2961	; 0xb91
    8f72:	2032      	movs	r0, #50	; 0x32
    8f74:	f7fa ffe4 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f78:	2802      	cmp	r0, #2
    8f7a:	bf18      	it	ne
    8f7c:	2803      	cmpne	r0, #3
    8f7e:	d005      	beq.n	8f8c <sym_JH5ADKYUIEBFPMKUMAVM7RVFHSJKEQWWRBLQ2AQ+0x2c>
    8f80:	f640 319f 	movw	r1, #2975	; 0xb9f
    8f84:	f04f 0032 	mov.w	r0, #50	; 0x32
    8f88:	f7fa ffda 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f8c:	2900      	cmp	r1, #0
    8f8e:	bf18      	it	ne
    8f90:	f001 fbf0 	blne	a774 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y>
    8f94:	2000      	movs	r0, #0
    8f96:	6861      	ldr	r1, [r4, #4]
    8f98:	f8a1 00a2 	strh.w	r0, [r1, #162]	; 0xa2
    8f9c:	f881 00a4 	strb.w	r0, [r1, #164]	; 0xa4
    8fa0:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    8fa4:	bd10      	pop	{r4, pc}
    8fa6:	0000      	.short	0x0000
    8fa8:	20000170 	.word	0x20000170

00008fac <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    8fac:	4801      	ldr	r0, [pc, #4]	; (8fb4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    8fae:	6840      	ldr	r0, [r0, #4]
    8fb0:	30a0      	adds	r0, #160	; 0xa0
    8fb2:	4770      	bx	lr
    8fb4:	20000170 	.word	0x20000170

00008fb8 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    8fb8:	b570      	push	{r4, r5, r6, lr}
    8fba:	4c34      	ldr	r4, [pc, #208]	; (908c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0xd4>)
    8fbc:	6861      	ldr	r1, [r4, #4]
    8fbe:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
    8fc2:	2800      	cmp	r0, #0
    8fc4:	bf16      	itet	ne
    8fc6:	2802      	cmpne	r0, #2
    8fc8:	2000      	moveq	r0, #0
    8fca:	2001      	movne	r0, #1
    8fcc:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
    8fd0:	f101 0132 	add.w	r1, r1, #50	; 0x32
    8fd4:	f7fb ff38 	bl	4e48 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    8fd8:	6860      	ldr	r0, [r4, #4]
    8fda:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
    8fde:	2902      	cmp	r1, #2
    8fe0:	bf16      	itet	ne
    8fe2:	2903      	cmpne	r1, #3
    8fe4:	2101      	moveq	r1, #1
    8fe6:	2100      	movne	r1, #0
    8fe8:	f880 106d 	strb.w	r1, [r0, #109]	; 0x6d
    8fec:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    8ff0:	f100 0332 	add.w	r3, r0, #50	; 0x32
    8ff4:	f04f 0500 	mov.w	r5, #0
    8ff8:	2a01      	cmp	r2, #1
    8ffa:	bf04      	itt	eq
    8ffc:	795b      	ldrbeq	r3, [r3, #5]
    8ffe:	f013 0fc0 	tsteq.w	r3, #192	; 0xc0
    9002:	d00a      	beq.n	901a <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x62>
    9004:	f100 0332 	add.w	r3, r0, #50	; 0x32
    9008:	2a01      	cmp	r2, #1
    900a:	d104      	bne.n	9016 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5e>
    900c:	795a      	ldrb	r2, [r3, #5]
    900e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    9012:	2a40      	cmp	r2, #64	; 0x40
    9014:	d001      	beq.n	901a <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x62>
    9016:	2200      	movs	r2, #0
    9018:	e000      	b.n	901c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x64>
    901a:	2201      	movs	r2, #1
    901c:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
    9020:	2a00      	cmp	r2, #0
    9022:	bf04      	itt	eq
    9024:	2900      	cmpeq	r1, #0
    9026:	bd70      	popeq	{r4, r5, r6, pc}
    9028:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    902c:	f006 fd6d 	bl	fb0a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    9030:	6861      	ldr	r1, [r4, #4]
    9032:	6448      	str	r0, [r1, #68]	; 0x44
    9034:	f891 006d 	ldrb.w	r0, [r1, #109]	; 0x6d
    9038:	2800      	cmp	r0, #0
    903a:	bf1c      	itt	ne
    903c:	2000      	movne	r0, #0
    903e:	f7fc fe8b 	blne	5d58 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    9042:	2600      	movs	r6, #0
    9044:	6860      	ldr	r0, [r4, #4]
    9046:	f890 104a 	ldrb.w	r1, [r0, #74]	; 0x4a
    904a:	2900      	cmp	r1, #0
    904c:	bf1a      	itte	ne
    904e:	f890 1049 	ldrbne.w	r1, [r0, #73]	; 0x49
    9052:	2900      	cmpne	r1, #0
    9054:	bd70      	popeq	{r4, r5, r6, pc}
    9056:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    905a:	f100 0132 	add.w	r1, r0, #50	; 0x32
    905e:	2a01      	cmp	r2, #1
    9060:	d104      	bne.n	906c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0xb4>
    9062:	7949      	ldrb	r1, [r1, #5]
    9064:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    9068:	2940      	cmp	r1, #64	; 0x40
    906a:	d005      	beq.n	9078 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0xc0>
    906c:	4629      	mov	r1, r5
    906e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9072:	3032      	adds	r0, #50	; 0x32
    9074:	f008 b839 	b.w	110ea <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    9078:	f7fc fe18 	bl	5cac <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    907c:	6861      	ldr	r1, [r4, #4]
    907e:	4632      	mov	r2, r6
    9080:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9084:	3132      	adds	r1, #50	; 0x32
    9086:	f008 b841 	b.w	1110c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    908a:	0000      	.short	0x0000
    908c:	20000170 	.word	0x20000170

00009090 <sym_E357R5GSET4BZKCOLPRJE7KKKMWMTNVTPX35LJQ>:
    9090:	4803      	ldr	r0, [pc, #12]	; (90a0 <sym_E357R5GSET4BZKCOLPRJE7KKKMWMTNVTPX35LJQ+0x10>)
    9092:	b510      	push	{r4, lr}
    9094:	6840      	ldr	r0, [r0, #4]
    9096:	3074      	adds	r0, #116	; 0x74
    9098:	f00a fe09 	bl	13cae <sym_YF4J4DGFDTHAWVS7CGH7Q6ZE54T3BMAUQX7A5ZA>
    909c:	2000      	movs	r0, #0
    909e:	bd10      	pop	{r4, pc}
    90a0:	20000170 	.word	0x20000170

000090a4 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q>:
    90a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    90a6:	4605      	mov	r5, r0
    90a8:	f001 fa74 	bl	a594 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>
    90ac:	2800      	cmp	r0, #0
    90ae:	d160      	bne.n	9172 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0xce>
    90b0:	4e31      	ldr	r6, [pc, #196]	; (9178 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0xd4>)
    90b2:	6871      	ldr	r1, [r6, #4]
    90b4:	f891 0022 	ldrb.w	r0, [r1, #34]	; 0x22
    90b8:	f88d 0000 	strb.w	r0, [sp]
    90bc:	f89d 0000 	ldrb.w	r0, [sp]
    90c0:	2701      	movs	r7, #1
    90c2:	2400      	movs	r4, #0
    90c4:	b140      	cbz	r0, 90d8 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x34>
    90c6:	706c      	strb	r4, [r5, #1]
    90c8:	2007      	movs	r0, #7
    90ca:	7028      	strb	r0, [r5, #0]
    90cc:	6a48      	ldr	r0, [r1, #36]	; 0x24
    90ce:	6068      	str	r0, [r5, #4]
    90d0:	f881 4022 	strb.w	r4, [r1, #34]	; 0x22
    90d4:	2001      	movs	r0, #1
    90d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    90d8:	7808      	ldrb	r0, [r1, #0]
    90da:	f88d 0000 	strb.w	r0, [sp]
    90de:	f89d 0000 	ldrb.w	r0, [sp]
    90e2:	2800      	cmp	r0, #0
    90e4:	d034      	beq.n	9150 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0xac>
    90e6:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    90e8:	688a      	ldr	r2, [r1, #8]
    90ea:	f8c0 2003 	str.w	r2, [r0, #3]
    90ee:	898a      	ldrh	r2, [r1, #12]
    90f0:	f8a0 2007 	strh.w	r2, [r0, #7]
    90f4:	79c8      	ldrb	r0, [r1, #7]
    90f6:	2800      	cmp	r0, #0
    90f8:	bf16      	itet	ne
    90fa:	2802      	cmpne	r0, #2
    90fc:	2000      	moveq	r0, #0
    90fe:	2001      	movne	r0, #1
    9100:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    9102:	f101 0102 	add.w	r1, r1, #2
    9106:	7090      	strb	r0, [r2, #2]
    9108:	706c      	strb	r4, [r5, #1]
    910a:	f04f 0014 	mov.w	r0, #20
    910e:	7028      	strb	r0, [r5, #0]
    9110:	f04f 0220 	mov.w	r2, #32
    9114:	f105 0004 	add.w	r0, r5, #4
    9118:	f006 fe6c 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    911c:	4917      	ldr	r1, [pc, #92]	; (917c <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0xd8>)
    911e:	722c      	strb	r4, [r5, #8]
    9120:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    9122:	f880 7078 	strb.w	r7, [r0, #120]	; 0x78
    9126:	6870      	ldr	r0, [r6, #4]
    9128:	7004      	strb	r4, [r0, #0]
    912a:	f100 0228 	add.w	r2, r0, #40	; 0x28
    912e:	7014      	strb	r4, [r2, #0]
    9130:	88ea      	ldrh	r2, [r5, #6]
    9132:	848a      	strh	r2, [r1, #36]	; 0x24
    9134:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    9136:	f892 208d 	ldrb.w	r2, [r2, #141]	; 0x8d
    913a:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
    913e:	f881 7022 	strb.w	r7, [r1, #34]	; 0x22
    9142:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    9144:	8800      	ldrh	r0, [r0, #0]
    9146:	f7fb fb4b 	bl	47e0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    914a:	f007 fcf2 	bl	10b32 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    914e:	e010      	b.n	9172 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0xce>
    9150:	f891 0028 	ldrb.w	r0, [r1, #40]	; 0x28
    9154:	f88d 0000 	strb.w	r0, [sp]
    9158:	f89d 0000 	ldrb.w	r0, [sp]
    915c:	2800      	cmp	r0, #0
    915e:	bf08      	it	eq
    9160:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    9162:	706c      	strb	r4, [r5, #1]
    9164:	2018      	movs	r0, #24
    9166:	7028      	strb	r0, [r5, #0]
    9168:	f8d1 002a 	ldr.w	r0, [r1, #42]	; 0x2a
    916c:	6068      	str	r0, [r5, #4]
    916e:	f881 4028 	strb.w	r4, [r1, #40]	; 0x28
    9172:	2001      	movs	r0, #1
    9174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9176:	0000      	.short	0x0000
    9178:	20000170 	.word	0x20000170
    917c:	20000f4c 	.word	0x20000f4c

00009180 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    9180:	480a      	ldr	r0, [pc, #40]	; (91ac <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    9182:	6840      	ldr	r0, [r0, #4]
    9184:	6d41      	ldr	r1, [r0, #84]	; 0x54
    9186:	2900      	cmp	r1, #0
    9188:	bf04      	itt	eq
    918a:	200c      	moveq	r0, #12
    918c:	4770      	bxeq	lr
    918e:	f100 0159 	add.w	r1, r0, #89	; 0x59
    9192:	2201      	movs	r2, #1
    9194:	700a      	strb	r2, [r1, #0]
    9196:	2300      	movs	r3, #0
    9198:	6543      	str	r3, [r0, #84]	; 0x54
    919a:	700b      	strb	r3, [r1, #0]
    919c:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    91a0:	4903      	ldr	r1, [pc, #12]	; (91b0 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x30>)
    91a2:	fa02 f000 	lsl.w	r0, r2, r0
    91a6:	6008      	str	r0, [r1, #0]
    91a8:	2000      	movs	r0, #0
    91aa:	4770      	bx	lr
    91ac:	20000170 	.word	0x20000170
    91b0:	4001f508 	.word	0x4001f508

000091b4 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    91b4:	490d      	ldr	r1, [pc, #52]	; (91ec <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x38>)
    91b6:	b510      	push	{r4, lr}
    91b8:	6088      	str	r0, [r1, #8]
    91ba:	68c8      	ldr	r0, [r1, #12]
    91bc:	b188      	cbz	r0, 91e2 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x2e>
    91be:	6848      	ldr	r0, [r1, #4]
    91c0:	2100      	movs	r1, #0
    91c2:	f8a0 10a2 	strh.w	r1, [r0, #162]	; 0xa2
    91c6:	f880 10a4 	strb.w	r1, [r0, #164]	; 0xa4
    91ca:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    91ce:	f000 f833 	bl	9238 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    91d2:	2800      	cmp	r0, #0
    91d4:	bf08      	it	eq
    91d6:	bd10      	popeq	{r4, pc}
    91d8:	f640 01f9 	movw	r1, #2297	; 0x8f9
    91dc:	2032      	movs	r0, #50	; 0x32
    91de:	f7fa feaf 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    91e2:	f640 01f5 	movw	r1, #2293	; 0x8f5
    91e6:	2032      	movs	r0, #50	; 0x32
    91e8:	f7fa feaa 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    91ec:	20000170 	.word	0x20000170

000091f0 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>:
    91f0:	4902      	ldr	r1, [pc, #8]	; (91fc <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0xc>)
    91f2:	4801      	ldr	r0, [pc, #4]	; (91f8 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0x8>)
    91f4:	60c8      	str	r0, [r1, #12]
    91f6:	4770      	bx	lr
    91f8:	0000a568 	.word	0x0000a568
    91fc:	20000170 	.word	0x20000170

00009200 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    9200:	b570      	push	{r4, r5, r6, lr}
    9202:	4604      	mov	r4, r0
    9204:	f7fb fbe8 	bl	49d8 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    9208:	4605      	mov	r5, r0
    920a:	f7fb fbdf 	bl	49cc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    920e:	4601      	mov	r1, r0
    9210:	4628      	mov	r0, r5
    9212:	f007 fd17 	bl	10c44 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    9216:	0001      	movs	r1, r0
    9218:	d006      	beq.n	9228 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x28>
    921a:	4806      	ldr	r0, [pc, #24]	; (9234 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x34>)
    921c:	68c0      	ldr	r0, [r0, #12]
    921e:	6802      	ldr	r2, [r0, #0]
    9220:	4620      	mov	r0, r4
    9222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9226:	4710      	bx	r2
    9228:	f640 11f2 	movw	r1, #2546	; 0x9f2
    922c:	2032      	movs	r0, #50	; 0x32
    922e:	f7fa fe87 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9232:	0000      	.short	0x0000
    9234:	20000170 	.word	0x20000170

00009238 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    9238:	b570      	push	{r4, r5, r6, lr}
    923a:	4d21      	ldr	r5, [pc, #132]	; (92c0 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x88>)
    923c:	6868      	ldr	r0, [r5, #4]
    923e:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    9242:	2901      	cmp	r1, #1
    9244:	bf1f      	itttt	ne
    9246:	f890 0060 	ldrbne.w	r0, [r0, #96]	; 0x60
    924a:	2800      	cmpne	r0, #0
    924c:	200c      	movne	r0, #12
    924e:	bd70      	popne	{r4, r5, r6, pc}
    9250:	f7fb fbe6 	bl	4a20 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    9254:	f001 fa6a 	bl	a72c <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>
    9258:	6869      	ldr	r1, [r5, #4]
    925a:	2400      	movs	r4, #0
    925c:	700c      	strb	r4, [r1, #0]
    925e:	f101 0022 	add.w	r0, r1, #34	; 0x22
    9262:	7004      	strb	r4, [r0, #0]
    9264:	1d80      	adds	r0, r0, #6
    9266:	7004      	strb	r4, [r0, #0]
    9268:	f891 006c 	ldrb.w	r0, [r1, #108]	; 0x6c
    926c:	b130      	cbz	r0, 927c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x44>
    926e:	f005 f81b 	bl	e2a8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    9272:	f004 fd75 	bl	dd60 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    9276:	6868      	ldr	r0, [r5, #4]
    9278:	f880 406c 	strb.w	r4, [r0, #108]	; 0x6c
    927c:	6868      	ldr	r0, [r5, #4]
    927e:	2201      	movs	r2, #1
    9280:	2107      	movs	r1, #7
    9282:	f880 404a 	strb.w	r4, [r0, #74]	; 0x4a
    9286:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    928a:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    928e:	f880 406a 	strb.w	r4, [r0, #106]	; 0x6a
    9292:	f880 404b 	strb.w	r4, [r0, #75]	; 0x4b
    9296:	f880 4094 	strb.w	r4, [r0, #148]	; 0x94
    929a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    929e:	f100 0159 	add.w	r1, r0, #89	; 0x59
    92a2:	700a      	strb	r2, [r1, #0]
    92a4:	f880 4058 	strb.w	r4, [r0, #88]	; 0x58
    92a8:	6544      	str	r4, [r0, #84]	; 0x54
    92aa:	700c      	strb	r4, [r1, #0]
    92ac:	f880 4097 	strb.w	r4, [r0, #151]	; 0x97
    92b0:	f880 4098 	strb.w	r4, [r0, #152]	; 0x98
    92b4:	3140      	adds	r1, #64	; 0x40
    92b6:	700c      	strb	r4, [r1, #0]
    92b8:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
    92bc:	2000      	movs	r0, #0
    92be:	bd70      	pop	{r4, r5, r6, pc}
    92c0:	20000170 	.word	0x20000170

000092c4 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    92c4:	4805      	ldr	r0, [pc, #20]	; (92dc <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    92c6:	6840      	ldr	r0, [r0, #4]
    92c8:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    92cc:	2800      	cmp	r0, #0
    92ce:	bf16      	itet	ne
    92d0:	2802      	cmpne	r0, #2
    92d2:	2000      	moveq	r0, #0
    92d4:	2001      	movne	r0, #1
    92d6:	f7fb bde5 	b.w	4ea4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    92da:	0000      	.short	0x0000
    92dc:	20000170 	.word	0x20000170

000092e0 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    92e0:	7801      	ldrb	r1, [r0, #0]
    92e2:	2200      	movs	r2, #0
    92e4:	f011 0f01 	tst.w	r1, #1
    92e8:	4923      	ldr	r1, [pc, #140]	; (9378 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x98>)
    92ea:	6849      	ldr	r1, [r1, #4]
    92ec:	d009      	beq.n	9302 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x22>
    92ee:	7842      	ldrb	r2, [r0, #1]
    92f0:	2300      	movs	r3, #0
    92f2:	2a03      	cmp	r2, #3
    92f4:	bf08      	it	eq
    92f6:	63cb      	streq	r3, [r1, #60]	; 0x3c
    92f8:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
    92fc:	2201      	movs	r2, #1
    92fe:	f881 20a6 	strb.w	r2, [r1, #166]	; 0xa6
    9302:	7803      	ldrb	r3, [r0, #0]
    9304:	f013 0f02 	tst.w	r3, #2
    9308:	d00e      	beq.n	9328 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x48>
    930a:	7883      	ldrb	r3, [r0, #2]
    930c:	f04f 0c00 	mov.w	ip, #0
    9310:	2b03      	cmp	r3, #3
    9312:	bf08      	it	eq
    9314:	f8c1 c03c 	streq.w	ip, [r1, #60]	; 0x3c
    9318:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
    931c:	2302      	movs	r3, #2
    931e:	eb01 0c02 	add.w	ip, r1, r2
    9322:	1c52      	adds	r2, r2, #1
    9324:	f88c 30a6 	strb.w	r3, [ip, #166]	; 0xa6
    9328:	7803      	ldrb	r3, [r0, #0]
    932a:	f013 0f04 	tst.w	r3, #4
    932e:	d00c      	beq.n	934a <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x6a>
    9330:	78c3      	ldrb	r3, [r0, #3]
    9332:	f04f 0c00 	mov.w	ip, #0
    9336:	2b03      	cmp	r3, #3
    9338:	bf08      	it	eq
    933a:	f8c1 c03c 	streq.w	ip, [r1, #60]	; 0x3c
    933e:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
    9342:	440a      	add	r2, r1
    9344:	2308      	movs	r3, #8
    9346:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
    934a:	7902      	ldrb	r2, [r0, #4]
    934c:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
    9350:	7942      	ldrb	r2, [r0, #5]
    9352:	2a00      	cmp	r2, #0
    9354:	bf16      	itet	ne
    9356:	2a02      	cmpne	r2, #2
    9358:	2301      	moveq	r3, #1
    935a:	2300      	movne	r3, #0
    935c:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
    9360:	f881 2041 	strb.w	r2, [r1, #65]	; 0x41
    9364:	7982      	ldrb	r2, [r0, #6]
    9366:	f881 2038 	strb.w	r2, [r1, #56]	; 0x38
    936a:	79c0      	ldrb	r0, [r0, #7]
    936c:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
    9370:	f04f 0000 	mov.w	r0, #0
    9374:	4770      	bx	lr
    9376:	0000      	.short	0x0000
    9378:	20000170 	.word	0x20000170

0000937c <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    937c:	4801      	ldr	r0, [pc, #4]	; (9384 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    937e:	68c0      	ldr	r0, [r0, #12]
    9380:	6840      	ldr	r0, [r0, #4]
    9382:	4700      	bx	r0
    9384:	20000170 	.word	0x20000170

00009388 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    9388:	b538      	push	{r3, r4, r5, lr}
    938a:	4c14      	ldr	r4, [pc, #80]	; (93dc <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x54>)
    938c:	2200      	movs	r2, #0
    938e:	6860      	ldr	r0, [r4, #4]
    9390:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
    9394:	f88d 1000 	strb.w	r1, [sp]
    9398:	f89d 1000 	ldrb.w	r1, [sp]
    939c:	b931      	cbnz	r1, 93ac <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x24>
    939e:	6d41      	ldr	r1, [r0, #84]	; 0x54
    93a0:	2900      	cmp	r1, #0
    93a2:	bf1c      	itt	ne
    93a4:	f890 0058 	ldrbne.w	r0, [r0, #88]	; 0x58
    93a8:	f7f9 f996 	blne	26d8 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    93ac:	6860      	ldr	r0, [r4, #4]
    93ae:	2500      	movs	r5, #0
    93b0:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    93b4:	b130      	cbz	r0, 93c4 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x3c>
    93b6:	f004 ff77 	bl	e2a8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    93ba:	f004 fcd1 	bl	dd60 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    93be:	6860      	ldr	r0, [r4, #4]
    93c0:	f880 506c 	strb.w	r5, [r0, #108]	; 0x6c
    93c4:	6860      	ldr	r0, [r4, #4]
    93c6:	f8a0 50a2 	strh.w	r5, [r0, #162]	; 0xa2
    93ca:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
    93ce:	f880 5060 	strb.w	r5, [r0, #96]	; 0x60
    93d2:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    93d6:	2000      	movs	r0, #0
    93d8:	bd38      	pop	{r3, r4, r5, pc}
    93da:	0000      	.short	0x0000
    93dc:	20000170 	.word	0x20000170

000093e0 <sym_YAXRHPGUPFCJO4WSKQPZEO436Y5T46SXRHLZXQQ>:
    93e0:	4804      	ldr	r0, [pc, #16]	; (93f4 <sym_YAXRHPGUPFCJO4WSKQPZEO436Y5T46SXRHLZXQQ+0x14>)
    93e2:	b081      	sub	sp, #4
    93e4:	f890 0099 	ldrb.w	r0, [r0, #153]	; 0x99
    93e8:	f88d 0000 	strb.w	r0, [sp]
    93ec:	f89d 0000 	ldrb.w	r0, [sp]
    93f0:	b001      	add	sp, #4
    93f2:	4770      	bx	lr
    93f4:	20000f4c 	.word	0x20000f4c

000093f8 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    93f8:	4809      	ldr	r0, [pc, #36]	; (9420 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x28>)
    93fa:	2101      	movs	r1, #1
    93fc:	6840      	ldr	r0, [r0, #4]
    93fe:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    9402:	2a03      	cmp	r2, #3
    9404:	bf03      	ittte	eq
    9406:	f880 102a 	strbeq.w	r1, [r0, #42]	; 0x2a
    940a:	6bc2      	ldreq	r2, [r0, #60]	; 0x3c
    940c:	8812      	ldrheq	r2, [r2, #0]
    940e:	2200      	movne	r2, #0
    9410:	bf18      	it	ne
    9412:	f880 202a 	strbne.w	r2, [r0, #42]	; 0x2a
    9416:	8582      	strh	r2, [r0, #44]	; 0x2c
    9418:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    941c:	4770      	bx	lr
    941e:	0000      	.short	0x0000
    9420:	20000170 	.word	0x20000170

00009424 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    9424:	4802      	ldr	r0, [pc, #8]	; (9430 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    9426:	6840      	ldr	r0, [r0, #4]
    9428:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    942c:	4770      	bx	lr
    942e:	0000      	.short	0x0000
    9430:	20000170 	.word	0x20000170

00009434 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    9434:	480c      	ldr	r0, [pc, #48]	; (9468 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>)
    9436:	6841      	ldr	r1, [r0, #4]
    9438:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
    943c:	2803      	cmp	r0, #3
    943e:	d004      	beq.n	944a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    9440:	2801      	cmp	r0, #1
    9442:	bf18      	it	ne
    9444:	2802      	cmpne	r0, #2
    9446:	d007      	beq.n	9458 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    9448:	e004      	b.n	9454 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
    944a:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    944e:	2801      	cmp	r0, #1
    9450:	bf08      	it	eq
    9452:	4770      	bxeq	lr
    9454:	2000      	movs	r0, #0
    9456:	4770      	bx	lr
    9458:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
    945c:	2801      	cmp	r0, #1
    945e:	bf14      	ite	ne
    9460:	2803      	cmpne	r0, #3
    9462:	2001      	moveq	r0, #1
    9464:	d1f6      	bne.n	9454 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
    9466:	4770      	bx	lr
    9468:	20000170 	.word	0x20000170
    946c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9470:	4e1d      	ldr	r6, [pc, #116]	; (94e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb4>)
    9472:	4605      	mov	r5, r0
    9474:	460f      	mov	r7, r1
    9476:	6870      	ldr	r0, [r6, #4]
    9478:	491c      	ldr	r1, [pc, #112]	; (94ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb8>)
    947a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    947e:	5c0c      	ldrb	r4, [r1, r0]
    9480:	4620      	mov	r0, r4
    9482:	f005 ffdf 	bl	f444 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    9486:	6870      	ldr	r0, [r6, #4]
    9488:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
    948c:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    9490:	30a6      	adds	r0, #166	; 0xa6
    9492:	5c0c      	ldrb	r4, [r1, r0]
    9494:	2c01      	cmp	r4, #1
    9496:	bf08      	it	eq
    9498:	2025      	moveq	r0, #37	; 0x25
    949a:	d00e      	beq.n	94ba <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x86>
    949c:	2c02      	cmp	r4, #2
    949e:	bf08      	it	eq
    94a0:	200d      	moveq	r0, #13
    94a2:	d00a      	beq.n	94ba <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x86>
    94a4:	2c04      	cmp	r4, #4
    94a6:	bf14      	ite	ne
    94a8:	2c08      	cmpne	r4, #8
    94aa:	200f      	moveq	r0, #15
    94ac:	d005      	beq.n	94ba <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x86>
    94ae:	f640 0164 	movw	r1, #2148	; 0x864
    94b2:	f04f 0032 	mov.w	r0, #50	; 0x32
    94b6:	f7fa fd43 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    94ba:	4621      	mov	r1, r4
    94bc:	f005 ff9e 	bl	f3fc <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    94c0:	4638      	mov	r0, r7
    94c2:	f005 fc69 	bl	ed98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    94c6:	4621      	mov	r1, r4
    94c8:	f04f 0001 	mov.w	r0, #1
    94cc:	b135      	cbz	r5, 94dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa8>
    94ce:	f005 f89b 	bl	e608 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    94d2:	2800      	cmp	r0, #0
    94d4:	bf08      	it	eq
    94d6:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    94da:	e001      	b.n	94e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac>
    94dc:	f004 ff70 	bl	e3c0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    94e0:	2001      	movs	r0, #1
    94e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    94e6:	0000      	.short	0x0000
    94e8:	20000170 	.word	0x20000170
    94ec:	00013f70 	.word	0x00013f70
    94f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    94f4:	4c73      	ldr	r4, [pc, #460]	; (96c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x290>)
    94f6:	460f      	mov	r7, r1
    94f8:	4606      	mov	r6, r0
    94fa:	6840      	ldr	r0, [r0, #4]
    94fc:	6861      	ldr	r1, [r4, #4]
    94fe:	4690      	mov	r8, r2
    9500:	f04f 0a01 	mov.w	sl, #1
    9504:	2f07      	cmp	r7, #7
    9506:	bf04      	itt	eq
    9508:	2800      	cmpeq	r0, #0
    950a:	f1b8 0f00 	cmpeq.w	r8, #0
    950e:	d00a      	beq.n	9526 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf2>
    9510:	f04f 0900 	mov.w	r9, #0
    9514:	f88d 9000 	strb.w	r9, [sp]
    9518:	46eb      	mov	fp, sp
    951a:	2800      	cmp	r0, #0
    951c:	d07a      	beq.n	9614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1e0>
    951e:	7c72      	ldrb	r2, [r6, #17]
    9520:	2a01      	cmp	r2, #1
    9522:	d011      	beq.n	9548 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x114>
    9524:	e017      	b.n	9556 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x122>
    9526:	f881 a072 	strb.w	sl, [r1, #114]	; 0x72
    952a:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    952e:	2800      	cmp	r0, #0
    9530:	bf08      	it	eq
    9532:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9536:	f00a fbe7 	bl	13d08 <sym_CHKVBDUTUU4O3LETUIMPAGLWTVUWNF36L7OTJNI>
    953a:	2800      	cmp	r0, #0
    953c:	bf1c      	itt	ne
    953e:	6860      	ldrne	r0, [r4, #4]
    9540:	f880 a073 	strbne.w	sl, [r0, #115]	; 0x73
    9544:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9548:	7942      	ldrb	r2, [r0, #5]
    954a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    954e:	2a40      	cmp	r2, #64	; 0x40
    9550:	bf08      	it	eq
    9552:	2501      	moveq	r5, #1
    9554:	d000      	beq.n	9558 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x124>
    9556:	2500      	movs	r5, #0
    9558:	2f07      	cmp	r7, #7
    955a:	d128      	bne.n	95ae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x17a>
    955c:	f891 206c 	ldrb.w	r2, [r1, #108]	; 0x6c
    9560:	2a00      	cmp	r2, #0
    9562:	bf18      	it	ne
    9564:	2d00      	cmpne	r5, #0
    9566:	d011      	beq.n	958c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x158>
    9568:	f1b8 0f00 	cmp.w	r8, #0
    956c:	bf04      	itt	eq
    956e:	f891 10a1 	ldrbeq.w	r1, [r1, #161]	; 0xa1
    9572:	2901      	cmpeq	r1, #1
    9574:	d015      	beq.n	95a2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16e>
    9576:	bf00      	nop
    9578:	f007 fe34 	bl	111e4 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    957c:	4601      	mov	r1, r0
    957e:	6860      	ldr	r0, [r4, #4]
    9580:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    9584:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
    9588:	f880 a070 	strb.w	sl, [r0, #112]	; 0x70
    958c:	6860      	ldr	r0, [r4, #4]
    958e:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
    9592:	29ff      	cmp	r1, #255	; 0xff
    9594:	d013      	beq.n	95be <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x18a>
    9596:	4608      	mov	r0, r1
    9598:	f7fc fcce 	bl	5f38 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    959c:	f88d 0000 	strb.w	r0, [sp]
    95a0:	e038      	b.n	9614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1e0>
    95a2:	2101      	movs	r1, #1
    95a4:	f7fc fc8e 	bl	5ec4 <sym_CMDXCVZHYNPLMTHXOO2UL3QOD6EXLAZP5GS7LRI>
    95a8:	6861      	ldr	r1, [r4, #4]
    95aa:	f881 006c 	strb.w	r0, [r1, #108]	; 0x6c
    95ae:	6860      	ldr	r0, [r4, #4]
    95b0:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    95b4:	2800      	cmp	r0, #0
    95b6:	bf18      	it	ne
    95b8:	2d00      	cmpne	r5, #0
    95ba:	d0e7      	beq.n	958c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x158>
    95bc:	e7dc      	b.n	9578 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x144>
    95be:	f896 c011 	ldrb.w	ip, [r6, #17]
    95c2:	f100 0368 	add.w	r3, r0, #104	; 0x68
    95c6:	465a      	mov	r2, fp
    95c8:	4660      	mov	r0, ip
    95ca:	6871      	ldr	r1, [r6, #4]
    95cc:	f7fc fe2c 	bl	6228 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    95d0:	f090 0f01 	teq	r0, #1
    95d4:	d01e      	beq.n	9614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1e0>
    95d6:	6860      	ldr	r0, [r4, #4]
    95d8:	f880 9072 	strb.w	r9, [r0, #114]	; 0x72
    95dc:	f880 9073 	strb.w	r9, [r0, #115]	; 0x73
    95e0:	f04f 0200 	mov.w	r2, #0
    95e4:	68b0      	ldr	r0, [r6, #8]
    95e6:	2800      	cmp	r0, #0
    95e8:	bf08      	it	eq
    95ea:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    95ee:	2f07      	cmp	r7, #7
    95f0:	bf18      	it	ne
    95f2:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    95f6:	6861      	ldr	r1, [r4, #4]
    95f8:	f891 1068 	ldrb.w	r1, [r1, #104]	; 0x68
    95fc:	29ff      	cmp	r1, #255	; 0xff
    95fe:	bf14      	ite	ne
    9600:	2a00      	cmpne	r2, #0
    9602:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9606:	f7fc fdeb 	bl	61e0 <sym_NILI2ETYIVMR32XQ6WFMUWXYMXNONBSH2DACBCQ>
    960a:	6860      	ldr	r0, [r4, #4]
    960c:	f880 a071 	strb.w	sl, [r0, #113]	; 0x71
    9610:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9614:	6861      	ldr	r1, [r4, #4]
    9616:	f89d 0000 	ldrb.w	r0, [sp]
    961a:	2f07      	cmp	r7, #7
    961c:	f891 5039 	ldrb.w	r5, [r1, #57]	; 0x39
    9620:	d309      	bcc.n	9636 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x202>
    9622:	2f08      	cmp	r7, #8
    9624:	d829      	bhi.n	967a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x246>
    9626:	f1b8 0f00 	cmp.w	r8, #0
    962a:	d002      	beq.n	9632 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fe>
    962c:	f891 1072 	ldrb.w	r1, [r1, #114]	; 0x72
    9630:	b319      	cbz	r1, 967a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x246>
    9632:	6871      	ldr	r1, [r6, #4]
    9634:	b119      	cbz	r1, 963e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    9636:	2d00      	cmp	r5, #0
    9638:	bf08      	it	eq
    963a:	4605      	moveq	r5, r0
    963c:	e01e      	b.n	967c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    963e:	f1b8 0f00 	cmp.w	r8, #0
    9642:	d105      	bne.n	9650 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x21c>
    9644:	7870      	ldrb	r0, [r6, #1]
    9646:	f010 0f10 	tst.w	r0, #16
    964a:	bf18      	it	ne
    964c:	4655      	movne	r5, sl
    964e:	d115      	bne.n	967c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    9650:	f008 ffcb 	bl	125ea <sym_5ATVDULIG6DGCAQSRDHXRO37ITSFNT7QVD7OMTQ>
    9654:	b130      	cbz	r0, 9664 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x230>
    9656:	6860      	ldr	r0, [r4, #4]
    9658:	f890 0072 	ldrb.w	r0, [r0, #114]	; 0x72
    965c:	2800      	cmp	r0, #0
    965e:	bf18      	it	ne
    9660:	2001      	movne	r0, #1
    9662:	d100      	bne.n	9666 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x232>
    9664:	2000      	movs	r0, #0
    9666:	4328      	orrs	r0, r5
    9668:	d105      	bne.n	9676 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x242>
    966a:	f7fc fe69 	bl	6340 <sym_WPF5GN3T7F3CCL7OKOL6G2LW47JA44MC6XIU4NQ>
    966e:	2800      	cmp	r0, #0
    9670:	bf08      	it	eq
    9672:	2500      	moveq	r5, #0
    9674:	d002      	beq.n	967c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    9676:	2501      	movs	r5, #1
    9678:	e000      	b.n	967c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    967a:	464d      	mov	r5, r9
    967c:	6860      	ldr	r0, [r4, #4]
    967e:	f880 5072 	strb.w	r5, [r0, #114]	; 0x72
    9682:	4811      	ldr	r0, [pc, #68]	; (96c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x294>)
    9684:	6802      	ldr	r2, [r0, #0]
    9686:	b12a      	cbz	r2, 9694 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x260>
    9688:	4641      	mov	r1, r8
    968a:	4630      	mov	r0, r6
    968c:	4790      	blx	r2
    968e:	6861      	ldr	r1, [r4, #4]
    9690:	f881 0073 	strb.w	r0, [r1, #115]	; 0x73
    9694:	6870      	ldr	r0, [r6, #4]
    9696:	b148      	cbz	r0, 96ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x278>
    9698:	6860      	ldr	r0, [r4, #4]
    969a:	7c71      	ldrb	r1, [r6, #17]
    969c:	f880 1083 	strb.w	r1, [r0, #131]	; 0x83
    96a0:	6871      	ldr	r1, [r6, #4]
    96a2:	680a      	ldr	r2, [r1, #0]
    96a4:	67c2      	str	r2, [r0, #124]	; 0x7c
    96a6:	8889      	ldrh	r1, [r1, #4]
    96a8:	f8a0 1080 	strh.w	r1, [r0, #128]	; 0x80
    96ac:	6860      	ldr	r0, [r4, #4]
    96ae:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
    96b2:	2900      	cmp	r1, #0
    96b4:	bf06      	itte	eq
    96b6:	f890 0072 	ldrbeq.w	r0, [r0, #114]	; 0x72
    96ba:	2800      	cmpeq	r0, #0
    96bc:	2201      	movne	r2, #1
    96be:	d191      	bne.n	95e4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b0>
    96c0:	e78e      	b.n	95e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ac>
    96c2:	0000      	.short	0x0000
    96c4:	20000170 	.word	0x20000170
    96c8:	20000180 	.word	0x20000180
    96cc:	b510      	push	{r4, lr}
    96ce:	480c      	ldr	r0, [pc, #48]	; (9700 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2cc>)
    96d0:	f005 fe24 	bl	f31c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    96d4:	4c0a      	ldr	r4, [pc, #40]	; (9700 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2cc>)
    96d6:	2800      	cmp	r0, #0
    96d8:	bf04      	itt	eq
    96da:	207f      	moveq	r0, #127	; 0x7f
    96dc:	7020      	strbeq	r0, [r4, #0]
    96de:	6860      	ldr	r0, [r4, #4]
    96e0:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    96e4:	b138      	cbz	r0, 96f6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c2>
    96e6:	f004 fddf 	bl	e2a8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    96ea:	f004 fb39 	bl	dd60 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    96ee:	6861      	ldr	r1, [r4, #4]
    96f0:	2000      	movs	r0, #0
    96f2:	f881 006c 	strb.w	r0, [r1, #108]	; 0x6c
    96f6:	f004 fdf7 	bl	e2e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    96fa:	2005      	movs	r0, #5
    96fc:	bd10      	pop	{r4, pc}
    96fe:	0000      	.short	0x0000
    9700:	20000170 	.word	0x20000170
    9704:	b510      	push	{r4, lr}
    9706:	4805      	ldr	r0, [pc, #20]	; (971c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2e8>)
    9708:	f005 fe08 	bl	f31c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    970c:	b910      	cbnz	r0, 9714 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2e0>
    970e:	4903      	ldr	r1, [pc, #12]	; (971c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2e8>)
    9710:	207f      	movs	r0, #127	; 0x7f
    9712:	7008      	strb	r0, [r1, #0]
    9714:	f004 fde8 	bl	e2e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    9718:	2005      	movs	r0, #5
    971a:	bd10      	pop	{r4, pc}
    971c:	20000170 	.word	0x20000170
    9720:	b570      	push	{r4, r5, r6, lr}
    9722:	4606      	mov	r6, r0
    9724:	b08a      	sub	sp, #40	; 0x28
    9726:	4814      	ldr	r0, [pc, #80]	; (9778 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x344>)
    9728:	f005 fdf8 	bl	f31c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    972c:	4d12      	ldr	r5, [pc, #72]	; (9778 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x344>)
    972e:	2800      	cmp	r0, #0
    9730:	bf04      	itt	eq
    9732:	207f      	moveq	r0, #127	; 0x7f
    9734:	7028      	strbeq	r0, [r5, #0]
    9736:	7830      	ldrb	r0, [r6, #0]
    9738:	4669      	mov	r1, sp
    973a:	f000 040f 	and.w	r4, r0, #15
    973e:	4622      	mov	r2, r4
    9740:	4630      	mov	r0, r6
    9742:	f001 f869 	bl	a818 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    9746:	2200      	movs	r2, #0
    9748:	4621      	mov	r1, r4
    974a:	4668      	mov	r0, sp
    974c:	f7ff fed0 	bl	94f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbc>
    9750:	4621      	mov	r1, r4
    9752:	4668      	mov	r0, sp
    9754:	f000 f9aa 	bl	9aac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x678>
    9758:	6869      	ldr	r1, [r5, #4]
    975a:	4604      	mov	r4, r0
    975c:	f891 106c 	ldrb.w	r1, [r1, #108]	; 0x6c
    9760:	b139      	cbz	r1, 9772 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x33e>
    9762:	f004 fda1 	bl	e2a8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    9766:	f004 fafb 	bl	dd60 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    976a:	6868      	ldr	r0, [r5, #4]
    976c:	2100      	movs	r1, #0
    976e:	f880 106c 	strb.w	r1, [r0, #108]	; 0x6c
    9772:	b00a      	add	sp, #40	; 0x28
    9774:	4620      	mov	r0, r4
    9776:	bd70      	pop	{r4, r5, r6, pc}
    9778:	20000170 	.word	0x20000170
    977c:	b570      	push	{r4, r5, r6, lr}
    977e:	7801      	ldrb	r1, [r0, #0]
    9780:	b08a      	sub	sp, #40	; 0x28
    9782:	f001 060f 	and.w	r6, r1, #15
    9786:	4632      	mov	r2, r6
    9788:	a901      	add	r1, sp, #4
    978a:	f001 f845 	bl	a818 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    978e:	9802      	ldr	r0, [sp, #8]
    9790:	4c28      	ldr	r4, [pc, #160]	; (9834 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x400>)
    9792:	7801      	ldrb	r1, [r0, #0]
    9794:	6860      	ldr	r0, [r4, #4]
    9796:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
    979a:	4291      	cmp	r1, r2
    979c:	d125      	bne.n	97ea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3b6>
    979e:	9902      	ldr	r1, [sp, #8]
    97a0:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    97a4:	7849      	ldrb	r1, [r1, #1]
    97a6:	4291      	cmp	r1, r2
    97a8:	d11f      	bne.n	97ea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3b6>
    97aa:	9902      	ldr	r1, [sp, #8]
    97ac:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    97b0:	7889      	ldrb	r1, [r1, #2]
    97b2:	4291      	cmp	r1, r2
    97b4:	d119      	bne.n	97ea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3b6>
    97b6:	9902      	ldr	r1, [sp, #8]
    97b8:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
    97bc:	78c9      	ldrb	r1, [r1, #3]
    97be:	4291      	cmp	r1, r2
    97c0:	d113      	bne.n	97ea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3b6>
    97c2:	9902      	ldr	r1, [sp, #8]
    97c4:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    97c8:	7909      	ldrb	r1, [r1, #4]
    97ca:	4291      	cmp	r1, r2
    97cc:	d10d      	bne.n	97ea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3b6>
    97ce:	9902      	ldr	r1, [sp, #8]
    97d0:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
    97d4:	7949      	ldrb	r1, [r1, #5]
    97d6:	4291      	cmp	r1, r2
    97d8:	d107      	bne.n	97ea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3b6>
    97da:	f89d 1015 	ldrb.w	r1, [sp, #21]
    97de:	f890 0083 	ldrb.w	r0, [r0, #131]	; 0x83
    97e2:	4281      	cmp	r1, r0
    97e4:	bf08      	it	eq
    97e6:	2501      	moveq	r5, #1
    97e8:	d000      	beq.n	97ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3b8>
    97ea:	2500      	movs	r5, #0
    97ec:	f004 fd7c 	bl	e2e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    97f0:	4810      	ldr	r0, [pc, #64]	; (9834 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x400>)
    97f2:	f005 fd93 	bl	f31c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    97f6:	217f      	movs	r1, #127	; 0x7f
    97f8:	2800      	cmp	r0, #0
    97fa:	bf08      	it	eq
    97fc:	7021      	strbeq	r1, [r4, #0]
    97fe:	2e04      	cmp	r6, #4
    9800:	d110      	bne.n	9824 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f0>
    9802:	b17d      	cbz	r5, 9824 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f0>
    9804:	f994 0000 	ldrsb.w	r0, [r4]
    9808:	287f      	cmp	r0, #127	; 0x7f
    980a:	d00e      	beq.n	982a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f6>
    980c:	7021      	strb	r1, [r4, #0]
    980e:	9000      	str	r0, [sp, #0]
    9810:	6860      	ldr	r0, [r4, #4]
    9812:	f890 3082 	ldrb.w	r3, [r0, #130]	; 0x82
    9816:	f890 2094 	ldrb.w	r2, [r0, #148]	; 0x94
    981a:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
    981e:	a801      	add	r0, sp, #4
    9820:	f008 ff8f 	bl	12742 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    9824:	b00a      	add	sp, #40	; 0x28
    9826:	2005      	movs	r0, #5
    9828:	bd70      	pop	{r4, r5, r6, pc}
    982a:	f240 319f 	movw	r1, #927	; 0x39f
    982e:	2032      	movs	r0, #50	; 0x32
    9830:	f7fa fb86 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9834:	20000170 	.word	0x20000170
    9838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    983c:	4c4c      	ldr	r4, [pc, #304]	; (9970 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x53c>)
    983e:	4606      	mov	r6, r0
    9840:	460f      	mov	r7, r1
    9842:	6860      	ldr	r0, [r4, #4]
    9844:	b083      	sub	sp, #12
    9846:	46e9      	mov	r9, sp
    9848:	7801      	ldrb	r1, [r0, #0]
    984a:	f88d 1008 	strb.w	r1, [sp, #8]
    984e:	f89d 1008 	ldrb.w	r1, [sp, #8]
    9852:	b121      	cbz	r1, 985e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x42a>
    9854:	f241 41b1 	movw	r1, #5297	; 0x14b1
    9858:	2032      	movs	r0, #50	; 0x32
    985a:	f7fa fb71 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    985e:	2500      	movs	r5, #0
    9860:	7085      	strb	r5, [r0, #2]
    9862:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    9864:	880a      	ldrh	r2, [r1, #0]
    9866:	8082      	strh	r2, [r0, #4]
    9868:	68c8      	ldr	r0, [r1, #12]
    986a:	f007 fcf5 	bl	11258 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    986e:	4601      	mov	r1, r0
    9870:	6860      	ldr	r0, [r4, #4]
    9872:	8341      	strh	r1, [r0, #26]
    9874:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    9876:	8a8a      	ldrh	r2, [r1, #20]
    9878:	8382      	strh	r2, [r0, #28]
    987a:	8ac9      	ldrh	r1, [r1, #22]
    987c:	83c1      	strh	r1, [r0, #30]
    987e:	f880 5020 	strb.w	r5, [r0, #32]
    9882:	b13e      	cbz	r6, 9894 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x460>
    9884:	2101      	movs	r1, #1
    9886:	4638      	mov	r0, r7
    9888:	f007 ff9b 	bl	117c2 <sym_6KYDR3JNRMNBZD2D4KUEK2GB4RCTCKOQRZV2E5Y>
    988c:	4681      	mov	r9, r0
    988e:	7838      	ldrb	r0, [r7, #0]
    9890:	09c0      	lsrs	r0, r0, #7
    9892:	e007      	b.n	98a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x470>
    9894:	4669      	mov	r1, sp
    9896:	68a0      	ldr	r0, [r4, #8]
    9898:	f007 fff2 	bl	11880 <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>
    989c:	68a0      	ldr	r0, [r4, #8]
    989e:	7800      	ldrb	r0, [r0, #0]
    98a0:	f3c0 1080 	ubfx	r0, r0, #6, #1
    98a4:	6861      	ldr	r1, [r4, #4]
    98a6:	f04f 0801 	mov.w	r8, #1
    98aa:	f891 206d 	ldrb.w	r2, [r1, #109]	; 0x6d
    98ae:	2a00      	cmp	r2, #0
    98b0:	bf18      	it	ne
    98b2:	2800      	cmpne	r0, #0
    98b4:	d005      	beq.n	98c2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x48e>
    98b6:	f899 2005 	ldrb.w	r2, [r9, #5]
    98ba:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    98be:	2a40      	cmp	r2, #64	; 0x40
    98c0:	d02d      	beq.n	991e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ea>
    98c2:	f891 204a 	ldrb.w	r2, [r1, #74]	; 0x4a
    98c6:	2a00      	cmp	r2, #0
    98c8:	bf18      	it	ne
    98ca:	2800      	cmpne	r0, #0
    98cc:	d004      	beq.n	98d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a4>
    98ce:	f899 0005 	ldrb.w	r0, [r9, #5]
    98d2:	f010 0fc0 	tst.w	r0, #192	; 0xc0
    98d6:	d022      	beq.n	991e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ea>
    98d8:	f101 000e 	add.w	r0, r1, #14
    98dc:	f00a fb36 	bl	13f4c <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
    98e0:	6860      	ldr	r0, [r4, #4]
    98e2:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
    98e6:	2bff      	cmp	r3, #255	; 0xff
    98e8:	d026      	beq.n	9938 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x504>
    98ea:	f100 0208 	add.w	r2, r0, #8
    98ee:	1dc1      	adds	r1, r0, #7
    98f0:	4618      	mov	r0, r3
    98f2:	f7fc fb07 	bl	5f04 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    98f6:	b1d0      	cbz	r0, 992e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4fa>
    98f8:	6860      	ldr	r0, [r4, #4]
    98fa:	2e00      	cmp	r6, #0
    98fc:	79c1      	ldrb	r1, [r0, #7]
    98fe:	f041 0102 	orr.w	r1, r1, #2
    9902:	71c1      	strb	r1, [r0, #7]
    9904:	bf08      	it	eq
    9906:	307c      	addeq	r0, #124	; 0x7c
    9908:	d003      	beq.n	9912 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4de>
    990a:	2100      	movs	r1, #0
    990c:	4638      	mov	r0, r7
    990e:	f007 ff58 	bl	117c2 <sym_6KYDR3JNRMNBZD2D4KUEK2GB4RCTCKOQRZV2E5Y>
    9912:	6861      	ldr	r1, [r4, #4]
    9914:	6802      	ldr	r2, [r0, #0]
    9916:	614a      	str	r2, [r1, #20]
    9918:	8880      	ldrh	r0, [r0, #4]
    991a:	8308      	strh	r0, [r1, #24]
    991c:	e016      	b.n	994c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x518>
    991e:	f8d9 0000 	ldr.w	r0, [r9]
    9922:	f8c1 000e 	str.w	r0, [r1, #14]
    9926:	f8b9 0004 	ldrh.w	r0, [r9, #4]
    992a:	8248      	strh	r0, [r1, #18]
    992c:	e7d8      	b.n	98e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ac>
    992e:	f241 41dc 	movw	r1, #5340	; 0x14dc
    9932:	2032      	movs	r0, #50	; 0x32
    9934:	f7fa fb04 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9938:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    993c:	71c1      	strb	r1, [r0, #7]
    993e:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    9940:	6081      	str	r1, [r0, #8]
    9942:	f8b0 1080 	ldrh.w	r1, [r0, #128]	; 0x80
    9946:	8181      	strh	r1, [r0, #12]
    9948:	6145      	str	r5, [r0, #20]
    994a:	8305      	strh	r5, [r0, #24]
    994c:	6860      	ldr	r0, [r4, #4]
    994e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    9950:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
    9954:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    9958:	f880 8000 	strb.w	r8, [r0]
    995c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    995e:	8800      	ldrh	r0, [r0, #0]
    9960:	f7fa ff3e 	bl	47e0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    9964:	f007 f8eb 	bl	10b3e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    9968:	b003      	add	sp, #12
    996a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    996e:	0000      	.short	0x0000
    9970:	20000170 	.word	0x20000170
    9974:	b570      	push	{r4, r5, r6, lr}
    9976:	4c4c      	ldr	r4, [pc, #304]	; (9aa8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x674>)
    9978:	4601      	mov	r1, r0
    997a:	2200      	movs	r2, #0
    997c:	6860      	ldr	r0, [r4, #4]
    997e:	2903      	cmp	r1, #3
    9980:	f100 0660 	add.w	r6, r0, #96	; 0x60
    9984:	68a0      	ldr	r0, [r4, #8]
    9986:	8002      	strh	r2, [r0, #0]
    9988:	d002      	beq.n	9990 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x55c>
    998a:	2905      	cmp	r1, #5
    998c:	d004      	beq.n	9998 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x564>
    998e:	e059      	b.n	9a44 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x610>
    9990:	2103      	movs	r1, #3
    9992:	f008 f83e 	bl	11a12 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    9996:	e055      	b.n	9a44 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x610>
    9998:	2105      	movs	r1, #5
    999a:	f008 f83a 	bl	11a12 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    999e:	e9d4 0501 	ldrd	r0, r5, [r4, #4]
    99a2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    99a4:	6909      	ldr	r1, [r1, #16]
    99a6:	f8c5 100f 	str.w	r1, [r5, #15]
    99aa:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    99ac:	8b0a      	ldrh	r2, [r1, #24]
    99ae:	f8a5 2013 	strh.w	r2, [r5, #19]
    99b2:	7e89      	ldrb	r1, [r1, #26]
    99b4:	7569      	strb	r1, [r5, #21]
    99b6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    99b8:	68c1      	ldr	r1, [r0, #12]
    99ba:	8b80      	ldrh	r0, [r0, #28]
    99bc:	f7fc ffa0 	bl	6900 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    99c0:	75a8      	strb	r0, [r5, #22]
    99c2:	e9d4 0501 	ldrd	r0, r5, [r4, #4]
    99c6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    99c8:	68c1      	ldr	r1, [r0, #12]
    99ca:	6a00      	ldr	r0, [r0, #32]
    99cc:	f7fc ff86 	bl	68dc <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    99d0:	75e8      	strb	r0, [r5, #23]
    99d2:	0a00      	lsrs	r0, r0, #8
    99d4:	7628      	strb	r0, [r5, #24]
    99d6:	e9d4 0501 	ldrd	r0, r5, [r4, #4]
    99da:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    99dc:	68c0      	ldr	r0, [r0, #12]
    99de:	f007 fc3b 	bl	11258 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    99e2:	7668      	strb	r0, [r5, #25]
    99e4:	0a00      	lsrs	r0, r0, #8
    99e6:	76a8      	strb	r0, [r5, #26]
    99e8:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    99ec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    99ee:	8a89      	ldrh	r1, [r1, #20]
    99f0:	76c1      	strb	r1, [r0, #27]
    99f2:	0a09      	lsrs	r1, r1, #8
    99f4:	7701      	strb	r1, [r0, #28]
    99f6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    99f8:	8ac9      	ldrh	r1, [r1, #22]
    99fa:	7741      	strb	r1, [r0, #29]
    99fc:	0a09      	lsrs	r1, r1, #8
    99fe:	7781      	strb	r1, [r0, #30]
    9a00:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    9a02:	301f      	adds	r0, #31
    9a04:	318e      	adds	r1, #142	; 0x8e
    9a06:	f00a fa9c 	bl	13f42 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    9a0a:	e9d4 0501 	ldrd	r0, r5, [r4, #4]
    9a0e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    9a10:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
    9a14:	f890 0099 	ldrb.w	r0, [r0, #153]	; 0x99
    9a18:	f021 011f 	bic.w	r1, r1, #31
    9a1c:	f000 001f 	and.w	r0, r0, #31
    9a20:	4308      	orrs	r0, r1
    9a22:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    9a26:	f004 f939 	bl	dc9c <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    9a2a:	2807      	cmp	r0, #7
    9a2c:	bf88      	it	hi
    9a2e:	2007      	movhi	r0, #7
    9a30:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
    9a34:	22e0      	movs	r2, #224	; 0xe0
    9a36:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
    9a3a:	ea02 1040 	and.w	r0, r2, r0, lsl #5
    9a3e:	4308      	orrs	r0, r1
    9a40:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    9a44:	f106 011c 	add.w	r1, r6, #28
    9a48:	68a0      	ldr	r0, [r4, #8]
    9a4a:	f008 f804 	bl	11a56 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    9a4e:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    9a52:	68a0      	ldr	r0, [r4, #8]
    9a54:	f008 f806 	bl	11a64 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    9a58:	6860      	ldr	r0, [r4, #4]
    9a5a:	f100 0532 	add.w	r5, r0, #50	; 0x32
    9a5e:	f890 6031 	ldrb.w	r6, [r0, #49]	; 0x31
    9a62:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    9a66:	b191      	cbz	r1, 9a8e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x65a>
    9a68:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9a6c:	2903      	cmp	r1, #3
    9a6e:	d106      	bne.n	9a7e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x64a>
    9a70:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    9a74:	2900      	cmp	r1, #0
    9a76:	bf18      	it	ne
    9a78:	f890 006b 	ldrbne.w	r0, [r0, #107]	; 0x6b
    9a7c:	d101      	bne.n	9a82 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x64e>
    9a7e:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    9a82:	f7fc f9e5 	bl	5e50 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    9a86:	2800      	cmp	r0, #0
    9a88:	bf1c      	itt	ne
    9a8a:	2601      	movne	r6, #1
    9a8c:	4605      	movne	r5, r0
    9a8e:	4629      	mov	r1, r5
    9a90:	68a0      	ldr	r0, [r4, #8]
    9a92:	f007 fff0 	bl	11a76 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    9a96:	4631      	mov	r1, r6
    9a98:	68a0      	ldr	r0, [r4, #8]
    9a9a:	f007 fff3 	bl	11a84 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    9a9e:	68a0      	ldr	r0, [r4, #8]
    9aa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9aa4:	f005 b978 	b.w	ed98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    9aa8:	20000170 	.word	0x20000170
    9aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ab0:	4cf0      	ldr	r4, [pc, #960]	; (9e74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa40>)
    9ab2:	267f      	movs	r6, #127	; 0x7f
    9ab4:	2701      	movs	r7, #1
    9ab6:	2500      	movs	r5, #0
    9ab8:	f994 3000 	ldrsb.w	r3, [r4]
    9abc:	6862      	ldr	r2, [r4, #4]
    9abe:	b083      	sub	sp, #12
    9ac0:	2900      	cmp	r1, #0
    9ac2:	d067      	beq.n	9b94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x760>
    9ac4:	2901      	cmp	r1, #1
    9ac6:	d07c      	beq.n	9bc2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x78e>
    9ac8:	2705      	movs	r7, #5
    9aca:	2902      	cmp	r1, #2
    9acc:	d007      	beq.n	9ade <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6aa>
    9ace:	2906      	cmp	r1, #6
    9ad0:	d02a      	beq.n	9b28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6f4>
    9ad2:	f004 fc09 	bl	e2e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    9ad6:	b003      	add	sp, #12
    9ad8:	4638      	mov	r0, r7
    9ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ade:	4605      	mov	r5, r0
    9ae0:	f004 fc02 	bl	e2e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    9ae4:	6860      	ldr	r0, [r4, #4]
    9ae6:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
    9aea:	b1c9      	cbz	r1, 9b20 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6ec>
    9aec:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9af0:	2901      	cmp	r1, #1
    9af2:	bf18      	it	ne
    9af4:	2902      	cmpne	r1, #2
    9af6:	d113      	bne.n	9b20 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6ec>
    9af8:	f994 1000 	ldrsb.w	r1, [r4]
    9afc:	297f      	cmp	r1, #127	; 0x7f
    9afe:	f000 81b4 	beq.w	9e6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa36>
    9b02:	7026      	strb	r6, [r4, #0]
    9b04:	f890 3082 	ldrb.w	r3, [r0, #130]	; 0x82
    9b08:	f890 2069 	ldrb.w	r2, [r0, #105]	; 0x69
    9b0c:	9200      	str	r2, [sp, #0]
    9b0e:	e9cd 3101 	strd	r3, r1, [sp, #4]
    9b12:	f100 0232 	add.w	r2, r0, #50	; 0x32
    9b16:	23ff      	movs	r3, #255	; 0xff
    9b18:	2102      	movs	r1, #2
    9b1a:	4628      	mov	r0, r5
    9b1c:	f008 fd77 	bl	1260e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    9b20:	b003      	add	sp, #12
    9b22:	4638      	mov	r0, r7
    9b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b28:	f892 1072 	ldrb.w	r1, [r2, #114]	; 0x72
    9b2c:	b129      	cbz	r1, 9b3a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x706>
    9b2e:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
    9b32:	2902      	cmp	r1, #2
    9b34:	d007      	beq.n	9b46 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x712>
    9b36:	2901      	cmp	r1, #1
    9b38:	d01d      	beq.n	9b76 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x742>
    9b3a:	f004 fbd5 	bl	e2e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    9b3e:	b003      	add	sp, #12
    9b40:	2005      	movs	r0, #5
    9b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b46:	2b7f      	cmp	r3, #127	; 0x7f
    9b48:	f000 818f 	beq.w	9e6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa36>
    9b4c:	7026      	strb	r6, [r4, #0]
    9b4e:	f892 1082 	ldrb.w	r1, [r2, #130]	; 0x82
    9b52:	f892 c069 	ldrb.w	ip, [r2, #105]	; 0x69
    9b56:	f8cd c000 	str.w	ip, [sp]
    9b5a:	e9cd 1301 	strd	r1, r3, [sp, #4]
    9b5e:	23ff      	movs	r3, #255	; 0xff
    9b60:	2106      	movs	r1, #6
    9b62:	3232      	adds	r2, #50	; 0x32
    9b64:	f008 fd53 	bl	1260e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    9b68:	6861      	ldr	r1, [r4, #4]
    9b6a:	200b      	movs	r0, #11
    9b6c:	f881 5094 	strb.w	r5, [r1, #148]	; 0x94
    9b70:	b003      	add	sp, #12
    9b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b76:	2b7f      	cmp	r3, #127	; 0x7f
    9b78:	f000 8177 	beq.w	9e6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa36>
    9b7c:	7026      	strb	r6, [r4, #0]
    9b7e:	f892 1082 	ldrb.w	r1, [r2, #130]	; 0x82
    9b82:	f892 c069 	ldrb.w	ip, [r2, #105]	; 0x69
    9b86:	f8cd c000 	str.w	ip, [sp]
    9b8a:	e9cd 1301 	strd	r1, r3, [sp, #4]
    9b8e:	23ff      	movs	r3, #255	; 0xff
    9b90:	2106      	movs	r1, #6
    9b92:	e039      	b.n	9c08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7d4>
    9b94:	f892 1072 	ldrb.w	r1, [r2, #114]	; 0x72
    9b98:	2900      	cmp	r1, #0
    9b9a:	f000 8145 	beq.w	9e28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9f4>
    9b9e:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
    9ba2:	2902      	cmp	r1, #2
    9ba4:	d008      	beq.n	9bb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x784>
    9ba6:	2901      	cmp	r1, #1
    9ba8:	d020      	beq.n	9bec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7b8>
    9baa:	2903      	cmp	r1, #3
    9bac:	d02e      	beq.n	9c0c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7d8>
    9bae:	f640 6158 	movw	r1, #3672	; 0xe58
    9bb2:	2032      	movs	r0, #50	; 0x32
    9bb4:	f7fa f9c4 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9bb8:	2b7f      	cmp	r3, #127	; 0x7f
    9bba:	f000 8156 	beq.w	9e6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa36>
    9bbe:	7026      	strb	r6, [r4, #0]
    9bc0:	e000      	b.n	9bc4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x790>
    9bc2:	e05e      	b.n	9c82 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x84e>
    9bc4:	f892 1082 	ldrb.w	r1, [r2, #130]	; 0x82
    9bc8:	f892 c069 	ldrb.w	ip, [r2, #105]	; 0x69
    9bcc:	f8cd c000 	str.w	ip, [sp]
    9bd0:	e9cd 1301 	strd	r1, r3, [sp, #4]
    9bd4:	23ff      	movs	r3, #255	; 0xff
    9bd6:	2100      	movs	r1, #0
    9bd8:	3232      	adds	r2, #50	; 0x32
    9bda:	f008 fd18 	bl	1260e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    9bde:	6860      	ldr	r0, [r4, #4]
    9be0:	f880 7094 	strb.w	r7, [r0, #148]	; 0x94
    9be4:	b003      	add	sp, #12
    9be6:	200b      	movs	r0, #11
    9be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9bec:	2b7f      	cmp	r3, #127	; 0x7f
    9bee:	f000 813c 	beq.w	9e6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa36>
    9bf2:	7026      	strb	r6, [r4, #0]
    9bf4:	f892 1082 	ldrb.w	r1, [r2, #130]	; 0x82
    9bf8:	f892 c069 	ldrb.w	ip, [r2, #105]	; 0x69
    9bfc:	f8cd c000 	str.w	ip, [sp]
    9c00:	e9cd 1301 	strd	r1, r3, [sp, #4]
    9c04:	23ff      	movs	r3, #255	; 0xff
    9c06:	2100      	movs	r1, #0
    9c08:	3232      	adds	r2, #50	; 0x32
    9c0a:	e0a5      	b.n	9d58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x924>
    9c0c:	6841      	ldr	r1, [r0, #4]
    9c0e:	f892 c04e 	ldrb.w	ip, [r2, #78]	; 0x4e
    9c12:	780b      	ldrb	r3, [r1, #0]
    9c14:	4563      	cmp	r3, ip
    9c16:	d11f      	bne.n	9c58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x824>
    9c18:	784b      	ldrb	r3, [r1, #1]
    9c1a:	f892 c04f 	ldrb.w	ip, [r2, #79]	; 0x4f
    9c1e:	4563      	cmp	r3, ip
    9c20:	d11a      	bne.n	9c58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x824>
    9c22:	788b      	ldrb	r3, [r1, #2]
    9c24:	f892 c050 	ldrb.w	ip, [r2, #80]	; 0x50
    9c28:	4563      	cmp	r3, ip
    9c2a:	d115      	bne.n	9c58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x824>
    9c2c:	78cb      	ldrb	r3, [r1, #3]
    9c2e:	f892 c051 	ldrb.w	ip, [r2, #81]	; 0x51
    9c32:	4563      	cmp	r3, ip
    9c34:	d110      	bne.n	9c58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x824>
    9c36:	790b      	ldrb	r3, [r1, #4]
    9c38:	f892 c052 	ldrb.w	ip, [r2, #82]	; 0x52
    9c3c:	4563      	cmp	r3, ip
    9c3e:	d10b      	bne.n	9c58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x824>
    9c40:	7949      	ldrb	r1, [r1, #5]
    9c42:	f892 3053 	ldrb.w	r3, [r2, #83]	; 0x53
    9c46:	4299      	cmp	r1, r3
    9c48:	d106      	bne.n	9c58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x824>
    9c4a:	7c40      	ldrb	r0, [r0, #17]
    9c4c:	f892 104d 	ldrb.w	r1, [r2, #77]	; 0x4d
    9c50:	4288      	cmp	r0, r1
    9c52:	bf08      	it	eq
    9c54:	2001      	moveq	r0, #1
    9c56:	d000      	beq.n	9c5a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x826>
    9c58:	2000      	movs	r0, #0
    9c5a:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    9c5e:	2901      	cmp	r1, #1
    9c60:	d07d      	beq.n	9d5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x92a>
    9c62:	2800      	cmp	r0, #0
    9c64:	d17b      	bne.n	9d5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x92a>
    9c66:	4884      	ldr	r0, [pc, #528]	; (9e78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa44>)
    9c68:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    9c6c:	2908      	cmp	r1, #8
    9c6e:	d077      	beq.n	9d60 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x92c>
    9c70:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    9c74:	4288      	cmp	r0, r1
    9c76:	d072      	beq.n	9d5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x92a>
    9c78:	e0d6      	b.n	9e28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9f4>
    9c7a:	b003      	add	sp, #12
    9c7c:	2005      	movs	r0, #5
    9c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c82:	4605      	mov	r5, r0
    9c84:	f892 006d 	ldrb.w	r0, [r2, #109]	; 0x6d
    9c88:	f892 a072 	ldrb.w	sl, [r2, #114]	; 0x72
    9c8c:	2800      	cmp	r0, #0
    9c8e:	bf14      	ite	ne
    9c90:	f04f 0900 	movne.w	r9, #0
    9c94:	f04f 0901 	moveq.w	r9, #1
    9c98:	2700      	movs	r7, #0
    9c9a:	7ca9      	ldrb	r1, [r5, #18]
    9c9c:	68a8      	ldr	r0, [r5, #8]
    9c9e:	2901      	cmp	r1, #1
    9ca0:	d107      	bne.n	9cb2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x87e>
    9ca2:	7940      	ldrb	r0, [r0, #5]
    9ca4:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    9ca8:	2840      	cmp	r0, #64	; 0x40
    9caa:	bf08      	it	eq
    9cac:	f04f 0801 	moveq.w	r8, #1
    9cb0:	d001      	beq.n	9cb6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x882>
    9cb2:	f04f 0800 	mov.w	r8, #0
    9cb6:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
    9cba:	2803      	cmp	r0, #3
    9cbc:	d106      	bne.n	9ccc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x898>
    9cbe:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
    9cc2:	2800      	cmp	r0, #0
    9cc4:	bf18      	it	ne
    9cc6:	f892 006b 	ldrbne.w	r0, [r2, #107]	; 0x6b
    9cca:	d101      	bne.n	9cd0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x89c>
    9ccc:	f892 0068 	ldrb.w	r0, [r2, #104]	; 0x68
    9cd0:	9000      	str	r0, [sp, #0]
    9cd2:	f7fc f827 	bl	5d24 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    9cd6:	ea5f 0b00 	movs.w	fp, r0
    9cda:	d042      	beq.n	9d62 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x92e>
    9cdc:	9800      	ldr	r0, [sp, #0]
    9cde:	f7fc f815 	bl	5d0c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    9ce2:	2800      	cmp	r0, #0
    9ce4:	bf18      	it	ne
    9ce6:	f04f 0901 	movne.w	r9, #1
    9cea:	f1b8 0f00 	cmp.w	r8, #0
    9cee:	d038      	beq.n	9d62 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x92e>
    9cf0:	4658      	mov	r0, fp
    9cf2:	68a9      	ldr	r1, [r5, #8]
    9cf4:	f007 fa42 	bl	1117c <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    9cf8:	0007      	movs	r7, r0
    9cfa:	6860      	ldr	r0, [r4, #4]
    9cfc:	f890 b031 	ldrb.w	fp, [r0, #49]	; 0x31
    9d00:	bf18      	it	ne
    9d02:	f04b 0b02 	orrne.w	fp, fp, #2
    9d06:	4601      	mov	r1, r0
    9d08:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    9d0c:	2803      	cmp	r0, #3
    9d0e:	d02c      	beq.n	9d6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x936>
    9d10:	f004 faea 	bl	e2e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    9d14:	f1ba 0f00 	cmp.w	sl, #0
    9d18:	d0af      	beq.n	9c7a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x846>
    9d1a:	6861      	ldr	r1, [r4, #4]
    9d1c:	7caa      	ldrb	r2, [r5, #18]
    9d1e:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    9d22:	4290      	cmp	r0, r2
    9d24:	d105      	bne.n	9d32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8fe>
    9d26:	2206      	movs	r2, #6
    9d28:	3132      	adds	r1, #50	; 0x32
    9d2a:	68a8      	ldr	r0, [r5, #8]
    9d2c:	f006 f850 	bl	fdd0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    9d30:	b100      	cbz	r0, 9d34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x900>
    9d32:	b3ef      	cbz	r7, 9db0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x97c>
    9d34:	f994 0000 	ldrsb.w	r0, [r4]
    9d38:	287f      	cmp	r0, #127	; 0x7f
    9d3a:	d074      	beq.n	9e26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9f2>
    9d3c:	7026      	strb	r6, [r4, #0]
    9d3e:	6861      	ldr	r1, [r4, #4]
    9d40:	f891 2082 	ldrb.w	r2, [r1, #130]	; 0x82
    9d44:	f891 3069 	ldrb.w	r3, [r1, #105]	; 0x69
    9d48:	e9cd 3200 	strd	r3, r2, [sp]
    9d4c:	9002      	str	r0, [sp, #8]
    9d4e:	f101 0232 	add.w	r2, r1, #50	; 0x32
    9d52:	465b      	mov	r3, fp
    9d54:	2101      	movs	r1, #1
    9d56:	4628      	mov	r0, r5
    9d58:	f008 fc59 	bl	1260e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    9d5c:	e78d      	b.n	9c7a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x846>
    9d5e:	e05e      	b.n	9e1e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ea>
    9d60:	e062      	b.n	9e28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9f4>
    9d62:	6860      	ldr	r0, [r4, #4]
    9d64:	f890 b031 	ldrb.w	fp, [r0, #49]	; 0x31
    9d68:	e7cd      	b.n	9d06 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8d2>
    9d6a:	6868      	ldr	r0, [r5, #4]
    9d6c:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    9d70:	7802      	ldrb	r2, [r0, #0]
    9d72:	429a      	cmp	r2, r3
    9d74:	d122      	bne.n	9dbc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x988>
    9d76:	7842      	ldrb	r2, [r0, #1]
    9d78:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    9d7c:	429a      	cmp	r2, r3
    9d7e:	d11d      	bne.n	9dbc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x988>
    9d80:	7882      	ldrb	r2, [r0, #2]
    9d82:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    9d86:	429a      	cmp	r2, r3
    9d88:	d118      	bne.n	9dbc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x988>
    9d8a:	78c2      	ldrb	r2, [r0, #3]
    9d8c:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    9d90:	429a      	cmp	r2, r3
    9d92:	d113      	bne.n	9dbc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x988>
    9d94:	7902      	ldrb	r2, [r0, #4]
    9d96:	f891 3052 	ldrb.w	r3, [r1, #82]	; 0x52
    9d9a:	429a      	cmp	r2, r3
    9d9c:	d10e      	bne.n	9dbc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x988>
    9d9e:	7940      	ldrb	r0, [r0, #5]
    9da0:	f891 2053 	ldrb.w	r2, [r1, #83]	; 0x53
    9da4:	4290      	cmp	r0, r2
    9da6:	d109      	bne.n	9dbc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x988>
    9da8:	7c68      	ldrb	r0, [r5, #17]
    9daa:	f891 204d 	ldrb.w	r2, [r1, #77]	; 0x4d
    9dae:	e000      	b.n	9db2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x97e>
    9db0:	e03d      	b.n	9e2e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9fa>
    9db2:	4290      	cmp	r0, r2
    9db4:	bf08      	it	eq
    9db6:	f04f 0801 	moveq.w	r8, #1
    9dba:	d001      	beq.n	9dc0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x98c>
    9dbc:	f04f 0800 	mov.w	r8, #0
    9dc0:	4c2d      	ldr	r4, [pc, #180]	; (9e78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa44>)
    9dc2:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    9dc6:	2808      	cmp	r0, #8
    9dc8:	d005      	beq.n	9dd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9a2>
    9dca:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    9dce:	4290      	cmp	r0, r2
    9dd0:	bf08      	it	eq
    9dd2:	2601      	moveq	r6, #1
    9dd4:	d000      	beq.n	9dd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9a4>
    9dd6:	2600      	movs	r6, #0
    9dd8:	b9bf      	cbnz	r7, 9e0a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9d6>
    9dda:	f1b9 0f00 	cmp.w	r9, #0
    9dde:	d00a      	beq.n	9df6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c2>
    9de0:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    9de4:	7caa      	ldrb	r2, [r5, #18]
    9de6:	4290      	cmp	r0, r2
    9de8:	d105      	bne.n	9df6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c2>
    9dea:	2206      	movs	r2, #6
    9dec:	3132      	adds	r1, #50	; 0x32
    9dee:	68a8      	ldr	r0, [r5, #8]
    9df0:	f005 ffee 	bl	fdd0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    9df4:	b148      	cbz	r0, 9e0a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9d6>
    9df6:	2000      	movs	r0, #0
    9df8:	f1ba 0f00 	cmp.w	sl, #0
    9dfc:	d00c      	beq.n	9e18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9e4>
    9dfe:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    9e02:	2901      	cmp	r1, #1
    9e04:	d006      	beq.n	9e14 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9e0>
    9e06:	b111      	cbz	r1, 9e0e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9da>
    9e08:	e006      	b.n	9e18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9e4>
    9e0a:	2001      	movs	r0, #1
    9e0c:	e7f4      	b.n	9df8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c4>
    9e0e:	ea58 0106 	orrs.w	r1, r8, r6
    9e12:	d001      	beq.n	9e18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9e4>
    9e14:	2101      	movs	r1, #1
    9e16:	e000      	b.n	9e1a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9e6>
    9e18:	2100      	movs	r1, #0
    9e1a:	4208      	tst	r0, r1
    9e1c:	d004      	beq.n	9e28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9f4>
    9e1e:	b003      	add	sp, #12
    9e20:	200c      	movs	r0, #12
    9e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e26:	e020      	b.n	9e6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa36>
    9e28:	f004 fa5e 	bl	e2e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    9e2c:	e725      	b.n	9c7a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x846>
    9e2e:	6860      	ldr	r0, [r4, #4]
    9e30:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
    9e34:	2903      	cmp	r1, #3
    9e36:	bf18      	it	ne
    9e38:	2902      	cmpne	r1, #2
    9e3a:	f47f af1e 	bne.w	9c7a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x846>
    9e3e:	f1b8 0f00 	cmp.w	r8, #0
    9e42:	f43f af1a 	beq.w	9c7a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x846>
    9e46:	f994 1000 	ldrsb.w	r1, [r4]
    9e4a:	297f      	cmp	r1, #127	; 0x7f
    9e4c:	d00d      	beq.n	9e6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa36>
    9e4e:	7026      	strb	r6, [r4, #0]
    9e50:	f890 2082 	ldrb.w	r2, [r0, #130]	; 0x82
    9e54:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
    9e58:	e9cd 3200 	strd	r3, r2, [sp]
    9e5c:	9102      	str	r1, [sp, #8]
    9e5e:	23fe      	movs	r3, #254	; 0xfe
    9e60:	f100 0232 	add.w	r2, r0, #50	; 0x32
    9e64:	2101      	movs	r1, #1
    9e66:	4628      	mov	r0, r5
    9e68:	e776      	b.n	9d58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x924>
    9e6a:	f240 319f 	movw	r1, #927	; 0x39f
    9e6e:	2032      	movs	r0, #50	; 0x32
    9e70:	f7fa f866 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9e74:	20000170 	.word	0x20000170
    9e78:	20000f4c 	.word	0x20000f4c
    9e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e80:	4607      	mov	r7, r0
    9e82:	f7fa fda9 	bl	49d8 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    9e86:	4604      	mov	r4, r0
    9e88:	f7fa fda0 	bl	49cc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    9e8c:	4601      	mov	r1, r0
    9e8e:	4620      	mov	r0, r4
    9e90:	f006 fed8 	bl	10c44 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    9e94:	0005      	movs	r5, r0
    9e96:	d00e      	beq.n	9eb6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa82>
    9e98:	4c32      	ldr	r4, [pc, #200]	; (9f64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb30>)
    9e9a:	6860      	ldr	r0, [r4, #4]
    9e9c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    9ea0:	2801      	cmp	r0, #1
    9ea2:	bf1c      	itt	ne
    9ea4:	2802      	cmpne	r0, #2
    9ea6:	2803      	cmpne	r0, #3
    9ea8:	d00a      	beq.n	9ec0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa8c>
    9eaa:	f241 4187 	movw	r1, #5255	; 0x1487
    9eae:	f04f 0032 	mov.w	r0, #50	; 0x32
    9eb2:	f7fa f845 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9eb6:	f241 4181 	movw	r1, #5249	; 0x1481
    9eba:	2032      	movs	r0, #50	; 0x32
    9ebc:	f7fa f840 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ec0:	f06f 0613 	mvn.w	r6, #19
    9ec4:	b327      	cbz	r7, 9f10 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xadc>
    9ec6:	4628      	mov	r0, r5
    9ec8:	f007 fc03 	bl	116d2 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>
    9ecc:	b918      	cbnz	r0, 9ed6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaa2>
    9ece:	4628      	mov	r0, r5
    9ed0:	f007 fd44 	bl	1195c <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>
    9ed4:	b1e0      	cbz	r0, 9f10 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xadc>
    9ed6:	6861      	ldr	r1, [r4, #4]
    9ed8:	4628      	mov	r0, r5
    9eda:	f891 2060 	ldrb.w	r2, [r1, #96]	; 0x60
    9ede:	2a05      	cmp	r2, #5
    9ee0:	d204      	bcs.n	9eec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xab8>
    9ee2:	f241 410b 	movw	r1, #5131	; 0x140b
    9ee6:	2032      	movs	r0, #50	; 0x32
    9ee8:	f7fa f82a 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9eec:	f891 2060 	ldrb.w	r2, [r1, #96]	; 0x60
    9ef0:	2a0b      	cmp	r2, #11
    9ef2:	d304      	bcc.n	9efe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaca>
    9ef4:	f241 410c 	movw	r1, #5132	; 0x140c
    9ef8:	2032      	movs	r0, #50	; 0x32
    9efa:	f7fa f821 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9efe:	68e2      	ldr	r2, [r4, #12]
    9f00:	f891 1060 	ldrb.w	r1, [r1, #96]	; 0x60
    9f04:	6952      	ldr	r2, [r2, #20]
    9f06:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    9f0a:	5851      	ldr	r1, [r2, r1]
    9f0c:	4788      	blx	r1
    9f0e:	e01a      	b.n	9f46 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb12>
    9f10:	6860      	ldr	r0, [r4, #4]
    9f12:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    9f16:	2905      	cmp	r1, #5
    9f18:	d204      	bcs.n	9f24 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaf0>
    9f1a:	f241 4177 	movw	r1, #5239	; 0x1477
    9f1e:	2032      	movs	r0, #50	; 0x32
    9f20:	f7fa f80e 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f24:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    9f28:	290b      	cmp	r1, #11
    9f2a:	d304      	bcc.n	9f36 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb02>
    9f2c:	f241 4178 	movw	r1, #5240	; 0x1478
    9f30:	2032      	movs	r0, #50	; 0x32
    9f32:	f7fa f805 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f36:	68e1      	ldr	r1, [r4, #12]
    9f38:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
    9f3c:	6989      	ldr	r1, [r1, #24]
    9f3e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    9f42:	5808      	ldr	r0, [r1, r0]
    9f44:	4780      	blx	r0
    9f46:	280f      	cmp	r0, #15
    9f48:	d304      	bcc.n	9f54 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb20>
    9f4a:	f241 419c 	movw	r1, #5276	; 0x149c
    9f4e:	2032      	movs	r0, #50	; 0x32
    9f50:	f7f9 fff6 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f54:	68e1      	ldr	r1, [r4, #12]
    9f56:	6909      	ldr	r1, [r1, #16]
    9f58:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    9f5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9f60:	4700      	bx	r0
    9f62:	0000      	.short	0x0000
    9f64:	20000170 	.word	0x20000170
    9f68:	b510      	push	{r4, lr}
    9f6a:	b118      	cbz	r0, 9f74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb40>
    9f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9f70:	f000 b962 	b.w	a238 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe04>
    9f74:	2900      	cmp	r1, #0
    9f76:	bf08      	it	eq
    9f78:	bd10      	popeq	{r4, pc}
    9f7a:	4810      	ldr	r0, [pc, #64]	; (9fbc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb88>)
    9f7c:	6841      	ldr	r1, [r0, #4]
    9f7e:	f891 2060 	ldrb.w	r2, [r1, #96]	; 0x60
    9f82:	2a0b      	cmp	r2, #11
    9f84:	d204      	bcs.n	9f90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb5c>
    9f86:	f241 5143 	movw	r1, #5443	; 0x1543
    9f8a:	2032      	movs	r0, #50	; 0x32
    9f8c:	f7f9 ffd8 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f90:	f891 2060 	ldrb.w	r2, [r1, #96]	; 0x60
    9f94:	2a0f      	cmp	r2, #15
    9f96:	d304      	bcc.n	9fa2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb6e>
    9f98:	f241 5144 	movw	r1, #5444	; 0x1544
    9f9c:	2032      	movs	r0, #50	; 0x32
    9f9e:	f7f9 ffcf 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9fa2:	68c0      	ldr	r0, [r0, #12]
    9fa4:	f891 1060 	ldrb.w	r1, [r1, #96]	; 0x60
    9fa8:	6880      	ldr	r0, [r0, #8]
    9faa:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    9fae:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    9fb2:	5840      	ldr	r0, [r0, r1]
    9fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9fb8:	4700      	bx	r0
    9fba:	0000      	.short	0x0000
    9fbc:	20000170 	.word	0x20000170
    9fc0:	b570      	push	{r4, r5, r6, lr}
    9fc2:	4c0e      	ldr	r4, [pc, #56]	; (9ffc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbc8>)
    9fc4:	2500      	movs	r5, #0
    9fc6:	6860      	ldr	r0, [r4, #4]
    9fc8:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    9fcc:	b130      	cbz	r0, 9fdc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xba8>
    9fce:	f004 f96b 	bl	e2a8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    9fd2:	f003 fec5 	bl	dd60 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    9fd6:	6860      	ldr	r0, [r4, #4]
    9fd8:	f880 506c 	strb.w	r5, [r0, #108]	; 0x6c
    9fdc:	6860      	ldr	r0, [r4, #4]
    9fde:	f8a0 50a2 	strh.w	r5, [r0, #162]	; 0xa2
    9fe2:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
    9fe6:	f880 5060 	strb.w	r5, [r0, #96]	; 0x60
    9fea:	2000      	movs	r0, #0
    9fec:	68a1      	ldr	r1, [r4, #8]
    9fee:	f7ff fc23 	bl	9838 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x404>
    9ff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9ff6:	2003      	movs	r0, #3
    9ff8:	f000 bdb0 	b.w	ab5c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    9ffc:	20000170 	.word	0x20000170
    a000:	b510      	push	{r4, lr}
    a002:	f7fa fce9 	bl	49d8 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    a006:	4604      	mov	r4, r0
    a008:	f7fa fce0 	bl	49cc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    a00c:	4601      	mov	r1, r0
    a00e:	4620      	mov	r0, r4
    a010:	f006 fe18 	bl	10c44 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    a014:	b150      	cbz	r0, a02c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbf8>
    a016:	f004 febf 	bl	ed98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    a01a:	2000      	movs	r0, #0
    a01c:	f004 fcde 	bl	e9dc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    a020:	4905      	ldr	r1, [pc, #20]	; (a038 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc04>)
    a022:	2006      	movs	r0, #6
    a024:	6849      	ldr	r1, [r1, #4]
    a026:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    a02a:	bd10      	pop	{r4, pc}
    a02c:	f240 5184 	movw	r1, #1412	; 0x584
    a030:	2032      	movs	r0, #50	; 0x32
    a032:	f7f9 ff85 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a036:	0000      	.short	0x0000
    a038:	20000170 	.word	0x20000170
    a03c:	4910      	ldr	r1, [pc, #64]	; (a080 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc4c>)
    a03e:	b510      	push	{r4, lr}
    a040:	6848      	ldr	r0, [r1, #4]
    a042:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
    a046:	2a06      	cmp	r2, #6
    a048:	d204      	bcs.n	a054 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc20>
    a04a:	f241 5171 	movw	r1, #5489	; 0x1571
    a04e:	2032      	movs	r0, #50	; 0x32
    a050:	f7f9 ff76 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a054:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
    a058:	2a0b      	cmp	r2, #11
    a05a:	d304      	bcc.n	a066 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc32>
    a05c:	f241 5172 	movw	r1, #5490	; 0x1572
    a060:	2032      	movs	r0, #50	; 0x32
    a062:	f7f9 ff6d 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a066:	68c9      	ldr	r1, [r1, #12]
    a068:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
    a06c:	68c9      	ldr	r1, [r1, #12]
    a06e:	f06f 0213 	mvn.w	r2, #19
    a072:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    a076:	5808      	ldr	r0, [r1, r0]
    a078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a07c:	4700      	bx	r0
    a07e:	0000      	.short	0x0000
    a080:	20000170 	.word	0x20000170
    a084:	b510      	push	{r4, lr}
    a086:	4806      	ldr	r0, [pc, #24]	; (a0a0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc6c>)
    a088:	f005 f948 	bl	f31c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    a08c:	b910      	cbnz	r0, a094 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc60>
    a08e:	4904      	ldr	r1, [pc, #16]	; (a0a0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc6c>)
    a090:	207f      	movs	r0, #127	; 0x7f
    a092:	7008      	strb	r0, [r1, #0]
    a094:	f004 f928 	bl	e2e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    a098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a09c:	f000 b8f6 	b.w	a28c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe58>
    a0a0:	20000170 	.word	0x20000170
    a0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a0a6:	4d4b      	ldr	r5, [pc, #300]	; (a1d4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xda0>)
    a0a8:	4604      	mov	r4, r0
    a0aa:	460e      	mov	r6, r1
    a0ac:	6868      	ldr	r0, [r5, #4]
    a0ae:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    a0b2:	2900      	cmp	r1, #0
    a0b4:	bf18      	it	ne
    a0b6:	2901      	cmpne	r1, #1
    a0b8:	d003      	beq.n	a0c2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc8e>
    a0ba:	2903      	cmp	r1, #3
    a0bc:	bf1c      	itt	ne
    a0be:	200c      	movne	r0, #12
    a0c0:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    a0c2:	7b21      	ldrb	r1, [r4, #12]
    a0c4:	f880 108c 	strb.w	r1, [r0, #140]	; 0x8c
    a0c8:	68a1      	ldr	r1, [r4, #8]
    a0ca:	6641      	str	r1, [r0, #100]	; 0x64
    a0cc:	7b22      	ldrb	r2, [r4, #12]
    a0ce:	f100 01a6 	add.w	r1, r0, #166	; 0xa6
    a0d2:	5c51      	ldrb	r1, [r2, r1]
    a0d4:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    a0d8:	6821      	ldr	r1, [r4, #0]
    a0da:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
    a0de:	7920      	ldrb	r0, [r4, #4]
    a0e0:	2802      	cmp	r0, #2
    a0e2:	d01f      	beq.n	a124 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcf0>
    a0e4:	f004 fdbe 	bl	ec64 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    a0e8:	f004 f8de 	bl	e2a8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    a0ec:	f003 fe38 	bl	dd60 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    a0f0:	f005 fc66 	bl	f9c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    a0f4:	4838      	ldr	r0, [pc, #224]	; (a1d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xda4>)
    a0f6:	f004 fc33 	bl	e960 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    a0fa:	4838      	ldr	r0, [pc, #224]	; (a1dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xda8>)
    a0fc:	f005 f940 	bl	f380 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    a100:	4837      	ldr	r0, [pc, #220]	; (a1e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdac>)
    a102:	f005 f933 	bl	f36c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    a106:	6868      	ldr	r0, [r5, #4]
    a108:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    a10c:	2800      	cmp	r0, #0
    a10e:	bf0c      	ite	eq
    a110:	2001      	moveq	r0, #1
    a112:	2002      	movne	r0, #2
    a114:	f7f9 fcf0 	bl	3af8 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    a118:	7920      	ldrb	r0, [r4, #4]
    a11a:	2803      	cmp	r0, #3
    a11c:	bf1c      	itt	ne
    a11e:	4630      	movne	r0, r6
    a120:	f004 fe3a 	blne	ed98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    a124:	7b60      	ldrb	r0, [r4, #13]
    a126:	b178      	cbz	r0, a148 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd14>
    a128:	6868      	ldr	r0, [r5, #4]
    a12a:	2201      	movs	r2, #1
    a12c:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
    a130:	f88d 1000 	strb.w	r1, [sp]
    a134:	f89d 1000 	ldrb.w	r1, [sp]
    a138:	b931      	cbnz	r1, a148 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd14>
    a13a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    a13c:	2900      	cmp	r1, #0
    a13e:	bf1c      	itt	ne
    a140:	f890 0058 	ldrbne.w	r0, [r0, #88]	; 0x58
    a144:	f7f8 fac8 	blne	26d8 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    a148:	7920      	ldrb	r0, [r4, #4]
    a14a:	2803      	cmp	r0, #3
    a14c:	d001      	beq.n	a152 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd1e>
    a14e:	b128      	cbz	r0, a15c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd28>
    a150:	e01e      	b.n	a190 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd5c>
    a152:	f640 1188 	movw	r1, #2440	; 0x988
    a156:	2032      	movs	r0, #50	; 0x32
    a158:	f7f9 fef2 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a15c:	686a      	ldr	r2, [r5, #4]
    a15e:	f8df c084 	ldr.w	ip, [pc, #132]	; a1e4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdb0>
    a162:	2000      	movs	r0, #0
    a164:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
    a168:	f892 306a 	ldrb.w	r3, [r2, #106]	; 0x6a
    a16c:	1c5b      	adds	r3, r3, #1
    a16e:	fbac 7403 	umull	r7, r4, ip, r3
    a172:	0864      	lsrs	r4, r4, #1
    a174:	eba4 0484 	sub.w	r4, r4, r4, lsl #2
    a178:	4423      	add	r3, r4
    a17a:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
    a17e:	fa21 f303 	lsr.w	r3, r1, r3
    a182:	f013 0f01 	tst.w	r3, #1
    a186:	d103      	bne.n	a190 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd5c>
    a188:	1c40      	adds	r0, r0, #1
    a18a:	b2c0      	uxtb	r0, r0
    a18c:	2803      	cmp	r0, #3
    a18e:	d3eb      	bcc.n	a168 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd34>
    a190:	6868      	ldr	r0, [r5, #4]
    a192:	f990 004b 	ldrsb.w	r0, [r0, #75]	; 0x4b
    a196:	f004 fdf9 	bl	ed8c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    a19a:	4631      	mov	r1, r6
    a19c:	2001      	movs	r0, #1
    a19e:	f7ff f965 	bl	946c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>
    a1a2:	2800      	cmp	r0, #0
    a1a4:	bf08      	it	eq
    a1a6:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    a1a8:	f000 f948 	bl	a43c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1008>
    a1ac:	6868      	ldr	r0, [r5, #4]
    a1ae:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
    a1b2:	b160      	cbz	r0, a1ce <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd9a>
    a1b4:	f7fb fd7e 	bl	5cb4 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    a1b8:	480b      	ldr	r0, [pc, #44]	; (a1e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdb4>)
    a1ba:	6800      	ldr	r0, [r0, #0]
    a1bc:	2803      	cmp	r0, #3
    a1be:	bf1c      	itt	ne
    a1c0:	2000      	movne	r0, #0
    a1c2:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    a1c4:	f640 119a 	movw	r1, #2458	; 0x99a
    a1c8:	2032      	movs	r0, #50	; 0x32
    a1ca:	f7f9 feb9 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a1ce:	f7fc f91f 	bl	6410 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    a1d2:	e7f1      	b.n	a1b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd84>
    a1d4:	20000170 	.word	0x20000170
    a1d8:	0000a584 	.word	0x0000a584
    a1dc:	00013f6d 	.word	0x00013f6d
    a1e0:	8e89bed6 	.word	0x8e89bed6
    a1e4:	aaaaaaab 	.word	0xaaaaaaab
    a1e8:	40001550 	.word	0x40001550
    a1ec:	b538      	push	{r3, r4, r5, lr}
    a1ee:	4c11      	ldr	r4, [pc, #68]	; (a234 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe00>)
    a1f0:	2200      	movs	r2, #0
    a1f2:	6860      	ldr	r0, [r4, #4]
    a1f4:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
    a1f8:	f88d 1000 	strb.w	r1, [sp]
    a1fc:	f89d 1000 	ldrb.w	r1, [sp]
    a200:	b931      	cbnz	r1, a210 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xddc>
    a202:	6d41      	ldr	r1, [r0, #84]	; 0x54
    a204:	2900      	cmp	r1, #0
    a206:	bf1c      	itt	ne
    a208:	f890 0058 	ldrbne.w	r0, [r0, #88]	; 0x58
    a20c:	f7f8 fa64 	blne	26d8 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    a210:	6860      	ldr	r0, [r4, #4]
    a212:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
    a216:	2800      	cmp	r0, #0
    a218:	bf18      	it	ne
    a21a:	2801      	cmpne	r0, #1
    a21c:	d007      	beq.n	a22e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdfa>
    a21e:	2802      	cmp	r0, #2
    a220:	bf1c      	itt	ne
    a222:	200c      	movne	r0, #12
    a224:	bd38      	popne	{r3, r4, r5, pc}
    a226:	f000 f831 	bl	a28c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe58>
    a22a:	2000      	movs	r0, #0
    a22c:	bd38      	pop	{r3, r4, r5, pc}
    a22e:	f000 f803 	bl	a238 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe04>
    a232:	e7fa      	b.n	a22a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdf6>
    a234:	20000170 	.word	0x20000170
    a238:	b570      	push	{r4, r5, r6, lr}
    a23a:	4c0d      	ldr	r4, [pc, #52]	; (a270 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe3c>)
    a23c:	2500      	movs	r5, #0
    a23e:	6860      	ldr	r0, [r4, #4]
    a240:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    a244:	b130      	cbz	r0, a254 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe20>
    a246:	f004 f82f 	bl	e2a8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    a24a:	f003 fd89 	bl	dd60 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    a24e:	6860      	ldr	r0, [r4, #4]
    a250:	f880 506c 	strb.w	r5, [r0, #108]	; 0x6c
    a254:	6860      	ldr	r0, [r4, #4]
    a256:	2101      	movs	r1, #1
    a258:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    a25c:	f8a0 50a2 	strh.w	r5, [r0, #162]	; 0xa2
    a260:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
    a264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a268:	2000      	movs	r0, #0
    a26a:	f000 bc77 	b.w	ab5c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    a26e:	0000      	.short	0x0000
    a270:	20000170 	.word	0x20000170
    a274:	4804      	ldr	r0, [pc, #16]	; (a288 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe54>)
    a276:	6841      	ldr	r1, [r0, #4]
    a278:	2000      	movs	r0, #0
    a27a:	f8a1 00a2 	strh.w	r0, [r1, #162]	; 0xa2
    a27e:	f881 00a4 	strb.w	r0, [r1, #164]	; 0xa4
    a282:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    a286:	4770      	bx	lr
    a288:	20000170 	.word	0x20000170
    a28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a290:	f7fa fba2 	bl	49d8 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    a294:	4604      	mov	r4, r0
    a296:	f7fa fb99 	bl	49cc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    a29a:	4601      	mov	r1, r0
    a29c:	4620      	mov	r0, r4
    a29e:	f006 fcd1 	bl	10c44 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    a2a2:	0005      	movs	r5, r0
    a2a4:	d037      	beq.n	a316 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xee2>
    a2a6:	f000 fa1d 	bl	a6e4 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    a2aa:	4c33      	ldr	r4, [pc, #204]	; (a378 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf44>)
    a2ac:	6860      	ldr	r0, [r4, #4]
    a2ae:	f100 02a6 	add.w	r2, r0, #166	; 0xa6
    a2b2:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    a2b6:	5c8e      	ldrb	r6, [r1, r2]
    a2b8:	f880 60a1 	strb.w	r6, [r0, #161]	; 0xa1
    a2bc:	2000      	movs	r0, #0
    a2be:	f000 fbef 	bl	aaa0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    a2c2:	2800      	cmp	r0, #0
    a2c4:	d02d      	beq.n	a322 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xeee>
    a2c6:	6860      	ldr	r0, [r4, #4]
    a2c8:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
    a2cc:	2802      	cmp	r0, #2
    a2ce:	d003      	beq.n	a2d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xea4>
    a2d0:	4629      	mov	r1, r5
    a2d2:	2000      	movs	r0, #0
    a2d4:	f7ff f8ca 	bl	946c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>
    a2d8:	2e01      	cmp	r6, #1
    a2da:	bf07      	ittee	eq
    a2dc:	2701      	moveq	r7, #1
    a2de:	2003      	moveq	r0, #3
    a2e0:	2700      	movne	r7, #0
    a2e2:	2005      	movne	r0, #5
    a2e4:	4428      	add	r0, r5
    a2e6:	f7fb fccd 	bl	5c84 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    a2ea:	6861      	ldr	r1, [r4, #4]
    a2ec:	2500      	movs	r5, #0
    a2ee:	f881 006c 	strb.w	r0, [r1, #108]	; 0x6c
    a2f2:	b140      	cbz	r0, a306 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xed2>
    a2f4:	2f00      	cmp	r7, #0
    a2f6:	bf18      	it	ne
    a2f8:	2640      	movne	r6, #64	; 0x40
    a2fa:	d016      	beq.n	a32a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xef6>
    a2fc:	f003 fd70 	bl	dde0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    a300:	4630      	mov	r0, r6
    a302:	f003 ffdf 	bl	e2c4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    a306:	6860      	ldr	r0, [r4, #4]
    a308:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a30c:	2903      	cmp	r1, #3
    a30e:	bf18      	it	ne
    a310:	2902      	cmpne	r1, #2
    a312:	d11c      	bne.n	a34e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf1a>
    a314:	e00f      	b.n	a336 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf02>
    a316:	f240 4177 	movw	r1, #1143	; 0x477
    a31a:	f04f 0032 	mov.w	r0, #50	; 0x32
    a31e:	f7f9 fe0f 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a326:	f7ff bf87 	b.w	a238 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe04>
    a32a:	f016 0f0c 	tst.w	r6, #12
    a32e:	bf14      	ite	ne
    a330:	2655      	movne	r6, #85	; 0x55
    a332:	2650      	moveq	r6, #80	; 0x50
    a334:	e7e2      	b.n	a2fc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xec8>
    a336:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    a33a:	f100 00a6 	add.w	r0, r0, #166	; 0xa6
    a33e:	5c08      	ldrb	r0, [r1, r0]
    a340:	2801      	cmp	r0, #1
    a342:	d104      	bne.n	a34e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf1a>
    a344:	2100      	movs	r1, #0
    a346:	2201      	movs	r2, #1
    a348:	4608      	mov	r0, r1
    a34a:	f004 ff3b 	bl	f1c4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    a34e:	6860      	ldr	r0, [r4, #4]
    a350:	21ff      	movs	r1, #255	; 0xff
    a352:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    a356:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
    a35a:	f880 5071 	strb.w	r5, [r0, #113]	; 0x71
    a35e:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    a362:	f880 5072 	strb.w	r5, [r0, #114]	; 0x72
    a366:	f880 5073 	strb.w	r5, [r0, #115]	; 0x73
    a36a:	f880 5094 	strb.w	r5, [r0, #148]	; 0x94
    a36e:	2105      	movs	r1, #5
    a370:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    a374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a378:	20000170 	.word	0x20000170
    a37c:	b570      	push	{r4, r5, r6, lr}
    a37e:	f7fa fb2b 	bl	49d8 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    a382:	4604      	mov	r4, r0
    a384:	f7fa fb22 	bl	49cc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    a388:	4601      	mov	r1, r0
    a38a:	4620      	mov	r0, r4
    a38c:	f006 fc5a 	bl	10c44 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    a390:	0004      	movs	r4, r0
    a392:	d02c      	beq.n	a3ee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xfba>
    a394:	4d1a      	ldr	r5, [pc, #104]	; (a400 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xfcc>)
    a396:	6868      	ldr	r0, [r5, #4]
    a398:	f100 0660 	add.w	r6, r0, #96	; 0x60
    a39c:	2004      	movs	r0, #4
    a39e:	f000 fb7f 	bl	aaa0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    a3a2:	b348      	cbz	r0, a3f8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xfc4>
    a3a4:	200c      	movs	r0, #12
    a3a6:	7030      	strb	r0, [r6, #0]
    a3a8:	2001      	movs	r0, #1
    a3aa:	f000 fbd7 	bl	ab5c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    a3ae:	7820      	ldrb	r0, [r4, #0]
    a3b0:	6869      	ldr	r1, [r5, #4]
    a3b2:	f3c0 1040 	ubfx	r0, r0, #5, #1
    a3b6:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    a3ba:	2005      	movs	r0, #5
    a3bc:	f7ff fada 	bl	9974 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x540>
    a3c0:	4910      	ldr	r1, [pc, #64]	; (a404 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xfd0>)
    a3c2:	68a8      	ldr	r0, [r5, #8]
    a3c4:	f04f 0c20 	mov.w	ip, #32
    a3c8:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    a3ca:	7803      	ldrb	r3, [r0, #0]
    a3cc:	f892 208d 	ldrb.w	r2, [r2, #141]	; 0x8d
    a3d0:	f023 0320 	bic.w	r3, r3, #32
    a3d4:	ea0c 1242 	and.w	r2, ip, r2, lsl #5
    a3d8:	431a      	orrs	r2, r3
    a3da:	7002      	strb	r2, [r0, #0]
    a3dc:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    a3de:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
    a3e2:	f890 108d 	ldrb.w	r1, [r0, #141]	; 0x8d
    a3e6:	4011      	ands	r1, r2
    a3e8:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    a3ec:	bd70      	pop	{r4, r5, r6, pc}
    a3ee:	f240 51ef 	movw	r1, #1519	; 0x5ef
    a3f2:	2032      	movs	r0, #50	; 0x32
    a3f4:	f7f9 fda4 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a3f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a3fc:	f7ff bf1c 	b.w	a238 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe04>
    a400:	20000170 	.word	0x20000170
    a404:	20000f4c 	.word	0x20000f4c
    a408:	b510      	push	{r4, lr}
    a40a:	2003      	movs	r0, #3
    a40c:	f000 fb48 	bl	aaa0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    a410:	b168      	cbz	r0, a42e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xffa>
    a412:	2003      	movs	r0, #3
    a414:	f7ff faae 	bl	9974 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x540>
    a418:	2201      	movs	r2, #1
    a41a:	4611      	mov	r1, r2
    a41c:	2000      	movs	r0, #0
    a41e:	f004 fed1 	bl	f1c4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    a422:	4905      	ldr	r1, [pc, #20]	; (a438 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1004>)
    a424:	200b      	movs	r0, #11
    a426:	6849      	ldr	r1, [r1, #4]
    a428:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    a42c:	bd10      	pop	{r4, pc}
    a42e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a432:	f7ff bf01 	b.w	a238 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe04>
    a436:	0000      	.short	0x0000
    a438:	20000170 	.word	0x20000170
    a43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a440:	4c30      	ldr	r4, [pc, #192]	; (a504 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10d0>)
    a442:	2600      	movs	r6, #0
    a444:	6860      	ldr	r0, [r4, #4]
    a446:	f880 6094 	strb.w	r6, [r0, #148]	; 0x94
    a44a:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
    a44e:	2900      	cmp	r1, #0
    a450:	bf04      	itt	eq
    a452:	f890 006d 	ldrbeq.w	r0, [r0, #109]	; 0x6d
    a456:	2800      	cmpeq	r0, #0
    a458:	d045      	beq.n	a4e6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10b2>
    a45a:	f005 fb56 	bl	fb0a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    a45e:	4605      	mov	r5, r0
    a460:	6860      	ldr	r0, [r4, #4]
    a462:	4629      	mov	r1, r5
    a464:	6c40      	ldr	r0, [r0, #68]	; 0x44
    a466:	f7f7 f8b5 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    a46a:	f8df 809c 	ldr.w	r8, [pc, #156]	; a508 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10d4>
    a46e:	4607      	mov	r7, r0
    a470:	fb90 f0f8 	sdiv	r0, r0, r8
    a474:	fb08 7010 	mls	r0, r8, r0, r7
    a478:	4241      	negs	r1, r0
    a47a:	4628      	mov	r0, r5
    a47c:	f7f7 f878 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    a480:	6861      	ldr	r1, [r4, #4]
    a482:	6448      	str	r0, [r1, #68]	; 0x44
    a484:	fb97 f0f8 	sdiv	r0, r7, r8
    a488:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
    a48c:	4410      	add	r0, r2
    a48e:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
    a492:	f7fb feb5 	bl	6200 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    a496:	4601      	mov	r1, r0
    a498:	6860      	ldr	r0, [r4, #4]
    a49a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    a49e:	4291      	cmp	r1, r2
    a4a0:	d821      	bhi.n	a4e6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10b2>
    a4a2:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
    a4a6:	6445      	str	r5, [r0, #68]	; 0x44
    a4a8:	f890 006d 	ldrb.w	r0, [r0, #109]	; 0x6d
    a4ac:	2800      	cmp	r0, #0
    a4ae:	bf1c      	itt	ne
    a4b0:	2001      	movne	r0, #1
    a4b2:	f7fb fc51 	blne	5d58 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    a4b6:	2101      	movs	r1, #1
    a4b8:	6860      	ldr	r0, [r4, #4]
    a4ba:	f890 204a 	ldrb.w	r2, [r0, #74]	; 0x4a
    a4be:	2a00      	cmp	r2, #0
    a4c0:	bf1c      	itt	ne
    a4c2:	f890 2049 	ldrbne.w	r2, [r0, #73]	; 0x49
    a4c6:	2a00      	cmpne	r2, #0
    a4c8:	d00d      	beq.n	a4e6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10b2>
    a4ca:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    a4ce:	f100 0232 	add.w	r2, r0, #50	; 0x32
    a4d2:	2b01      	cmp	r3, #1
    a4d4:	d104      	bne.n	a4e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10ac>
    a4d6:	7952      	ldrb	r2, [r2, #5]
    a4d8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    a4dc:	2a40      	cmp	r2, #64	; 0x40
    a4de:	d008      	beq.n	a4f2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10be>
    a4e0:	3032      	adds	r0, #50	; 0x32
    a4e2:	f006 fe02 	bl	110ea <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    a4e6:	6861      	ldr	r1, [r4, #4]
    a4e8:	2002      	movs	r0, #2
    a4ea:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    a4ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a4f2:	2501      	movs	r5, #1
    a4f4:	f7fb fbda 	bl	5cac <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    a4f8:	6861      	ldr	r1, [r4, #4]
    a4fa:	462a      	mov	r2, r5
    a4fc:	3132      	adds	r1, #50	; 0x32
    a4fe:	f006 fe05 	bl	1110c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    a502:	e7f0      	b.n	a4e6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10b2>
    a504:	20000170 	.word	0x20000170
    a508:	000f4240 	.word	0x000f4240
    a50c:	0000a275 	.word	0x0000a275
    a510:	0000a239 	.word	0x0000a239
    a514:	000125dd 	.word	0x000125dd
    a518:	000125dd 	.word	0x000125dd
    a51c:	000125dd 	.word	0x000125dd
    a520:	0000a28d 	.word	0x0000a28d
    a524:	000125dd 	.word	0x000125dd
    a528:	000125dd 	.word	0x000125dd
    a52c:	000125dd 	.word	0x000125dd
    a530:	000125dd 	.word	0x000125dd
    a534:	000125dd 	.word	0x000125dd
    a538:	0000a409 	.word	0x0000a409
    a53c:	0000a37d 	.word	0x0000a37d
    a540:	000125dd 	.word	0x000125dd
    a544:	000125dd 	.word	0x000125dd
    a548:	0000a001 	.word	0x0000a001
    a54c:	00009fc1 	.word	0x00009fc1
    a550:	00000000 	.word	0x00000000
    a554:	0000a085 	.word	0x0000a085
    a558:	000096cd 	.word	0x000096cd
    a55c:	00009705 	.word	0x00009705
    a560:	00009721 	.word	0x00009721
    a564:	0000977d 	.word	0x0000977d
    a568:	0000a0a5 	.word	0x0000a0a5
    a56c:	0000a1ed 	.word	0x0000a1ed
    a570:	0000a548 	.word	0x0000a548
    a574:	0000a550 	.word	0x0000a550
    a578:	0000a50c 	.word	0x0000a50c
    a57c:	0000a560 	.word	0x0000a560
    a580:	0000a558 	.word	0x0000a558
    a584:	0000a03d 	.word	0x0000a03d
    a588:	00009e7d 	.word	0x00009e7d
    a58c:	00009f69 	.word	0x00009f69
    a590:	000125e7 	.word	0x000125e7

0000a594 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>:
    a594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a598:	b08b      	sub	sp, #44	; 0x2c
    a59a:	4680      	mov	r8, r0
    a59c:	f7fa fa1c 	bl	49d8 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    a5a0:	4683      	mov	fp, r0
    a5a2:	f006 fa3c 	bl	10a1e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    a5a6:	0004      	movs	r4, r0
    a5a8:	bf04      	itt	eq
    a5aa:	b00b      	addeq	sp, #44	; 0x2c
    a5ac:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a5b0:	f04f 0901 	mov.w	r9, #1
    a5b4:	4601      	mov	r1, r0
    a5b6:	466a      	mov	r2, sp
    a5b8:	4658      	mov	r0, fp
    a5ba:	f006 fa63 	bl	10a84 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    a5be:	4605      	mov	r5, r0
    a5c0:	f7fa fa04 	bl	49cc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    a5c4:	42a8      	cmp	r0, r5
    a5c6:	d004      	beq.n	a5d2 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x3e>
    a5c8:	f44f 7198 	mov.w	r1, #304	; 0x130
    a5cc:	2033      	movs	r0, #51	; 0x33
    a5ce:	f7f9 fcb7 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5d2:	a901      	add	r1, sp, #4
    a5d4:	9800      	ldr	r0, [sp, #0]
    a5d6:	f008 f9a3 	bl	12920 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    a5da:	f108 0504 	add.w	r5, r8, #4
    a5de:	4620      	mov	r0, r4
    a5e0:	f006 f9d1 	bl	10986 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    a5e4:	4606      	mov	r6, r0
    a5e6:	4601      	mov	r1, r0
    a5e8:	221c      	movs	r2, #28
    a5ea:	4628      	mov	r0, r5
    a5ec:	f005 fc02 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a5f0:	7ab0      	ldrb	r0, [r6, #10]
    a5f2:	4c3b      	ldr	r4, [pc, #236]	; (a6e0 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x14c>)
    a5f4:	f010 0f10 	tst.w	r0, #16
    a5f8:	f04f 0700 	mov.w	r7, #0
    a5fc:	d00f      	beq.n	a61e <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x8a>
    a5fe:	f010 0f04 	tst.w	r0, #4
    a602:	bf18      	it	ne
    a604:	722f      	strbne	r7, [r5, #8]
    a606:	d13b      	bne.n	a680 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0xec>
    a608:	f89d 2014 	ldrb.w	r2, [sp, #20]
    a60c:	f105 001c 	add.w	r0, r5, #28
    a610:	9904      	ldr	r1, [sp, #16]
    a612:	f005 fbef 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a616:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a61a:	7228      	strb	r0, [r5, #8]
    a61c:	e030      	b.n	a680 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0xec>
    a61e:	7820      	ldrb	r0, [r4, #0]
    a620:	f04f 0a01 	mov.w	sl, #1
    a624:	b920      	cbnz	r0, a630 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x9c>
    a626:	7ef0      	ldrb	r0, [r6, #27]
    a628:	2825      	cmp	r0, #37	; 0x25
    a62a:	bf38      	it	cc
    a62c:	f884 a000 	strbcc.w	sl, [r4]
    a630:	7820      	ldrb	r0, [r4, #0]
    a632:	2800      	cmp	r0, #0
    a634:	bf1a      	itte	ne
    a636:	f89d 0004 	ldrbne.w	r0, [sp, #4]
    a63a:	2802      	cmpne	r0, #2
    a63c:	722f      	strbeq	r7, [r5, #8]
    a63e:	d018      	beq.n	a672 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0xde>
    a640:	7863      	ldrb	r3, [r4, #1]
    a642:	f04f 02e5 	mov.w	r2, #229	; 0xe5
    a646:	f105 011c 	add.w	r1, r5, #28
    a64a:	9800      	ldr	r0, [sp, #0]
    a64c:	f007 f89e 	bl	1178c <sym_K5O4S5LXJO2IVEZ2S6XKTRJFPWYBJ3GPNSTV4VA>
    a650:	7228      	strb	r0, [r5, #8]
    a652:	7861      	ldrb	r1, [r4, #1]
    a654:	4408      	add	r0, r1
    a656:	7060      	strb	r0, [r4, #1]
    a658:	9800      	ldr	r0, [sp, #0]
    a65a:	f007 f88f 	bl	1177c <sym_FITQAUCWEWZALLHJ4Y4UNQWIKT43CPDMCVGNNFY>
    a65e:	7861      	ldrb	r1, [r4, #1]
    a660:	4288      	cmp	r0, r1
    a662:	d006      	beq.n	a672 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0xde>
    a664:	7aa8      	ldrb	r0, [r5, #10]
    a666:	f04f 0900 	mov.w	r9, #0
    a66a:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    a66e:	3020      	adds	r0, #32
    a670:	72a8      	strb	r0, [r5, #10]
    a672:	7ab0      	ldrb	r0, [r6, #10]
    a674:	f3c0 1141 	ubfx	r1, r0, #5, #2
    a678:	2901      	cmp	r1, #1
    a67a:	bf18      	it	ne
    a67c:	7027      	strbne	r7, [r4, #0]
    a67e:	d015      	beq.n	a6ac <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x118>
    a680:	2005      	movs	r0, #5
    a682:	f888 7001 	strb.w	r7, [r8, #1]
    a686:	f888 0000 	strb.w	r0, [r8]
    a68a:	f1b9 0f00 	cmp.w	r9, #0
    a68e:	d009      	beq.n	a6a4 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x110>
    a690:	4658      	mov	r0, fp
    a692:	f006 f993 	bl	109bc <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    a696:	b1e8      	cbz	r0, a6d4 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x140>
    a698:	2200      	movs	r2, #0
    a69a:	4611      	mov	r1, r2
    a69c:	4658      	mov	r0, fp
    a69e:	f006 fa98 	bl	10bd2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    a6a2:	7067      	strb	r7, [r4, #1]
    a6a4:	b00b      	add	sp, #44	; 0x2c
    a6a6:	2001      	movs	r0, #1
    a6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a6ac:	7822      	ldrb	r2, [r4, #0]
    a6ae:	2a00      	cmp	r2, #0
    a6b0:	bf08      	it	eq
    a6b2:	f884 a000 	strbeq.w	sl, [r4]
    a6b6:	d0e3      	beq.n	a680 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0xec>
    a6b8:	2103      	movs	r1, #3
    a6ba:	2a01      	cmp	r2, #1
    a6bc:	d002      	beq.n	a6c4 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x130>
    a6be:	2a02      	cmp	r2, #2
    a6c0:	d006      	beq.n	a6d0 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x13c>
    a6c2:	e7dd      	b.n	a680 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0xec>
    a6c4:	f010 0f02 	tst.w	r0, #2
    a6c8:	bf1c      	itt	ne
    a6ca:	2002      	movne	r0, #2
    a6cc:	7020      	strbne	r0, [r4, #0]
    a6ce:	d1d7      	bne.n	a680 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0xec>
    a6d0:	7021      	strb	r1, [r4, #0]
    a6d2:	e7d5      	b.n	a680 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0xec>
    a6d4:	f240 1173 	movw	r1, #371	; 0x173
    a6d8:	2033      	movs	r0, #51	; 0x33
    a6da:	f7f9 fc31 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6de:	0000      	.short	0x0000
    a6e0:	20000184 	.word	0x20000184

0000a6e4 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    a6e4:	b510      	push	{r4, lr}
    a6e6:	b082      	sub	sp, #8
    a6e8:	f7fa f976 	bl	49d8 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    a6ec:	aa01      	add	r2, sp, #4
    a6ee:	4669      	mov	r1, sp
    a6f0:	f006 f9ba 	bl	10a68 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    a6f4:	9800      	ldr	r0, [sp, #0]
    a6f6:	f006 f946 	bl	10986 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    a6fa:	4604      	mov	r4, r0
    a6fc:	221c      	movs	r2, #28
    a6fe:	2100      	movs	r1, #0
    a700:	f005 fbf2 	bl	fee8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a704:	207f      	movs	r0, #127	; 0x7f
    a706:	76a0      	strb	r0, [r4, #26]
    a708:	21ff      	movs	r1, #255	; 0xff
    a70a:	73a1      	strb	r1, [r4, #14]
    a70c:	7061      	strb	r1, [r4, #1]
    a70e:	74e1      	strb	r1, [r4, #19]
    a710:	7aa0      	ldrb	r0, [r4, #10]
    a712:	4905      	ldr	r1, [pc, #20]	; (a728 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY+0x44>)
    a714:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    a718:	3020      	adds	r0, #32
    a71a:	72a0      	strb	r0, [r4, #10]
    a71c:	2000      	movs	r0, #0
    a71e:	6048      	str	r0, [r1, #4]
    a720:	8048      	strh	r0, [r1, #2]
    a722:	b002      	add	sp, #8
    a724:	bd10      	pop	{r4, pc}
    a726:	0000      	.short	0x0000
    a728:	20000184 	.word	0x20000184

0000a72c <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>:
    a72c:	b510      	push	{r4, lr}
    a72e:	b082      	sub	sp, #8
    a730:	f7fa f952 	bl	49d8 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    a734:	aa01      	add	r2, sp, #4
    a736:	4669      	mov	r1, sp
    a738:	f006 f996 	bl	10a68 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    a73c:	9800      	ldr	r0, [sp, #0]
    a73e:	f006 f922 	bl	10986 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    a742:	4604      	mov	r4, r0
    a744:	221c      	movs	r2, #28
    a746:	2100      	movs	r1, #0
    a748:	f005 fbce 	bl	fee8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a74c:	207f      	movs	r0, #127	; 0x7f
    a74e:	76a0      	strb	r0, [r4, #26]
    a750:	21ff      	movs	r1, #255	; 0xff
    a752:	73a1      	strb	r1, [r4, #14]
    a754:	7061      	strb	r1, [r4, #1]
    a756:	74e1      	strb	r1, [r4, #19]
    a758:	7aa0      	ldrb	r0, [r4, #10]
    a75a:	4905      	ldr	r1, [pc, #20]	; (a770 <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY+0x44>)
    a75c:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    a760:	3020      	adds	r0, #32
    a762:	72a0      	strb	r0, [r4, #10]
    a764:	2000      	movs	r0, #0
    a766:	6048      	str	r0, [r1, #4]
    a768:	7008      	strb	r0, [r1, #0]
    a76a:	8048      	strh	r0, [r1, #2]
    a76c:	b002      	add	sp, #8
    a76e:	bd10      	pop	{r4, pc}
    a770:	20000184 	.word	0x20000184

0000a774 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y>:
    a774:	b570      	push	{r4, r5, r6, lr}
    a776:	b082      	sub	sp, #8
    a778:	f7fa f92e 	bl	49d8 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    a77c:	aa01      	add	r2, sp, #4
    a77e:	4669      	mov	r1, sp
    a780:	f006 f972 	bl	10a68 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    a784:	9800      	ldr	r0, [sp, #0]
    a786:	f006 f8fe 	bl	10986 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    a78a:	7b40      	ldrb	r0, [r0, #13]
    a78c:	2600      	movs	r6, #0
    a78e:	2800      	cmp	r0, #0
    a790:	bf04      	itt	eq
    a792:	b002      	addeq	sp, #8
    a794:	bd70      	popeq	{r4, r5, r6, pc}
    a796:	4d1f      	ldr	r5, [pc, #124]	; (a814 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0xa0>)
    a798:	6869      	ldr	r1, [r5, #4]
    a79a:	7a88      	ldrb	r0, [r1, #10]
    a79c:	f3c0 1241 	ubfx	r2, r0, #5, #2
    a7a0:	2a01      	cmp	r2, #1
    a7a2:	d103      	bne.n	a7ac <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x38>
    a7a4:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    a7a8:	3040      	adds	r0, #64	; 0x40
    a7aa:	7288      	strb	r0, [r1, #10]
    a7ac:	f7fa f914 	bl	49d8 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    a7b0:	4604      	mov	r4, r0
    a7b2:	aa01      	add	r2, sp, #4
    a7b4:	4669      	mov	r1, sp
    a7b6:	f006 f957 	bl	10a68 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    a7ba:	9800      	ldr	r0, [sp, #0]
    a7bc:	f006 f8e3 	bl	10986 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    a7c0:	7b40      	ldrb	r0, [r0, #13]
    a7c2:	b970      	cbnz	r0, a7e2 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x6e>
    a7c4:	4620      	mov	r0, r4
    a7c6:	f006 f8e0 	bl	1098a <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    a7ca:	2801      	cmp	r0, #1
    a7cc:	bf04      	itt	eq
    a7ce:	b002      	addeq	sp, #8
    a7d0:	bd70      	popeq	{r4, r5, r6, pc}
    a7d2:	f7fa f8fb 	bl	49cc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    a7d6:	4601      	mov	r1, r0
    a7d8:	2201      	movs	r2, #1
    a7da:	4620      	mov	r0, r4
    a7dc:	f006 f87b 	bl	108d6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    a7e0:	b168      	cbz	r0, a7fe <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x8a>
    a7e2:	4620      	mov	r0, r4
    a7e4:	f006 f8d1 	bl	1098a <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    a7e8:	b170      	cbz	r0, a808 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x94>
    a7ea:	4620      	mov	r0, r4
    a7ec:	f006 f9a1 	bl	10b32 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    a7f0:	806e      	strh	r6, [r5, #2]
    a7f2:	b002      	add	sp, #8
    a7f4:	2005      	movs	r0, #5
    a7f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a7fa:	f000 b9af 	b.w	ab5c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    a7fe:	f240 212a 	movw	r1, #554	; 0x22a
    a802:	2033      	movs	r0, #51	; 0x33
    a804:	f7f9 fb9c 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a808:	f240 212d 	movw	r1, #557	; 0x22d
    a80c:	2033      	movs	r0, #51	; 0x33
    a80e:	f7f9 fb97 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a812:	0000      	.short	0x0000
    a814:	20000184 	.word	0x20000184

0000a818 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    a818:	b570      	push	{r4, r5, r6, lr}
    a81a:	4616      	mov	r6, r2
    a81c:	460c      	mov	r4, r1
    a81e:	4605      	mov	r5, r0
    a820:	f007 f835 	bl	1188e <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>
    a824:	7460      	strb	r0, [r4, #17]
    a826:	4628      	mov	r0, r5
    a828:	f007 f827 	bl	1187a <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>
    a82c:	74a0      	strb	r0, [r4, #18]
    a82e:	1ceb      	adds	r3, r5, #3
    a830:	f8df c080 	ldr.w	ip, [pc, #128]	; a8b4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x9c>
    a834:	1d98      	adds	r0, r3, #6
    a836:	2100      	movs	r1, #0
    a838:	2e07      	cmp	r6, #7
    a83a:	d234      	bcs.n	a8a6 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x8e>
    a83c:	e8df f006 	tbb	[pc, r6]
    a840:	331b1304 	.word	0x331b1304
    a844:	00043327 	.word	0x00043327
    a848:	f89c 2000 	ldrb.w	r2, [ip]
    a84c:	7062      	strb	r2, [r4, #1]
    a84e:	e9c4 3101 	strd	r3, r1, [r4, #4]
    a852:	786a      	ldrb	r2, [r5, #1]
    a854:	1f92      	subs	r2, r2, #6
    a856:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    a85a:	7422      	strb	r2, [r4, #16]
    a85c:	d001      	beq.n	a862 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x4a>
    a85e:	60e0      	str	r0, [r4, #12]
    a860:	bd70      	pop	{r4, r5, r6, pc}
    a862:	60e1      	str	r1, [r4, #12]
    a864:	bd70      	pop	{r4, r5, r6, pc}
    a866:	f89c 2001 	ldrb.w	r2, [ip, #1]
    a86a:	7062      	strb	r2, [r4, #1]
    a86c:	e9c4 3001 	strd	r3, r0, [r4, #4]
    a870:	7421      	strb	r1, [r4, #16]
    a872:	60e1      	str	r1, [r4, #12]
    a874:	bd70      	pop	{r4, r5, r6, pc}
    a876:	f89c 2002 	ldrb.w	r2, [ip, #2]
    a87a:	7062      	strb	r2, [r4, #1]
    a87c:	e9c4 3101 	strd	r3, r1, [r4, #4]
    a880:	786a      	ldrb	r2, [r5, #1]
    a882:	1f92      	subs	r2, r2, #6
    a884:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    a888:	7422      	strb	r2, [r4, #16]
    a88a:	d0ea      	beq.n	a862 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x4a>
    a88c:	e7e7      	b.n	a85e <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    a88e:	f89c 2003 	ldrb.w	r2, [ip, #3]
    a892:	7062      	strb	r2, [r4, #1]
    a894:	e9c4 3101 	strd	r3, r1, [r4, #4]
    a898:	786a      	ldrb	r2, [r5, #1]
    a89a:	1f92      	subs	r2, r2, #6
    a89c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    a8a0:	7422      	strb	r2, [r4, #16]
    a8a2:	d0de      	beq.n	a862 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x4a>
    a8a4:	e7db      	b.n	a85e <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    a8a6:	7061      	strb	r1, [r4, #1]
    a8a8:	6061      	str	r1, [r4, #4]
    a8aa:	60a1      	str	r1, [r4, #8]
    a8ac:	7421      	strb	r1, [r4, #16]
    a8ae:	60e1      	str	r1, [r4, #12]
    a8b0:	bd70      	pop	{r4, r5, r6, pc}
    a8b2:	0000      	.short	0x0000
    a8b4:	00013f73 	.word	0x00013f73

0000a8b8 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
    a8b8:	b570      	push	{r4, r5, r6, lr}
    a8ba:	f004 f929 	bl	eb10 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    a8be:	4c0e      	ldr	r4, [pc, #56]	; (a8f8 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x40>)
    a8c0:	4606      	mov	r6, r0
    a8c2:	7860      	ldrb	r0, [r4, #1]
    a8c4:	b170      	cbz	r0, a8e4 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    a8c6:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
    a8ca:	4632      	mov	r2, r6
    a8cc:	4628      	mov	r0, r5
    a8ce:	f006 fcd4 	bl	1127a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    a8d2:	6060      	str	r0, [r4, #4]
    a8d4:	42a8      	cmp	r0, r5
    a8d6:	d005      	beq.n	a8e4 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    a8d8:	68e1      	ldr	r1, [r4, #12]
    a8da:	1b40      	subs	r0, r0, r5
    a8dc:	4408      	add	r0, r1
    a8de:	60e0      	str	r0, [r4, #12]
    a8e0:	f7f7 fe44 	bl	256c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    a8e4:	6860      	ldr	r0, [r4, #4]
    a8e6:	42b0      	cmp	r0, r6
    a8e8:	bf24      	itt	cs
    a8ea:	7820      	ldrbcs	r0, [r4, #0]
    a8ec:	2800      	cmpcs	r0, #0
    a8ee:	bf14      	ite	ne
    a8f0:	2000      	movne	r0, #0
    a8f2:	2001      	moveq	r0, #1
    a8f4:	bd70      	pop	{r4, r5, r6, pc}
    a8f6:	0000      	.short	0x0000
    a8f8:	20000ff8 	.word	0x20000ff8

0000a8fc <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
    a8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a900:	2204      	movs	r2, #4
    a902:	b084      	sub	sp, #16
    a904:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    a908:	f24a 5795 	movw	r7, #42389	; 0xa595
    a90c:	2905      	cmp	r1, #5
    a90e:	f080 80bd 	bcs.w	aa8c <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x190>
    a912:	e8df f001 	tbb	[pc, r1]
    a916:	330c      	.short	0x330c
    a918:	00843903 	.word	0x00843903
    a91c:	f880 2124 	strb.w	r2, [r0, #292]	; 0x124
    a920:	f004 f956 	bl	ebd0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    a924:	b004      	add	sp, #16
    a926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a92a:	f7f7 bd3d 	b.w	23a8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    a92e:	4604      	mov	r4, r0
    a930:	4859      	ldr	r0, [pc, #356]	; (aa98 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x19c>)
    a932:	7800      	ldrb	r0, [r0, #0]
    a934:	2800      	cmp	r0, #0
    a936:	bf18      	it	ne
    a938:	f884 2124 	strbne.w	r2, [r4, #292]	; 0x124
    a93c:	d007      	beq.n	a94e <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x52>
    a93e:	bf00      	nop
    a940:	f004 f946 	bl	ebd0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    a944:	b004      	add	sp, #16
    a946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a94a:	f7f7 bd2d 	b.w	23a8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    a94e:	2201      	movs	r2, #1
    a950:	2300      	movs	r3, #0
    a952:	4621      	mov	r1, r4
    a954:	4668      	mov	r0, sp
    a956:	f000 ff19 	bl	b78c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x534>
    a95a:	f894 0125 	ldrb.w	r0, [r4, #293]	; 0x125
    a95e:	4669      	mov	r1, sp
    a960:	f7f6 ff80 	bl	1864 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    a964:	b128      	cbz	r0, a972 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x76>
    a966:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    a96a:	1c40      	adds	r0, r0, #1
    a96c:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    a970:	e7e6      	b.n	a940 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x44>
    a972:	f640 2139 	movw	r1, #2617	; 0xa39
    a976:	2035      	movs	r0, #53	; 0x35
    a978:	f7f9 fae2 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a97c:	2103      	movs	r1, #3
    a97e:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
    a982:	b004      	add	sp, #16
    a984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a988:	4944      	ldr	r1, [pc, #272]	; (aa9c <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x1a0>)
    a98a:	4604      	mov	r4, r0
    a98c:	68c0      	ldr	r0, [r0, #12]
    a98e:	6008      	str	r0, [r1, #0]
    a990:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    a994:	6220      	str	r0, [r4, #32]
    a996:	f8b4 014c 	ldrh.w	r0, [r4, #332]	; 0x14c
    a99a:	83a0      	strh	r0, [r4, #28]
    a99c:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    a9a0:	60e0      	str	r0, [r4, #12]
    a9a2:	f8b4 0158 	ldrh.w	r0, [r4, #344]	; 0x158
    a9a6:	82a0      	strh	r0, [r4, #20]
    a9a8:	f8b4 015a 	ldrh.w	r0, [r4, #346]	; 0x15a
    a9ac:	82e0      	strh	r0, [r4, #22]
    a9ae:	f894 506b 	ldrb.w	r5, [r4, #107]	; 0x6b
    a9b2:	f894 806a 	ldrb.w	r8, [r4, #106]	; 0x6a
    a9b6:	4628      	mov	r0, r5
    a9b8:	f009 fa0a 	bl	13dd0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    a9bc:	f1b8 0f02 	cmp.w	r8, #2
    a9c0:	bf08      	it	eq
    a9c2:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
    a9c6:	d006      	beq.n	a9d6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0xda>
    a9c8:	f1b8 0f01 	cmp.w	r8, #1
    a9cc:	bf0c      	ite	eq
    a9ce:	f640 0134 	movweq	r1, #2100	; 0x834
    a9d2:	f640 2128 	movwne	r1, #2600	; 0xa28
    a9d6:	4408      	add	r0, r1
    a9d8:	4438      	add	r0, r7
    a9da:	fbb0 f0f6 	udiv	r0, r0, r6
    a9de:	f015 010c 	ands.w	r1, r5, #12
    a9e2:	bf18      	it	ne
    a9e4:	2128      	movne	r1, #40	; 0x28
    a9e6:	4408      	add	r0, r1
    a9e8:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
    a9ec:	255b      	movs	r5, #91	; 0x5b
    a9ee:	f7f9 f87b 	bl	3ae8 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    a9f2:	2800      	cmp	r0, #0
    a9f4:	bf18      	it	ne
    a9f6:	2573      	movne	r5, #115	; 0x73
    a9f8:	f009 f9cc 	bl	13d94 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    a9fc:	b910      	cbnz	r0, aa04 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x108>
    a9fe:	f009 f9bf 	bl	13d80 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    aa02:	b100      	cbz	r0, aa06 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x10a>
    aa04:	1ded      	adds	r5, r5, #7
    aa06:	f105 016b 	add.w	r1, r5, #107	; 0x6b
    aa0a:	4632      	mov	r2, r6
    aa0c:	4620      	mov	r0, r4
    aa0e:	f007 f8f1 	bl	11bf4 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    aa12:	2002      	movs	r0, #2
    aa14:	f884 0124 	strb.w	r0, [r4, #292]	; 0x124
    aa18:	b004      	add	sp, #16
    aa1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aa1e:	f890 406b 	ldrb.w	r4, [r0, #107]	; 0x6b
    aa22:	4605      	mov	r5, r0
    aa24:	f890 806a 	ldrb.w	r8, [r0, #106]	; 0x6a
    aa28:	4620      	mov	r0, r4
    aa2a:	f009 f9d1 	bl	13dd0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    aa2e:	f1b8 0f02 	cmp.w	r8, #2
    aa32:	bf08      	it	eq
    aa34:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
    aa38:	d006      	beq.n	aa48 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x14c>
    aa3a:	f1b8 0f01 	cmp.w	r8, #1
    aa3e:	bf0c      	ite	eq
    aa40:	f640 0134 	movweq	r1, #2100	; 0x834
    aa44:	f640 2128 	movwne	r1, #2600	; 0xa28
    aa48:	4408      	add	r0, r1
    aa4a:	4438      	add	r0, r7
    aa4c:	fbb0 f0f6 	udiv	r0, r0, r6
    aa50:	f014 010c 	ands.w	r1, r4, #12
    aa54:	bf18      	it	ne
    aa56:	2128      	movne	r1, #40	; 0x28
    aa58:	4408      	add	r0, r1
    aa5a:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
    aa5e:	245b      	movs	r4, #91	; 0x5b
    aa60:	f7f9 f842 	bl	3ae8 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    aa64:	2800      	cmp	r0, #0
    aa66:	bf18      	it	ne
    aa68:	2473      	movne	r4, #115	; 0x73
    aa6a:	f009 f993 	bl	13d94 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    aa6e:	b910      	cbnz	r0, aa76 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x17a>
    aa70:	f009 f986 	bl	13d80 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    aa74:	b100      	cbz	r0, aa78 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x17c>
    aa76:	1de4      	adds	r4, r4, #7
    aa78:	b004      	add	sp, #16
    aa7a:	f104 016b 	add.w	r1, r4, #107	; 0x6b
    aa7e:	4632      	mov	r2, r6
    aa80:	4628      	mov	r0, r5
    aa82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    aa86:	f007 b8b5 	b.w	11bf4 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    aa8a:	bf00      	nop
    aa8c:	f640 3158 	movw	r1, #2904	; 0xb58
    aa90:	2035      	movs	r0, #53	; 0x35
    aa92:	f7f9 fa55 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa96:	0000      	.short	0x0000
    aa98:	20000ff8 	.word	0x20000ff8
    aa9c:	2000018c 	.word	0x2000018c

0000aaa0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    aaa0:	b570      	push	{r4, r5, r6, lr}
    aaa2:	4606      	mov	r6, r0
    aaa4:	f005 f831 	bl	fb0a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    aaa8:	4c2b      	ldr	r4, [pc, #172]	; (ab58 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0xb8>)
    aaaa:	4601      	mov	r1, r0
    aaac:	69a2      	ldr	r2, [r4, #24]
    aaae:	4610      	mov	r0, r2
    aab0:	f7f6 fd90 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    aab4:	4605      	mov	r5, r0
    aab6:	f7fe fa79 	bl	8fac <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    aaba:	7840      	ldrb	r0, [r0, #1]
    aabc:	2200      	movs	r2, #0
    aabe:	2e07      	cmp	r6, #7
    aac0:	d245      	bcs.n	ab4e <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0xae>
    aac2:	e8df f006 	tbb	[pc, r6]
    aac6:	4204      	.short	0x4204
    aac8:	422e2742 	.word	0x422e2742
    aacc:	0042      	.short	0x0042
    aace:	2808      	cmp	r0, #8
    aad0:	d00d      	beq.n	aaee <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x4e>
    aad2:	2804      	cmp	r0, #4
    aad4:	d00f      	beq.n	aaf6 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x56>
    aad6:	2802      	cmp	r0, #2
    aad8:	d013      	beq.n	ab02 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x62>
    aada:	2108      	movs	r1, #8
    aadc:	2801      	cmp	r0, #1
    aade:	bf04      	itt	eq
    aae0:	202a      	moveq	r0, #42	; 0x2a
    aae2:	2328      	moveq	r3, #40	; 0x28
    aae4:	d010      	beq.n	ab08 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x68>
    aae6:	21d9      	movs	r1, #217	; 0xd9
    aae8:	2005      	movs	r0, #5
    aaea:	f7f9 fa29 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aaee:	2140      	movs	r1, #64	; 0x40
    aaf0:	2014      	movs	r0, #20
    aaf2:	460a      	mov	r2, r1
    aaf4:	e002      	b.n	aafc <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    aaf6:	2110      	movs	r1, #16
    aaf8:	2014      	movs	r0, #20
    aafa:	222e      	movs	r2, #46	; 0x2e
    aafc:	f44f 73a8 	mov.w	r3, #336	; 0x150
    ab00:	e002      	b.n	ab08 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x68>
    ab02:	2104      	movs	r1, #4
    ab04:	2012      	movs	r0, #18
    ab06:	2318      	movs	r3, #24
    ab08:	441a      	add	r2, r3
    ab0a:	fb11 2000 	smlabb	r0, r1, r0, r2
    ab0e:	b280      	uxth	r0, r0
    ab10:	3098      	adds	r0, #152	; 0x98
    ab12:	e008      	b.n	ab26 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x86>
    ab14:	f010 000c 	ands.w	r0, r0, #12
    ab18:	bf18      	it	ne
    ab1a:	2028      	movne	r0, #40	; 0x28
    ab1c:	f500 7057 	add.w	r0, r0, #860	; 0x35c
    ab20:	e001      	b.n	ab26 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x86>
    ab22:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    ab26:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ab28:	182e      	adds	r6, r5, r0
    ab2a:	39f1      	subs	r1, #241	; 0xf1
    ab2c:	428e      	cmp	r6, r1
    ab2e:	d309      	bcc.n	ab44 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0xa4>
    ab30:	2500      	movs	r5, #0
    ab32:	f000 ff59 	bl	b9e8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    ab36:	b130      	cbz	r0, ab46 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0xa6>
    ab38:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ab3a:	38f1      	subs	r0, #241	; 0xf1
    ab3c:	4286      	cmp	r6, r0
    ab3e:	bf28      	it	cs
    ab40:	2500      	movcs	r5, #0
    ab42:	d200      	bcs.n	ab46 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0xa6>
    ab44:	2501      	movs	r5, #1
    ab46:	4628      	mov	r0, r5
    ab48:	bd70      	pop	{r4, r5, r6, pc}
    ab4a:	2001      	movs	r0, #1
    ab4c:	bd70      	pop	{r4, r5, r6, pc}
    ab4e:	f44f 61b2 	mov.w	r1, #1424	; 0x590
    ab52:	2035      	movs	r0, #53	; 0x35
    ab54:	f7f9 f9f4 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab58:	20001008 	.word	0x20001008

0000ab5c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>:
    ab5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab60:	2500      	movs	r5, #0
    ab62:	f8df 9344 	ldr.w	r9, [pc, #836]	; aea8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x34c>
    ab66:	b085      	sub	sp, #20
    ab68:	f04f 0a01 	mov.w	sl, #1
    ab6c:	2806      	cmp	r0, #6
    ab6e:	f080 8195 	bcs.w	ae9c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x340>
    ab72:	e8df f000 	tbb	[pc, r0]
    ab76:	3103      	.short	0x3103
    ab78:	fdfefe31 	.word	0xfdfefe31
    ab7c:	f7fc fbde 	bl	733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ab80:	f899 0001 	ldrb.w	r0, [r9, #1]
    ab84:	b980      	cbnz	r0, aba8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x4c>
    ab86:	2200      	movs	r2, #0
    ab88:	4611      	mov	r1, r2
    ab8a:	4668      	mov	r0, sp
    ab8c:	f000 ff9e 	bl	bacc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x874>
    ab90:	2800      	cmp	r0, #0
    ab92:	bf08      	it	eq
    ab94:	f889 a003 	strbeq.w	sl, [r9, #3]
    ab98:	d006      	beq.n	aba8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x4c>
    ab9a:	f7fe fa07 	bl	8fac <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    ab9e:	7800      	ldrb	r0, [r0, #0]
    aba0:	4669      	mov	r1, sp
    aba2:	f7f6 fe5f 	bl	1864 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    aba6:	b190      	cbz	r0, abce <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x72>
    aba8:	f899 0014 	ldrb.w	r0, [r9, #20]
    abac:	2800      	cmp	r0, #0
    abae:	bf04      	itt	eq
    abb0:	b005      	addeq	sp, #20
    abb2:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    abb6:	bf00      	nop
    abb8:	f004 f80a 	bl	ebd0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    abbc:	f7f7 fbf4 	bl	23a8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    abc0:	f889 5014 	strb.w	r5, [r9, #20]
    abc4:	f889 5015 	strb.w	r5, [r9, #21]
    abc8:	b005      	add	sp, #20
    abca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    abce:	f640 2163 	movw	r1, #2659	; 0xa63
    abd2:	2035      	movs	r0, #53	; 0x35
    abd4:	f7f9 f9b4 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    abd8:	2802      	cmp	r0, #2
    abda:	bf0c      	ite	eq
    abdc:	2601      	moveq	r6, #1
    abde:	2600      	movne	r6, #0
    abe0:	f8d9 7018 	ldr.w	r7, [r9, #24]
    abe4:	f003 ff94 	bl	eb10 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    abe8:	4680      	mov	r8, r0
    abea:	f7fe f9df 	bl	8fac <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    abee:	7844      	ldrb	r4, [r0, #1]
    abf0:	f8d9 0020 	ldr.w	r0, [r9, #32]
    abf4:	f880 406a 	strb.w	r4, [r0, #106]	; 0x6a
    abf8:	f880 406b 	strb.w	r4, [r0, #107]	; 0x6b
    abfc:	3062      	adds	r0, #98	; 0x62
    abfe:	f880 a00a 	strb.w	sl, [r0, #10]
    ac02:	f014 0f0c 	tst.w	r4, #12
    ac06:	bf14      	ite	ne
    ac08:	2101      	movne	r1, #1
    ac0a:	2100      	moveq	r1, #0
    ac0c:	f8d9 0020 	ldr.w	r0, [r9, #32]
    ac10:	302c      	adds	r0, #44	; 0x2c
    ac12:	f007 f80c 	bl	11c2e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    ac16:	4630      	mov	r0, r6
    ac18:	4621      	mov	r1, r4
    ac1a:	f006 fc01 	bl	11420 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    ac1e:	4682      	mov	sl, r0
    ac20:	4620      	mov	r0, r4
    ac22:	f009 f8d5 	bl	13dd0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ac26:	4601      	mov	r1, r0
    ac28:	2e00      	cmp	r6, #0
    ac2a:	bf08      	it	eq
    ac2c:	f44f 73fc 	moveq.w	r3, #504	; 0x1f8
    ac30:	d01a      	beq.n	ac68 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x10c>
    ac32:	2c08      	cmp	r4, #8
    ac34:	bf04      	itt	eq
    ac36:	f44f 70c8 	moveq.w	r0, #400	; 0x190
    ac3a:	2240      	moveq	r2, #64	; 0x40
    ac3c:	d00d      	beq.n	ac5a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xfe>
    ac3e:	2c04      	cmp	r4, #4
    ac40:	bf04      	itt	eq
    ac42:	f44f 70bf 	moveq.w	r0, #382	; 0x17e
    ac46:	2210      	moveq	r2, #16
    ac48:	d007      	beq.n	ac5a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xfe>
    ac4a:	2c02      	cmp	r4, #2
    ac4c:	bf07      	ittee	eq
    ac4e:	f105 0018 	addeq.w	r0, r5, #24
    ac52:	2204      	moveq	r2, #4
    ac54:	f105 0028 	addne.w	r0, r5, #40	; 0x28
    ac58:	2208      	movne	r2, #8
    ac5a:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
    ac5e:	eb03 1242 	add.w	r2, r3, r2, lsl #5
    ac62:	4410      	add	r0, r2
    ac64:	f100 0398 	add.w	r3, r0, #152	; 0x98
    ac68:	eb07 0008 	add.w	r0, r7, r8
    ac6c:	4418      	add	r0, r3
    ac6e:	eb00 020a 	add.w	r2, r0, sl
    ac72:	2c02      	cmp	r4, #2
    ac74:	bf08      	it	eq
    ac76:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    ac7a:	d005      	beq.n	ac88 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x12c>
    ac7c:	2c01      	cmp	r4, #1
    ac7e:	bf0c      	ite	eq
    ac80:	f640 0034 	movweq	r0, #2100	; 0x834
    ac84:	f640 2028 	movwne	r0, #2600	; 0xa28
    ac88:	4408      	add	r0, r1
    ac8a:	f24a 11df 	movw	r1, #41439	; 0xa1df
    ac8e:	4401      	add	r1, r0
    ac90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    ac94:	fbb1 f0f0 	udiv	r0, r1, r0
    ac98:	f8d9 a020 	ldr.w	sl, [r9, #32]
    ac9c:	1a10      	subs	r0, r2, r0
    ac9e:	f8da 100c 	ldr.w	r1, [sl, #12]
    aca2:	e9cd 1000 	strd	r1, r0, [sp]
    aca6:	f002 fbf3 	bl	d490 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
    acaa:	4980      	ldr	r1, [pc, #512]	; (aeac <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x350>)
    acac:	4288      	cmp	r0, r1
    acae:	d00d      	beq.n	accc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x170>
    acb0:	e9dd 1200 	ldrd	r1, r2, [sp]
    acb4:	f8da 0108 	ldr.w	r0, [sl, #264]	; 0x108
    acb8:	f007 ff33 	bl	12b22 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    acbc:	9900      	ldr	r1, [sp, #0]
    acbe:	4288      	cmp	r0, r1
    acc0:	d916      	bls.n	acf0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x194>
    acc2:	f240 51f6 	movw	r1, #1526	; 0x5f6
    acc6:	2035      	movs	r0, #53	; 0x35
    acc8:	f7f9 f93a 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    accc:	f89a 006f 	ldrb.w	r0, [sl, #111]	; 0x6f
    acd0:	b170      	cbz	r0, acf0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x194>
    acd2:	f8d9 b038 	ldr.w	fp, [r9, #56]	; 0x38
    acd6:	f002 fb49 	bl	d36c <sym_IGTA6PI7IWAT3FITPB7BP2SXQCVYUZIL6KUR4HQ>
    acda:	b920      	cbnz	r0, ace6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x18a>
    acdc:	f9ba 0120 	ldrsh.w	r0, [sl, #288]	; 0x120
    ace0:	f8aa 5120 	strh.w	r5, [sl, #288]	; 0x120
    ace4:	4483      	add	fp, r0
    ace6:	e9dd 1200 	ldrd	r1, r2, [sp]
    acea:	4658      	mov	r0, fp
    acec:	f007 ff19 	bl	12b22 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    acf0:	4682      	mov	sl, r0
    acf2:	486f      	ldr	r0, [pc, #444]	; (aeb0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x354>)
    acf4:	6840      	ldr	r0, [r0, #4]
    acf6:	4582      	cmp	sl, r0
    acf8:	d204      	bcs.n	ad04 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x1a8>
    acfa:	f8d9 1020 	ldr.w	r1, [r9, #32]
    acfe:	68c8      	ldr	r0, [r1, #12]
    ad00:	4482      	add	sl, r0
    ad02:	e00c      	b.n	ad1e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x1c2>
    ad04:	f8d9 0020 	ldr.w	r0, [r9, #32]
    ad08:	68c1      	ldr	r1, [r0, #12]
    ad0a:	4650      	mov	r0, sl
    ad0c:	f7fb fde6 	bl	68dc <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    ad10:	f8d9 1020 	ldr.w	r1, [r9, #32]
    ad14:	68c9      	ldr	r1, [r1, #12]
    ad16:	f006 fc7c 	bl	11612 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    ad1a:	f8d9 1020 	ldr.w	r1, [r9, #32]
    ad1e:	6208      	str	r0, [r1, #32]
    ad20:	f8d9 0020 	ldr.w	r0, [r9, #32]
    ad24:	68c1      	ldr	r1, [r0, #12]
    ad26:	2005      	movs	r0, #5
    ad28:	f006 fc7c 	bl	11624 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    ad2c:	f8d9 1020 	ldr.w	r1, [r9, #32]
    ad30:	b280      	uxth	r0, r0
    ad32:	8388      	strh	r0, [r1, #28]
    ad34:	f8d9 1020 	ldr.w	r1, [r9, #32]
    ad38:	6a09      	ldr	r1, [r1, #32]
    ad3a:	ebaa 0101 	sub.w	r1, sl, r1
    ad3e:	4288      	cmp	r0, r1
    ad40:	d804      	bhi.n	ad4c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x1f0>
    ad42:	f640 21ee 	movw	r1, #2798	; 0xaee
    ad46:	2035      	movs	r0, #53	; 0x35
    ad48:	f7f9 f8fa 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad4c:	2e00      	cmp	r6, #0
    ad4e:	bf08      	it	eq
    ad50:	f44f 70fc 	moveq.w	r0, #504	; 0x1f8
    ad54:	d01c      	beq.n	ad90 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x234>
    ad56:	2c08      	cmp	r4, #8
    ad58:	bf04      	itt	eq
    ad5a:	f44f 71c8 	moveq.w	r1, #400	; 0x190
    ad5e:	2040      	moveq	r0, #64	; 0x40
    ad60:	d010      	beq.n	ad84 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x228>
    ad62:	2c04      	cmp	r4, #4
    ad64:	bf04      	itt	eq
    ad66:	f44f 71bf 	moveq.w	r1, #382	; 0x17e
    ad6a:	2010      	moveq	r0, #16
    ad6c:	d00a      	beq.n	ad84 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x228>
    ad6e:	e001      	b.n	ad74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x218>
    ad70:	e08f      	b.n	ae92 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x336>
    ad72:	e036      	b.n	ade2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x286>
    ad74:	2c02      	cmp	r4, #2
    ad76:	bf07      	ittee	eq
    ad78:	f105 0118 	addeq.w	r1, r5, #24
    ad7c:	2004      	moveq	r0, #4
    ad7e:	f105 0128 	addne.w	r1, r5, #40	; 0x28
    ad82:	2008      	movne	r0, #8
    ad84:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    ad88:	eb02 1040 	add.w	r0, r2, r0, lsl #5
    ad8c:	4408      	add	r0, r1
    ad8e:	3098      	adds	r0, #152	; 0x98
    ad90:	4440      	add	r0, r8
    ad92:	eb00 050a 	add.w	r5, r0, sl
    ad96:	4621      	mov	r1, r4
    ad98:	4630      	mov	r0, r6
    ad9a:	f006 fb41 	bl	11420 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    ad9e:	4405      	add	r5, r0
    ada0:	4620      	mov	r0, r4
    ada2:	f009 f815 	bl	13dd0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ada6:	2c02      	cmp	r4, #2
    ada8:	bf08      	it	eq
    adaa:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
    adae:	d005      	beq.n	adbc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x260>
    adb0:	2c01      	cmp	r4, #1
    adb2:	bf0c      	ite	eq
    adb4:	f640 0134 	movweq	r1, #2100	; 0x834
    adb8:	f640 2128 	movwne	r1, #2600	; 0xa28
    adbc:	4401      	add	r1, r0
    adbe:	f24a 10df 	movw	r0, #41439	; 0xa1df
    adc2:	4401      	add	r1, r0
    adc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    adc8:	fbb1 f0f0 	udiv	r0, r1, r0
    adcc:	1a29      	subs	r1, r5, r0
    adce:	4638      	mov	r0, r7
    add0:	f7f6 fbce 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    add4:	f8d9 1020 	ldr.w	r1, [r9, #32]
    add8:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    addc:	b005      	add	sp, #20
    adde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ade2:	2804      	cmp	r0, #4
    ade4:	bf0c      	ite	eq
    ade6:	2401      	moveq	r4, #1
    ade8:	2400      	movne	r4, #0
    adea:	f7fc faa7 	bl	733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    adee:	f889 a024 	strb.w	sl, [r9, #36]	; 0x24
    adf2:	f889 4025 	strb.w	r4, [r9, #37]	; 0x25
    adf6:	f8d9 1020 	ldr.w	r1, [r9, #32]
    adfa:	f881 5124 	strb.w	r5, [r1, #292]	; 0x124
    adfe:	f899 0000 	ldrb.w	r0, [r9]
    ae02:	2805      	cmp	r0, #5
    ae04:	d004      	beq.n	ae10 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2b4>
    ae06:	f640 3118 	movw	r1, #2840	; 0xb18
    ae0a:	2035      	movs	r0, #53	; 0x35
    ae0c:	f7f9 f898 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae10:	b139      	cbz	r1, ae22 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2c6>
    ae12:	f891 0124 	ldrb.w	r0, [r1, #292]	; 0x124
    ae16:	b148      	cbz	r0, ae2c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2d0>
    ae18:	f240 41fa 	movw	r1, #1274	; 0x4fa
    ae1c:	2035      	movs	r0, #53	; 0x35
    ae1e:	f7f9 f88f 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae22:	f240 41f9 	movw	r1, #1273	; 0x4f9
    ae26:	2035      	movs	r0, #53	; 0x35
    ae28:	f7f9 f88a 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae2c:	f891 0125 	ldrb.w	r0, [r1, #293]	; 0x125
    ae30:	2820      	cmp	r0, #32
    ae32:	d004      	beq.n	ae3e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2e2>
    ae34:	f240 41fc 	movw	r1, #1276	; 0x4fc
    ae38:	2035      	movs	r0, #53	; 0x35
    ae3a:	f7f9 f881 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae3e:	481d      	ldr	r0, [pc, #116]	; (aeb4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x358>)
    ae40:	f7f7 fa8a 	bl	2358 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    ae44:	f8d9 1020 	ldr.w	r1, [r9, #32]
    ae48:	2820      	cmp	r0, #32
    ae4a:	f881 0125 	strb.w	r0, [r1, #293]	; 0x125
    ae4e:	d016      	beq.n	ae7e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x322>
    ae50:	2300      	movs	r3, #0
    ae52:	2201      	movs	r2, #1
    ae54:	4668      	mov	r0, sp
    ae56:	f000 fc99 	bl	b78c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x534>
    ae5a:	f8d9 0020 	ldr.w	r0, [r9, #32]
    ae5e:	4669      	mov	r1, sp
    ae60:	f890 0125 	ldrb.w	r0, [r0, #293]	; 0x125
    ae64:	f7f6 fcfe 	bl	1864 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    ae68:	b170      	cbz	r0, ae88 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x32c>
    ae6a:	f8c9 5020 	str.w	r5, [r9, #32]
    ae6e:	f899 0014 	ldrb.w	r0, [r9, #20]
    ae72:	2800      	cmp	r0, #0
    ae74:	bf04      	itt	eq
    ae76:	b005      	addeq	sp, #20
    ae78:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae7c:	e69c      	b.n	abb8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5c>
    ae7e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    ae82:	2035      	movs	r0, #53	; 0x35
    ae84:	f7f9 f85c 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae88:	f240 5103 	movw	r1, #1283	; 0x503
    ae8c:	2035      	movs	r0, #53	; 0x35
    ae8e:	f7f9 f857 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae92:	b005      	add	sp, #20
    ae94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae98:	f7fc ba50 	b.w	733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ae9c:	f640 31d4 	movw	r1, #3028	; 0xbd4
    aea0:	2035      	movs	r0, #53	; 0x35
    aea2:	f7f9 f84d 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aea6:	0000      	.short	0x0000
    aea8:	20001008 	.word	0x20001008
    aeac:	20001040 	.word	0x20001040
    aeb0:	2000018c 	.word	0x2000018c
    aeb4:	0000b619 	.word	0x0000b619

0000aeb8 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    aeb8:	b570      	push	{r4, r5, r6, lr}
    aeba:	2254      	movs	r2, #84	; 0x54
    aebc:	2100      	movs	r1, #0
    aebe:	4819      	ldr	r0, [pc, #100]	; (af24 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x6c>)
    aec0:	f005 f812 	bl	fee8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    aec4:	f7fe f872 	bl	8fac <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    aec8:	2120      	movs	r1, #32
    aeca:	7001      	strb	r1, [r0, #0]
    aecc:	4816      	ldr	r0, [pc, #88]	; (af28 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x70>)
    aece:	2100      	movs	r1, #0
    aed0:	6001      	str	r1, [r0, #0]
    aed2:	6041      	str	r1, [r0, #4]
    aed4:	6081      	str	r1, [r0, #8]
    aed6:	60c1      	str	r1, [r0, #12]
    aed8:	4814      	ldr	r0, [pc, #80]	; (af2c <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x74>)
    aeda:	6041      	str	r1, [r0, #4]
    aedc:	6840      	ldr	r0, [r0, #4]
    aede:	f641 016a 	movw	r1, #6250	; 0x186a
    aee2:	4288      	cmp	r0, r1
    aee4:	d304      	bcc.n	aef0 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x38>
    aee6:	f640 31f4 	movw	r1, #3060	; 0xbf4
    aeea:	2035      	movs	r0, #53	; 0x35
    aeec:	f7f9 f828 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aef0:	f000 f81e 	bl	af30 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
    aef4:	4e0b      	ldr	r6, [pc, #44]	; (af24 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x6c>)
    aef6:	f242 7510 	movw	r5, #10000	; 0x2710
    aefa:	10a8      	asrs	r0, r5, #2
    aefc:	245b      	movs	r4, #91	; 0x5b
    aefe:	6070      	str	r0, [r6, #4]
    af00:	f7f8 fdf2 	bl	3ae8 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    af04:	2800      	cmp	r0, #0
    af06:	bf18      	it	ne
    af08:	2473      	movne	r4, #115	; 0x73
    af0a:	f008 ff43 	bl	13d94 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    af0e:	b910      	cbnz	r0, af16 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x5e>
    af10:	f008 ff36 	bl	13d80 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    af14:	b100      	cbz	r0, af18 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x60>
    af16:	1de4      	adds	r4, r4, #7
    af18:	f104 006b 	add.w	r0, r4, #107	; 0x6b
    af1c:	1a28      	subs	r0, r5, r0
    af1e:	60b0      	str	r0, [r6, #8]
    af20:	bd70      	pop	{r4, r5, r6, pc}
    af22:	0000      	.short	0x0000
    af24:	20001008 	.word	0x20001008
    af28:	20000ff8 	.word	0x20000ff8
    af2c:	2000018c 	.word	0x2000018c

0000af30 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    af30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    af34:	4f35      	ldr	r7, [pc, #212]	; (b00c <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xdc>)
    af36:	b083      	sub	sp, #12
    af38:	7838      	ldrb	r0, [r7, #0]
    af3a:	2800      	cmp	r0, #0
    af3c:	bf18      	it	ne
    af3e:	f000 f8ff 	blne	b140 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    af42:	2001      	movs	r0, #1
    af44:	f8df 80c8 	ldr.w	r8, [pc, #200]	; b010 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xe0>
    af48:	f888 0000 	strb.w	r0, [r8]
    af4c:	4669      	mov	r1, sp
    af4e:	2000      	movs	r0, #0
    af50:	f005 ff39 	bl	10dc6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    af54:	2800      	cmp	r0, #0
    af56:	bf04      	itt	eq
    af58:	2500      	moveq	r5, #0
    af5a:	f64f 76ff 	movweq	r6, #65535	; 0xffff
    af5e:	d02d      	beq.n	afbc <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x8c>
    af60:	e027      	b.n	afb2 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x82>
    af62:	9802      	ldr	r0, [sp, #8]
    af64:	2800      	cmp	r0, #0
    af66:	bf1c      	itt	ne
    af68:	f890 1124 	ldrbne.w	r1, [r0, #292]	; 0x124
    af6c:	2900      	cmpne	r1, #0
    af6e:	d025      	beq.n	afbc <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x8c>
    af70:	8800      	ldrh	r0, [r0, #0]
    af72:	42b0      	cmp	r0, r6
    af74:	bf18      	it	ne
    af76:	f04f 0920 	movne.w	r9, #32
    af7a:	d03f      	beq.n	affc <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xcc>
    af7c:	2100      	movs	r1, #0
    af7e:	f005 ff18 	bl	10db2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    af82:	0004      	movs	r4, r0
    af84:	d020      	beq.n	afc8 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x98>
    af86:	f894 0125 	ldrb.w	r0, [r4, #293]	; 0x125
    af8a:	f7f7 f8d9 	bl	2140 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    af8e:	f884 5124 	strb.w	r5, [r4, #292]	; 0x124
    af92:	f894 0125 	ldrb.w	r0, [r4, #293]	; 0x125
    af96:	f7f7 f8b1 	bl	20fc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    af9a:	b1d0      	cbz	r0, afd2 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xa2>
    af9c:	f884 9125 	strb.w	r9, [r4, #293]	; 0x125
    afa0:	f504 7084 	add.w	r0, r4, #264	; 0x108
    afa4:	f002 fa3e 	bl	d424 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    afa8:	4669      	mov	r1, sp
    afaa:	2000      	movs	r0, #0
    afac:	f005 ff0b 	bl	10dc6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    afb0:	b1f8      	cbz	r0, aff2 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xc2>
    afb2:	f44f 710f 	mov.w	r1, #572	; 0x23c
    afb6:	2035      	movs	r0, #53	; 0x35
    afb8:	f7f8 ffc2 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    afbc:	4668      	mov	r0, sp
    afbe:	f7f9 fa05 	bl	43cc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    afc2:	2800      	cmp	r0, #0
    afc4:	d0cd      	beq.n	af62 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x32>
    afc6:	e019      	b.n	affc <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xcc>
    afc8:	f240 5141 	movw	r1, #1345	; 0x541
    afcc:	2035      	movs	r0, #53	; 0x35
    afce:	f7f8 ffb7 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    afd2:	f44f 61a6 	mov.w	r1, #1328	; 0x530
    afd6:	2035      	movs	r0, #53	; 0x35
    afd8:	f7f8 ffb2 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    afdc:	9802      	ldr	r0, [sp, #8]
    afde:	2800      	cmp	r0, #0
    afe0:	bf1c      	itt	ne
    afe2:	f890 1124 	ldrbne.w	r1, [r0, #292]	; 0x124
    afe6:	2900      	cmpne	r1, #0
    afe8:	d003      	beq.n	aff2 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xc2>
    afea:	8800      	ldrh	r0, [r0, #0]
    afec:	42b0      	cmp	r0, r6
    afee:	d1c5      	bne.n	af7c <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x4c>
    aff0:	e004      	b.n	affc <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xcc>
    aff2:	4668      	mov	r0, sp
    aff4:	f7f9 f9ea 	bl	43cc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    aff8:	2800      	cmp	r0, #0
    affa:	d0ef      	beq.n	afdc <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xac>
    affc:	f888 5000 	strb.w	r5, [r8]
    b000:	f8a7 5050 	strh.w	r5, [r7, #80]	; 0x50
    b004:	b003      	add	sp, #12
    b006:	2000      	movs	r0, #0
    b008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b00c:	20001008 	.word	0x20001008
    b010:	20000ff8 	.word	0x20000ff8

0000b014 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    b014:	4901      	ldr	r1, [pc, #4]	; (b01c <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    b016:	7048      	strb	r0, [r1, #1]
    b018:	4770      	bx	lr
    b01a:	0000      	.short	0x0000
    b01c:	20000ff8 	.word	0x20000ff8

0000b020 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>:
    b020:	b570      	push	{r4, r5, r6, lr}
    b022:	4606      	mov	r6, r0
    b024:	480d      	ldr	r0, [pc, #52]	; (b05c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x3c>)
    b026:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b02a:	fbb0 f5f1 	udiv	r5, r0, r1
    b02e:	245b      	movs	r4, #91	; 0x5b
    b030:	f7f8 fd5a 	bl	3ae8 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    b034:	2800      	cmp	r0, #0
    b036:	bf18      	it	ne
    b038:	2473      	movne	r4, #115	; 0x73
    b03a:	f008 feab 	bl	13d94 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    b03e:	b910      	cbnz	r0, b046 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x26>
    b040:	f008 fe9e 	bl	13d80 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    b044:	b100      	cbz	r0, b048 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x28>
    b046:	1de4      	adds	r4, r4, #7
    b048:	f104 016b 	add.w	r1, r4, #107	; 0x6b
    b04c:	1948      	adds	r0, r1, r5
    b04e:	f100 01bc 	add.w	r1, r0, #188	; 0xbc
    b052:	4630      	mov	r0, r6
    b054:	f006 fe0f 	bl	11c76 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    b058:	b280      	uxth	r0, r0
    b05a:	bd70      	pop	{r4, r5, r6, pc}
    b05c:	000122f9 	.word	0x000122f9

0000b060 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    b060:	2900      	cmp	r1, #0
    b062:	bf1c      	itt	ne
    b064:	2011      	movne	r0, #17
    b066:	4770      	bxne	lr
    b068:	b5f0      	push	{r4, r5, r6, r7, lr}
    b06a:	4c33      	ldr	r4, [pc, #204]	; (b138 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xd8>)
    b06c:	4605      	mov	r5, r0
    b06e:	b085      	sub	sp, #20
    b070:	7820      	ldrb	r0, [r4, #0]
    b072:	2800      	cmp	r0, #0
    b074:	bf1e      	ittt	ne
    b076:	200c      	movne	r0, #12
    b078:	b005      	addne	sp, #20
    b07a:	bdf0      	popne	{r4, r5, r6, r7, pc}
    b07c:	f7fd ff96 	bl	8fac <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    b080:	4607      	mov	r7, r0
    b082:	2000      	movs	r0, #0
    b084:	7060      	strb	r0, [r4, #1]
    b086:	2104      	movs	r1, #4
    b088:	7021      	strb	r1, [r4, #0]
    b08a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    b08e:	2d00      	cmp	r5, #0
    b090:	bf08      	it	eq
    b092:	70a0      	strbeq	r0, [r4, #2]
    b094:	d007      	beq.n	b0a6 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x46>
    b096:	2001      	movs	r0, #1
    b098:	70a0      	strb	r0, [r4, #2]
    b09a:	f242 7010 	movw	r0, #10000	; 0x2710
    b09e:	6861      	ldr	r1, [r4, #4]
    b0a0:	4368      	muls	r0, r5
    b0a2:	4408      	add	r0, r1
    b0a4:	62a0      	str	r0, [r4, #40]	; 0x28
    b0a6:	2000      	movs	r0, #0
    b0a8:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
    b0ac:	4606      	mov	r6, r0
    b0ae:	255b      	movs	r5, #91	; 0x5b
    b0b0:	f7f8 fd1a 	bl	3ae8 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    b0b4:	2800      	cmp	r0, #0
    b0b6:	bf18      	it	ne
    b0b8:	2573      	movne	r5, #115	; 0x73
    b0ba:	f008 fe6b 	bl	13d94 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    b0be:	b910      	cbnz	r0, b0c6 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    b0c0:	f008 fe5e 	bl	13d80 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    b0c4:	b100      	cbz	r0, b0c8 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x68>
    b0c6:	1ded      	adds	r5, r5, #7
    b0c8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    b0cc:	f105 026b 	add.w	r2, r5, #107	; 0x6b
    b0d0:	2100      	movs	r1, #0
    b0d2:	bf00      	nop
    b0d4:	eb04 0081 	add.w	r0, r4, r1, lsl #2
    b0d8:	eb06 0c02 	add.w	ip, r6, r2
    b0dc:	6880      	ldr	r0, [r0, #8]
    b0de:	eb00 060c 	add.w	r6, r0, ip
    b0e2:	1c48      	adds	r0, r1, #1
    b0e4:	b2c1      	uxtb	r1, r0
    b0e6:	428b      	cmp	r3, r1
    b0e8:	d2f4      	bcs.n	b0d4 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x74>
    b0ea:	2100      	movs	r1, #0
    b0ec:	4813      	ldr	r0, [pc, #76]	; (b13c <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xdc>)
    b0ee:	63e6      	str	r6, [r4, #60]	; 0x3c
    b0f0:	f7f7 f932 	bl	2358 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    b0f4:	7038      	strb	r0, [r7, #0]
    b0f6:	2820      	cmp	r0, #32
    b0f8:	d013      	beq.n	b122 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xc2>
    b0fa:	2200      	movs	r2, #0
    b0fc:	2101      	movs	r1, #1
    b0fe:	4668      	mov	r0, sp
    b100:	f000 fce4 	bl	bacc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x874>
    b104:	b190      	cbz	r0, b12c <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xcc>
    b106:	7838      	ldrb	r0, [r7, #0]
    b108:	4669      	mov	r1, sp
    b10a:	f7f6 fbab 	bl	1864 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    b10e:	2800      	cmp	r0, #0
    b110:	bf1e      	ittt	ne
    b112:	2000      	movne	r0, #0
    b114:	b005      	addne	sp, #20
    b116:	bdf0      	popne	{r4, r5, r6, r7, pc}
    b118:	f240 4199 	movw	r1, #1177	; 0x499
    b11c:	2035      	movs	r0, #53	; 0x35
    b11e:	f7f8 ff0f 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b122:	f240 4196 	movw	r1, #1174	; 0x496
    b126:	2035      	movs	r0, #53	; 0x35
    b128:	f7f8 ff0a 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b12c:	f44f 6193 	mov.w	r1, #1176	; 0x498
    b130:	2035      	movs	r0, #53	; 0x35
    b132:	f7f8 ff05 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b136:	0000      	.short	0x0000
    b138:	20001008 	.word	0x20001008
    b13c:	0000b329 	.word	0x0000b329

0000b140 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    b140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b144:	2600      	movs	r6, #0
    b146:	f7fd ff31 	bl	8fac <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    b14a:	4c3f      	ldr	r4, [pc, #252]	; (b248 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x108>)
    b14c:	4607      	mov	r7, r0
    b14e:	7820      	ldrb	r0, [r4, #0]
    b150:	2804      	cmp	r0, #4
    b152:	bf1f      	itttt	ne
    b154:	7820      	ldrbne	r0, [r4, #0]
    b156:	2805      	cmpne	r0, #5
    b158:	200c      	movne	r0, #12
    b15a:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    b15e:	f04f 0001 	mov.w	r0, #1
    b162:	7060      	strb	r0, [r4, #1]
    b164:	7d20      	ldrb	r0, [r4, #20]
    b166:	f04f 0500 	mov.w	r5, #0
    b16a:	b1b0      	cbz	r0, b19a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x5a>
    b16c:	f3ef 8810 	mrs	r8, PRIMASK
    b170:	b672      	cpsid	i
    b172:	7d20      	ldrb	r0, [r4, #20]
    b174:	2800      	cmp	r0, #0
    b176:	bf1c      	itt	ne
    b178:	7d60      	ldrbne	r0, [r4, #21]
    b17a:	2800      	cmpne	r0, #0
    b17c:	d009      	beq.n	b192 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x52>
    b17e:	f7fe f903 	bl	9388 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    b182:	7d20      	ldrb	r0, [r4, #20]
    b184:	b128      	cbz	r0, b192 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x52>
    b186:	f003 fd23 	bl	ebd0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    b18a:	f7f7 f90d 	bl	23a8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    b18e:	7525      	strb	r5, [r4, #20]
    b190:	7565      	strb	r5, [r4, #21]
    b192:	f1b8 0f00 	cmp.w	r8, #0
    b196:	d10e      	bne.n	b1b6 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x76>
    b198:	e00c      	b.n	b1b4 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x74>
    b19a:	7838      	ldrb	r0, [r7, #0]
    b19c:	f7f6 fe92 	bl	1ec4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    b1a0:	f8b7 0003 	ldrh.w	r0, [r7, #3]
    b1a4:	04c0      	lsls	r0, r0, #19
    b1a6:	0cc0      	lsrs	r0, r0, #19
    b1a8:	d005      	beq.n	b1b6 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x76>
    b1aa:	2100      	movs	r1, #0
    b1ac:	2003      	movs	r0, #3
    b1ae:	f7fd fed7 	bl	8f60 <sym_JH5ADKYUIEBFPMKUMAVM7RVFHSJKEQWWRBLQ2AQ>
    b1b2:	e000      	b.n	b1b6 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x76>
    b1b4:	b662      	cpsie	i
    b1b6:	7838      	ldrb	r0, [r7, #0]
    b1b8:	f7f6 ffc2 	bl	2140 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    b1bc:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    b1c0:	2800      	cmp	r0, #0
    b1c2:	7820      	ldrb	r0, [r4, #0]
    b1c4:	d02f      	beq.n	b226 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xe6>
    b1c6:	2805      	cmp	r0, #5
    b1c8:	d004      	beq.n	b1d4 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x94>
    b1ca:	f240 318f 	movw	r1, #911	; 0x38f
    b1ce:	2035      	movs	r0, #53	; 0x35
    b1d0:	f7f8 feb6 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1d4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    b1d6:	b120      	cbz	r0, b1e2 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xa2>
    b1d8:	f104 0038 	add.w	r0, r4, #56	; 0x38
    b1dc:	f002 f8d8 	bl	d390 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    b1e0:	e003      	b.n	b1ea <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xaa>
    b1e2:	f104 0038 	add.w	r0, r4, #56	; 0x38
    b1e6:	f002 f91d 	bl	d424 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    b1ea:	7065      	strb	r5, [r4, #1]
    b1ec:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    b1f0:	2800      	cmp	r0, #0
    b1f2:	bf18      	it	ne
    b1f4:	260c      	movne	r6, #12
    b1f6:	f7fd ffc3 	bl	9180 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    b1fa:	70e5      	strb	r5, [r4, #3]
    b1fc:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    b200:	6225      	str	r5, [r4, #32]
    b202:	7820      	ldrb	r0, [r4, #0]
    b204:	2804      	cmp	r0, #4
    b206:	bf08      	it	eq
    b208:	f7ff fab4 	bleq	a774 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y>
    b20c:	7025      	strb	r5, [r4, #0]
    b20e:	f7fd fecd 	bl	8fac <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    b212:	4604      	mov	r4, r0
    b214:	7800      	ldrb	r0, [r0, #0]
    b216:	f7f6 ff71 	bl	20fc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    b21a:	b178      	cbz	r0, b23c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xfc>
    b21c:	2020      	movs	r0, #32
    b21e:	7020      	strb	r0, [r4, #0]
    b220:	4630      	mov	r0, r6
    b222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b226:	2805      	cmp	r0, #5
    b228:	d1db      	bne.n	b1e2 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xa2>
    b22a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    b22c:	2800      	cmp	r0, #0
    b22e:	d1d8      	bne.n	b1e2 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xa2>
    b230:	6a20      	ldr	r0, [r4, #32]
    b232:	f500 7084 	add.w	r0, r0, #264	; 0x108
    b236:	f002 f8f5 	bl	d424 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    b23a:	e7d2      	b.n	b1e2 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xa2>
    b23c:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    b240:	2035      	movs	r0, #53	; 0x35
    b242:	f7f8 fe7d 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b246:	0000      	.short	0x0000
    b248:	20001008 	.word	0x20001008

0000b24c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    b24c:	4801      	ldr	r0, [pc, #4]	; (b254 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    b24e:	7800      	ldrb	r0, [r0, #0]
    b250:	4770      	bx	lr
    b252:	0000      	.short	0x0000
    b254:	20001008 	.word	0x20001008

0000b258 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    b258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b25c:	4c31      	ldr	r4, [pc, #196]	; (b324 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xcc>)
    b25e:	b084      	sub	sp, #16
    b260:	7821      	ldrb	r1, [r4, #0]
    b262:	b121      	cbz	r1, b26e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x16>
    b264:	f240 414f 	movw	r1, #1103	; 0x44f
    b268:	2035      	movs	r0, #53	; 0x35
    b26a:	f7f8 fe69 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b26e:	2200      	movs	r2, #0
    b270:	9200      	str	r2, [sp, #0]
    b272:	9201      	str	r2, [sp, #4]
    b274:	9202      	str	r2, [sp, #8]
    b276:	7803      	ldrb	r3, [r0, #0]
    b278:	4615      	mov	r5, r2
    b27a:	f013 0f01 	tst.w	r3, #1
    b27e:	4611      	mov	r1, r2
    b280:	466b      	mov	r3, sp
    b282:	d004      	beq.n	b28e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x36>
    b284:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
    b288:	2501      	movs	r5, #1
    b28a:	9100      	str	r1, [sp, #0]
    b28c:	4629      	mov	r1, r5
    b28e:	f890 c000 	ldrb.w	ip, [r0]
    b292:	f01c 0f02 	tst.w	ip, #2
    b296:	d006      	beq.n	b2a6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4e>
    b298:	e9d0 2c03 	ldrd	r2, ip, [r0, #12]
    b29c:	f843 c021 	str.w	ip, [r3, r1, lsl #2]
    b2a0:	f045 0502 	orr.w	r5, r5, #2
    b2a4:	1c49      	adds	r1, r1, #1
    b2a6:	f890 c000 	ldrb.w	ip, [r0]
    b2aa:	f01c 0f04 	tst.w	ip, #4
    b2ae:	d006      	beq.n	b2be <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x66>
    b2b0:	e9d0 2005 	ldrd	r2, r0, [r0, #20]
    b2b4:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    b2b8:	f045 0508 	orr.w	r5, r5, #8
    b2bc:	1c49      	adds	r1, r1, #1
    b2be:	1e48      	subs	r0, r1, #1
    b2c0:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    b2c4:	4698      	mov	r8, r3
    b2c6:	2600      	movs	r6, #0
    b2c8:	275b      	movs	r7, #91	; 0x5b
    b2ca:	6062      	str	r2, [r4, #4]
    b2cc:	f7f8 fc0c 	bl	3ae8 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    b2d0:	2800      	cmp	r0, #0
    b2d2:	bf18      	it	ne
    b2d4:	2773      	movne	r7, #115	; 0x73
    b2d6:	f008 fd5d 	bl	13d94 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    b2da:	b910      	cbnz	r0, b2e2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    b2dc:	f008 fd50 	bl	13d80 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    b2e0:	b100      	cbz	r0, b2e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8c>
    b2e2:	1dff      	adds	r7, r7, #7
    b2e4:	f107 006b 	add.w	r0, r7, #107	; 0x6b
    b2e8:	f015 0f01 	tst.w	r5, #1
    b2ec:	d003      	beq.n	b2f6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9e>
    b2ee:	9900      	ldr	r1, [sp, #0]
    b2f0:	1a09      	subs	r1, r1, r0
    b2f2:	2601      	movs	r6, #1
    b2f4:	60a1      	str	r1, [r4, #8]
    b2f6:	f015 0f02 	tst.w	r5, #2
    b2fa:	d006      	beq.n	b30a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb2>
    b2fc:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
    b300:	eb04 0186 	add.w	r1, r4, r6, lsl #2
    b304:	1a12      	subs	r2, r2, r0
    b306:	1c76      	adds	r6, r6, #1
    b308:	608a      	str	r2, [r1, #8]
    b30a:	f015 0f08 	tst.w	r5, #8
    b30e:	d005      	beq.n	b31c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc4>
    b310:	f858 1026 	ldr.w	r1, [r8, r6, lsl #2]
    b314:	eb04 0286 	add.w	r2, r4, r6, lsl #2
    b318:	1a08      	subs	r0, r1, r0
    b31a:	6090      	str	r0, [r2, #8]
    b31c:	b004      	add	sp, #16
    b31e:	2000      	movs	r0, #0
    b320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b324:	20001008 	.word	0x20001008
    b328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b32c:	488c      	ldr	r0, [pc, #560]	; (b560 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x308>)
    b32e:	b084      	sub	sp, #16
    b330:	460d      	mov	r5, r1
    b332:	f890 0400 	ldrb.w	r0, [r0, #1024]	; 0x400
    b336:	498b      	ldr	r1, [pc, #556]	; (b564 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x30c>)
    b338:	0940      	lsrs	r0, r0, #5
    b33a:	f891 1400 	ldrb.w	r1, [r1, #1024]	; 0x400
    b33e:	0949      	lsrs	r1, r1, #5
    b340:	4288      	cmp	r0, r1
    b342:	d004      	beq.n	b34e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xf6>
    b344:	f240 21c5 	movw	r1, #709	; 0x2c5
    b348:	2035      	movs	r0, #53	; 0x35
    b34a:	f7f8 fdf9 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b34e:	f7fd fe2d 	bl	8fac <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    b352:	2600      	movs	r6, #0
    b354:	4c84      	ldr	r4, [pc, #528]	; (b568 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x310>)
    b356:	4680      	mov	r8, r0
    b358:	f04f 0901 	mov.w	r9, #1
    b35c:	2d09      	cmp	r5, #9
    b35e:	f080 80fa 	bcs.w	b556 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2fe>
    b362:	e8df f005 	tbb	[pc, r5]
    b366:	9205      	.short	0x9205
    b368:	f8b3b8b8 	.word	0xf8b3b8b8
    b36c:	00f3eee2 	.word	0x00f3eee2
    b370:	f884 9014 	strb.w	r9, [r4, #20]
    b374:	7860      	ldrb	r0, [r4, #1]
    b376:	2800      	cmp	r0, #0
    b378:	bf1c      	itt	ne
    b37a:	b004      	addne	sp, #16
    b37c:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b380:	f898 0000 	ldrb.w	r0, [r8]
    b384:	f7f6 f94a 	bl	161c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    b388:	4605      	mov	r5, r0
    b38a:	61a0      	str	r0, [r4, #24]
    b38c:	4629      	mov	r1, r5
    b38e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    b390:	f7f6 f920 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    b394:	6861      	ldr	r1, [r4, #4]
    b396:	fbb0 f0f1 	udiv	r0, r0, r1
    b39a:	2800      	cmp	r0, #0
    b39c:	bf14      	ite	ne
    b39e:	f04f 0a01 	movne.w	sl, #1
    b3a2:	f04f 0a00 	moveq.w	sl, #0
    b3a6:	9602      	str	r6, [sp, #8]
    b3a8:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    b3ac:	2800      	cmp	r0, #0
    b3ae:	bf08      	it	eq
    b3b0:	4633      	moveq	r3, r6
    b3b2:	d031      	beq.n	b418 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c0>
    b3b4:	275b      	movs	r7, #91	; 0x5b
    b3b6:	f7f8 fb97 	bl	3ae8 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    b3ba:	2800      	cmp	r0, #0
    b3bc:	bf18      	it	ne
    b3be:	2773      	movne	r7, #115	; 0x73
    b3c0:	f008 fce8 	bl	13d94 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    b3c4:	b910      	cbnz	r0, b3cc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x174>
    b3c6:	f008 fcdb 	bl	13d80 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    b3ca:	b100      	cbz	r0, b3ce <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x176>
    b3cc:	1dff      	adds	r7, r7, #7
    b3ce:	376b      	adds	r7, #107	; 0x6b
    b3d0:	4629      	mov	r1, r5
    b3d2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    b3d4:	f7f6 f8fe 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    b3d8:	6861      	ldr	r1, [r4, #4]
    b3da:	fbb0 f0f1 	udiv	r0, r0, r1
    b3de:	4341      	muls	r1, r0
    b3e0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    b3e2:	f7f6 f8c5 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    b3e6:	4629      	mov	r1, r5
    b3e8:	f7f6 f8f4 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    b3ec:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
    b3f0:	2300      	movs	r3, #0
    b3f2:	1c52      	adds	r2, r2, #1
    b3f4:	f104 0108 	add.w	r1, r4, #8
    b3f8:	fa5f f282 	uxtb.w	r2, r2
    b3fc:	f8d1 c000 	ldr.w	ip, [r1]
    b400:	44bc      	add	ip, r7
    b402:	4584      	cmp	ip, r0
    b404:	d803      	bhi.n	b40e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1b6>
    b406:	1c5b      	adds	r3, r3, #1
    b408:	eba0 000c 	sub.w	r0, r0, ip
    b40c:	b2db      	uxtb	r3, r3
    b40e:	1d09      	adds	r1, r1, #4
    b410:	1e52      	subs	r2, r2, #1
    b412:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    b416:	d1f1      	bne.n	b3fc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    b418:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
    b41c:	f88d 300c 	strb.w	r3, [sp, #12]
    b420:	f8b8 0003 	ldrh.w	r0, [r8, #3]
    b424:	04c0      	lsls	r0, r0, #19
    b426:	0cc0      	lsrs	r0, r0, #19
    b428:	d007      	beq.n	b43a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1e2>
    b42a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    b42c:	9000      	str	r0, [sp, #0]
    b42e:	2003      	movs	r0, #3
    b430:	f88d 0004 	strb.w	r0, [sp, #4]
    b434:	f88d 600d 	strb.w	r6, [sp, #13]
    b438:	e015      	b.n	b466 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x20e>
    b43a:	f1ba 0f00 	cmp.w	sl, #0
    b43e:	bf14      	ite	ne
    b440:	f88d 6004 	strbne.w	r6, [sp, #4]
    b444:	f88d 9004 	strbeq.w	r9, [sp, #4]
    b448:	4629      	mov	r1, r5
    b44a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    b44c:	f7f6 f8c2 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    b450:	6861      	ldr	r1, [r4, #4]
    b452:	fbb0 f2f1 	udiv	r2, r0, r1
    b456:	fb01 0012 	mls	r0, r1, r2, r0
    b45a:	2800      	cmp	r0, #0
    b45c:	bf0c      	ite	eq
    b45e:	2001      	moveq	r0, #1
    b460:	2000      	movne	r0, #0
    b462:	f88d 000d 	strb.w	r0, [sp, #13]
    b466:	4668      	mov	r0, sp
    b468:	f7fd feca 	bl	9200 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    b46c:	b120      	cbz	r0, b478 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x220>
    b46e:	f240 21ff 	movw	r1, #767	; 0x2ff
    b472:	2035      	movs	r0, #53	; 0x35
    b474:	f7f8 fd64 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b478:	493c      	ldr	r1, [pc, #240]	; (b56c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x314>)
    b47a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    b47c:	38e0      	subs	r0, #224	; 0xe0
    b47e:	60c8      	str	r0, [r1, #12]
    b480:	f7f7 f874 	bl	256c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    b484:	b004      	add	sp, #16
    b486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b48a:	7860      	ldrb	r0, [r4, #1]
    b48c:	b180      	cbz	r0, b4b0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x258>
    b48e:	f7fd ff7b 	bl	9388 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    b492:	7d20      	ldrb	r0, [r4, #20]
    b494:	2800      	cmp	r0, #0
    b496:	bf04      	itt	eq
    b498:	b004      	addeq	sp, #16
    b49a:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b49e:	f003 fb97 	bl	ebd0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    b4a2:	f7f6 ff81 	bl	23a8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    b4a6:	7526      	strb	r6, [r4, #20]
    b4a8:	7566      	strb	r6, [r4, #21]
    b4aa:	b004      	add	sp, #16
    b4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b4b0:	f884 9015 	strb.w	r9, [r4, #21]
    b4b4:	f7fd ff62 	bl	937c <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    b4b8:	2800      	cmp	r0, #0
    b4ba:	bf04      	itt	eq
    b4bc:	b004      	addeq	sp, #16
    b4be:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b4c2:	f240 3112 	movw	r1, #786	; 0x312
    b4c6:	2035      	movs	r0, #53	; 0x35
    b4c8:	f7f8 fd3a 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b4cc:	b004      	add	sp, #16
    b4ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b4d2:	f003 bfbd 	b.w	f450 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    b4d6:	f898 5000 	ldrb.w	r5, [r8]
    b4da:	f7fd fd67 	bl	8fac <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    b4de:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    b4e2:	04c0      	lsls	r0, r0, #19
    b4e4:	0cc0      	lsrs	r0, r0, #19
    b4e6:	d005      	beq.n	b4f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x29c>
    b4e8:	2101      	movs	r1, #1
    b4ea:	2003      	movs	r0, #3
    b4ec:	f7fd fd38 	bl	8f60 <sym_JH5ADKYUIEBFPMKUMAVM7RVFHSJKEQWWRBLQ2AQ>
    b4f0:	f7fb ff24 	bl	733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    b4f4:	2201      	movs	r2, #1
    b4f6:	2100      	movs	r1, #0
    b4f8:	4668      	mov	r0, sp
    b4fa:	f000 fae7 	bl	bacc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x874>
    b4fe:	b168      	cbz	r0, b51c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2c4>
    b500:	4628      	mov	r0, r5
    b502:	4669      	mov	r1, sp
    b504:	f7f6 f9ae 	bl	1864 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    b508:	2800      	cmp	r0, #0
    b50a:	bf1c      	itt	ne
    b50c:	b004      	addne	sp, #16
    b50e:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b512:	f640 217f 	movw	r1, #2687	; 0xa7f
    b516:	2035      	movs	r0, #53	; 0x35
    b518:	f7f8 fd12 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b51c:	f884 9003 	strb.w	r9, [r4, #3]
    b520:	f000 f826 	bl	b570 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x318>
    b524:	b004      	add	sp, #16
    b526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b52a:	f000 fa5d 	bl	b9e8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    b52e:	2800      	cmp	r0, #0
    b530:	bf1c      	itt	ne
    b532:	b004      	addne	sp, #16
    b534:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b538:	b004      	add	sp, #16
    b53a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b53e:	f007 b84b 	b.w	125d8 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    b542:	b004      	add	sp, #16
    b544:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b548:	f000 b812 	b.w	b570 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x318>
    b54c:	f240 3136 	movw	r1, #822	; 0x336
    b550:	2035      	movs	r0, #53	; 0x35
    b552:	f7f8 fcf5 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b556:	f240 313a 	movw	r1, #826	; 0x33a
    b55a:	2035      	movs	r0, #53	; 0x35
    b55c:	f7f8 fcf0 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b560:	e000e001 	.word	0xe000e001
    b564:	e000e00b 	.word	0xe000e00b
    b568:	20001008 	.word	0x20001008
    b56c:	20000ff8 	.word	0x20000ff8
    b570:	b570      	push	{r4, r5, r6, lr}
    b572:	4c28      	ldr	r4, [pc, #160]	; (b614 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3bc>)
    b574:	7820      	ldrb	r0, [r4, #0]
    b576:	b170      	cbz	r0, b596 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x33e>
    b578:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    b57c:	4620      	mov	r0, r4
    b57e:	2500      	movs	r5, #0
    b580:	2900      	cmp	r1, #0
    b582:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    b584:	7821      	ldrb	r1, [r4, #0]
    b586:	d01b      	beq.n	b5c0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x368>
    b588:	2905      	cmp	r1, #5
    b58a:	d009      	beq.n	b5a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x348>
    b58c:	f240 318f 	movw	r1, #911	; 0x38f
    b590:	2035      	movs	r0, #53	; 0x35
    b592:	f7f8 fcd5 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b596:	f240 21b1 	movw	r1, #689	; 0x2b1
    b59a:	2035      	movs	r0, #53	; 0x35
    b59c:	f7f8 fcd0 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5a0:	b120      	cbz	r0, b5ac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x354>
    b5a2:	f104 0038 	add.w	r0, r4, #56	; 0x38
    b5a6:	f001 fef3 	bl	d390 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    b5aa:	e003      	b.n	b5b4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x35c>
    b5ac:	f104 0038 	add.w	r0, r4, #56	; 0x38
    b5b0:	f001 ff38 	bl	d424 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    b5b4:	78e0      	ldrb	r0, [r4, #3]
    b5b6:	b188      	cbz	r0, b5dc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x384>
    b5b8:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    b5bc:	b150      	cbz	r0, b5d4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x37c>
    b5be:	e00d      	b.n	b5dc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x384>
    b5c0:	2905      	cmp	r1, #5
    b5c2:	bf08      	it	eq
    b5c4:	2800      	cmpeq	r0, #0
    b5c6:	d1f1      	bne.n	b5ac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x354>
    b5c8:	6a20      	ldr	r0, [r4, #32]
    b5ca:	f500 7084 	add.w	r0, r0, #264	; 0x108
    b5ce:	f001 ff29 	bl	d424 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    b5d2:	e7eb      	b.n	b5ac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x354>
    b5d4:	f7fd ff10 	bl	93f8 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    b5d8:	f7fb feb0 	bl	733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    b5dc:	f7fd fdd0 	bl	9180 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    b5e0:	70e5      	strb	r5, [r4, #3]
    b5e2:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    b5e6:	6225      	str	r5, [r4, #32]
    b5e8:	7820      	ldrb	r0, [r4, #0]
    b5ea:	2804      	cmp	r0, #4
    b5ec:	bf08      	it	eq
    b5ee:	f7ff f8c1 	bleq	a774 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y>
    b5f2:	7025      	strb	r5, [r4, #0]
    b5f4:	f7fd fcda 	bl	8fac <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    b5f8:	4604      	mov	r4, r0
    b5fa:	7800      	ldrb	r0, [r0, #0]
    b5fc:	f7f6 fd7e 	bl	20fc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    b600:	2800      	cmp	r0, #0
    b602:	bf1e      	ittt	ne
    b604:	2020      	movne	r0, #32
    b606:	7020      	strbne	r0, [r4, #0]
    b608:	bd70      	popne	{r4, r5, r6, pc}
    b60a:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    b60e:	2035      	movs	r0, #53	; 0x35
    b610:	f7f8 fc96 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b614:	20001008 	.word	0x20001008
    b618:	b570      	push	{r4, r5, r6, lr}
    b61a:	b084      	sub	sp, #16
    b61c:	0004      	movs	r4, r0
    b61e:	d00e      	beq.n	b63e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e6>
    b620:	4857      	ldr	r0, [pc, #348]	; (b780 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x528>)
    b622:	f890 0400 	ldrb.w	r0, [r0, #1024]	; 0x400
    b626:	4a57      	ldr	r2, [pc, #348]	; (b784 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x52c>)
    b628:	0940      	lsrs	r0, r0, #5
    b62a:	f892 2400 	ldrb.w	r2, [r2, #1024]	; 0x400
    b62e:	0952      	lsrs	r2, r2, #5
    b630:	4290      	cmp	r0, r2
    b632:	d009      	beq.n	b648 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3f0>
    b634:	f240 215f 	movw	r1, #607	; 0x25f
    b638:	2035      	movs	r0, #53	; 0x35
    b63a:	f7f8 fc81 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b63e:	f44f 7117 	mov.w	r1, #604	; 0x25c
    b642:	2035      	movs	r0, #53	; 0x35
    b644:	f7f8 fc7c 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b648:	2000      	movs	r0, #0
    b64a:	2909      	cmp	r1, #9
    b64c:	d27e      	bcs.n	b74c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4f4>
    b64e:	e8df f001 	tbb	[pc, r1]
    b652:	4305      	.short	0x4305
    b654:	91484d4d 	.word	0x91484d4d
    b658:	008c6961 	.word	0x008c6961
    b65c:	f894 0124 	ldrb.w	r0, [r4, #292]	; 0x124
    b660:	b170      	cbz	r0, b680 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x428>
    b662:	4620      	mov	r0, r4
    b664:	f000 fdc2 	bl	c1ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
    b668:	f894 606b 	ldrb.w	r6, [r4, #107]	; 0x6b
    b66c:	255b      	movs	r5, #91	; 0x5b
    b66e:	f7f8 fa3b 	bl	3ae8 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    b672:	2800      	cmp	r0, #0
    b674:	bf18      	it	ne
    b676:	2573      	movne	r5, #115	; 0x73
    b678:	f008 fb8c 	bl	13d94 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    b67c:	b940      	cbnz	r0, b690 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x438>
    b67e:	e004      	b.n	b68a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x432>
    b680:	f240 2165 	movw	r1, #613	; 0x265
    b684:	2035      	movs	r0, #53	; 0x35
    b686:	f7f8 fc5b 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b68a:	f008 fb79 	bl	13d80 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    b68e:	b100      	cbz	r0, b692 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x43a>
    b690:	1ded      	adds	r5, r5, #7
    b692:	f505 7094 	add.w	r0, r5, #296	; 0x128
    b696:	f016 010c 	ands.w	r1, r6, #12
    b69a:	bf18      	it	ne
    b69c:	2128      	movne	r1, #40	; 0x28
    b69e:	1846      	adds	r6, r0, r1
    b6a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    b6a2:	68e0      	ldr	r0, [r4, #12]
    b6a4:	4288      	cmp	r0, r1
    b6a6:	bf38      	it	cc
    b6a8:	4601      	movcc	r1, r0
    b6aa:	4632      	mov	r2, r6
    b6ac:	4620      	mov	r0, r4
    b6ae:	f006 fa2a 	bl	11b06 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    b6b2:	4d35      	ldr	r5, [pc, #212]	; (b788 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x530>)
    b6b4:	4632      	mov	r2, r6
    b6b6:	6068      	str	r0, [r5, #4]
    b6b8:	4620      	mov	r0, r4
    b6ba:	68e1      	ldr	r1, [r4, #12]
    b6bc:	f006 fa23 	bl	11b06 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    b6c0:	60a8      	str	r0, [r5, #8]
    b6c2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    b6c6:	f006 fa93 	bl	11bf0 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    b6ca:	38ac      	subs	r0, #172	; 0xac
    b6cc:	60e8      	str	r0, [r5, #12]
    b6ce:	b004      	add	sp, #16
    b6d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b6d4:	f7f6 bf4a 	b.w	256c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    b6d8:	b004      	add	sp, #16
    b6da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b6de:	f000 bf53 	b.w	c588 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
    b6e2:	b004      	add	sp, #16
    b6e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b6e8:	f003 beb2 	b.w	f450 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    b6ec:	2200      	movs	r2, #0
    b6ee:	2301      	movs	r3, #1
    b6f0:	4621      	mov	r1, r4
    b6f2:	4668      	mov	r0, sp
    b6f4:	f000 f84a 	bl	b78c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x534>
    b6f8:	f894 0125 	ldrb.w	r0, [r4, #293]	; 0x125
    b6fc:	4669      	mov	r1, sp
    b6fe:	f7f6 f8b1 	bl	1864 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    b702:	2800      	cmp	r0, #0
    b704:	bf1c      	itt	ne
    b706:	b004      	addne	sp, #16
    b708:	bd70      	popne	{r4, r5, r6, pc}
    b70a:	f640 2139 	movw	r1, #2617	; 0xa39
    b70e:	2035      	movs	r0, #53	; 0x35
    b710:	f7f8 fc16 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b714:	2001      	movs	r0, #1
    b716:	f7f5 fdff 	bl	1318 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    b71a:	b004      	add	sp, #16
    b71c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b720:	f005 bd5e 	b.w	111e0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    b724:	f894 1124 	ldrb.w	r1, [r4, #292]	; 0x124
    b728:	2904      	cmp	r1, #4
    b72a:	d004      	beq.n	b736 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4de>
    b72c:	f240 2199 	movw	r1, #665	; 0x299
    b730:	2035      	movs	r0, #53	; 0x35
    b732:	f7f8 fc05 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b736:	f884 0124 	strb.w	r0, [r4, #292]	; 0x124
    b73a:	f894 0125 	ldrb.w	r0, [r4, #293]	; 0x125
    b73e:	f7f6 fcdd 	bl	20fc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    b742:	b168      	cbz	r0, b760 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x508>
    b744:	2020      	movs	r0, #32
    b746:	f884 0125 	strb.w	r0, [r4, #293]	; 0x125
    b74a:	e000      	b.n	b74e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4f6>
    b74c:	e012      	b.n	b774 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x51c>
    b74e:	f504 7084 	add.w	r0, r4, #264	; 0x108
    b752:	f001 fe67 	bl	d424 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    b756:	b004      	add	sp, #16
    b758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b75c:	f7fb bdee 	b.w	733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    b760:	f44f 61a6 	mov.w	r1, #1328	; 0x530
    b764:	2035      	movs	r0, #53	; 0x35
    b766:	f7f8 fbeb 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b76a:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    b76e:	2035      	movs	r0, #53	; 0x35
    b770:	f7f8 fbe6 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b774:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    b778:	2035      	movs	r0, #53	; 0x35
    b77a:	f7f8 fbe1 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b77e:	0000      	.short	0x0000
    b780:	e000e001 	.word	0xe000e001
    b784:	e000e00b 	.word	0xe000e00b
    b788:	20000ff8 	.word	0x20000ff8
    b78c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b790:	4605      	mov	r5, r0
    b792:	2700      	movs	r7, #0
    b794:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    b798:	6a0e      	ldr	r6, [r1, #32]
    b79a:	b081      	sub	sp, #4
    b79c:	469a      	mov	sl, r3
    b79e:	460c      	mov	r4, r1
    b7a0:	46b8      	mov	r8, r7
    b7a2:	280d      	cmp	r0, #13
    b7a4:	bf18      	it	ne
    b7a6:	280c      	cmpne	r0, #12
    b7a8:	d014      	beq.n	b7d4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x57c>
    b7aa:	2824      	cmp	r0, #36	; 0x24
    b7ac:	bf1e      	ittt	ne
    b7ae:	f894 0086 	ldrbne.w	r0, [r4, #134]	; 0x86
    b7b2:	2824      	cmpne	r0, #36	; 0x24
    b7b4:	f04f 0900 	movne.w	r9, #0
    b7b8:	d00c      	beq.n	b7d4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x57c>
    b7ba:	bf00      	nop
    b7bc:	f04f 0b5b 	mov.w	fp, #91	; 0x5b
    b7c0:	f7f8 f992 	bl	3ae8 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    b7c4:	2800      	cmp	r0, #0
    b7c6:	bf18      	it	ne
    b7c8:	f04f 0b73 	movne.w	fp, #115	; 0x73
    b7cc:	f008 fae2 	bl	13d94 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    b7d0:	b930      	cbnz	r0, b7e0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x588>
    b7d2:	e002      	b.n	b7da <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x582>
    b7d4:	f04f 0901 	mov.w	r9, #1
    b7d8:	e7f0      	b.n	b7bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x564>
    b7da:	f008 fad1 	bl	13d80 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    b7de:	b108      	cbz	r0, b7e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x58c>
    b7e0:	f10b 0b07 	add.w	fp, fp, #7
    b7e4:	f1ba 0f00 	cmp.w	sl, #0
    b7e8:	d003      	beq.n	b7f2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x59a>
    b7ea:	2101      	movs	r1, #1
    b7ec:	4620      	mov	r0, r4
    b7ee:	f007 f8d8 	bl	129a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    b7f2:	f894 0124 	ldrb.w	r0, [r4, #292]	; 0x124
    b7f6:	b150      	cbz	r0, b80e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5b6>
    b7f8:	2801      	cmp	r0, #1
    b7fa:	d050      	beq.n	b89e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x646>
    b7fc:	2802      	cmp	r0, #2
    b7fe:	d047      	beq.n	b890 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x638>
    b800:	2803      	cmp	r0, #3
    b802:	d04c      	beq.n	b89e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x646>
    b804:	f640 1139 	movw	r1, #2361	; 0x939
    b808:	2035      	movs	r0, #53	; 0x35
    b80a:	f7f8 fb99 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b80e:	9803      	ldr	r0, [sp, #12]
    b810:	b370      	cbz	r0, b870 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x618>
    b812:	2001      	movs	r0, #1
    b814:	f884 0124 	strb.w	r0, [r4, #292]	; 0x124
    b818:	f894 606a 	ldrb.w	r6, [r4, #106]	; 0x6a
    b81c:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    b820:	9000      	str	r0, [sp, #0]
    b822:	f008 fad5 	bl	13dd0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    b826:	2e02      	cmp	r6, #2
    b828:	bf08      	it	eq
    b82a:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
    b82e:	d005      	beq.n	b83c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5e4>
    b830:	2e01      	cmp	r6, #1
    b832:	bf0c      	ite	eq
    b834:	f640 0134 	movweq	r1, #2100	; 0x834
    b838:	f640 2128 	movwne	r1, #2600	; 0xa28
    b83c:	4408      	add	r0, r1
    b83e:	f24a 5195 	movw	r1, #42389	; 0xa595
    b842:	4408      	add	r0, r1
    b844:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b848:	fbb0 f1f1 	udiv	r1, r0, r1
    b84c:	9800      	ldr	r0, [sp, #0]
    b84e:	f010 000c 	ands.w	r0, r0, #12
    b852:	bf18      	it	ne
    b854:	2028      	movne	r0, #40	; 0x28
    b856:	4408      	add	r0, r1
    b858:	30bc      	adds	r0, #188	; 0xbc
    b85a:	265b      	movs	r6, #91	; 0x5b
    b85c:	9000      	str	r0, [sp, #0]
    b85e:	f7f8 f943 	bl	3ae8 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    b862:	2800      	cmp	r0, #0
    b864:	bf18      	it	ne
    b866:	2673      	movne	r6, #115	; 0x73
    b868:	f008 fa94 	bl	13d94 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    b86c:	b940      	cbnz	r0, b880 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x628>
    b86e:	e004      	b.n	b87a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x622>
    b870:	f640 01ff 	movw	r1, #2303	; 0x8ff
    b874:	2035      	movs	r0, #53	; 0x35
    b876:	f7f8 fb63 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b87a:	f008 fa81 	bl	13d80 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    b87e:	b100      	cbz	r0, b882 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x62a>
    b880:	1df6      	adds	r6, r6, #7
    b882:	f106 016b 	add.w	r1, r6, #107	; 0x6b
    b886:	4620      	mov	r0, r4
    b888:	9a00      	ldr	r2, [sp, #0]
    b88a:	f006 f9b3 	bl	11bf4 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    b88e:	e007      	b.n	b8a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x648>
    b890:	4854      	ldr	r0, [pc, #336]	; (b9e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x78c>)
    b892:	6800      	ldr	r0, [r0, #0]
    b894:	1987      	adds	r7, r0, r6
    b896:	2003      	movs	r0, #3
    b898:	f884 0124 	strb.w	r0, [r4, #292]	; 0x124
    b89c:	e000      	b.n	b8a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x648>
    b89e:	68e7      	ldr	r7, [r4, #12]
    b8a0:	f001 fd64 	bl	d36c <sym_IGTA6PI7IWAT3FITPB7BP2SXQCVYUZIL6KUR4HQ>
    b8a4:	b958      	cbnz	r0, b8be <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x666>
    b8a6:	f9b4 0120 	ldrsh.w	r0, [r4, #288]	; 0x120
    b8aa:	2102      	movs	r1, #2
    b8ac:	f005 fea6 	bl	115fc <sym_6A6FSIHLUNNAM2H65LFSFKBXCMGRSGO36R3DB6Q>
    b8b0:	f8b4 1120 	ldrh.w	r1, [r4, #288]	; 0x120
    b8b4:	4680      	mov	r8, r0
    b8b6:	eba1 0008 	sub.w	r0, r1, r8
    b8ba:	f8a4 0120 	strh.w	r0, [r4, #288]	; 0x120
    b8be:	eb07 0108 	add.w	r1, r7, r8
    b8c2:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    b8c6:	f7f5 fe53 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    b8ca:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    b8ce:	60e8      	str	r0, [r5, #12]
    b8d0:	2000      	movs	r0, #0
    b8d2:	7028      	strb	r0, [r5, #0]
    b8d4:	f8a5 b008 	strh.w	fp, [r5, #8]
    b8d8:	4620      	mov	r0, r4
    b8da:	f007 f82c 	bl	12936 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    b8de:	f1a9 0101 	sub.w	r1, r9, #1
    b8e2:	4208      	tst	r0, r1
    b8e4:	bf04      	itt	eq
    b8e6:	2001      	moveq	r0, #1
    b8e8:	72a8      	strbeq	r0, [r5, #10]
    b8ea:	d006      	beq.n	b8fa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6a2>
    b8ec:	f894 0124 	ldrb.w	r0, [r4, #292]	; 0x124
    b8f0:	2801      	cmp	r0, #1
    b8f2:	bf0c      	ite	eq
    b8f4:	2002      	moveq	r0, #2
    b8f6:	2003      	movne	r0, #3
    b8f8:	72a8      	strb	r0, [r5, #10]
    b8fa:	f04f 0801 	mov.w	r8, #1
    b8fe:	f885 800b 	strb.w	r8, [r5, #11]
    b902:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    b906:	f006 f973 	bl	11bf0 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    b90a:	6068      	str	r0, [r5, #4]
    b90c:	f1ba 0f00 	cmp.w	sl, #0
    b910:	bf04      	itt	eq
    b912:	b005      	addeq	sp, #20
    b914:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b918:	4639      	mov	r1, r7
    b91a:	4628      	mov	r0, r5
    b91c:	f005 fe1a 	bl	11554 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    b920:	b286      	uxth	r6, r0
    b922:	4620      	mov	r0, r4
    b924:	f007 f807 	bl	12936 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    b928:	f1b9 0f00 	cmp.w	r9, #0
    b92c:	d112      	bne.n	b954 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6fc>
    b92e:	42b0      	cmp	r0, r6
    b930:	d810      	bhi.n	b954 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6fc>
    b932:	4606      	mov	r6, r0
    b934:	f885 800a 	strb.w	r8, [r5, #10]
    b938:	fb07 f106 	mul.w	r1, r7, r6
    b93c:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    b940:	f7f5 fe16 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    b944:	60e8      	str	r0, [r5, #12]
    b946:	b187      	cbz	r7, b96a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x712>
    b948:	4639      	mov	r1, r7
    b94a:	4628      	mov	r0, r5
    b94c:	f005 fe02 	bl	11554 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    b950:	4430      	add	r0, r6
    b952:	b286      	uxth	r6, r0
    b954:	4631      	mov	r1, r6
    b956:	4620      	mov	r0, r4
    b958:	f007 f823 	bl	129a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    b95c:	f001 fd06 	bl	d36c <sym_IGTA6PI7IWAT3FITPB7BP2SXQCVYUZIL6KUR4HQ>
    b960:	2800      	cmp	r0, #0
    b962:	bf18      	it	ne
    b964:	68e8      	ldrne	r0, [r5, #12]
    b966:	d005      	beq.n	b974 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x71c>
    b968:	e01b      	b.n	b9a2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x74a>
    b96a:	f640 1174 	movw	r1, #2420	; 0x974
    b96e:	2035      	movs	r0, #53	; 0x35
    b970:	f7f8 fae6 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b974:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    b978:	ebb0 0f46 	cmp.w	r0, r6, lsl #1
    b97c:	bf94      	ite	ls
    b97e:	f647 70ff 	movwls	r0, #32767	; 0x7fff
    b982:	0070      	lslhi	r0, r6, #1
    b984:	b281      	uxth	r1, r0
    b986:	f9b4 0120 	ldrsh.w	r0, [r4, #288]	; 0x120
    b98a:	f005 fe37 	bl	115fc <sym_6A6FSIHLUNNAM2H65LFSFKBXCMGRSGO36R3DB6Q>
    b98e:	4601      	mov	r1, r0
    b990:	f8b4 0120 	ldrh.w	r0, [r4, #288]	; 0x120
    b994:	1a40      	subs	r0, r0, r1
    b996:	f8a4 0120 	strh.w	r0, [r4, #288]	; 0x120
    b99a:	68e8      	ldr	r0, [r5, #12]
    b99c:	f7f5 fde8 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    b9a0:	60e8      	str	r0, [r5, #12]
    b9a2:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    b9a6:	6f20      	ldr	r0, [r4, #112]	; 0x70
    b9a8:	2800      	cmp	r0, #0
    b9aa:	bf04      	itt	eq
    b9ac:	b005      	addeq	sp, #20
    b9ae:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b9b2:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    b9b6:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
    b9ba:	1a80      	subs	r0, r0, r2
    b9bc:	b201      	sxth	r1, r0
    b9be:	2900      	cmp	r1, #0
    b9c0:	bfdc      	itt	le
    b9c2:	b005      	addle	sp, #20
    b9c4:	e8bd 8ff0 	ldmiale.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b9c8:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    b9cc:	4401      	add	r1, r0
    b9ce:	1e49      	subs	r1, r1, #1
    b9d0:	fb91 f1f0 	sdiv	r1, r1, r0
    b9d4:	b289      	uxth	r1, r1
    b9d6:	fb01 2000 	mla	r0, r1, r0, r2
    b9da:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
    b9de:	b005      	add	sp, #20
    b9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b9e4:	2000018c 	.word	0x2000018c
    b9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b9ec:	f004 f88d 	bl	fb0a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    b9f0:	4c33      	ldr	r4, [pc, #204]	; (bac0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x868>)
    b9f2:	4607      	mov	r7, r0
    b9f4:	7820      	ldrb	r0, [r4, #0]
    b9f6:	69a1      	ldr	r1, [r4, #24]
    b9f8:	2804      	cmp	r0, #4
    b9fa:	d10a      	bne.n	ba12 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7ba>
    b9fc:	6860      	ldr	r0, [r4, #4]
    b9fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    ba02:	0045      	lsls	r5, r0, #1
    ba04:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    ba06:	f7f5 fde5 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    ba0a:	42a8      	cmp	r0, r5
    ba0c:	bf38      	it	cc
    ba0e:	2603      	movcc	r6, #3
    ba10:	d300      	bcc.n	ba14 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7bc>
    ba12:	2602      	movs	r6, #2
    ba14:	4630      	mov	r0, r6
    ba16:	f7f5 fd51 	bl	14bc <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    ba1a:	4605      	mov	r5, r0
    ba1c:	2865      	cmp	r0, #101	; 0x65
    ba1e:	d33f      	bcc.n	baa0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x848>
    ba20:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    ba24:	bf08      	it	eq
    ba26:	6b20      	ldreq	r0, [r4, #48]	; 0x30
    ba28:	d024      	beq.n	ba74 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    ba2a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ba2c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    ba2e:	1941      	adds	r1, r0, r5
    ba30:	428a      	cmp	r2, r1
    ba32:	bf98      	it	ls
    ba34:	1a15      	subls	r5, r2, r0
    ba36:	f06f 0139 	mvn.w	r1, #57	; 0x39
    ba3a:	4638      	mov	r0, r7
    ba3c:	f7f5 fd98 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    ba40:	4680      	mov	r8, r0
    ba42:	78a0      	ldrb	r0, [r4, #2]
    ba44:	b1a0      	cbz	r0, ba70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x818>
    ba46:	481f      	ldr	r0, [pc, #124]	; (bac4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x86c>)
    ba48:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    ba4a:	4281      	cmp	r1, r0
    ba4c:	d210      	bcs.n	ba70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x818>
    ba4e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    ba50:	f7f5 fd8e 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    ba54:	4681      	mov	r9, r0
    ba56:	4629      	mov	r1, r5
    ba58:	4640      	mov	r0, r8
    ba5a:	f7f5 fd89 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    ba5e:	4601      	mov	r1, r0
    ba60:	4648      	mov	r0, r9
    ba62:	f7f5 fdb7 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    ba66:	2800      	cmp	r0, #0
    ba68:	dd02      	ble.n	ba70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x818>
    ba6a:	1a2d      	subs	r5, r5, r0
    ba6c:	bf48      	it	mi
    ba6e:	2500      	movmi	r5, #0
    ba70:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ba72:	4428      	add	r0, r5
    ba74:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ba76:	1a45      	subs	r5, r0, r1
    ba78:	f241 3088 	movw	r0, #5000	; 0x1388
    ba7c:	4285      	cmp	r5, r0
    ba7e:	bf88      	it	hi
    ba80:	f241 3588 	movwhi	r5, #5000	; 0x1388
    ba84:	f004 f841 	bl	fb0a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    ba88:	4601      	mov	r1, r0
    ba8a:	4638      	mov	r0, r7
    ba8c:	f7f5 fda2 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    ba90:	309d      	adds	r0, #157	; 0x9d
    ba92:	4285      	cmp	r5, r0
    ba94:	d304      	bcc.n	baa0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x848>
    ba96:	4631      	mov	r1, r6
    ba98:	4628      	mov	r0, r5
    ba9a:	f7f5 fc4d 	bl	1338 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    ba9e:	b110      	cbz	r0, baa6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x84e>
    baa0:	2000      	movs	r0, #0
    baa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    baa6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    baa8:	4907      	ldr	r1, [pc, #28]	; (bac8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x870>)
    baaa:	4428      	add	r0, r5
    baac:	62e0      	str	r0, [r4, #44]	; 0x2c
    baae:	68c8      	ldr	r0, [r1, #12]
    bab0:	4428      	add	r0, r5
    bab2:	60c8      	str	r0, [r1, #12]
    bab4:	f7f6 fd5a 	bl	256c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    bab8:	2001      	movs	r0, #1
    baba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    babe:	0000      	.short	0x0000
    bac0:	20001008 	.word	0x20001008
    bac4:	07a12000 	.word	0x07a12000
    bac8:	20000ff8 	.word	0x20000ff8
    bacc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bad0:	b092      	sub	sp, #72	; 0x48
    bad2:	4617      	mov	r7, r2
    bad4:	4680      	mov	r8, r0
    bad6:	f7fd fa69 	bl	8fac <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    bada:	9004      	str	r0, [sp, #16]
    badc:	f004 f815 	bl	fb0a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    bae0:	f8df 9424 	ldr.w	r9, [pc, #1060]	; bf08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xcb0>
    bae4:	2500      	movs	r5, #0
    bae6:	f88d 500c 	strb.w	r5, [sp, #12]
    baea:	4604      	mov	r4, r0
    baec:	265b      	movs	r6, #91	; 0x5b
    baee:	f8d9 a008 	ldr.w	sl, [r9, #8]
    baf2:	f7f7 fff9 	bl	3ae8 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    baf6:	2800      	cmp	r0, #0
    baf8:	bf18      	it	ne
    bafa:	2673      	movne	r6, #115	; 0x73
    bafc:	f008 f94a 	bl	13d94 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    bb00:	b910      	cbnz	r0, bb08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8b0>
    bb02:	f008 f93d 	bl	13d80 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    bb06:	b100      	cbz	r0, bb0a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8b2>
    bb08:	1df6      	adds	r6, r6, #7
    bb0a:	49ff      	ldr	r1, [pc, #1020]	; (bf08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xcb0>)
    bb0c:	f106 006b 	add.w	r0, r6, #107	; 0x6b
    bb10:	688a      	ldr	r2, [r1, #8]
    bb12:	6849      	ldr	r1, [r1, #4]
    bb14:	4410      	add	r0, r2
    bb16:	4288      	cmp	r0, r1
    bb18:	bf0c      	ite	eq
    bb1a:	2001      	moveq	r0, #1
    bb1c:	2000      	movne	r0, #0
    bb1e:	4207      	tst	r7, r0
    bb20:	900d      	str	r0, [sp, #52]	; 0x34
    bb22:	d008      	beq.n	bb36 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8de>
    bb24:	48f8      	ldr	r0, [pc, #992]	; (bf08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xcb0>)
    bb26:	7801      	ldrb	r1, [r0, #0]
    bb28:	2900      	cmp	r1, #0
    bb2a:	bf1a      	itte	ne
    bb2c:	f8b0 0050 	ldrhne.w	r0, [r0, #80]	; 0x50
    bb30:	2800      	cmpne	r0, #0
    bb32:	2001      	moveq	r0, #1
    bb34:	d001      	beq.n	bb3a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8e2>
    bb36:	f04f 0000 	mov.w	r0, #0
    bb3a:	900c      	str	r0, [sp, #48]	; 0x30
    bb3c:	9813      	ldr	r0, [sp, #76]	; 0x4c
    bb3e:	2800      	cmp	r0, #0
    bb40:	d07d      	beq.n	bc3e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9e6>
    bb42:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    bb46:	4620      	mov	r0, r4
    bb48:	f7f5 fd12 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    bb4c:	9000      	str	r0, [sp, #0]
    bb4e:	f001 fc13 	bl	d378 <sym_ZSU6ACTG4NRZY5LMD7252VV77IROBPEMBXGUMQY>
    bb52:	f001 fca3 	bl	d49c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    bb56:	4fec      	ldr	r7, [pc, #944]	; (bf08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xcb0>)
    bb58:	4606      	mov	r6, r0
    bb5a:	7838      	ldrb	r0, [r7, #0]
    bb5c:	2805      	cmp	r0, #5
    bb5e:	d126      	bne.n	bbae <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x956>
    bb60:	6a38      	ldr	r0, [r7, #32]
    bb62:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
    bb66:	f001 fc79 	bl	d45c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    bb6a:	4681      	mov	r9, r0
    bb6c:	42b0      	cmp	r0, r6
    bb6e:	d03b      	beq.n	bbe8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x990>
    bb70:	6a38      	ldr	r0, [r7, #32]
    bb72:	4649      	mov	r1, r9
    bb74:	f500 7084 	add.w	r0, r0, #264	; 0x108
    bb78:	f001 fc2e 	bl	d3d8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    bb7c:	2000      	movs	r0, #0
    bb7e:	64f8      	str	r0, [r7, #76]	; 0x4c
    bb80:	f8d7 b020 	ldr.w	fp, [r7, #32]
    bb84:	f1bb 0f00 	cmp.w	fp, #0
    bb88:	d03c      	beq.n	bc04 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9ac>
    bb8a:	f1b9 0f00 	cmp.w	r9, #0
    bb8e:	bf08      	it	eq
    bb90:	f8cb 5108 	streq.w	r5, [fp, #264]	; 0x108
    bb94:	d00b      	beq.n	bbae <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x956>
    bb96:	f001 fbe9 	bl	d36c <sym_IGTA6PI7IWAT3FITPB7BP2SXQCVYUZIL6KUR4HQ>
    bb9a:	b390      	cbz	r0, bc02 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9aa>
    bb9c:	e9d9 0100 	ldrd	r0, r1, [r9]
    bba0:	4408      	add	r0, r1
    bba2:	f8cb 0108 	str.w	r0, [fp, #264]	; 0x108
    bba6:	f8b9 0018 	ldrh.w	r0, [r9, #24]
    bbaa:	f8ab 0120 	strh.w	r0, [fp, #288]	; 0x120
    bbae:	4631      	mov	r1, r6
    bbb0:	f107 0038 	add.w	r0, r7, #56	; 0x38
    bbb4:	f001 fc10 	bl	d3d8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    bbb8:	2e00      	cmp	r6, #0
    bbba:	bf1c      	itt	ne
    bbbc:	8b30      	ldrhne	r0, [r6, #24]
    bbbe:	f8a7 0050 	strhne.w	r0, [r7, #80]	; 0x50
    bbc2:	f8d7 9004 	ldr.w	r9, [r7, #4]
    bbc6:	9a00      	ldr	r2, [sp, #0]
    bbc8:	bf08      	it	eq
    bbca:	2000      	moveq	r0, #0
    bbcc:	d024      	beq.n	bc18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9c0>
    bbce:	e9d6 0100 	ldrd	r0, r1, [r6]
    bbd2:	4408      	add	r0, r1
    bbd4:	4649      	mov	r1, r9
    bbd6:	f006 ffa4 	bl	12b22 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    bbda:	4548      	cmp	r0, r9
    bbdc:	d91c      	bls.n	bc18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9c0>
    bbde:	f240 51e3 	movw	r1, #1507	; 0x5e3
    bbe2:	2035      	movs	r0, #53	; 0x35
    bbe4:	f7f8 f9ac 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bbe8:	6a39      	ldr	r1, [r7, #32]
    bbea:	f501 7184 	add.w	r1, r1, #264	; 0x108
    bbee:	64f9      	str	r1, [r7, #76]	; 0x4c
    bbf0:	6a38      	ldr	r0, [r7, #32]
    bbf2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    bbf4:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
    bbf8:	4281      	cmp	r1, r0
    bbfa:	bf28      	it	cs
    bbfc:	4608      	movcs	r0, r1
    bbfe:	63f8      	str	r0, [r7, #60]	; 0x3c
    bc00:	e7be      	b.n	bb80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x928>
    bc02:	e004      	b.n	bc0e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9b6>
    bc04:	f240 51c5 	movw	r1, #1477	; 0x5c5
    bc08:	2035      	movs	r0, #53	; 0x35
    bc0a:	f7f8 f999 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc0e:	f240 51cb 	movw	r1, #1483	; 0x5cb
    bc12:	2035      	movs	r0, #53	; 0x35
    bc14:	f7f8 f994 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc18:	4606      	mov	r6, r0
    bc1a:	f001 fbb3 	bl	d384 <sym_FZ7B5CMVMTO6N57ATGF22R7LY5CJDD6SN6DKTMI>
    bc1e:	4631      	mov	r1, r6
    bc20:	9800      	ldr	r0, [sp, #0]
    bc22:	f7f5 fca5 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    bc26:	4606      	mov	r6, r0
    bc28:	6878      	ldr	r0, [r7, #4]
    bc2a:	4241      	negs	r1, r0
    bc2c:	4630      	mov	r0, r6
    bc2e:	f7f5 fc9f 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    bc32:	f04f 0901 	mov.w	r9, #1
    bc36:	63b8      	str	r0, [r7, #56]	; 0x38
    bc38:	f000 b9ed 	b.w	c016 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdbe>
    bc3c:	e7ff      	b.n	bc3e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9e6>
    bc3e:	980c      	ldr	r0, [sp, #48]	; 0x30
    bc40:	2800      	cmp	r0, #0
    bc42:	d076      	beq.n	bd32 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xada>
    bc44:	4eb0      	ldr	r6, [pc, #704]	; (bf08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xcb0>)
    bc46:	9804      	ldr	r0, [sp, #16]
    bc48:	f896 1026 	ldrb.w	r1, [r6, #38]	; 0x26
    bc4c:	1d80      	adds	r0, r0, #6
    bc4e:	5c09      	ldrb	r1, [r1, r0]
    bc50:	2908      	cmp	r1, #8
    bc52:	d008      	beq.n	bc66 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa0e>
    bc54:	2904      	cmp	r1, #4
    bc56:	d00a      	beq.n	bc6e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa16>
    bc58:	2902      	cmp	r1, #2
    bc5a:	d00f      	beq.n	bc7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa24>
    bc5c:	2208      	movs	r2, #8
    bc5e:	2901      	cmp	r1, #1
    bc60:	d011      	beq.n	bc86 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa2e>
    bc62:	f000 b9e6 	b.w	c032 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdda>
    bc66:	2240      	movs	r2, #64	; 0x40
    bc68:	2014      	movs	r0, #20
    bc6a:	4694      	mov	ip, r2
    bc6c:	e003      	b.n	bc76 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa1e>
    bc6e:	2210      	movs	r2, #16
    bc70:	2014      	movs	r0, #20
    bc72:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
    bc76:	f44f 73a8 	mov.w	r3, #336	; 0x150
    bc7a:	e007      	b.n	bc8c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa34>
    bc7c:	2204      	movs	r2, #4
    bc7e:	2012      	movs	r0, #18
    bc80:	46ac      	mov	ip, r5
    bc82:	2318      	movs	r3, #24
    bc84:	e002      	b.n	bc8c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa34>
    bc86:	202a      	movs	r0, #42	; 0x2a
    bc88:	46ac      	mov	ip, r5
    bc8a:	2328      	movs	r3, #40	; 0x28
    bc8c:	4463      	add	r3, ip
    bc8e:	fb12 3000 	smlabb	r0, r2, r0, r3
    bc92:	b287      	uxth	r7, r0
    bc94:	4608      	mov	r0, r1
    bc96:	f008 f89b 	bl	13dd0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    bc9a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    bc9e:	4401      	add	r1, r0
    bca0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    bca4:	fbb1 f0f0 	udiv	r0, r1, r0
    bca8:	4438      	add	r0, r7
    bcaa:	f100 09f1 	add.w	r9, r0, #241	; 0xf1
    bcae:	78b0      	ldrb	r0, [r6, #2]
    bcb0:	b3f0      	cbz	r0, bd30 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xad8>
    bcb2:	4896      	ldr	r0, [pc, #600]	; (bf0c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xcb4>)
    bcb4:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    bcb6:	4281      	cmp	r1, r0
    bcb8:	d844      	bhi.n	bd44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaec>
    bcba:	f88d 5018 	strb.w	r5, [sp, #24]
    bcbe:	275b      	movs	r7, #91	; 0x5b
    bcc0:	f8cd 901c 	str.w	r9, [sp, #28]
    bcc4:	f7f7 ff10 	bl	3ae8 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    bcc8:	2800      	cmp	r0, #0
    bcca:	bf18      	it	ne
    bccc:	2773      	movne	r7, #115	; 0x73
    bcce:	f008 f861 	bl	13d94 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    bcd2:	b910      	cbnz	r0, bcda <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa82>
    bcd4:	f008 f854 	bl	13d80 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    bcd8:	b100      	cbz	r0, bcdc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa84>
    bcda:	1dff      	adds	r7, r7, #7
    bcdc:	f8ad 7020 	strh.w	r7, [sp, #32]
    bce0:	2001      	movs	r0, #1
    bce2:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    bce6:	275b      	movs	r7, #91	; 0x5b
    bce8:	f7f7 fefe 	bl	3ae8 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    bcec:	2800      	cmp	r0, #0
    bcee:	bf18      	it	ne
    bcf0:	2773      	movne	r7, #115	; 0x73
    bcf2:	f008 f84f 	bl	13d94 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    bcf6:	b910      	cbnz	r0, bcfe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaa6>
    bcf8:	f008 f842 	bl	13d80 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    bcfc:	b100      	cbz	r0, bd00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaa8>
    bcfe:	1dff      	adds	r7, r7, #7
    bd00:	f107 01ff 	add.w	r1, r7, #255	; 0xff
    bd04:	4620      	mov	r0, r4
    bd06:	f7f5 fc33 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    bd0a:	9009      	str	r0, [sp, #36]	; 0x24
    bd0c:	2003      	movs	r0, #3
    bd0e:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    bd12:	a806      	add	r0, sp, #24
    bd14:	f7f5 ff74 	bl	1c00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    bd18:	4607      	mov	r7, r0
    bd1a:	4649      	mov	r1, r9
    bd1c:	9809      	ldr	r0, [sp, #36]	; 0x24
    bd1e:	f7f5 fc27 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    bd22:	4681      	mov	r9, r0
    bd24:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    bd26:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    bd28:	f7f5 fc22 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    bd2c:	4601      	mov	r1, r0
    bd2e:	e001      	b.n	bd34 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xadc>
    bd30:	e008      	b.n	bd44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaec>
    bd32:	e00b      	b.n	bd4c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaf4>
    bd34:	b127      	cbz	r7, bd40 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xae8>
    bd36:	4648      	mov	r0, r9
    bd38:	f7f5 fc4c 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    bd3c:	2800      	cmp	r0, #0
    bd3e:	da01      	bge.n	bd44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaec>
    bd40:	f04f 0a00 	mov.w	sl, #0
    bd44:	4626      	mov	r6, r4
    bd46:	46a9      	mov	r9, r5
    bd48:	f000 b965 	b.w	c016 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdbe>
    bd4c:	2f00      	cmp	r7, #0
    bd4e:	d079      	beq.n	be44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbec>
    bd50:	4e6d      	ldr	r6, [pc, #436]	; (bf08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xcb0>)
    bd52:	4621      	mov	r1, r4
    bd54:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    bd56:	f7f5 fc3d 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    bd5a:	4601      	mov	r1, r0
    bd5c:	6870      	ldr	r0, [r6, #4]
    bd5e:	fbb1 f1f0 	udiv	r1, r1, r0
    bd62:	4341      	muls	r1, r0
    bd64:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    bd66:	f7f5 fc03 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    bd6a:	6871      	ldr	r1, [r6, #4]
    bd6c:	f7f5 fc00 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    bd70:	4683      	mov	fp, r0
    bd72:	4601      	mov	r1, r0
    bd74:	4620      	mov	r0, r4
    bd76:	f7f5 fc2d 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    bd7a:	4681      	mov	r9, r0
    bd7c:	275b      	movs	r7, #91	; 0x5b
    bd7e:	f7f7 feb3 	bl	3ae8 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    bd82:	2800      	cmp	r0, #0
    bd84:	bf18      	it	ne
    bd86:	2773      	movne	r7, #115	; 0x73
    bd88:	f008 f804 	bl	13d94 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    bd8c:	b910      	cbnz	r0, bd94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb3c>
    bd8e:	f007 fff7 	bl	13d80 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    bd92:	b100      	cbz	r0, bd96 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb3e>
    bd94:	1dff      	adds	r7, r7, #7
    bd96:	f107 00ff 	add.w	r0, r7, #255	; 0xff
    bd9a:	4581      	cmp	r9, r0
    bd9c:	da16      	bge.n	bdcc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb74>
    bd9e:	69f1      	ldr	r1, [r6, #28]
    bda0:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    bda2:	f7f5 fc17 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    bda6:	6871      	ldr	r1, [r6, #4]
    bda8:	fbb0 f0f1 	udiv	r0, r0, r1
    bdac:	4341      	muls	r1, r0
    bdae:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    bdb0:	f7f5 fbde 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    bdb4:	4659      	mov	r1, fp
    bdb6:	f7f5 fc0d 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    bdba:	6871      	ldr	r1, [r6, #4]
    bdbc:	fbb0 f9f1 	udiv	r9, r0, r1
    bdc0:	4658      	mov	r0, fp
    bdc2:	f7f5 fbd5 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    bdc6:	4606      	mov	r6, r0
    bdc8:	f000 b925 	b.w	c016 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdbe>
    bdcc:	f88d 5018 	strb.w	r5, [sp, #24]
    bdd0:	6b30      	ldr	r0, [r6, #48]	; 0x30
    bdd2:	275b      	movs	r7, #91	; 0x5b
    bdd4:	9007      	str	r0, [sp, #28]
    bdd6:	f7f7 fe87 	bl	3ae8 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    bdda:	2800      	cmp	r0, #0
    bddc:	bf18      	it	ne
    bdde:	2773      	movne	r7, #115	; 0x73
    bde0:	f007 ffd8 	bl	13d94 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    bde4:	b910      	cbnz	r0, bdec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb94>
    bde6:	f007 ffcb 	bl	13d80 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    bdea:	b100      	cbz	r0, bdee <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb96>
    bdec:	1dff      	adds	r7, r7, #7
    bdee:	f8ad 7020 	strh.w	r7, [sp, #32]
    bdf2:	2001      	movs	r0, #1
    bdf4:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    bdf8:	69f1      	ldr	r1, [r6, #28]
    bdfa:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    bdfc:	f7f5 fbea 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    be00:	6871      	ldr	r1, [r6, #4]
    be02:	fbb0 f0f1 	udiv	r0, r0, r1
    be06:	4341      	muls	r1, r0
    be08:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    be0a:	f7f5 fbb1 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    be0e:	4601      	mov	r1, r0
    be10:	9009      	str	r0, [sp, #36]	; 0x24
    be12:	7830      	ldrb	r0, [r6, #0]
    be14:	2804      	cmp	r0, #4
    be16:	d10a      	bne.n	be2e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbd6>
    be18:	6870      	ldr	r0, [r6, #4]
    be1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    be1e:	0047      	lsls	r7, r0, #1
    be20:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    be22:	f7f5 fbd7 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    be26:	42b8      	cmp	r0, r7
    be28:	bf38      	it	cc
    be2a:	2003      	movcc	r0, #3
    be2c:	d300      	bcc.n	be30 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbd8>
    be2e:	2002      	movs	r0, #2
    be30:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    be34:	a806      	add	r0, sp, #24
    be36:	6871      	ldr	r1, [r6, #4]
    be38:	f005 fb8c 	bl	11554 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    be3c:	4681      	mov	r9, r0
    be3e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    be40:	e0e9      	b.n	c016 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdbe>
    be42:	e7ff      	b.n	be44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbec>
    be44:	4e30      	ldr	r6, [pc, #192]	; (bf08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xcb0>)
    be46:	a803      	add	r0, sp, #12
    be48:	9009      	str	r0, [sp, #36]	; 0x24
    be4a:	4621      	mov	r1, r4
    be4c:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    be4e:	f7f5 fbc1 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    be52:	6871      	ldr	r1, [r6, #4]
    be54:	fbb0 f0f1 	udiv	r0, r0, r1
    be58:	4341      	muls	r1, r0
    be5a:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    be5c:	f7f5 fb88 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    be60:	4621      	mov	r1, r4
    be62:	9008      	str	r0, [sp, #32]
    be64:	f7f5 fbb6 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    be68:	4607      	mov	r7, r0
    be6a:	f7fd f89f 	bl	8fac <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    be6e:	4683      	mov	fp, r0
    be70:	265b      	movs	r6, #91	; 0x5b
    be72:	f7f7 fe39 	bl	3ae8 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    be76:	2800      	cmp	r0, #0
    be78:	bf18      	it	ne
    be7a:	2673      	movne	r6, #115	; 0x73
    be7c:	f007 ff8a 	bl	13d94 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    be80:	b910      	cbnz	r0, be88 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc30>
    be82:	f007 ff7d 	bl	13d80 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    be86:	b100      	cbz	r0, be8a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc32>
    be88:	1df6      	adds	r6, r6, #7
    be8a:	f106 00ff 	add.w	r0, r6, #255	; 0xff
    be8e:	4407      	add	r7, r0
    be90:	f04f 0900 	mov.w	r9, #0
    be94:	463e      	mov	r6, r7
    be96:	f04f 0a5b 	mov.w	sl, #91	; 0x5b
    be9a:	f7f7 fe25 	bl	3ae8 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    be9e:	2800      	cmp	r0, #0
    bea0:	bf18      	it	ne
    bea2:	f04f 0a73 	movne.w	sl, #115	; 0x73
    bea6:	f007 ff75 	bl	13d94 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    beaa:	b910      	cbnz	r0, beb2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc5a>
    beac:	f007 ff68 	bl	13d80 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    beb0:	b108      	cbz	r0, beb6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc5e>
    beb2:	f10a 0a07 	add.w	sl, sl, #7
    beb6:	4b14      	ldr	r3, [pc, #80]	; (bf08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xcb0>)
    beb8:	f10a 0a6b 	add.w	sl, sl, #107	; 0x6b
    bebc:	6858      	ldr	r0, [r3, #4]
    bebe:	42b0      	cmp	r0, r6
    bec0:	bf98      	it	ls
    bec2:	1a36      	subls	r6, r6, r0
    bec4:	f893 0027 	ldrb.w	r0, [r3, #39]	; 0x27
    bec8:	2800      	cmp	r0, #0
    beca:	bf18      	it	ne
    becc:	f103 0108 	addne.w	r1, r3, #8
    bed0:	d00c      	beq.n	beec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc94>
    bed2:	680a      	ldr	r2, [r1, #0]
    bed4:	4452      	add	r2, sl
    bed6:	42b2      	cmp	r2, r6
    bed8:	d804      	bhi.n	bee4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc8c>
    beda:	1ab6      	subs	r6, r6, r2
    bedc:	f109 0201 	add.w	r2, r9, #1
    bee0:	f002 09ff 	and.w	r9, r2, #255	; 0xff
    bee4:	1e40      	subs	r0, r0, #1
    bee6:	f101 0104 	add.w	r1, r1, #4
    beea:	d1f2      	bne.n	bed2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc7a>
    beec:	4806      	ldr	r0, [pc, #24]	; (bf08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xcb0>)
    beee:	eb00 0089 	add.w	r0, r0, r9, lsl #2
    bef2:	900f      	str	r0, [sp, #60]	; 0x3c
    bef4:	6880      	ldr	r0, [r0, #8]
    bef6:	900a      	str	r0, [sp, #40]	; 0x28
    bef8:	eb0b 0009 	add.w	r0, fp, r9
    befc:	7980      	ldrb	r0, [r0, #6]
    befe:	2808      	cmp	r0, #8
    bf00:	d00c      	beq.n	bf1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xcc4>
    bf02:	2804      	cmp	r0, #4
    bf04:	d00e      	beq.n	bf24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xccc>
    bf06:	e003      	b.n	bf10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xcb8>
    bf08:	20001008 	.word	0x20001008
    bf0c:	07a12000 	.word	0x07a12000
    bf10:	2802      	cmp	r0, #2
    bf12:	d00d      	beq.n	bf30 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xcd8>
    bf14:	2208      	movs	r2, #8
    bf16:	2801      	cmp	r0, #1
    bf18:	d010      	beq.n	bf3c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xce4>
    bf1a:	e08a      	b.n	c032 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdda>
    bf1c:	2240      	movs	r2, #64	; 0x40
    bf1e:	2114      	movs	r1, #20
    bf20:	4613      	mov	r3, r2
    bf22:	e002      	b.n	bf2a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xcd2>
    bf24:	2210      	movs	r2, #16
    bf26:	2114      	movs	r1, #20
    bf28:	232e      	movs	r3, #46	; 0x2e
    bf2a:	f44f 7ca8 	mov.w	ip, #336	; 0x150
    bf2e:	e009      	b.n	bf44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xcec>
    bf30:	2204      	movs	r2, #4
    bf32:	2112      	movs	r1, #18
    bf34:	462b      	mov	r3, r5
    bf36:	f04f 0c18 	mov.w	ip, #24
    bf3a:	e003      	b.n	bf44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xcec>
    bf3c:	212a      	movs	r1, #42	; 0x2a
    bf3e:	462b      	mov	r3, r5
    bf40:	f04f 0c28 	mov.w	ip, #40	; 0x28
    bf44:	4463      	add	r3, ip
    bf46:	fb12 3101 	smlabb	r1, r2, r1, r3
    bf4a:	fa1f fb81 	uxth.w	fp, r1
    bf4e:	f007 ff3f 	bl	13dd0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    bf52:	4601      	mov	r1, r0
    bf54:	f24a 30a1 	movw	r0, #41889	; 0xa3a1
    bf58:	4401      	add	r1, r0
    bf5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    bf5e:	fbb1 f0f0 	udiv	r0, r1, r0
    bf62:	eb0b 0100 	add.w	r1, fp, r0
    bf66:	1988      	adds	r0, r1, r6
    bf68:	990a      	ldr	r1, [sp, #40]	; 0x28
    bf6a:	30f1      	adds	r0, #241	; 0xf1
    bf6c:	4288      	cmp	r0, r1
    bf6e:	d804      	bhi.n	bf7a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xd22>
    bf70:	980f      	ldr	r0, [sp, #60]	; 0x3c
    bf72:	6880      	ldr	r0, [r0, #8]
    bf74:	eba0 0a06 	sub.w	sl, r0, r6
    bf78:	e00e      	b.n	bf98 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xd40>
    bf7a:	489a      	ldr	r0, [pc, #616]	; (c1e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xf8c>)
    bf7c:	f890 1027 	ldrb.w	r1, [r0, #39]	; 0x27
    bf80:	6840      	ldr	r0, [r0, #4]
    bf82:	4549      	cmp	r1, r9
    bf84:	d915      	bls.n	bfb2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xd5a>
    bf86:	42b8      	cmp	r0, r7
    bf88:	d90e      	bls.n	bfa8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xd50>
    bf8a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    bf8c:	6880      	ldr	r0, [r0, #8]
    bf8e:	eb00 070a 	add.w	r7, r0, sl
    bf92:	980f      	ldr	r0, [sp, #60]	; 0x3c
    bf94:	f8d0 a008 	ldr.w	sl, [r0, #8]
    bf98:	f1ba 0f00 	cmp.w	sl, #0
    bf9c:	da18      	bge.n	bfd0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xd78>
    bf9e:	f240 7117 	movw	r1, #1815	; 0x717
    bfa2:	2035      	movs	r0, #53	; 0x35
    bfa4:	f7f7 ffcc 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bfa8:	f240 61f1 	movw	r1, #1777	; 0x6f1
    bfac:	2035      	movs	r0, #53	; 0x35
    bfae:	f7f7 ffc7 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bfb2:	4639      	mov	r1, r7
    bfb4:	4287      	cmp	r7, r0
    bfb6:	bf38      	it	cc
    bfb8:	4607      	movcc	r7, r0
    bfba:	d3ea      	bcc.n	bf92 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xd3a>
    bfbc:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
    bfc0:	bf38      	it	cc
    bfc2:	0047      	lslcc	r7, r0, #1
    bfc4:	d3e5      	bcc.n	bf92 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xd3a>
    bfc6:	f240 710e 	movw	r1, #1806	; 0x70e
    bfca:	2035      	movs	r0, #53	; 0x35
    bfcc:	f7f7 ffb8 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bfd0:	9809      	ldr	r0, [sp, #36]	; 0x24
    bfd2:	4639      	mov	r1, r7
    bfd4:	f880 9000 	strb.w	r9, [r0]
    bfd8:	9808      	ldr	r0, [sp, #32]
    bfda:	f7f5 fac9 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    bfde:	4f81      	ldr	r7, [pc, #516]	; (c1e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xf8c>)
    bfe0:	4606      	mov	r6, r0
    bfe2:	69b9      	ldr	r1, [r7, #24]
    bfe4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    bfe6:	f7f5 faf5 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    bfea:	6879      	ldr	r1, [r7, #4]
    bfec:	fbb0 f0f1 	udiv	r0, r0, r1
    bff0:	4341      	muls	r1, r0
    bff2:	78b8      	ldrb	r0, [r7, #2]
    bff4:	b128      	cbz	r0, c002 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdaa>
    bff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bff8:	428a      	cmp	r2, r1
    bffa:	bf26      	itte	cs
    bffc:	1a50      	subcs	r0, r2, r1
    bffe:	62b8      	strcs	r0, [r7, #40]	; 0x28
    c000:	62bd      	strcc	r5, [r7, #40]	; 0x28
    c002:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    c004:	f7f5 fab4 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    c008:	4631      	mov	r1, r6
    c00a:	63b8      	str	r0, [r7, #56]	; 0x38
    c00c:	f7f5 fae2 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    c010:	6879      	ldr	r1, [r7, #4]
    c012:	fbb0 f9f1 	udiv	r9, r0, r1
    c016:	f89d 100c 	ldrb.w	r1, [sp, #12]
    c01a:	9804      	ldr	r0, [sp, #16]
    c01c:	4408      	add	r0, r1
    c01e:	7980      	ldrb	r0, [r0, #6]
    c020:	2808      	cmp	r0, #8
    c022:	d00a      	beq.n	c03a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xde2>
    c024:	2804      	cmp	r0, #4
    c026:	d00c      	beq.n	c042 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdea>
    c028:	2802      	cmp	r0, #2
    c02a:	d010      	beq.n	c04e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdf6>
    c02c:	2108      	movs	r1, #8
    c02e:	2801      	cmp	r0, #1
    c030:	d013      	beq.n	c05a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xe02>
    c032:	21d9      	movs	r1, #217	; 0xd9
    c034:	2005      	movs	r0, #5
    c036:	f7f7 ff83 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c03a:	2140      	movs	r1, #64	; 0x40
    c03c:	2214      	movs	r2, #20
    c03e:	460b      	mov	r3, r1
    c040:	e002      	b.n	c048 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdf0>
    c042:	2110      	movs	r1, #16
    c044:	2214      	movs	r2, #20
    c046:	232e      	movs	r3, #46	; 0x2e
    c048:	f44f 7ca8 	mov.w	ip, #336	; 0x150
    c04c:	e009      	b.n	c062 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xe0a>
    c04e:	2104      	movs	r1, #4
    c050:	2212      	movs	r2, #18
    c052:	462b      	mov	r3, r5
    c054:	f04f 0c18 	mov.w	ip, #24
    c058:	e003      	b.n	c062 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xe0a>
    c05a:	222a      	movs	r2, #42	; 0x2a
    c05c:	462b      	mov	r3, r5
    c05e:	f04f 0c28 	mov.w	ip, #40	; 0x28
    c062:	4463      	add	r3, ip
    c064:	fb11 3102 	smlabb	r1, r1, r2, r3
    c068:	b28f      	uxth	r7, r1
    c06a:	f007 feb1 	bl	13dd0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    c06e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    c072:	4401      	add	r1, r0
    c074:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    c078:	fbb1 f0f0 	udiv	r0, r1, r0
    c07c:	4438      	add	r0, r7
    c07e:	4f59      	ldr	r7, [pc, #356]	; (c1e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xf8c>)
    c080:	f100 0bf1 	add.w	fp, r0, #241	; 0xf1
    c084:	78b8      	ldrb	r0, [r7, #2]
    c086:	b1a8      	cbz	r0, c0b4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xe5c>
    c088:	4857      	ldr	r0, [pc, #348]	; (c1e8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xf90>)
    c08a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    c08c:	4281      	cmp	r1, r0
    c08e:	d211      	bcs.n	c0b4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xe5c>
    c090:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    c092:	f7f5 fa6d 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    c096:	9005      	str	r0, [sp, #20]
    c098:	4651      	mov	r1, sl
    c09a:	4630      	mov	r0, r6
    c09c:	f7f5 fa68 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    c0a0:	4601      	mov	r1, r0
    c0a2:	9805      	ldr	r0, [sp, #20]
    c0a4:	f7f5 fa96 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    c0a8:	2800      	cmp	r0, #0
    c0aa:	dd03      	ble.n	c0b4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xe5c>
    c0ac:	ebba 0a00 	subs.w	sl, sl, r0
    c0b0:	bf48      	it	mi
    c0b2:	46aa      	movmi	sl, r5
    c0b4:	f89d 000c 	ldrb.w	r0, [sp, #12]
    c0b8:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    c0bc:	6880      	ldr	r0, [r0, #8]
    c0be:	4550      	cmp	r0, sl
    c0c0:	bf98      	it	ls
    c0c2:	4682      	movls	sl, r0
    c0c4:	f8c7 a030 	str.w	sl, [r7, #48]	; 0x30
    c0c8:	980c      	ldr	r0, [sp, #48]	; 0x30
    c0ca:	b9f0      	cbnz	r0, c10a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xeb2>
    c0cc:	f1b9 0f00 	cmp.w	r9, #0
    c0d0:	d01b      	beq.n	c10a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xeb2>
    c0d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
    c0d6:	ea00 0149 	and.w	r1, r0, r9, lsl #1
    c0da:	f9b7 0050 	ldrsh.w	r0, [r7, #80]	; 0x50
    c0de:	f005 fa8d 	bl	115fc <sym_6A6FSIHLUNNAM2H65LFSFKBXCMGRSGO36R3DB6Q>
    c0e2:	4601      	mov	r1, r0
    c0e4:	f8b7 0050 	ldrh.w	r0, [r7, #80]	; 0x50
    c0e8:	1a40      	subs	r0, r0, r1
    c0ea:	b202      	sxth	r2, r0
    c0ec:	f8a7 2050 	strh.w	r2, [r7, #80]	; 0x50
    c0f0:	6a38      	ldr	r0, [r7, #32]
    c0f2:	b130      	cbz	r0, c102 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xeaa>
    c0f4:	f8a0 2120 	strh.w	r2, [r0, #288]	; 0x120
    c0f8:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    c0fc:	440a      	add	r2, r1
    c0fe:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    c102:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    c104:	440e      	add	r6, r1
    c106:	4408      	add	r0, r1
    c108:	63b8      	str	r0, [r7, #56]	; 0x38
    c10a:	9813      	ldr	r0, [sp, #76]	; 0x4c
    c10c:	2800      	cmp	r0, #0
    c10e:	bf18      	it	ne
    c110:	61be      	strne	r6, [r7, #24]
    c112:	61fe      	str	r6, [r7, #28]
    c114:	980d      	ldr	r0, [sp, #52]	; 0x34
    c116:	2800      	cmp	r0, #0
    c118:	bf12      	itee	ne
    c11a:	f8c7 b02c 	strne.w	fp, [r7, #44]	; 0x2c
    c11e:	6b38      	ldreq	r0, [r7, #48]	; 0x30
    c120:	62f8      	streq	r0, [r7, #44]	; 0x2c
    c122:	f04f 0a01 	mov.w	sl, #1
    c126:	f888 a00b 	strb.w	sl, [r8, #11]
    c12a:	f04f 095b 	mov.w	r9, #91	; 0x5b
    c12e:	f7f7 fcdb 	bl	3ae8 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    c132:	2800      	cmp	r0, #0
    c134:	bf18      	it	ne
    c136:	f04f 0973 	movne.w	r9, #115	; 0x73
    c13a:	f007 fe2b 	bl	13d94 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    c13e:	b910      	cbnz	r0, c146 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xeee>
    c140:	f007 fe1e 	bl	13d80 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    c144:	b108      	cbz	r0, c14a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xef2>
    c146:	f109 0907 	add.w	r9, r9, #7
    c14a:	f8a8 9008 	strh.w	r9, [r8, #8]
    c14e:	7838      	ldrb	r0, [r7, #0]
    c150:	4631      	mov	r1, r6
    c152:	2804      	cmp	r0, #4
    c154:	d10b      	bne.n	c16e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xf16>
    c156:	6878      	ldr	r0, [r7, #4]
    c158:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    c15c:	ea4f 0940 	mov.w	r9, r0, lsl #1
    c160:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    c162:	f7f5 fa37 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    c166:	4548      	cmp	r0, r9
    c168:	bf38      	it	cc
    c16a:	2003      	movcc	r0, #3
    c16c:	d300      	bcc.n	c170 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xf18>
    c16e:	2002      	movs	r0, #2
    c170:	f888 000a 	strb.w	r0, [r8, #10]
    c174:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c176:	f8c8 0004 	str.w	r0, [r8, #4]
    c17a:	980c      	ldr	r0, [sp, #48]	; 0x30
    c17c:	2800      	cmp	r0, #0
    c17e:	bf04      	itt	eq
    c180:	f888 5000 	strbeq.w	r5, [r8]
    c184:	f8c8 600c 	streq.w	r6, [r8, #12]
    c188:	d023      	beq.n	c1d2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xf7a>
    c18a:	f888 a000 	strb.w	sl, [r8]
    c18e:	4626      	mov	r6, r4
    c190:	78b8      	ldrb	r0, [r7, #2]
    c192:	4c15      	ldr	r4, [pc, #84]	; (c1e8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xf90>)
    c194:	2800      	cmp	r0, #0
    c196:	bf1c      	itt	ne
    c198:	6ab9      	ldrne	r1, [r7, #40]	; 0x28
    c19a:	42a1      	cmpne	r1, r4
    c19c:	d214      	bcs.n	c1c8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xf70>
    c19e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    c1a0:	f7f5 f9e6 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    c1a4:	4681      	mov	r9, r0
    c1a6:	4621      	mov	r1, r4
    c1a8:	4630      	mov	r0, r6
    c1aa:	f7f5 f9e1 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    c1ae:	4601      	mov	r1, r0
    c1b0:	4648      	mov	r0, r9
    c1b2:	f7f5 fa0f 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    c1b6:	2800      	cmp	r0, #0
    c1b8:	dd06      	ble.n	c1c8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xf70>
    c1ba:	f5c0 3190 	rsb	r1, r0, #73728	; 0x12000
    c1be:	f111 61f4 	adds.w	r1, r1, #127926272	; 0x7a00000
    c1c2:	bf48      	it	mi
    c1c4:	4629      	movmi	r1, r5
    c1c6:	e000      	b.n	c1ca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xf72>
    c1c8:	4621      	mov	r1, r4
    c1ca:	eba1 000b 	sub.w	r0, r1, fp
    c1ce:	f8c8 000c 	str.w	r0, [r8, #12]
    c1d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
    c1d4:	4558      	cmp	r0, fp
    c1d6:	bf2c      	ite	cs
    c1d8:	2001      	movcs	r0, #1
    c1da:	2000      	movcc	r0, #0
    c1dc:	b015      	add	sp, #84	; 0x54
    c1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c1e2:	0000      	.short	0x0000
    c1e4:	20001008 	.word	0x20001008
    c1e8:	07a12000 	.word	0x07a12000

0000c1ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
    c1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c1f0:	4ce1      	ldr	r4, [pc, #900]	; (c578 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x38c>)
    c1f2:	b084      	sub	sp, #16
    c1f4:	2600      	movs	r6, #0
    c1f6:	6060      	str	r0, [r4, #4]
    c1f8:	8066      	strh	r6, [r4, #2]
    c1fa:	7066      	strb	r6, [r4, #1]
    c1fc:	4605      	mov	r5, r0
    c1fe:	7026      	strb	r6, [r4, #0]
    c200:	4637      	mov	r7, r6
    c202:	8800      	ldrh	r0, [r0, #0]
    c204:	f7f8 fe1a 	bl	4e3c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    c208:	6860      	ldr	r0, [r4, #4]
    c20a:	8800      	ldrh	r0, [r0, #0]
    c20c:	f7f8 fdbc 	bl	4d88 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    c210:	f8b5 0126 	ldrh.w	r0, [r5, #294]	; 0x126
    c214:	6861      	ldr	r1, [r4, #4]
    c216:	1c40      	adds	r0, r0, #1
    c218:	b282      	uxth	r2, r0
    c21a:	f101 0078 	add.w	r0, r1, #120	; 0x78
    c21e:	f7fa fc55 	bl	6acc <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    c222:	b120      	cbz	r0, c22e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x42>
    c224:	f44f 71ac 	mov.w	r1, #344	; 0x158
    c228:	2036      	movs	r0, #54	; 0x36
    c22a:	f7f7 fe89 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c22e:	f8a5 6126 	strh.w	r6, [r5, #294]	; 0x126
    c232:	f895 0086 	ldrb.w	r0, [r5, #134]	; 0x86
    c236:	2824      	cmp	r0, #36	; 0x24
    c238:	d10d      	bne.n	c256 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x6a>
    c23a:	f8b5 107c 	ldrh.w	r1, [r5, #124]	; 0x7c
    c23e:	f8b5 0128 	ldrh.w	r0, [r5, #296]	; 0x128
    c242:	1a08      	subs	r0, r1, r0
    c244:	b200      	sxth	r0, r0
    c246:	2800      	cmp	r0, #0
    c248:	db05      	blt.n	c256 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x6a>
    c24a:	f885 6086 	strb.w	r6, [r5, #134]	; 0x86
    c24e:	f000 ff75 	bl	d13c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xbb4>
    c252:	b9a0      	cbnz	r0, c27e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x92>
    c254:	e074      	b.n	c340 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x154>
    c256:	f895 0085 	ldrb.w	r0, [r5, #133]	; 0x85
    c25a:	2824      	cmp	r0, #36	; 0x24
    c25c:	bf18      	it	ne
    c25e:	2825      	cmpne	r0, #37	; 0x25
    c260:	d10d      	bne.n	c27e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x92>
    c262:	f8b5 107c 	ldrh.w	r1, [r5, #124]	; 0x7c
    c266:	f8b5 0128 	ldrh.w	r0, [r5, #296]	; 0x128
    c26a:	eba1 0000 	sub.w	r0, r1, r0
    c26e:	b200      	sxth	r0, r0
    c270:	2800      	cmp	r0, #0
    c272:	db04      	blt.n	c27e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x92>
    c274:	f885 6085 	strb.w	r6, [r5, #133]	; 0x85
    c278:	f000 ff60 	bl	d13c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xbb4>
    c27c:	b3f0      	cbz	r0, c2fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x110>
    c27e:	6860      	ldr	r0, [r4, #4]
    c280:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    c284:	b141      	cbz	r1, c298 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xac>
    c286:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
    c28a:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    c28e:	4291      	cmp	r1, r2
    c290:	bf24      	itt	cs
    c292:	b004      	addcs	sp, #16
    c294:	e8bd 81f0 	ldmiacs.w	sp!, {r4, r5, r6, r7, r8, pc}
    c298:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    c29c:	b141      	cbz	r1, c2b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4>
    c29e:	f8b0 10ba 	ldrh.w	r1, [r0, #186]	; 0xba
    c2a2:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    c2a6:	4291      	cmp	r1, r2
    c2a8:	bf24      	itt	cs
    c2aa:	b004      	addcs	sp, #16
    c2ac:	e8bd 81f0 	ldmiacs.w	sp!, {r4, r5, r6, r7, r8, pc}
    c2b0:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	; 0xb2
    c2b4:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    c2b8:	428a      	cmp	r2, r1
    c2ba:	bf24      	itt	cs
    c2bc:	b004      	addcs	sp, #16
    c2be:	e8bd 81f0 	ldmiacs.w	sp!, {r4, r5, r6, r7, r8, pc}
    c2c2:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
    c2c6:	b352      	cbz	r2, c31e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x132>
    c2c8:	f8b0 20ae 	ldrh.w	r2, [r0, #174]	; 0xae
    c2cc:	428a      	cmp	r2, r1
    c2ce:	bf24      	itt	cs
    c2d0:	b004      	addcs	sp, #16
    c2d2:	e8bd 81f0 	ldmiacs.w	sp!, {r4, r5, r6, r7, r8, pc}
    c2d6:	bf00      	nop
    c2d8:	f890 80fc 	ldrb.w	r8, [r0, #252]	; 0xfc
    c2dc:	f1b8 0ffe 	cmp.w	r8, #254	; 0xfe
    c2e0:	f000 8130 	beq.w	c544 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x358>
    c2e4:	4668      	mov	r0, sp
    c2e6:	f7f8 fd93 	bl	4e10 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    c2ea:	b1c8      	cbz	r0, c320 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x134>
    c2ec:	2222      	movs	r2, #34	; 0x22
    c2ee:	2100      	movs	r1, #0
    c2f0:	9800      	ldr	r0, [sp, #0]
    c2f2:	f003 fdf9 	bl	fee8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c2f6:	2103      	movs	r1, #3
    c2f8:	9800      	ldr	r0, [sp, #0]
    c2fa:	e000      	b.n	c2fe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x112>
    c2fc:	e020      	b.n	c340 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x154>
    c2fe:	f005 f9c8 	bl	11692 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    c302:	9a00      	ldr	r2, [sp, #0]
    c304:	4641      	mov	r1, r8
    c306:	7810      	ldrb	r0, [r2, #0]
    c308:	f020 0010 	bic.w	r0, r0, #16
    c30c:	7010      	strb	r0, [r2, #0]
    c30e:	4610      	mov	r0, r2
    c310:	f7fa fcf2 	bl	6cf8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    c314:	f1b8 0f19 	cmp.w	r8, #25
    c318:	f080 80f7 	bcs.w	c50a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31e>
    c31c:	e001      	b.n	c322 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x136>
    c31e:	e016      	b.n	c34e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x162>
    c320:	e01d      	b.n	c35e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x172>
    c322:	e8df f008 	tbb	[pc, r8]
    c326:	2c34      	.short	0x2c34
    c328:	f2f25d21 	.word	0xf2f25d21
    c32c:	f28126e6 	.word	0xf28126e6
    c330:	f276e6e6 	.word	0xf276e6e6
    c334:	daf2f2f2 	.word	0xdaf2f2f2
    c338:	9292e6e6 	.word	0x9292e6e6
    c33c:	00b4f2ab 	.word	0x00b4f2ab
    c340:	b004      	add	sp, #16
    c342:	2100      	movs	r1, #0
    c344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c348:	4608      	mov	r0, r1
    c34a:	f000 bc17 	b.w	cb7c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5f4>
    c34e:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
    c352:	2906      	cmp	r1, #6
    c354:	bf24      	itt	cs
    c356:	b004      	addcs	sp, #16
    c358:	e8bd 81f0 	ldmiacs.w	sp!, {r4, r5, r6, r7, r8, pc}
    c35c:	e7bc      	b.n	c2d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>
    c35e:	f640 014f 	movw	r1, #2127	; 0x84f
    c362:	2036      	movs	r0, #54	; 0x36
    c364:	f7f7 fdec 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c368:	6861      	ldr	r1, [r4, #4]
    c36a:	9800      	ldr	r0, [sp, #0]
    c36c:	f891 1141 	ldrb.w	r1, [r1, #321]	; 0x141
    c370:	e003      	b.n	c37a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e>
    c372:	6861      	ldr	r1, [r4, #4]
    c374:	9800      	ldr	r0, [sp, #0]
    c376:	f891 10fe 	ldrb.w	r1, [r1, #254]	; 0xfe
    c37a:	7101      	strb	r1, [r0, #4]
    c37c:	e0b9      	b.n	c4f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x306>
    c37e:	6860      	ldr	r0, [r4, #4]
    c380:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
    c384:	1c41      	adds	r1, r0, #1
    c386:	9800      	ldr	r0, [sp, #0]
    c388:	f005 f964 	bl	11654 <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>
    c38c:	e0b1      	b.n	c4f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x306>
    c38e:	6860      	ldr	r0, [r4, #4]
    c390:	9e00      	ldr	r6, [sp, #0]
    c392:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    c396:	f8b0 014c 	ldrh.w	r0, [r0, #332]	; 0x14c
    c39a:	f7fa fab1 	bl	6900 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    c39e:	7130      	strb	r0, [r6, #4]
    c3a0:	6860      	ldr	r0, [r4, #4]
    c3a2:	9e00      	ldr	r6, [sp, #0]
    c3a4:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    c3a8:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
    c3ac:	f7fa fa96 	bl	68dc <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    c3b0:	7170      	strb	r0, [r6, #5]
    c3b2:	0a00      	lsrs	r0, r0, #8
    c3b4:	71b0      	strb	r0, [r6, #6]
    c3b6:	6860      	ldr	r0, [r4, #4]
    c3b8:	9e00      	ldr	r6, [sp, #0]
    c3ba:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
    c3be:	f004 ff4b 	bl	11258 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    c3c2:	71f0      	strb	r0, [r6, #7]
    c3c4:	0a00      	lsrs	r0, r0, #8
    c3c6:	7230      	strb	r0, [r6, #8]
    c3c8:	6862      	ldr	r2, [r4, #4]
    c3ca:	9800      	ldr	r0, [sp, #0]
    c3cc:	f8b2 1158 	ldrh.w	r1, [r2, #344]	; 0x158
    c3d0:	7241      	strb	r1, [r0, #9]
    c3d2:	0a09      	lsrs	r1, r1, #8
    c3d4:	7281      	strb	r1, [r0, #10]
    c3d6:	f8b2 115a 	ldrh.w	r1, [r2, #346]	; 0x15a
    c3da:	f005 f93e 	bl	1165a <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>
    c3de:	e088      	b.n	c4f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x306>
    c3e0:	6860      	ldr	r0, [r4, #4]
    c3e2:	f200 115f 	addw	r1, r0, #351	; 0x15f
    c3e6:	9800      	ldr	r0, [sp, #0]
    c3e8:	f005 f942 	bl	11670 <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>
    c3ec:	6860      	ldr	r0, [r4, #4]
    c3ee:	f200 1167 	addw	r1, r0, #359	; 0x167
    c3f2:	9800      	ldr	r0, [sp, #0]
    c3f4:	f005 f935 	bl	11662 <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>
    c3f8:	6860      	ldr	r0, [r4, #4]
    c3fa:	f200 1179 	addw	r1, r0, #377	; 0x179
    c3fe:	9800      	ldr	r0, [sp, #0]
    c400:	f005 f93b 	bl	1167a <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>
    c404:	6860      	ldr	r0, [r4, #4]
    c406:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
    c40a:	9800      	ldr	r0, [sp, #0]
    c40c:	f005 f92c 	bl	11668 <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>
    c410:	e06f      	b.n	c4f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x306>
    c412:	9800      	ldr	r0, [sp, #0]
    c414:	210b      	movs	r1, #11
    c416:	7101      	strb	r1, [r0, #4]
    c418:	2159      	movs	r1, #89	; 0x59
    c41a:	7141      	strb	r1, [r0, #5]
    c41c:	7186      	strb	r6, [r0, #6]
    c41e:	21fe      	movs	r1, #254	; 0xfe
    c420:	71c1      	strb	r1, [r0, #7]
    c422:	2112      	movs	r1, #18
    c424:	7201      	strb	r1, [r0, #8]
    c426:	e064      	b.n	c4f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x306>
    c428:	9602      	str	r6, [sp, #8]
    c42a:	9603      	str	r6, [sp, #12]
    c42c:	f001 fc08 	bl	dc40 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    c430:	f644 112f 	movw	r1, #18735	; 0x492f
    c434:	4008      	ands	r0, r1
    c436:	f88d 0008 	strb.w	r0, [sp, #8]
    c43a:	0a00      	lsrs	r0, r0, #8
    c43c:	f88d 0009 	strb.w	r0, [sp, #9]
    c440:	a902      	add	r1, sp, #8
    c442:	9800      	ldr	r0, [sp, #0]
    c444:	f005 f920 	bl	11688 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    c448:	e053      	b.n	c4f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x306>
    c44a:	6860      	ldr	r0, [r4, #4]
    c44c:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    c450:	9800      	ldr	r0, [sp, #0]
    c452:	f005 f930 	bl	116b6 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    c456:	6860      	ldr	r0, [r4, #4]
    c458:	f8b0 10fe 	ldrh.w	r1, [r0, #254]	; 0xfe
    c45c:	9800      	ldr	r0, [sp, #0]
    c45e:	f005 f92e 	bl	116be <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    c462:	6860      	ldr	r0, [r4, #4]
    c464:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    c468:	9800      	ldr	r0, [sp, #0]
    c46a:	f005 f91c 	bl	116a6 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    c46e:	6860      	ldr	r0, [r4, #4]
    c470:	f8b0 1100 	ldrh.w	r1, [r0, #256]	; 0x100
    c474:	9800      	ldr	r0, [sp, #0]
    c476:	f005 f91a 	bl	116ae <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    c47a:	e03a      	b.n	c4f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x306>
    c47c:	6862      	ldr	r2, [r4, #4]
    c47e:	9900      	ldr	r1, [sp, #0]
    c480:	f892 0144 	ldrb.w	r0, [r2, #324]	; 0x144
    c484:	7108      	strb	r0, [r1, #4]
    c486:	f892 0145 	ldrb.w	r0, [r2, #325]	; 0x145
    c48a:	7148      	strb	r0, [r1, #5]
    c48c:	e031      	b.n	c4f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x306>
    c48e:	6860      	ldr	r0, [r4, #4]
    c490:	f890 012b 	ldrb.w	r0, [r0, #299]	; 0x12b
    c494:	f004 ffbb 	bl	1140e <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    c498:	4601      	mov	r1, r0
    c49a:	9800      	ldr	r0, [sp, #0]
    c49c:	f005 f917 	bl	116ce <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>
    c4a0:	6860      	ldr	r0, [r4, #4]
    c4a2:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    c4a6:	f011 0f0c 	tst.w	r1, #12
    c4aa:	bf1e      	ittt	ne
    c4ac:	f890 006a 	ldrbne.w	r0, [r0, #106]	; 0x6a
    c4b0:	f010 0f0c 	tstne.w	r0, #12
    c4b4:	4281      	cmpne	r1, r0
    c4b6:	d008      	beq.n	c4ca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2de>
    c4b8:	f04f 0000 	mov.w	r0, #0
    c4bc:	f004 ffa7 	bl	1140e <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    c4c0:	4601      	mov	r1, r0
    c4c2:	9800      	ldr	r0, [sp, #0]
    c4c4:	f005 f8ed 	bl	116a2 <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>
    c4c8:	e013      	b.n	c4f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x306>
    c4ca:	4608      	mov	r0, r1
    c4cc:	f004 ff9f 	bl	1140e <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    c4d0:	4601      	mov	r1, r0
    c4d2:	9800      	ldr	r0, [sp, #0]
    c4d4:	f005 f8e5 	bl	116a2 <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>
    c4d8:	e00b      	b.n	c4f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x306>
    c4da:	6860      	ldr	r0, [r4, #4]
    c4dc:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
    c4e0:	9800      	ldr	r0, [sp, #0]
    c4e2:	f005 f8b3 	bl	1164c <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    c4e6:	6860      	ldr	r0, [r4, #4]
    c4e8:	f890 10ff 	ldrb.w	r1, [r0, #255]	; 0xff
    c4ec:	9800      	ldr	r0, [sp, #0]
    c4ee:	f005 f8af 	bl	11650 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    c4f2:	f7f8 fc65 	bl	4dc0 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    c4f6:	b168      	cbz	r0, c514 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x328>
    c4f8:	9800      	ldr	r0, [sp, #0]
    c4fa:	78c1      	ldrb	r1, [r0, #3]
    c4fc:	2901      	cmp	r1, #1
    c4fe:	d00e      	beq.n	c51e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x332>
    c500:	b1a1      	cbz	r1, c52c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x340>
    c502:	2918      	cmp	r1, #24
    c504:	d019      	beq.n	c53a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34e>
    c506:	e01d      	b.n	c544 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x358>
    c508:	e7ff      	b.n	c50a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31e>
    c50a:	f640 01db 	movw	r1, #2267	; 0x8db
    c50e:	2036      	movs	r0, #54	; 0x36
    c510:	f7f7 fd16 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c514:	f640 01e1 	movw	r1, #2273	; 0x8e1
    c518:	2036      	movs	r0, #54	; 0x36
    c51a:	f7f7 fd11 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c51e:	6861      	ldr	r1, [r4, #4]
    c520:	f8b1 1134 	ldrh.w	r1, [r1, #308]	; 0x134
    c524:	7241      	strb	r1, [r0, #9]
    c526:	0a09      	lsrs	r1, r1, #8
    c528:	7281      	strb	r1, [r0, #10]
    c52a:	e00b      	b.n	c544 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x358>
    c52c:	6861      	ldr	r1, [r4, #4]
    c52e:	f8b1 114a 	ldrh.w	r1, [r1, #330]	; 0x14a
    c532:	7341      	strb	r1, [r0, #13]
    c534:	0a09      	lsrs	r1, r1, #8
    c536:	7381      	strb	r1, [r0, #14]
    c538:	e004      	b.n	c544 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x358>
    c53a:	6861      	ldr	r1, [r4, #4]
    c53c:	f8b1 1128 	ldrh.w	r1, [r1, #296]	; 0x128
    c540:	f005 f8c1 	bl	116c6 <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>
    c544:	480d      	ldr	r0, [pc, #52]	; (c57c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x390>)
    c546:	9000      	str	r0, [sp, #0]
    c548:	4b0d      	ldr	r3, [pc, #52]	; (c580 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x394>)
    c54a:	4a0e      	ldr	r2, [pc, #56]	; (c584 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x398>)
    c54c:	4629      	mov	r1, r5
    c54e:	4638      	mov	r0, r7
    c550:	f7f8 fcc4 	bl	4edc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    c554:	6860      	ldr	r0, [r4, #4]
    c556:	2300      	movs	r3, #0
    c558:	2105      	movs	r1, #5
    c55a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    c55e:	3078      	adds	r0, #120	; 0x78
    c560:	f004 fea1 	bl	112a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c564:	2800      	cmp	r0, #0
    c566:	bf04      	itt	eq
    c568:	b004      	addeq	sp, #16
    c56a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    c56e:	b004      	add	sp, #16
    c570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c574:	f7f8 bcac 	b.w	4ed0 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    c578:	20000194 	.word	0x20000194
    c57c:	0000cb7d 	.word	0x0000cb7d
    c580:	0000c5e1 	.word	0x0000c5e1
    c584:	0000d019 	.word	0x0000d019

0000c588 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
    c588:	4814      	ldr	r0, [pc, #80]	; (c5dc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x54>)
    c58a:	6840      	ldr	r0, [r0, #4]
    c58c:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    c590:	b129      	cbz	r1, c59e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x16>
    c592:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
    c596:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    c59a:	4291      	cmp	r1, r2
    c59c:	d21a      	bcs.n	c5d4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    c59e:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    c5a2:	b129      	cbz	r1, c5b0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
    c5a4:	f8b0 10ba 	ldrh.w	r1, [r0, #186]	; 0xba
    c5a8:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    c5ac:	4291      	cmp	r1, r2
    c5ae:	d211      	bcs.n	c5d4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    c5b0:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	; 0xb2
    c5b4:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    c5b8:	428a      	cmp	r2, r1
    c5ba:	d20b      	bcs.n	c5d4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    c5bc:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
    c5c0:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    c5c4:	b122      	cbz	r2, c5d0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x48>
    c5c6:	4288      	cmp	r0, r1
    c5c8:	d204      	bcs.n	c5d4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    c5ca:	bf00      	nop
    c5cc:	f7f8 bf12 	b.w	53f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    c5d0:	2806      	cmp	r0, #6
    c5d2:	d3fb      	bcc.n	c5cc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x44>
    c5d4:	2000      	movs	r0, #0
    c5d6:	4601      	mov	r1, r0
    c5d8:	f000 bad0 	b.w	cb7c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5f4>
    c5dc:	20000194 	.word	0x20000194
    c5e0:	4a0f      	ldr	r2, [pc, #60]	; (c620 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x98>)
    c5e2:	7851      	ldrb	r1, [r2, #1]
    c5e4:	b9c9      	cbnz	r1, c61a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x92>
    c5e6:	4611      	mov	r1, r2
    c5e8:	2801      	cmp	r0, #1
    c5ea:	6849      	ldr	r1, [r1, #4]
    c5ec:	d009      	beq.n	c602 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
    c5ee:	7890      	ldrb	r0, [r2, #2]
    c5f0:	f010 0f04 	tst.w	r0, #4
    c5f4:	d003      	beq.n	c5fe <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x76>
    c5f6:	f891 0088 	ldrb.w	r0, [r1, #136]	; 0x88
    c5fa:	2807      	cmp	r0, #7
    c5fc:	d00d      	beq.n	c61a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x92>
    c5fe:	2001      	movs	r0, #1
    c600:	4770      	bx	lr
    c602:	68c8      	ldr	r0, [r1, #12]
    c604:	f641 524c 	movw	r2, #7500	; 0x1d4c
    c608:	4290      	cmp	r0, r2
    c60a:	d306      	bcc.n	c61a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x92>
    c60c:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
    c610:	8e88      	ldrh	r0, [r1, #52]	; 0x34
    c612:	4290      	cmp	r0, r2
    c614:	d301      	bcc.n	c61a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x92>
    c616:	f7fe b94f 	b.w	a8b8 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
    c61a:	2000      	movs	r0, #0
    c61c:	4770      	bx	lr
    c61e:	0000      	.short	0x0000
    c620:	20000194 	.word	0x20000194
    c624:	b570      	push	{r4, r5, r6, lr}
    c626:	4cfe      	ldr	r4, [pc, #1016]	; (ca20 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x498>)
    c628:	b082      	sub	sp, #8
    c62a:	6860      	ldr	r0, [r4, #4]
    c62c:	f890 10fc 	ldrb.w	r1, [r0, #252]	; 0xfc
    c630:	29fe      	cmp	r1, #254	; 0xfe
    c632:	bf1c      	itt	ne
    c634:	b002      	addne	sp, #8
    c636:	bd70      	popne	{r4, r5, r6, pc}
    c638:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    c63c:	2300      	movs	r3, #0
    c63e:	2101      	movs	r1, #1
    c640:	3078      	adds	r0, #120	; 0x78
    c642:	f004 fe30 	bl	112a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c646:	2800      	cmp	r0, #0
    c648:	bf1c      	itt	ne
    c64a:	b002      	addne	sp, #8
    c64c:	bd70      	popne	{r4, r5, r6, pc}
    c64e:	6860      	ldr	r0, [r4, #4]
    c650:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
    c654:	f88d 1000 	strb.w	r1, [sp]
    c658:	f89d 1000 	ldrb.w	r1, [sp]
    c65c:	b129      	cbz	r1, c66a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe2>
    c65e:	b002      	add	sp, #8
    c660:	2002      	movs	r0, #2
    c662:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c666:	f000 bde9 	b.w	d23c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xcb4>
    c66a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    c66e:	2300      	movs	r3, #0
    c670:	4619      	mov	r1, r3
    c672:	3078      	adds	r0, #120	; 0x78
    c674:	f004 fe17 	bl	112a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c678:	b148      	cbz	r0, c68e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x106>
    c67a:	6860      	ldr	r0, [r4, #4]
    c67c:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    c680:	b128      	cbz	r0, c68e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x106>
    c682:	b002      	add	sp, #8
    c684:	2012      	movs	r0, #18
    c686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c68a:	f000 bdd7 	b.w	d23c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xcb4>
    c68e:	6860      	ldr	r0, [r4, #4]
    c690:	2500      	movs	r5, #0
    c692:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    c696:	2a12      	cmp	r2, #18
    c698:	d020      	beq.n	c6dc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x154>
    c69a:	dc04      	bgt.n	c6a6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x11e>
    c69c:	2a03      	cmp	r2, #3
    c69e:	d02e      	beq.n	c6fe <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x176>
    c6a0:	2a11      	cmp	r2, #17
    c6a2:	d021      	beq.n	c6e8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x160>
    c6a4:	e003      	b.n	c6ae <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x126>
    c6a6:	2a18      	cmp	r2, #24
    c6a8:	d023      	beq.n	c6f2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x16a>
    c6aa:	2a23      	cmp	r2, #35	; 0x23
    c6ac:	d033      	beq.n	c716 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x18e>
    c6ae:	2300      	movs	r3, #0
    c6b0:	2104      	movs	r1, #4
    c6b2:	3078      	adds	r0, #120	; 0x78
    c6b4:	f004 fdf7 	bl	112a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c6b8:	2800      	cmp	r0, #0
    c6ba:	bf1c      	itt	ne
    c6bc:	b002      	addne	sp, #8
    c6be:	bd70      	popne	{r4, r5, r6, pc}
    c6c0:	6860      	ldr	r0, [r4, #4]
    c6c2:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    c6c6:	2919      	cmp	r1, #25
    c6c8:	f000 811d 	beq.w	c906 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x37e>
    c6cc:	dc2b      	bgt.n	c726 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x19e>
    c6ce:	2901      	cmp	r1, #1
    c6d0:	d03b      	beq.n	c74a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c2>
    c6d2:	2902      	cmp	r1, #2
    c6d4:	d046      	beq.n	c764 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1dc>
    c6d6:	2903      	cmp	r1, #3
    c6d8:	d02c      	beq.n	c734 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1ac>
    c6da:	e0cb      	b.n	c874 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2ec>
    c6dc:	b002      	add	sp, #8
    c6de:	200b      	movs	r0, #11
    c6e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c6e4:	f000 bdaa 	b.w	d23c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xcb4>
    c6e8:	b002      	add	sp, #8
    c6ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c6ee:	f000 bc51 	b.w	cf94 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xa0c>
    c6f2:	b002      	add	sp, #8
    c6f4:	2006      	movs	r0, #6
    c6f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c6fa:	f000 bd9f 	b.w	d23c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xcb4>
    c6fe:	f890 10fa 	ldrb.w	r1, [r0, #250]	; 0xfa
    c702:	f880 10fe 	strb.w	r1, [r0, #254]	; 0xfe
    c706:	2007      	movs	r0, #7
    c708:	f000 fd98 	bl	d23c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xcb4>
    c70c:	6860      	ldr	r0, [r4, #4]
    c70e:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    c712:	b002      	add	sp, #8
    c714:	bd70      	pop	{r4, r5, r6, pc}
    c716:	2018      	movs	r0, #24
    c718:	f000 fd90 	bl	d23c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xcb4>
    c71c:	6860      	ldr	r0, [r4, #4]
    c71e:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    c722:	b002      	add	sp, #8
    c724:	bd70      	pop	{r4, r5, r6, pc}
    c726:	291d      	cmp	r1, #29
    c728:	bf18      	it	ne
    c72a:	291e      	cmpne	r1, #30
    c72c:	d023      	beq.n	c776 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1ee>
    c72e:	2921      	cmp	r1, #33	; 0x21
    c730:	d06a      	beq.n	c808 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x280>
    c732:	e09f      	b.n	c874 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2ec>
    c734:	f890 10f9 	ldrb.w	r1, [r0, #249]	; 0xf9
    c738:	f880 10fe 	strb.w	r1, [r0, #254]	; 0xfe
    c73c:	2007      	movs	r0, #7
    c73e:	f000 fd7d 	bl	d23c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xcb4>
    c742:	6860      	ldr	r0, [r4, #4]
    c744:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    c748:	e094      	b.n	c874 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2ec>
    c74a:	200c      	movs	r0, #12
    c74c:	f000 fd76 	bl	d23c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xcb4>
    c750:	6860      	ldr	r0, [r4, #4]
    c752:	f8a0 50ba 	strh.w	r5, [r0, #186]	; 0xba
    c756:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    c75a:	f041 0101 	orr.w	r1, r1, #1
    c75e:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
    c762:	e005      	b.n	c770 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1e8>
    c764:	2013      	movs	r0, #19
    c766:	f000 fd69 	bl	d23c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xcb4>
    c76a:	6860      	ldr	r0, [r4, #4]
    c76c:	f8a0 50ba 	strh.w	r5, [r0, #186]	; 0xba
    c770:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    c774:	e07e      	b.n	c874 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2ec>
    c776:	f890 2137 	ldrb.w	r2, [r0, #311]	; 0x137
    c77a:	f88d 2000 	strb.w	r2, [sp]
    c77e:	f89d 2000 	ldrb.w	r2, [sp]
    c782:	2a00      	cmp	r2, #0
    c784:	d176      	bne.n	c874 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2ec>
    c786:	f890 2136 	ldrb.w	r2, [r0, #310]	; 0x136
    c78a:	f88d 2000 	strb.w	r2, [sp]
    c78e:	f89d 2000 	ldrb.w	r2, [sp]
    c792:	b19a      	cbz	r2, c7bc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x234>
    c794:	2924      	cmp	r1, #36	; 0x24
    c796:	bf1b      	ittet	ne
    c798:	f890 1085 	ldrbne.w	r1, [r0, #133]	; 0x85
    c79c:	2924      	cmpne	r1, #36	; 0x24
    c79e:	2301      	moveq	r3, #1
    c7a0:	2300      	movne	r3, #0
    c7a2:	f500 7295 	add.w	r2, r0, #298	; 0x12a
    c7a6:	f500 719b 	add.w	r1, r0, #310	; 0x136
    c7aa:	f7fa fe47 	bl	743c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    c7ae:	6860      	ldr	r0, [r4, #4]
    c7b0:	211e      	movs	r1, #30
    c7b2:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    c7b6:	f880 5136 	strb.w	r5, [r0, #310]	; 0x136
    c7ba:	e001      	b.n	c7c0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x238>
    c7bc:	291e      	cmp	r1, #30
    c7be:	d159      	bne.n	c874 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2ec>
    c7c0:	6860      	ldr	r0, [r4, #4]
    c7c2:	f005 f9b9 	bl	11b38 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    c7c6:	6861      	ldr	r1, [r4, #4]
    c7c8:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    c7cc:	2801      	cmp	r0, #1
    c7ce:	bf04      	itt	eq
    c7d0:	2002      	moveq	r0, #2
    c7d2:	f881 0060 	strbeq.w	r0, [r1, #96]	; 0x60
    c7d6:	d007      	beq.n	c7e8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x260>
    c7d8:	8808      	ldrh	r0, [r1, #0]
    c7da:	f501 72ca 	add.w	r2, r1, #404	; 0x194
    c7de:	312c      	adds	r1, #44	; 0x2c
    c7e0:	f005 f969 	bl	11ab6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    c7e4:	f7fa fdaa 	bl	733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    c7e8:	6860      	ldr	r0, [r4, #4]
    c7ea:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    c7ee:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    c7f2:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    c7f6:	f8a0 1100 	strh.w	r1, [r0, #256]	; 0x100
    c7fa:	2015      	movs	r0, #21
    c7fc:	f000 fd1e 	bl	d23c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xcb4>
    c800:	6860      	ldr	r0, [r4, #4]
    c802:	f8a0 50ba 	strh.w	r5, [r0, #186]	; 0xba
    c806:	e7b3      	b.n	c770 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1e8>
    c808:	f890 1142 	ldrb.w	r1, [r0, #322]	; 0x142
    c80c:	2901      	cmp	r1, #1
    c80e:	d106      	bne.n	c81e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x296>
    c810:	f890 1143 	ldrb.w	r1, [r0, #323]	; 0x143
    c814:	f88d 1000 	strb.w	r1, [sp]
    c818:	f89d 1000 	ldrb.w	r1, [sp]
    c81c:	b121      	cbz	r1, c828 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2a0>
    c81e:	f890 1142 	ldrb.w	r1, [r0, #322]	; 0x142
    c822:	2902      	cmp	r1, #2
    c824:	d052      	beq.n	c8cc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x344>
    c826:	e025      	b.n	c874 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2ec>
    c828:	f8d0 2144 	ldr.w	r2, [r0, #324]	; 0x144
    c82c:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
    c830:	f8b0 006a 	ldrh.w	r0, [r0, #106]	; 0x6a
    c834:	f8ad 0000 	strh.w	r0, [sp]
    c838:	4610      	mov	r0, r2
    c83a:	f004 fe0a 	bl	11452 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    c83e:	f89d 2000 	ldrb.w	r2, [sp]
    c842:	b2c1      	uxtb	r1, r0
    c844:	428a      	cmp	r2, r1
    c846:	bf19      	ittee	ne
    c848:	6862      	ldrne	r2, [r4, #4]
    c84a:	f882 112a 	strbne.w	r1, [r2, #298]	; 0x12a
    c84e:	6861      	ldreq	r1, [r4, #4]
    c850:	f881 512a 	strbeq.w	r5, [r1, #298]	; 0x12a
    c854:	f89d 1001 	ldrb.w	r1, [sp, #1]
    c858:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c85c:	4281      	cmp	r1, r0
    c85e:	d003      	beq.n	c868 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2e0>
    c860:	6861      	ldr	r1, [r4, #4]
    c862:	f881 012b 	strb.w	r0, [r1, #299]	; 0x12b
    c866:	e002      	b.n	c86e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2e6>
    c868:	6860      	ldr	r0, [r4, #4]
    c86a:	f880 512b 	strb.w	r5, [r0, #299]	; 0x12b
    c86e:	2018      	movs	r0, #24
    c870:	f000 fce4 	bl	d23c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xcb4>
    c874:	6860      	ldr	r0, [r4, #4]
    c876:	f890 10fc 	ldrb.w	r1, [r0, #252]	; 0xfc
    c87a:	29fe      	cmp	r1, #254	; 0xfe
    c87c:	bf1c      	itt	ne
    c87e:	b002      	addne	sp, #8
    c880:	bd70      	popne	{r4, r5, r6, pc}
    c882:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    c886:	2300      	movs	r3, #0
    c888:	4619      	mov	r1, r3
    c88a:	3078      	adds	r0, #120	; 0x78
    c88c:	f004 fd0b 	bl	112a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c890:	2800      	cmp	r0, #0
    c892:	d044      	beq.n	c91e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x396>
    c894:	6860      	ldr	r0, [r4, #4]
    c896:	f890 1148 	ldrb.w	r1, [r0, #328]	; 0x148
    c89a:	f88d 1000 	strb.w	r1, [sp]
    c89e:	f89d 1000 	ldrb.w	r1, [sp]
    c8a2:	b129      	cbz	r1, c8b0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x328>
    c8a4:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    c8a8:	f004 fd69 	bl	1137e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    c8ac:	2800      	cmp	r0, #0
    c8ae:	d07d      	beq.n	c9ac <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x424>
    c8b0:	6860      	ldr	r0, [r4, #4]
    c8b2:	f890 115e 	ldrb.w	r1, [r0, #350]	; 0x15e
    c8b6:	b399      	cbz	r1, c920 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x398>
    c8b8:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    c8bc:	b369      	cbz	r1, c91a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x392>
    c8be:	f890 008b 	ldrb.w	r0, [r0, #139]	; 0x8b
    c8c2:	2800      	cmp	r0, #0
    c8c4:	bf18      	it	ne
    c8c6:	200a      	movne	r0, #10
    c8c8:	d022      	beq.n	c910 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x388>
    c8ca:	e079      	b.n	c9c0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x438>
    c8cc:	f8d0 2066 	ldr.w	r2, [r0, #102]	; 0x66
    c8d0:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
    c8d4:	f8b0 006a 	ldrh.w	r0, [r0, #106]	; 0x6a
    c8d8:	f8ad 0000 	strh.w	r0, [sp]
    c8dc:	4610      	mov	r0, r2
    c8de:	f004 fdb8 	bl	11452 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    c8e2:	f89d 2000 	ldrb.w	r2, [sp]
    c8e6:	b2c1      	uxtb	r1, r0
    c8e8:	428a      	cmp	r2, r1
    c8ea:	bf19      	ittee	ne
    c8ec:	6862      	ldrne	r2, [r4, #4]
    c8ee:	f882 112a 	strbne.w	r1, [r2, #298]	; 0x12a
    c8f2:	6861      	ldreq	r1, [r4, #4]
    c8f4:	f881 512a 	strbeq.w	r5, [r1, #298]	; 0x12a
    c8f8:	f89d 1001 	ldrb.w	r1, [sp, #1]
    c8fc:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c900:	4281      	cmp	r1, r0
    c902:	d0b1      	beq.n	c868 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2e0>
    c904:	e7ac      	b.n	c860 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2d8>
    c906:	2011      	movs	r0, #17
    c908:	f000 fc98 	bl	d23c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xcb4>
    c90c:	6860      	ldr	r0, [r4, #4]
    c90e:	e72f      	b.n	c770 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1e8>
    c910:	f44f 61e7 	mov.w	r1, #1848	; 0x738
    c914:	2036      	movs	r0, #54	; 0x36
    c916:	f7f7 fb13 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c91a:	f000 fb3b 	bl	cf94 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xa0c>
    c91e:	e0b1      	b.n	ca84 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4fc>
    c920:	e7ff      	b.n	c922 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x39a>
    c922:	f890 115d 	ldrb.w	r1, [r0, #349]	; 0x15d
    c926:	2900      	cmp	r1, #0
    c928:	bf18      	it	ne
    c92a:	2008      	movne	r0, #8
    c92c:	d148      	bne.n	c9c0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x438>
    c92e:	f890 115c 	ldrb.w	r1, [r0, #348]	; 0x15c
    c932:	2601      	movs	r6, #1
    c934:	b199      	cbz	r1, c95e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x3d6>
    c936:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    c93a:	f010 0f03 	tst.w	r0, #3
    c93e:	d141      	bne.n	c9c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x43c>
    c940:	200c      	movs	r0, #12
    c942:	f000 fc7b 	bl	d23c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xcb4>
    c946:	6860      	ldr	r0, [r4, #4]
    c948:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    c94c:	f880 60b8 	strb.w	r6, [r0, #184]	; 0xb8
    c950:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    c954:	f041 0101 	orr.w	r1, r1, #1
    c958:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
    c95c:	e092      	b.n	ca84 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4fc>
    c95e:	f890 1136 	ldrb.w	r1, [r0, #310]	; 0x136
    c962:	f88d 1000 	strb.w	r1, [sp]
    c966:	f89d 1000 	ldrb.w	r1, [sp]
    c96a:	b131      	cbz	r1, c97a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x3f2>
    c96c:	f890 1137 	ldrb.w	r1, [r0, #311]	; 0x137
    c970:	f88d 1000 	strb.w	r1, [sp]
    c974:	f89d 1000 	ldrb.w	r1, [sp]
    c978:	b121      	cbz	r1, c984 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x3fc>
    c97a:	f890 1142 	ldrb.w	r1, [r0, #322]	; 0x142
    c97e:	2901      	cmp	r1, #1
    c980:	d120      	bne.n	c9c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x43c>
    c982:	e020      	b.n	c9c6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x43e>
    c984:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    c988:	2924      	cmp	r1, #36	; 0x24
    c98a:	bf1d      	ittte	ne
    c98c:	f890 1085 	ldrbne.w	r1, [r0, #133]	; 0x85
    c990:	2924      	cmpne	r1, #36	; 0x24
    c992:	2300      	movne	r3, #0
    c994:	2301      	moveq	r3, #1
    c996:	f500 7295 	add.w	r2, r0, #298	; 0x12a
    c99a:	f500 719b 	add.w	r1, r0, #310	; 0x136
    c99e:	f7fa fd4d 	bl	743c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    c9a2:	6860      	ldr	r0, [r4, #4]
    c9a4:	f500 719b 	add.w	r1, r0, #310	; 0x136
    c9a8:	700d      	strb	r5, [r1, #0]
    c9aa:	e000      	b.n	c9ae <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x426>
    c9ac:	e008      	b.n	c9c0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x438>
    c9ae:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    c9b2:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    c9b6:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    c9ba:	f8a0 1100 	strh.w	r1, [r0, #256]	; 0x100
    c9be:	2014      	movs	r0, #20
    c9c0:	f000 fc3c 	bl	d23c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xcb4>
    c9c4:	e05e      	b.n	ca84 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4fc>
    c9c6:	f890 1143 	ldrb.w	r1, [r0, #323]	; 0x143
    c9ca:	f88d 1000 	strb.w	r1, [sp]
    c9ce:	f89d 1000 	ldrb.w	r1, [sp]
    c9d2:	bb21      	cbnz	r1, ca1e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x496>
    c9d4:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    c9d8:	f004 fcd1 	bl	1137e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    c9dc:	b9f8      	cbnz	r0, ca1e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x496>
    c9de:	6862      	ldr	r2, [r4, #4]
    c9e0:	f892 106a 	ldrb.w	r1, [r2, #106]	; 0x6a
    c9e4:	2901      	cmp	r1, #1
    c9e6:	bf08      	it	eq
    c9e8:	2001      	moveq	r0, #1
    c9ea:	d00f      	beq.n	ca0c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x484>
    c9ec:	2902      	cmp	r1, #2
    c9ee:	bf08      	it	eq
    c9f0:	2002      	moveq	r0, #2
    c9f2:	d00b      	beq.n	ca0c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x484>
    c9f4:	2904      	cmp	r1, #4
    c9f6:	bf14      	ite	ne
    c9f8:	2908      	cmpne	r1, #8
    c9fa:	2003      	moveq	r0, #3
    c9fc:	d006      	beq.n	ca0c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x484>
    c9fe:	bf00      	nop
    ca00:	f240 2163 	movw	r1, #611	; 0x263
    ca04:	f04f 0006 	mov.w	r0, #6
    ca08:	f7f7 fa9a 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ca0c:	f892 306b 	ldrb.w	r3, [r2, #107]	; 0x6b
    ca10:	2b01      	cmp	r3, #1
    ca12:	bf08      	it	eq
    ca14:	f04f 0c01 	moveq.w	ip, #1
    ca18:	d00e      	beq.n	ca38 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4b0>
    ca1a:	2b02      	cmp	r3, #2
    ca1c:	e002      	b.n	ca24 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x49c>
    ca1e:	e031      	b.n	ca84 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4fc>
    ca20:	20000194 	.word	0x20000194
    ca24:	bf08      	it	eq
    ca26:	f04f 0c02 	moveq.w	ip, #2
    ca2a:	d005      	beq.n	ca38 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4b0>
    ca2c:	2b04      	cmp	r3, #4
    ca2e:	bf14      	ite	ne
    ca30:	2b08      	cmpne	r3, #8
    ca32:	f04f 0c03 	moveq.w	ip, #3
    ca36:	d1e3      	bne.n	ca00 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x478>
    ca38:	f892 3144 	ldrb.w	r3, [r2, #324]	; 0x144
    ca3c:	2801      	cmp	r0, #1
    ca3e:	d006      	beq.n	ca4e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c6>
    ca40:	2802      	cmp	r0, #2
    ca42:	d007      	beq.n	ca54 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4cc>
    ca44:	2803      	cmp	r0, #3
    ca46:	bf08      	it	eq
    ca48:	2b04      	cmpeq	r3, #4
    ca4a:	d005      	beq.n	ca58 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4d0>
    ca4c:	e017      	b.n	ca7e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4f6>
    ca4e:	2b01      	cmp	r3, #1
    ca50:	d115      	bne.n	ca7e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4f6>
    ca52:	e001      	b.n	ca58 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4d0>
    ca54:	2b02      	cmp	r3, #2
    ca56:	d112      	bne.n	ca7e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4f6>
    ca58:	f892 0145 	ldrb.w	r0, [r2, #325]	; 0x145
    ca5c:	f1bc 0f01 	cmp.w	ip, #1
    ca60:	d008      	beq.n	ca74 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4ec>
    ca62:	f1bc 0f02 	cmp.w	ip, #2
    ca66:	d008      	beq.n	ca7a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4f2>
    ca68:	f1bc 0f03 	cmp.w	ip, #3
    ca6c:	bf08      	it	eq
    ca6e:	2804      	cmpeq	r0, #4
    ca70:	d05c      	beq.n	cb2c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a4>
    ca72:	e004      	b.n	ca7e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4f6>
    ca74:	2801      	cmp	r0, #1
    ca76:	d102      	bne.n	ca7e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4f6>
    ca78:	e058      	b.n	cb2c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a4>
    ca7a:	2802      	cmp	r0, #2
    ca7c:	d056      	beq.n	cb2c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a4>
    ca7e:	2016      	movs	r0, #22
    ca80:	f000 fbdc 	bl	d23c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xcb4>
    ca84:	6860      	ldr	r0, [r4, #4]
    ca86:	f890 10fc 	ldrb.w	r1, [r0, #252]	; 0xfc
    ca8a:	29fe      	cmp	r1, #254	; 0xfe
    ca8c:	bf1c      	itt	ne
    ca8e:	b002      	addne	sp, #8
    ca90:	bd70      	popne	{r4, r5, r6, pc}
    ca92:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ca96:	2300      	movs	r3, #0
    ca98:	4619      	mov	r1, r3
    ca9a:	3078      	adds	r0, #120	; 0x78
    ca9c:	f004 fc03 	bl	112a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    caa0:	2800      	cmp	r0, #0
    caa2:	bf04      	itt	eq
    caa4:	b002      	addeq	sp, #8
    caa6:	bd70      	popeq	{r4, r5, r6, pc}
    caa8:	6860      	ldr	r0, [r4, #4]
    caaa:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    caae:	f88d 1000 	strb.w	r1, [sp]
    cab2:	f89d 1000 	ldrb.w	r1, [sp]
    cab6:	2900      	cmp	r1, #0
    cab8:	bf04      	itt	eq
    caba:	b002      	addeq	sp, #8
    cabc:	bd70      	popeq	{r4, r5, r6, pc}
    cabe:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    cac2:	f004 fc5c 	bl	1137e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    cac6:	2800      	cmp	r0, #0
    cac8:	bf1c      	itt	ne
    caca:	b002      	addne	sp, #8
    cacc:	bd70      	popne	{r4, r5, r6, pc}
    cace:	6860      	ldr	r0, [r4, #4]
    cad0:	f8b0 007c 	ldrh.w	r0, [r0, #124]	; 0x7c
    cad4:	280a      	cmp	r0, #10
    cad6:	bf9c      	itt	ls
    cad8:	b002      	addls	sp, #8
    cada:	bd70      	popls	{r4, r5, r6, pc}
    cadc:	4668      	mov	r0, sp
    cade:	f7f9 ff7d 	bl	69dc <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    cae2:	2800      	cmp	r0, #0
    cae4:	bf04      	itt	eq
    cae6:	b002      	addeq	sp, #8
    cae8:	bd70      	popeq	{r4, r5, r6, pc}
    caea:	2205      	movs	r2, #5
    caec:	6860      	ldr	r0, [r4, #4]
    caee:	f100 018e 	add.w	r1, r0, #142	; 0x8e
    caf2:	4668      	mov	r0, sp
    caf4:	f003 f96c 	bl	fdd0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    caf8:	2800      	cmp	r0, #0
    cafa:	6860      	ldr	r0, [r4, #4]
    cafc:	bf02      	ittt	eq
    cafe:	f880 5132 	strbeq.w	r5, [r0, #306]	; 0x132
    cb02:	b002      	addeq	sp, #8
    cb04:	bd70      	popeq	{r4, r5, r6, pc}
    cb06:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
    cb0a:	7801      	ldrb	r1, [r0, #0]
    cb0c:	b301      	cbz	r1, cb50 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5c8>
    cb0e:	1c41      	adds	r1, r0, #1
    cb10:	2205      	movs	r2, #5
    cb12:	4668      	mov	r0, sp
    cb14:	f003 f95c 	bl	fdd0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    cb18:	2800      	cmp	r0, #0
    cb1a:	bf1c      	itt	ne
    cb1c:	b002      	addne	sp, #8
    cb1e:	bd70      	popne	{r4, r5, r6, pc}
    cb20:	6860      	ldr	r0, [r4, #4]
    cb22:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
    cb26:	7800      	ldrb	r0, [r0, #0]
    cb28:	b9c8      	cbnz	r0, cb5e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5d6>
    cb2a:	e011      	b.n	cb50 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5c8>
    cb2c:	f8b2 307c 	ldrh.w	r3, [r2, #124]	; 0x7c
    cb30:	f8b2 0146 	ldrh.w	r0, [r2, #326]	; 0x146
    cb34:	f502 7294 	add.w	r2, r2, #296	; 0x128
    cb38:	f004 fcf1 	bl	1151e <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA>
    cb3c:	b120      	cbz	r0, cb48 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5c0>
    cb3e:	6861      	ldr	r1, [r4, #4]
    cb40:	2025      	movs	r0, #37	; 0x25
    cb42:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    cb46:	e79d      	b.n	ca84 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4fc>
    cb48:	2000      	movs	r0, #0
    cb4a:	f000 fb3f 	bl	d1cc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xc44>
    cb4e:	e799      	b.n	ca84 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4fc>
    cb50:	6860      	ldr	r0, [r4, #4]
    cb52:	4669      	mov	r1, sp
    cb54:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
    cb58:	1c40      	adds	r0, r0, #1
    cb5a:	f007 f9f2 	bl	13f42 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    cb5e:	6860      	ldr	r0, [r4, #4]
    cb60:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
    cb64:	7801      	ldrb	r1, [r0, #0]
    cb66:	1c49      	adds	r1, r1, #1
    cb68:	7001      	strb	r1, [r0, #0]
    cb6a:	2001      	movs	r0, #1
    cb6c:	f000 fb66 	bl	d23c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xcb4>
    cb70:	6860      	ldr	r0, [r4, #4]
    cb72:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    cb76:	b002      	add	sp, #8
    cb78:	bd70      	pop	{r4, r5, r6, pc}
    cb7a:	0000      	movs	r0, r0
    cb7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb80:	4df9      	ldr	r5, [pc, #996]	; (cf68 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x9e0>)
    cb82:	4681      	mov	r9, r0
    cb84:	460c      	mov	r4, r1
    cb86:	8868      	ldrh	r0, [r5, #2]
    cb88:	f04f 0800 	mov.w	r8, #0
    cb8c:	f410 7f80 	tst.w	r0, #256	; 0x100
    cb90:	4628      	mov	r0, r5
    cb92:	6840      	ldr	r0, [r0, #4]
    cb94:	bf18      	it	ne
    cb96:	f8a0 80ae 	strhne.w	r8, [r0, #174]	; 0xae
    cb9a:	d104      	bne.n	cba6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x61e>
    cb9c:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
    cba0:	1c49      	adds	r1, r1, #1
    cba2:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
    cba6:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    cbaa:	2701      	movs	r7, #1
    cbac:	b939      	cbnz	r1, cbbe <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x636>
    cbae:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    cbb2:	2300      	movs	r3, #0
    cbb4:	2106      	movs	r1, #6
    cbb6:	3078      	adds	r0, #120	; 0x78
    cbb8:	f004 fb75 	bl	112a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    cbbc:	b338      	cbz	r0, cc0e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x686>
    cbbe:	8868      	ldrh	r0, [r5, #2]
    cbc0:	f410 6f00 	tst.w	r0, #2048	; 0x800
    cbc4:	d007      	beq.n	cbd6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x64e>
    cbc6:	6868      	ldr	r0, [r5, #4]
    cbc8:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    cbcc:	2900      	cmp	r1, #0
    cbce:	bf18      	it	ne
    cbd0:	f8c0 80a0 	strne.w	r8, [r0, #160]	; 0xa0
    cbd4:	d11b      	bne.n	cc0e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x686>
    cbd6:	6868      	ldr	r0, [r5, #4]
    cbd8:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    cbdc:	1c49      	adds	r1, r1, #1
    cbde:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    cbe2:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    cbe6:	428a      	cmp	r2, r1
    cbe8:	bf2c      	ite	cs
    cbea:	1a51      	subcs	r1, r2, r1
    cbec:	2100      	movcc	r1, #0
    cbee:	8a82      	ldrh	r2, [r0, #20]
    cbf0:	1d52      	adds	r2, r2, #5
    cbf2:	428a      	cmp	r2, r1
    cbf4:	bf28      	it	cs
    cbf6:	f880 70ac 	strbcs.w	r7, [r0, #172]	; 0xac
    cbfa:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    cbfe:	4291      	cmp	r1, r2
    cc00:	d305      	bcc.n	cc0e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x686>
    cc02:	f8c0 80a0 	str.w	r8, [r0, #160]	; 0xa0
    cc06:	f880 7192 	strb.w	r7, [r0, #402]	; 0x192
    cc0a:	f7fa fb97 	bl	733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    cc0e:	8868      	ldrh	r0, [r5, #2]
    cc10:	f410 7f40 	tst.w	r0, #768	; 0x300
    cc14:	d008      	beq.n	cc28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a0>
    cc16:	6868      	ldr	r0, [r5, #4]
    cc18:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    cc1c:	b921      	cbnz	r1, cc28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a0>
    cc1e:	f880 7089 	strb.w	r7, [r0, #137]	; 0x89
    cc22:	2101      	movs	r1, #1
    cc24:	f7fd fe6a 	bl	a8fc <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    cc28:	ea59 0004 	orrs.w	r0, r9, r4
    cc2c:	f04f 0608 	mov.w	r6, #8
    cc30:	f040 80ef 	bne.w	ce12 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x88a>
    cc34:	8869      	ldrh	r1, [r5, #2]
    cc36:	f011 0f04 	tst.w	r1, #4
    cc3a:	d00b      	beq.n	cc54 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6cc>
    cc3c:	6868      	ldr	r0, [r5, #4]
    cc3e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    cc42:	2a03      	cmp	r2, #3
    cc44:	d029      	beq.n	cc9a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x712>
    cc46:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    cc4a:	2a07      	cmp	r2, #7
    cc4c:	bf04      	itt	eq
    cc4e:	702f      	strbeq	r7, [r5, #0]
    cc50:	f880 8088 	strbeq.w	r8, [r0, #136]	; 0x88
    cc54:	f011 0f02 	tst.w	r1, #2
    cc58:	d008      	beq.n	cc6c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6e4>
    cc5a:	68a8      	ldr	r0, [r5, #8]
    cc5c:	78c0      	ldrb	r0, [r0, #3]
    cc5e:	2819      	cmp	r0, #25
    cc60:	d220      	bcs.n	cca4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x71c>
    cc62:	49c2      	ldr	r1, [pc, #776]	; (cf6c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x9e4>)
    cc64:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    cc68:	b1e0      	cbz	r0, cca4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x71c>
    cc6a:	4780      	blx	r0
    cc6c:	78a8      	ldrb	r0, [r5, #2]
    cc6e:	f010 0f08 	tst.w	r0, #8
    cc72:	d025      	beq.n	ccc0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x738>
    cc74:	6868      	ldr	r0, [r5, #4]
    cc76:	2100      	movs	r1, #0
    cc78:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    cc7c:	f000 fb3e 	bl	d2fc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xd74>
    cc80:	6868      	ldr	r0, [r5, #4]
    cc82:	f890 10fc 	ldrb.w	r1, [r0, #252]	; 0xfc
    cc86:	29fe      	cmp	r1, #254	; 0xfe
    cc88:	d011      	beq.n	ccae <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x726>
    cc8a:	21fe      	movs	r1, #254	; 0xfe
    cc8c:	f880 10fc 	strb.w	r1, [r0, #252]	; 0xfc
    cc90:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    cc94:	2908      	cmp	r1, #8
    cc96:	d00f      	beq.n	ccb8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x730>
    cc98:	e012      	b.n	ccc0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x738>
    cc9a:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
    cc9e:	2036      	movs	r0, #54	; 0x36
    cca0:	f7f7 f94e 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cca4:	f240 61b1 	movw	r1, #1713	; 0x6b1
    cca8:	2036      	movs	r0, #54	; 0x36
    ccaa:	f7f7 f949 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ccae:	f240 61bd 	movw	r1, #1725	; 0x6bd
    ccb2:	2036      	movs	r0, #54	; 0x36
    ccb4:	f7f7 f944 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ccb8:	2102      	movs	r1, #2
    ccba:	7029      	strb	r1, [r5, #0]
    ccbc:	f880 8088 	strb.w	r8, [r0, #136]	; 0x88
    ccc0:	78a9      	ldrb	r1, [r5, #2]
    ccc2:	2000      	movs	r0, #0
    ccc4:	f011 0f01 	tst.w	r1, #1
    ccc8:	d033      	beq.n	cd32 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7aa>
    ccca:	68e8      	ldr	r0, [r5, #12]
    cccc:	2300      	movs	r3, #0
    ccce:	2105      	movs	r1, #5
    ccd0:	78c4      	ldrb	r4, [r0, #3]
    ccd2:	6868      	ldr	r0, [r5, #4]
    ccd4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ccd8:	3078      	adds	r0, #120	; 0x78
    ccda:	f004 fae4 	bl	112a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ccde:	2800      	cmp	r0, #0
    cce0:	bf18      	it	ne
    cce2:	2c06      	cmpne	r4, #6
    cce4:	d00c      	beq.n	cd00 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x778>
    cce6:	dc06      	bgt.n	ccf6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x76e>
    cce8:	2c02      	cmp	r4, #2
    ccea:	bf1c      	itt	ne
    ccec:	2c04      	cmpne	r4, #4
    ccee:	2c05      	cmpne	r4, #5
    ccf0:	d006      	beq.n	cd00 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x778>
    ccf2:	4630      	mov	r0, r6
    ccf4:	e01d      	b.n	cd32 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7aa>
    ccf6:	2c0b      	cmp	r4, #11
    ccf8:	bf1c      	itt	ne
    ccfa:	2c0d      	cmpne	r4, #13
    ccfc:	2c11      	cmpne	r4, #17
    ccfe:	d1f8      	bne.n	ccf2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x76a>
    cd00:	68e8      	ldr	r0, [r5, #12]
    cd02:	f7f9 ffe9 	bl	6cd8 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    cd06:	b148      	cbz	r0, cd1c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x794>
    cd08:	68e8      	ldr	r0, [r5, #12]
    cd0a:	78c0      	ldrb	r0, [r0, #3]
    cd0c:	2819      	cmp	r0, #25
    cd0e:	d205      	bcs.n	cd1c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x794>
    cd10:	4997      	ldr	r1, [pc, #604]	; (cf70 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x9e8>)
    cd12:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    cd16:	b108      	cbz	r0, cd1c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x794>
    cd18:	4780      	blx	r0
    cd1a:	e002      	b.n	cd22 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x79a>
    cd1c:	2000      	movs	r0, #0
    cd1e:	f000 fab1 	bl	d284 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xcfc>
    cd22:	6869      	ldr	r1, [r5, #4]
    cd24:	e9d1 3236 	ldrd	r3, r2, [r1, #216]	; 0xd8
    cd28:	1c5b      	adds	r3, r3, #1
    cd2a:	f142 0200 	adc.w	r2, r2, #0
    cd2e:	e9c1 3236 	strd	r3, r2, [r1, #216]	; 0xd8
    cd32:	4682      	mov	sl, r0
    cd34:	7868      	ldrb	r0, [r5, #1]
    cd36:	f010 0f08 	tst.w	r0, #8
    cd3a:	d011      	beq.n	cd60 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7d8>
    cd3c:	6868      	ldr	r0, [r5, #4]
    cd3e:	2300      	movs	r3, #0
    cd40:	2105      	movs	r1, #5
    cd42:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    cd46:	3078      	adds	r0, #120	; 0x78
    cd48:	f004 faad 	bl	112a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    cd4c:	b128      	cbz	r0, cd5a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7d2>
    cd4e:	6868      	ldr	r0, [r5, #4]
    cd50:	f04f 0a08 	mov.w	sl, #8
    cd54:	f880 81d6 	strb.w	r8, [r0, #470]	; 0x1d6
    cd58:	e002      	b.n	cd60 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7d8>
    cd5a:	2000      	movs	r0, #0
    cd5c:	f7f8 fab6 	bl	52cc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    cd60:	686c      	ldr	r4, [r5, #4]
    cd62:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
    cd66:	280c      	cmp	r0, #12
    cd68:	d002      	beq.n	cd70 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7e8>
    cd6a:	280d      	cmp	r0, #13
    cd6c:	d024      	beq.n	cdb8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x830>
    cd6e:	e04d      	b.n	ce0c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x884>
    cd70:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    cd74:	f8b4 1134 	ldrh.w	r1, [r4, #308]	; 0x134
    cd78:	1c40      	adds	r0, r0, #1
    cd7a:	4288      	cmp	r0, r1
    cd7c:	d146      	bne.n	ce0c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x884>
    cd7e:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    cd82:	1c41      	adds	r1, r0, #1
    cd84:	f104 008e 	add.w	r0, r4, #142	; 0x8e
    cd88:	f007 f8db 	bl	13f42 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    cd8c:	2103      	movs	r1, #3
    cd8e:	4620      	mov	r0, r4
    cd90:	f7f9 fcda 	bl	6748 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    cd94:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    cd98:	7800      	ldrb	r0, [r0, #0]
    cd9a:	b140      	cbz	r0, cdae <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x826>
    cd9c:	2101      	movs	r1, #1
    cd9e:	20fe      	movs	r0, #254	; 0xfe
    cda0:	f000 faac 	bl	d2fc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xd74>
    cda4:	f884 8085 	strb.w	r8, [r4, #133]	; 0x85
    cda8:	f884 70c8 	strb.w	r7, [r4, #200]	; 0xc8
    cdac:	e02e      	b.n	ce0c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x884>
    cdae:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    cdb2:	2036      	movs	r0, #54	; 0x36
    cdb4:	f7f7 f8c4 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cdb8:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    cdbc:	f8b4 114a 	ldrh.w	r1, [r4, #330]	; 0x14a
    cdc0:	1c40      	adds	r0, r0, #1
    cdc2:	4288      	cmp	r0, r1
    cdc4:	d122      	bne.n	ce0c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x884>
    cdc6:	8820      	ldrh	r0, [r4, #0]
    cdc8:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    cdcc:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    cdd0:	f004 fa42 	bl	11258 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    cdd4:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    cdd8:	f8b4 0158 	ldrh.w	r0, [r4, #344]	; 0x158
    cddc:	f8a4 01d2 	strh.w	r0, [r4, #466]	; 0x1d2
    cde0:	f8b4 015a 	ldrh.w	r0, [r4, #346]	; 0x15a
    cde4:	f8a4 01d4 	strh.w	r0, [r4, #468]	; 0x1d4
    cde8:	f884 81cc 	strb.w	r8, [r4, #460]	; 0x1cc
    cdec:	f884 71ca 	strb.w	r7, [r4, #458]	; 0x1ca
    cdf0:	f884 8148 	strb.w	r8, [r4, #328]	; 0x148
    cdf4:	2102      	movs	r1, #2
    cdf6:	4620      	mov	r0, r4
    cdf8:	f7f9 fca6 	bl	6748 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    cdfc:	f7fa fa9e 	bl	733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ce00:	2103      	movs	r1, #3
    ce02:	4620      	mov	r0, r4
    ce04:	f7fd fd7a 	bl	a8fc <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    ce08:	f884 8085 	strb.w	r8, [r4, #133]	; 0x85
    ce0c:	4654      	mov	r4, sl
    ce0e:	f7ff fc09 	bl	c624 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x9c>
    ce12:	6868      	ldr	r0, [r5, #4]
    ce14:	46a2      	mov	sl, r4
    ce16:	f100 0478 	add.w	r4, r0, #120	; 0x78
    ce1a:	f890 0140 	ldrb.w	r0, [r0, #320]	; 0x140
    ce1e:	f88d 0000 	strb.w	r0, [sp]
    ce22:	f89d 0000 	ldrb.w	r0, [sp]
    ce26:	b930      	cbnz	r0, ce36 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x8ae>
    ce28:	7c22      	ldrb	r2, [r4, #16]
    ce2a:	2300      	movs	r3, #0
    ce2c:	2101      	movs	r1, #1
    ce2e:	4620      	mov	r0, r4
    ce30:	f004 fa39 	bl	112a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ce34:	b110      	cbz	r0, ce3c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x8b4>
    ce36:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    ce38:	1c40      	adds	r0, r0, #1
    ce3a:	8760      	strh	r0, [r4, #58]	; 0x3a
    ce3c:	203d      	movs	r0, #61	; 0x3d
    ce3e:	f1b9 0f00 	cmp.w	r9, #0
    ce42:	d121      	bne.n	ce88 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x900>
    ce44:	7829      	ldrb	r1, [r5, #0]
    ce46:	2902      	cmp	r1, #2
    ce48:	d00d      	beq.n	ce66 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x8de>
    ce4a:	2901      	cmp	r1, #1
    ce4c:	d011      	beq.n	ce72 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x8ea>
    ce4e:	f1ba 0f00 	cmp.w	sl, #0
    ce52:	d035      	beq.n	cec0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x938>
    ce54:	f01a 0f10 	tst.w	sl, #16
    ce58:	d013      	beq.n	ce82 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x8fa>
    ce5a:	201e      	movs	r0, #30
    ce5c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    ce60:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
    ce64:	e060      	b.n	cf28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x9a0>
    ce66:	2016      	movs	r0, #22
    ce68:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    ce6c:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
    ce70:	e05a      	b.n	cf28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x9a0>
    ce72:	6868      	ldr	r0, [r5, #4]
    ce74:	f890 0130 	ldrb.w	r0, [r0, #304]	; 0x130
    ce78:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    ce7c:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
    ce80:	e052      	b.n	cf28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x9a0>
    ce82:	f01a 0f08 	tst.w	sl, #8
    ce86:	d004      	beq.n	ce92 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x90a>
    ce88:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    ce8c:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
    ce90:	e04a      	b.n	cf28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x9a0>
    ce92:	f01a 0f03 	tst.w	sl, #3
    ce96:	d005      	beq.n	cea4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x91c>
    ce98:	202a      	movs	r0, #42	; 0x2a
    ce9a:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    ce9e:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
    cea2:	e041      	b.n	cf28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x9a0>
    cea4:	f01a 0f20 	tst.w	sl, #32
    cea8:	d005      	beq.n	ceb6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x92e>
    ceaa:	2023      	movs	r0, #35	; 0x23
    ceac:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    ceb0:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
    ceb4:	e038      	b.n	cf28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x9a0>
    ceb6:	f44f 6135 	mov.w	r1, #2896	; 0xb50
    ceba:	2036      	movs	r0, #54	; 0x36
    cebc:	f7f7 f840 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cec0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    cec4:	b128      	cbz	r0, ced2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x94a>
    cec6:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
    cec8:	1c41      	adds	r1, r0, #1
    ceca:	87a1      	strh	r1, [r4, #60]	; 0x3c
    cecc:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
    cece:	4288      	cmp	r0, r1
    ced0:	d219      	bcs.n	cf06 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x97e>
    ced2:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
    ced6:	b138      	cbz	r0, cee8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x960>
    ced8:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    cedc:	1c41      	adds	r1, r0, #1
    cede:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
    cee2:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
    cee4:	4288      	cmp	r0, r1
    cee6:	d20e      	bcs.n	cf06 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x97e>
    cee8:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
    ceea:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    ceec:	4281      	cmp	r1, r0
    ceee:	d307      	bcc.n	cf00 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x978>
    cef0:	686a      	ldr	r2, [r5, #4]
    cef2:	f892 2140 	ldrb.w	r2, [r2, #320]	; 0x140
    cef6:	f88d 2000 	strb.w	r2, [sp]
    cefa:	f89d 2000 	ldrb.w	r2, [sp]
    cefe:	b912      	cbnz	r2, cf06 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x97e>
    cf00:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    cf02:	4291      	cmp	r1, r2
    cf04:	d305      	bcc.n	cf12 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x98a>
    cf06:	2022      	movs	r0, #34	; 0x22
    cf08:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    cf0c:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
    cf10:	e00a      	b.n	cf28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x9a0>
    cf12:	7c61      	ldrb	r1, [r4, #17]
    cf14:	b1f9      	cbz	r1, cf56 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x9ce>
    cf16:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
    cf18:	4281      	cmp	r1, r0
    cf1a:	bf28      	it	cs
    cf1c:	f884 6025 	strbcs.w	r6, [r4, #37]	; 0x25
    cf20:	d302      	bcc.n	cf28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x9a0>
    cf22:	bf00      	nop
    cf24:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
    cf28:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    cf2c:	f88d 0000 	strb.w	r0, [sp]
    cf30:	f89d 0000 	ldrb.w	r0, [sp]
    cf34:	b330      	cbz	r0, cf84 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x9fc>
    cf36:	f884 800d 	strb.w	r8, [r4, #13]
    cf3a:	f884 800e 	strb.w	r8, [r4, #14]
    cf3e:	f884 8011 	strb.w	r8, [r4, #17]
    cf42:	2102      	movs	r1, #2
    cf44:	6868      	ldr	r0, [r5, #4]
    cf46:	f7fd fcd9 	bl	a8fc <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    cf4a:	6868      	ldr	r0, [r5, #4]
    cf4c:	f890 10fc 	ldrb.w	r1, [r0, #252]	; 0xfc
    cf50:	2901      	cmp	r1, #1
    cf52:	d00f      	beq.n	cf74 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x9ec>
    cf54:	e013      	b.n	cf7e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x9f6>
    cf56:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
    cf58:	2806      	cmp	r0, #6
    cf5a:	bf24      	itt	cs
    cf5c:	203e      	movcs	r0, #62	; 0x3e
    cf5e:	f884 0025 	strbcs.w	r0, [r4, #37]	; 0x25
    cf62:	d3e1      	bcc.n	cf28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x9a0>
    cf64:	e7de      	b.n	cf24 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x99c>
    cf66:	0000      	.short	0x0000
    cf68:	20000194 	.word	0x20000194
    cf6c:	20000208 	.word	0x20000208
    cf70:	200001a4 	.word	0x200001a4
    cf74:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
    cf78:	7801      	ldrb	r1, [r0, #0]
    cf7a:	1e49      	subs	r1, r1, #1
    cf7c:	7001      	strb	r1, [r0, #0]
    cf7e:	f7fa f9dd 	bl	733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    cf82:	e003      	b.n	cf8c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xa04>
    cf84:	2100      	movs	r1, #0
    cf86:	6868      	ldr	r0, [r5, #4]
    cf88:	f7fd fcb8 	bl	a8fc <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    cf8c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf90:	f7f7 bf00 	b.w	4d94 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    cf94:	b510      	push	{r4, lr}
    cf96:	4c1f      	ldr	r4, [pc, #124]	; (d014 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xa8c>)
    cf98:	6862      	ldr	r2, [r4, #4]
    cf9a:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    cf9e:	2808      	cmp	r0, #8
    cfa0:	d20d      	bcs.n	cfbe <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xa36>
    cfa2:	f1c0 0108 	rsb	r1, r0, #8
    cfa6:	4410      	add	r0, r2
    cfa8:	b2c9      	uxtb	r1, r1
    cfaa:	f200 1079 	addw	r0, r0, #377	; 0x179
    cfae:	f7f7 f835 	bl	401c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    cfb2:	6861      	ldr	r1, [r4, #4]
    cfb4:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    cfb8:	4410      	add	r0, r2
    cfba:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    cfbe:	6862      	ldr	r2, [r4, #4]
    cfc0:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    cfc4:	f1a0 0108 	sub.w	r1, r0, #8
    cfc8:	2904      	cmp	r1, #4
    cfca:	d20d      	bcs.n	cfe8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xa60>
    cfcc:	3808      	subs	r0, #8
    cfce:	f1c0 0104 	rsb	r1, r0, #4
    cfd2:	4410      	add	r0, r2
    cfd4:	b2c9      	uxtb	r1, r1
    cfd6:	30f0      	adds	r0, #240	; 0xf0
    cfd8:	f7f7 f820 	bl	401c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    cfdc:	6861      	ldr	r1, [r4, #4]
    cfde:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    cfe2:	4410      	add	r0, r2
    cfe4:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    cfe8:	6860      	ldr	r0, [r4, #4]
    cfea:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
    cfee:	290c      	cmp	r1, #12
    cff0:	bf38      	it	cc
    cff2:	bd10      	popcc	{r4, pc}
    cff4:	d005      	beq.n	d002 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xa7a>
    cff6:	f640 1131 	movw	r1, #2353	; 0x931
    cffa:	f04f 0036 	mov.w	r0, #54	; 0x36
    cffe:	f7f6 ff9f 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d002:	2100      	movs	r1, #0
    d004:	f880 1102 	strb.w	r1, [r0, #258]	; 0x102
    d008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d00c:	2003      	movs	r0, #3
    d00e:	f000 b915 	b.w	d23c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xcb4>
    d012:	0000      	.short	0x0000
    d014:	20000194 	.word	0x20000194
    d018:	b570      	push	{r4, r5, r6, lr}
    d01a:	4b47      	ldr	r3, [pc, #284]	; (d138 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xbb0>)
    d01c:	f04f 0400 	mov.w	r4, #0
    d020:	f04f 0c01 	mov.w	ip, #1
    d024:	885a      	ldrh	r2, [r3, #2]
    d026:	f000 0501 	and.w	r5, r0, #1
    d02a:	4302      	orrs	r2, r0
    d02c:	805a      	strh	r2, [r3, #2]
    d02e:	461a      	mov	r2, r3
    d030:	f010 0f02 	tst.w	r0, #2
    d034:	6852      	ldr	r2, [r2, #4]
    d036:	d008      	beq.n	d04a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xac2>
    d038:	2d00      	cmp	r5, #0
    d03a:	bf08      	it	eq
    d03c:	6099      	streq	r1, [r3, #8]
    d03e:	d00a      	beq.n	d056 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xace>
    d040:	f640 21c5 	movw	r1, #2757	; 0xac5
    d044:	2036      	movs	r0, #54	; 0x36
    d046:	f7f6 ff7b 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d04a:	2d00      	cmp	r5, #0
    d04c:	bf18      	it	ne
    d04e:	60d9      	strne	r1, [r3, #12]
    d050:	f010 0f02 	tst.w	r0, #2
    d054:	d014      	beq.n	d080 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xaf8>
    d056:	78cd      	ldrb	r5, [r1, #3]
    d058:	2d06      	cmp	r5, #6
    d05a:	d008      	beq.n	d06e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xae6>
    d05c:	2d0b      	cmp	r5, #11
    d05e:	bf02      	ittt	eq
    d060:	f892 c085 	ldrbeq.w	ip, [r2, #133]	; 0x85
    d064:	f1bc 0f12 	cmpeq.w	ip, #18
    d068:	f882 408b 	strbeq.w	r4, [r2, #139]	; 0x8b
    d06c:	e008      	b.n	d080 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xaf8>
    d06e:	f892 4085 	ldrb.w	r4, [r2, #133]	; 0x85
    d072:	2c18      	cmp	r4, #24
    d074:	d104      	bne.n	d080 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xaf8>
    d076:	2400      	movs	r4, #0
    d078:	e9c2 4436 	strd	r4, r4, [r2, #216]	; 0xd8
    d07c:	f882 c08b 	strb.w	ip, [r2, #139]	; 0x8b
    d080:	f010 0f20 	tst.w	r0, #32
    d084:	bf1c      	itt	ne
    d086:	f04f 0c08 	movne.w	ip, #8
    d08a:	f883 c001 	strbne.w	ip, [r3, #1]
    d08e:	f010 0f80 	tst.w	r0, #128	; 0x80
    d092:	bf08      	it	eq
    d094:	bd70      	popeq	{r4, r5, r6, pc}
    d096:	f8b2 407c 	ldrh.w	r4, [r2, #124]	; 0x7c
    d09a:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    d09e:	8a93      	ldrh	r3, [r2, #20]
    d0a0:	2006      	movs	r0, #6
    d0a2:	f641 554c 	movw	r5, #7500	; 0x1d4c
    d0a6:	4565      	cmp	r5, ip
    d0a8:	bf84      	itt	hi
    d0aa:	f64a 70c8 	movwhi	r0, #45000	; 0xafc8
    d0ae:	fbb0 f0fc 	udivhi	r0, r0, ip
    d0b2:	4420      	add	r0, r4
    d0b4:	4418      	add	r0, r3
    d0b6:	78cb      	ldrb	r3, [r1, #3]
    d0b8:	b280      	uxth	r0, r0
    d0ba:	2b01      	cmp	r3, #1
    d0bc:	bf08      	it	eq
    d0be:	f8a2 0134 	strheq.w	r0, [r2, #308]	; 0x134
    d0c2:	d01f      	beq.n	d104 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xb7c>
    d0c4:	2b00      	cmp	r3, #0
    d0c6:	bf08      	it	eq
    d0c8:	f8a2 014a 	strheq.w	r0, [r2, #330]	; 0x14a
    d0cc:	d01a      	beq.n	d104 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xb7c>
    d0ce:	2b18      	cmp	r3, #24
    d0d0:	d118      	bne.n	d104 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xb7c>
    d0d2:	f892 312a 	ldrb.w	r3, [r2, #298]	; 0x12a
    d0d6:	2b00      	cmp	r3, #0
    d0d8:	bf04      	itt	eq
    d0da:	f892 c12b 	ldrbeq.w	ip, [r2, #299]	; 0x12b
    d0de:	f1bc 0f00 	cmpeq.w	ip, #0
    d0e2:	d00b      	beq.n	d0fc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xb74>
    d0e4:	f013 0f0c 	tst.w	r3, #12
    d0e8:	bf1e      	ittt	ne
    d0ea:	f892 c06a 	ldrbne.w	ip, [r2, #106]	; 0x6a
    d0ee:	f01c 0f0c 	tstne.w	ip, #12
    d0f2:	4563      	cmpne	r3, ip
    d0f4:	d004      	beq.n	d100 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xb78>
    d0f6:	f892 312b 	ldrb.w	r3, [r2, #299]	; 0x12b
    d0fa:	b90b      	cbnz	r3, d100 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xb78>
    d0fc:	f04f 0000 	mov.w	r0, #0
    d100:	f8a2 0128 	strh.w	r0, [r2, #296]	; 0x128
    d104:	4608      	mov	r0, r1
    d106:	78c9      	ldrb	r1, [r1, #3]
    d108:	2901      	cmp	r1, #1
    d10a:	d009      	beq.n	d120 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xb98>
    d10c:	b171      	cbz	r1, d12c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xba4>
    d10e:	2918      	cmp	r1, #24
    d110:	bf18      	it	ne
    d112:	bd70      	popne	{r4, r5, r6, pc}
    d114:	f8b2 1128 	ldrh.w	r1, [r2, #296]	; 0x128
    d118:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d11c:	f004 bad3 	b.w	116c6 <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>
    d120:	f8b2 1134 	ldrh.w	r1, [r2, #308]	; 0x134
    d124:	7241      	strb	r1, [r0, #9]
    d126:	0a09      	lsrs	r1, r1, #8
    d128:	7281      	strb	r1, [r0, #10]
    d12a:	bd70      	pop	{r4, r5, r6, pc}
    d12c:	f8b2 114a 	ldrh.w	r1, [r2, #330]	; 0x14a
    d130:	7341      	strb	r1, [r0, #13]
    d132:	0a09      	lsrs	r1, r1, #8
    d134:	7381      	strb	r1, [r0, #14]
    d136:	bd70      	pop	{r4, r5, r6, pc}
    d138:	20000194 	.word	0x20000194
    d13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d140:	4c21      	ldr	r4, [pc, #132]	; (d1c8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xc40>)
    d142:	2501      	movs	r5, #1
    d144:	6862      	ldr	r2, [r4, #4]
    d146:	f892 012a 	ldrb.w	r0, [r2, #298]	; 0x12a
    d14a:	2800      	cmp	r0, #0
    d14c:	bf08      	it	eq
    d14e:	f892 006a 	ldrbeq.w	r0, [r2, #106]	; 0x6a
    d152:	f892 112b 	ldrb.w	r1, [r2, #299]	; 0x12b
    d156:	2900      	cmp	r1, #0
    d158:	bf08      	it	eq
    d15a:	f892 106b 	ldrbeq.w	r1, [r2, #107]	; 0x6b
    d15e:	f882 006a 	strb.w	r0, [r2, #106]	; 0x6a
    d162:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
    d166:	3262      	adds	r2, #98	; 0x62
    d168:	2001      	movs	r0, #1
    d16a:	7290      	strb	r0, [r2, #10]
    d16c:	2000      	movs	r0, #0
    d16e:	f000 f82d 	bl	d1cc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xc44>
    d172:	6860      	ldr	r0, [r4, #4]
    d174:	302c      	adds	r0, #44	; 0x2c
    d176:	f004 fd3b 	bl	11bf0 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    d17a:	4607      	mov	r7, r0
    d17c:	6860      	ldr	r0, [r4, #4]
    d17e:	f004 fcdb 	bl	11b38 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    d182:	b1c8      	cbz	r0, d1b8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xc30>
    d184:	6860      	ldr	r0, [r4, #4]
    d186:	302c      	adds	r0, #44	; 0x2c
    d188:	f004 fd32 	bl	11bf0 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    d18c:	6861      	ldr	r1, [r4, #4]
    d18e:	4606      	mov	r6, r0
    d190:	f501 72ca 	add.w	r2, r1, #404	; 0x194
    d194:	8808      	ldrh	r0, [r1, #0]
    d196:	312c      	adds	r1, #44	; 0x2c
    d198:	f004 fc8d 	bl	11ab6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    d19c:	42b7      	cmp	r7, r6
    d19e:	d20b      	bcs.n	d1b8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xc30>
    d1a0:	f7f4 f9d6 	bl	1550 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    d1a4:	4601      	mov	r1, r0
    d1a6:	1bf0      	subs	r0, r6, r7
    d1a8:	2865      	cmp	r0, #101	; 0x65
    d1aa:	bf38      	it	cc
    d1ac:	2065      	movcc	r0, #101	; 0x65
    d1ae:	f7f4 f8c3 	bl	1338 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d1b2:	2800      	cmp	r0, #0
    d1b4:	bf18      	it	ne
    d1b6:	2500      	movne	r5, #0
    d1b8:	2104      	movs	r1, #4
    d1ba:	6860      	ldr	r0, [r4, #4]
    d1bc:	f7fd fb9e 	bl	a8fc <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    d1c0:	4628      	mov	r0, r5
    d1c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d1c6:	0000      	.short	0x0000
    d1c8:	20000194 	.word	0x20000194
    d1cc:	491a      	ldr	r1, [pc, #104]	; (d238 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xcb0>)
    d1ce:	b510      	push	{r4, lr}
    d1d0:	6849      	ldr	r1, [r1, #4]
    d1d2:	880a      	ldrh	r2, [r1, #0]
    d1d4:	f8a1 21b8 	strh.w	r2, [r1, #440]	; 0x1b8
    d1d8:	f881 01b6 	strb.w	r0, [r1, #438]	; 0x1b6
    d1dc:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    d1e0:	2801      	cmp	r0, #1
    d1e2:	bf18      	it	ne
    d1e4:	2802      	cmpne	r0, #2
    d1e6:	d00b      	beq.n	d200 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xc78>
    d1e8:	2804      	cmp	r0, #4
    d1ea:	bf14      	ite	ne
    d1ec:	2808      	cmpne	r0, #8
    d1ee:	2003      	moveq	r0, #3
    d1f0:	d006      	beq.n	d200 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xc78>
    d1f2:	bf00      	nop
    d1f4:	f240 2163 	movw	r1, #611	; 0x263
    d1f8:	f04f 0006 	mov.w	r0, #6
    d1fc:	f7f6 fea0 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d200:	f881 01ba 	strb.w	r0, [r1, #442]	; 0x1ba
    d204:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    d208:	2801      	cmp	r0, #1
    d20a:	bf18      	it	ne
    d20c:	2802      	cmpne	r0, #2
    d20e:	d004      	beq.n	d21a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xc92>
    d210:	2804      	cmp	r0, #4
    d212:	bf14      	ite	ne
    d214:	2808      	cmpne	r0, #8
    d216:	2003      	moveq	r0, #3
    d218:	d1ec      	bne.n	d1f4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xc6c>
    d21a:	f881 01bb 	strb.w	r0, [r1, #443]	; 0x1bb
    d21e:	f501 70da 	add.w	r0, r1, #436	; 0x1b4
    d222:	f04f 0201 	mov.w	r2, #1
    d226:	7002      	strb	r2, [r0, #0]
    d228:	f04f 0000 	mov.w	r0, #0
    d22c:	f881 0142 	strb.w	r0, [r1, #322]	; 0x142
    d230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d234:	f7fa b882 	b.w	733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    d238:	20000194 	.word	0x20000194
    d23c:	4910      	ldr	r1, [pc, #64]	; (d280 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xcf8>)
    d23e:	280c      	cmp	r0, #12
    d240:	6849      	ldr	r1, [r1, #4]
    d242:	f881 00fc 	strb.w	r0, [r1, #252]	; 0xfc
    d246:	bf1a      	itte	ne
    d248:	2813      	cmpne	r0, #19
    d24a:	2818      	cmpne	r0, #24
    d24c:	4770      	bxeq	lr
    d24e:	f04f 0200 	mov.w	r2, #0
    d252:	2811      	cmp	r0, #17
    d254:	d010      	beq.n	d278 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xcf0>
    d256:	2807      	cmp	r0, #7
    d258:	bf08      	it	eq
    d25a:	4770      	bxeq	lr
    d25c:	2815      	cmp	r0, #21
    d25e:	d00b      	beq.n	d278 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xcf0>
    d260:	2801      	cmp	r0, #1
    d262:	bf1a      	itte	ne
    d264:	2800      	cmpne	r0, #0
    d266:	2802      	cmpne	r0, #2
    d268:	4770      	bxeq	lr
    d26a:	f8a1 20b4 	strh.w	r2, [r1, #180]	; 0xb4
    d26e:	f04f 0001 	mov.w	r0, #1
    d272:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    d276:	4770      	bx	lr
    d278:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    d27c:	4770      	bx	lr
    d27e:	0000      	.short	0x0000
    d280:	20000194 	.word	0x20000194
    d284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d288:	4c1b      	ldr	r4, [pc, #108]	; (d2f8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xd70>)
    d28a:	2600      	movs	r6, #0
    d28c:	2703      	movs	r7, #3
    d28e:	f8d4 c004 	ldr.w	ip, [r4, #4]
    d292:	2501      	movs	r5, #1
    d294:	b1a0      	cbz	r0, d2c0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xd38>
    d296:	68e0      	ldr	r0, [r4, #12]
    d298:	78c0      	ldrb	r0, [r0, #3]
    d29a:	f88c 00fa 	strb.w	r0, [ip, #250]	; 0xfa
    d29e:	fa05 f000 	lsl.w	r0, r5, r0
    d2a2:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    d2a6:	d006      	beq.n	d2b6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xd2e>
    d2a8:	f88c 7085 	strb.w	r7, [ip, #133]	; 0x85
    d2ac:	f8ac 60b4 	strh.w	r6, [ip, #180]	; 0xb4
    d2b0:	f88c 50b8 	strb.w	r5, [ip, #184]	; 0xb8
    d2b4:	e01c      	b.n	d2f0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xd68>
    d2b6:	f240 5143 	movw	r1, #1347	; 0x543
    d2ba:	2036      	movs	r0, #54	; 0x36
    d2bc:	f7f6 fe40 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d2c0:	2300      	movs	r3, #0
    d2c2:	f89c 2086 	ldrb.w	r2, [ip, #134]	; 0x86
    d2c6:	4619      	mov	r1, r3
    d2c8:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    d2cc:	f003 ffeb 	bl	112a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d2d0:	2800      	cmp	r0, #0
    d2d2:	bf04      	itt	eq
    d2d4:	2001      	moveq	r0, #1
    d2d6:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    d2da:	68e0      	ldr	r0, [r4, #12]
    d2dc:	78c1      	ldrb	r1, [r0, #3]
    d2de:	6860      	ldr	r0, [r4, #4]
    d2e0:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
    d2e4:	f880 7086 	strb.w	r7, [r0, #134]	; 0x86
    d2e8:	f8a0 60ba 	strh.w	r6, [r0, #186]	; 0xba
    d2ec:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    d2f0:	2000      	movs	r0, #0
    d2f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d2f6:	0000      	.short	0x0000
    d2f8:	20000194 	.word	0x20000194
    d2fc:	4a1a      	ldr	r2, [pc, #104]	; (d368 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xde0>)
    d2fe:	2901      	cmp	r1, #1
    d300:	6852      	ldr	r2, [r2, #4]
    d302:	d011      	beq.n	d328 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xda0>
    d304:	2100      	movs	r1, #0
    d306:	b1d8      	cbz	r0, d340 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xdb8>
    d308:	2801      	cmp	r0, #1
    d30a:	d024      	beq.n	d356 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xdce>
    d30c:	2803      	cmp	r0, #3
    d30e:	bf18      	it	ne
    d310:	4770      	bxne	lr
    d312:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    d316:	2813      	cmp	r0, #19
    d318:	bf14      	ite	ne
    d31a:	2816      	cmpne	r0, #22
    d31c:	4770      	bxeq	lr
    d31e:	2818      	cmp	r0, #24
    d320:	bf18      	it	ne
    d322:	f882 115e 	strbne.w	r1, [r2, #350]	; 0x15e
    d326:	4770      	bx	lr
    d328:	f892 00fc 	ldrb.w	r0, [r2, #252]	; 0xfc
    d32c:	2801      	cmp	r0, #1
    d32e:	bf08      	it	eq
    d330:	4770      	bxeq	lr
    d332:	bf00      	nop
    d334:	f8d2 012c 	ldr.w	r0, [r2, #300]	; 0x12c
    d338:	7801      	ldrb	r1, [r0, #0]
    d33a:	1e49      	subs	r1, r1, #1
    d33c:	7001      	strb	r1, [r0, #0]
    d33e:	4770      	bx	lr
    d340:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    d344:	f8b2 314a 	ldrh.w	r3, [r2, #330]	; 0x14a
    d348:	1ac0      	subs	r0, r0, r3
    d34a:	b200      	sxth	r0, r0
    d34c:	2800      	cmp	r0, #0
    d34e:	bfa8      	it	ge
    d350:	f882 1148 	strbge.w	r1, [r2, #328]	; 0x148
    d354:	4770      	bx	lr
    d356:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    d35a:	f8b2 1134 	ldrh.w	r1, [r2, #308]	; 0x134
    d35e:	1a40      	subs	r0, r0, r1
    d360:	b200      	sxth	r0, r0
    d362:	2800      	cmp	r0, #0
    d364:	dae6      	bge.n	d334 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xdac>
    d366:	4770      	bx	lr
    d368:	20000194 	.word	0x20000194

0000d36c <sym_IGTA6PI7IWAT3FITPB7BP2SXQCVYUZIL6KUR4HQ>:
    d36c:	4801      	ldr	r0, [pc, #4]	; (d374 <sym_IGTA6PI7IWAT3FITPB7BP2SXQCVYUZIL6KUR4HQ+0x8>)
    d36e:	7900      	ldrb	r0, [r0, #4]
    d370:	4770      	bx	lr
    d372:	0000      	.short	0x0000
    d374:	2000026c 	.word	0x2000026c

0000d378 <sym_ZSU6ACTG4NRZY5LMD7252VV77IROBPEMBXGUMQY>:
    d378:	4901      	ldr	r1, [pc, #4]	; (d380 <sym_ZSU6ACTG4NRZY5LMD7252VV77IROBPEMBXGUMQY+0x8>)
    d37a:	2001      	movs	r0, #1
    d37c:	7108      	strb	r0, [r1, #4]
    d37e:	4770      	bx	lr
    d380:	2000026c 	.word	0x2000026c

0000d384 <sym_FZ7B5CMVMTO6N57ATGF22R7LY5CJDD6SN6DKTMI>:
    d384:	4901      	ldr	r1, [pc, #4]	; (d38c <sym_FZ7B5CMVMTO6N57ATGF22R7LY5CJDD6SN6DKTMI+0x8>)
    d386:	2000      	movs	r0, #0
    d388:	7108      	strb	r0, [r1, #4]
    d38a:	4770      	bx	lr
    d38c:	2000026c 	.word	0x2000026c

0000d390 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    d390:	b510      	push	{r4, lr}
    d392:	6941      	ldr	r1, [r0, #20]
    d394:	b119      	cbz	r1, d39e <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    d396:	6842      	ldr	r2, [r0, #4]
    d398:	684b      	ldr	r3, [r1, #4]
    d39a:	429a      	cmp	r2, r3
    d39c:	d203      	bcs.n	d3a6 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    d39e:	21c1      	movs	r1, #193	; 0xc1
    d3a0:	2037      	movs	r0, #55	; 0x37
    d3a2:	f7f6 fdcd 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d3a6:	6902      	ldr	r2, [r0, #16]
    d3a8:	610a      	str	r2, [r1, #16]
    d3aa:	68c3      	ldr	r3, [r0, #12]
    d3ac:	60cb      	str	r3, [r1, #12]
    d3ae:	2a00      	cmp	r2, #0
    d3b0:	bf12      	itee	ne
    d3b2:	60d1      	strne	r1, [r2, #12]
    d3b4:	4a07      	ldreq	r2, [pc, #28]	; (d3d4 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x44>)
    d3b6:	6011      	streq	r1, [r2, #0]
    d3b8:	68ca      	ldr	r2, [r1, #12]
    d3ba:	2a00      	cmp	r2, #0
    d3bc:	bf08      	it	eq
    d3be:	2000      	moveq	r0, #0
    d3c0:	d005      	beq.n	d3ce <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3e>
    d3c2:	6111      	str	r1, [r2, #16]
    d3c4:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
    d3c8:	4410      	add	r0, r2
    d3ca:	684a      	ldr	r2, [r1, #4]
    d3cc:	1a80      	subs	r0, r0, r2
    d3ce:	6088      	str	r0, [r1, #8]
    d3d0:	bd10      	pop	{r4, pc}
    d3d2:	0000      	.short	0x0000
    d3d4:	2000026c 	.word	0x2000026c

0000d3d8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    d3d8:	b510      	push	{r4, lr}
    d3da:	2300      	movs	r3, #0
    d3dc:	6101      	str	r1, [r0, #16]
    d3de:	b1c1      	cbz	r1, d412 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    d3e0:	68ca      	ldr	r2, [r1, #12]
    d3e2:	60c8      	str	r0, [r1, #12]
    d3e4:	60c2      	str	r2, [r0, #12]
    d3e6:	2a00      	cmp	r2, #0
    d3e8:	bf18      	it	ne
    d3ea:	6110      	strne	r0, [r2, #16]
    d3ec:	6901      	ldr	r1, [r0, #16]
    d3ee:	6083      	str	r3, [r0, #8]
    d3f0:	2900      	cmp	r1, #0
    d3f2:	bf08      	it	eq
    d3f4:	bd10      	popeq	{r4, pc}
    d3f6:	688a      	ldr	r2, [r1, #8]
    d3f8:	b17a      	cbz	r2, d41a <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x42>
    d3fa:	f8d0 c004 	ldr.w	ip, [r0, #4]
    d3fe:	4562      	cmp	r2, ip
    d400:	bf24      	itt	cs
    d402:	eba2 020c 	subcs.w	r2, r2, ip
    d406:	6082      	strcs	r2, [r0, #8]
    d408:	d207      	bcs.n	d41a <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x42>
    d40a:	212a      	movs	r1, #42	; 0x2a
    d40c:	2037      	movs	r0, #55	; 0x37
    d40e:	f7f6 fd97 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d412:	4903      	ldr	r1, [pc, #12]	; (d420 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x48>)
    d414:	60c3      	str	r3, [r0, #12]
    d416:	6008      	str	r0, [r1, #0]
    d418:	e7e8      	b.n	d3ec <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x14>
    d41a:	608b      	str	r3, [r1, #8]
    d41c:	bd10      	pop	{r4, pc}
    d41e:	0000      	.short	0x0000
    d420:	2000026c 	.word	0x2000026c

0000d424 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    d424:	6901      	ldr	r1, [r0, #16]
    d426:	b149      	cbz	r1, d43c <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    d428:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    d42c:	441a      	add	r2, r3
    d42e:	688b      	ldr	r3, [r1, #8]
    d430:	441a      	add	r2, r3
    d432:	608a      	str	r2, [r1, #8]
    d434:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    d438:	60d1      	str	r1, [r2, #12]
    d43a:	e002      	b.n	d442 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    d43c:	4a06      	ldr	r2, [pc, #24]	; (d458 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    d43e:	68c1      	ldr	r1, [r0, #12]
    d440:	6011      	str	r1, [r2, #0]
    d442:	68c1      	ldr	r1, [r0, #12]
    d444:	6900      	ldr	r0, [r0, #16]
    d446:	2900      	cmp	r1, #0
    d448:	bf1c      	itt	ne
    d44a:	6108      	strne	r0, [r1, #16]
    d44c:	4770      	bxne	lr
    d44e:	2800      	cmp	r0, #0
    d450:	bf1c      	itt	ne
    d452:	2100      	movne	r1, #0
    d454:	6081      	strne	r1, [r0, #8]
    d456:	4770      	bx	lr
    d458:	2000026c 	.word	0x2000026c

0000d45c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    d45c:	490b      	ldr	r1, [pc, #44]	; (d48c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    d45e:	4684      	mov	ip, r0
    d460:	2000      	movs	r0, #0
    d462:	6809      	ldr	r1, [r1, #0]
    d464:	4602      	mov	r2, r0
    d466:	1e43      	subs	r3, r0, #1
    d468:	b169      	cbz	r1, d486 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2a>
    d46a:	688a      	ldr	r2, [r1, #8]
    d46c:	4562      	cmp	r2, ip
    d46e:	bf28      	it	cs
    d470:	4293      	cmpcs	r3, r2
    d472:	bf84      	itt	hi
    d474:	4613      	movhi	r3, r2
    d476:	4608      	movhi	r0, r1
    d478:	460a      	mov	r2, r1
    d47a:	68c9      	ldr	r1, [r1, #12]
    d47c:	2900      	cmp	r1, #0
    d47e:	d1f4      	bne.n	d46a <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0xe>
    d480:	2800      	cmp	r0, #0
    d482:	bf18      	it	ne
    d484:	4770      	bxne	lr
    d486:	4610      	mov	r0, r2
    d488:	4770      	bx	lr
    d48a:	0000      	.short	0x0000
    d48c:	2000026c 	.word	0x2000026c

0000d490 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
    d490:	4801      	ldr	r0, [pc, #4]	; (d498 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
    d492:	6800      	ldr	r0, [r0, #0]
    d494:	4770      	bx	lr
    d496:	0000      	.short	0x0000
    d498:	2000026c 	.word	0x2000026c

0000d49c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    d49c:	4805      	ldr	r0, [pc, #20]	; (d4b4 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x18>)
    d49e:	6801      	ldr	r1, [r0, #0]
    d4a0:	2000      	movs	r0, #0
    d4a2:	2900      	cmp	r1, #0
    d4a4:	bf08      	it	eq
    d4a6:	4770      	bxeq	lr
    d4a8:	4608      	mov	r0, r1
    d4aa:	68c9      	ldr	r1, [r1, #12]
    d4ac:	2900      	cmp	r1, #0
    d4ae:	d1fb      	bne.n	d4a8 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    d4b0:	4770      	bx	lr
    d4b2:	0000      	.short	0x0000
    d4b4:	2000026c 	.word	0x2000026c

0000d4b8 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    d4b8:	4802      	ldr	r0, [pc, #8]	; (d4c4 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0xc>)
    d4ba:	2100      	movs	r1, #0
    d4bc:	6001      	str	r1, [r0, #0]
    d4be:	6041      	str	r1, [r0, #4]
    d4c0:	4770      	bx	lr
    d4c2:	0000      	.short	0x0000
    d4c4:	2000026c 	.word	0x2000026c

0000d4c8 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    d4c8:	4904      	ldr	r1, [pc, #16]	; (d4dc <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x14>)
    d4ca:	2000      	movs	r0, #0
    d4cc:	680a      	ldr	r2, [r1, #0]
    d4ce:	2a00      	cmp	r2, #0
    d4d0:	bf12      	itee	ne
    d4d2:	200c      	movne	r0, #12
    d4d4:	2200      	moveq	r2, #0
    d4d6:	604a      	streq	r2, [r1, #4]
    d4d8:	4770      	bx	lr
    d4da:	0000      	.short	0x0000
    d4dc:	2000026c 	.word	0x2000026c

0000d4e0 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    d4e0:	4903      	ldr	r1, [pc, #12]	; (d4f0 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    d4e2:	884a      	ldrh	r2, [r1, #2]
    d4e4:	8002      	strh	r2, [r0, #0]
    d4e6:	7809      	ldrb	r1, [r1, #0]
    d4e8:	7081      	strb	r1, [r0, #2]
    d4ea:	2000      	movs	r0, #0
    d4ec:	4770      	bx	lr
    d4ee:	0000      	.short	0x0000
    d4f0:	20000ed0 	.word	0x20000ed0

0000d4f4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    d4f4:	7801      	ldrb	r1, [r0, #0]
    d4f6:	b171      	cbz	r1, d516 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    d4f8:	7841      	ldrb	r1, [r0, #1]
    d4fa:	b161      	cbz	r1, d516 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    d4fc:	8841      	ldrh	r1, [r0, #2]
    d4fe:	291b      	cmp	r1, #27
    d500:	d309      	bcc.n	d516 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    d502:	8881      	ldrh	r1, [r0, #4]
    d504:	291b      	cmp	r1, #27
    d506:	d306      	bcc.n	d516 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    d508:	4904      	ldr	r1, [pc, #16]	; (d51c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    d50a:	6802      	ldr	r2, [r0, #0]
    d50c:	600a      	str	r2, [r1, #0]
    d50e:	8880      	ldrh	r0, [r0, #4]
    d510:	8088      	strh	r0, [r1, #4]
    d512:	2000      	movs	r0, #0
    d514:	4770      	bx	lr
    d516:	2012      	movs	r0, #18
    d518:	4770      	bx	lr
    d51a:	0000      	.short	0x0000
    d51c:	20000ed0 	.word	0x20000ed0

0000d520 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    d520:	6800      	ldr	r0, [r0, #0]
    d522:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    d526:	d303      	bcc.n	d530 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x10>
    d528:	4902      	ldr	r1, [pc, #8]	; (d534 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x14>)
    d52a:	6088      	str	r0, [r1, #8]
    d52c:	2000      	movs	r0, #0
    d52e:	4770      	bx	lr
    d530:	2012      	movs	r0, #18
    d532:	4770      	bx	lr
    d534:	20000ed0 	.word	0x20000ed0

0000d538 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>:
    d538:	b510      	push	{r4, lr}
    d53a:	4604      	mov	r4, r0
    d53c:	7800      	ldrb	r0, [r0, #0]
    d53e:	07c0      	lsls	r0, r0, #31
    d540:	d007      	beq.n	d552 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x1a>
    d542:	f006 fc27 	bl	13d94 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    d546:	b910      	cbnz	r0, d54e <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x16>
    d548:	f006 fc1a 	bl	13d80 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    d54c:	b108      	cbz	r0, d552 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x1a>
    d54e:	200c      	movs	r0, #12
    d550:	bd10      	pop	{r4, pc}
    d552:	7820      	ldrb	r0, [r4, #0]
    d554:	4902      	ldr	r1, [pc, #8]	; (d560 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x28>)
    d556:	f000 0001 	and.w	r0, r0, #1
    d55a:	7208      	strb	r0, [r1, #8]
    d55c:	2000      	movs	r0, #0
    d55e:	bd10      	pop	{r4, pc}
    d560:	200010ce 	.word	0x200010ce

0000d564 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    d564:	4a03      	ldr	r2, [pc, #12]	; (d574 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    d566:	e9d2 1200 	ldrd	r1, r2, [r2]
    d56a:	6001      	str	r1, [r0, #0]
    d56c:	6042      	str	r2, [r0, #4]
    d56e:	2000      	movs	r0, #0
    d570:	4770      	bx	lr
    d572:	0000      	.short	0x0000
    d574:	0000db38 	.word	0x0000db38

0000d578 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    d578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d57c:	b08b      	sub	sp, #44	; 0x2c
    d57e:	4689      	mov	r9, r1
    d580:	4606      	mov	r6, r0
    d582:	8800      	ldrh	r0, [r0, #0]
    d584:	a904      	add	r1, sp, #16
    d586:	f003 fe43 	bl	11210 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    d58a:	2800      	cmp	r0, #0
    d58c:	d150      	bne.n	d630 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
    d58e:	9805      	ldr	r0, [sp, #20]
    d590:	f89d 1010 	ldrb.w	r1, [sp, #16]
    d594:	4680      	mov	r8, r0
    d596:	3078      	adds	r0, #120	; 0x78
    d598:	2900      	cmp	r1, #0
    d59a:	4641      	mov	r1, r8
    d59c:	d00c      	beq.n	d5b8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x40>
    d59e:	f891 120c 	ldrb.w	r1, [r1, #524]	; 0x20c
    d5a2:	bf00      	nop
    d5a4:	f88d 1018 	strb.w	r1, [sp, #24]
    d5a8:	9906      	ldr	r1, [sp, #24]
    d5aa:	9106      	str	r1, [sp, #24]
    d5ac:	f89d 5018 	ldrb.w	r5, [sp, #24]
    d5b0:	7b81      	ldrb	r1, [r0, #14]
    d5b2:	2921      	cmp	r1, #33	; 0x21
    d5b4:	d003      	beq.n	d5be <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x46>
    d5b6:	e003      	b.n	d5c0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x48>
    d5b8:	f891 11ae 	ldrb.w	r1, [r1, #430]	; 0x1ae
    d5bc:	e7f2      	b.n	d5a4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x2c>
    d5be:	b13d      	cbz	r5, d5d0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x58>
    d5c0:	2400      	movs	r4, #0
    d5c2:	304e      	adds	r0, #78	; 0x4e
    d5c4:	2108      	movs	r1, #8
    d5c6:	4607      	mov	r7, r0
    d5c8:	f005 fabf 	bl	12b4a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    d5cc:	b110      	cbz	r0, d5d4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    d5ce:	e007      	b.n	d5e0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x68>
    d5d0:	2401      	movs	r4, #1
    d5d2:	e7f6      	b.n	d5c2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4a>
    d5d4:	210b      	movs	r1, #11
    d5d6:	4638      	mov	r0, r7
    d5d8:	f005 fab7 	bl	12b4a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    d5dc:	b900      	cbnz	r0, d5e0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x68>
    d5de:	b334      	cbz	r4, d62e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb6>
    d5e0:	a802      	add	r0, sp, #8
    d5e2:	9000      	str	r0, [sp, #0]
    d5e4:	f89d 0010 	ldrb.w	r0, [sp, #16]
    d5e8:	ab01      	add	r3, sp, #4
    d5ea:	4632      	mov	r2, r6
    d5ec:	4641      	mov	r1, r8
    d5ee:	f006 f976 	bl	138de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x40a>
    d5f2:	0007      	movs	r7, r0
    d5f4:	d11c      	bne.n	d630 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
    d5f6:	f89d 0010 	ldrb.w	r0, [sp, #16]
    d5fa:	9c05      	ldr	r4, [sp, #20]
    d5fc:	b1d8      	cbz	r0, d636 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xbe>
    d5fe:	f504 74df 	add.w	r4, r4, #446	; 0x1be
    d602:	bf00      	nop
    d604:	f898 006f 	ldrb.w	r0, [r8, #111]	; 0x6f
    d608:	b168      	cbz	r0, d626 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xae>
    d60a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    d60e:	f010 0102 	ands.w	r1, r0, #2
    d612:	f89d 0008 	ldrb.w	r0, [sp, #8]
    d616:	f88d 1004 	strb.w	r1, [sp, #4]
    d61a:	f000 0002 	and.w	r0, r0, #2
    d61e:	f88d 0008 	strb.w	r0, [sp, #8]
    d622:	d00b      	beq.n	d63c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc4>
    d624:	b150      	cbz	r0, d63c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc4>
    d626:	2001      	movs	r0, #1
    d628:	7060      	strb	r0, [r4, #1]
    d62a:	b95d      	cbnz	r5, d644 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xcc>
    d62c:	e008      	b.n	d640 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc8>
    d62e:	201a      	movs	r0, #26
    d630:	b00b      	add	sp, #44	; 0x2c
    d632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d636:	f504 74a1 	add.w	r4, r4, #322	; 0x142
    d63a:	e7e3      	b.n	d604 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8c>
    d63c:	2009      	movs	r0, #9
    d63e:	e7f7      	b.n	d630 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
    d640:	7820      	ldrb	r0, [r4, #0]
    d642:	b108      	cbz	r0, d648 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xd0>
    d644:	273a      	movs	r7, #58	; 0x3a
    d646:	e014      	b.n	d672 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xfa>
    d648:	f884 9000 	strb.w	r9, [r4]
    d64c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    d650:	70a0      	strb	r0, [r4, #2]
    d652:	f89d 1008 	ldrb.w	r1, [sp, #8]
    d656:	70e1      	strb	r1, [r4, #3]
    d658:	88b2      	ldrh	r2, [r6, #4]
    d65a:	80a2      	strh	r2, [r4, #4]
    d65c:	f88d 0018 	strb.w	r0, [sp, #24]
    d660:	f88d 1019 	strb.w	r1, [sp, #25]
    d664:	88b0      	ldrh	r0, [r6, #4]
    d666:	f8ad 001a 	strh.w	r0, [sp, #26]
    d66a:	a906      	add	r1, sp, #24
    d66c:	4640      	mov	r0, r8
    d66e:	f003 feca 	bl	11406 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    d672:	2000      	movs	r0, #0
    d674:	7060      	strb	r0, [r4, #1]
    d676:	4638      	mov	r0, r7
    d678:	e7da      	b.n	d630 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
	...

0000d67c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    d67c:	b570      	push	{r4, r5, r6, lr}
    d67e:	f003 fd44 	bl	1110a <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    d682:	f7f8 fbf9 	bl	5e78 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    d686:	f000 faef 	bl	dc68 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    d68a:	f7f9 fe49 	bl	7320 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    d68e:	4c13      	ldr	r4, [pc, #76]	; (d6dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x60>)
    d690:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d694:	2500      	movs	r5, #0
    d696:	8320      	strh	r0, [r4, #24]
    d698:	76a5      	strb	r5, [r4, #26]
    d69a:	83a5      	strh	r5, [r4, #28]
    d69c:	4628      	mov	r0, r5
    d69e:	f000 fa73 	bl	db88 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
    d6a2:	480f      	ldr	r0, [pc, #60]	; (d6e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x64>)
    d6a4:	211b      	movs	r1, #27
    d6a6:	f44f 72a4 	mov.w	r2, #328	; 0x148
    d6aa:	8001      	strh	r1, [r0, #0]
    d6ac:	8042      	strh	r2, [r0, #2]
    d6ae:	8081      	strh	r1, [r0, #4]
    d6b0:	80c2      	strh	r2, [r0, #6]
    d6b2:	74a5      	strb	r5, [r4, #18]
    d6b4:	74e5      	strb	r5, [r4, #19]
    d6b6:	7245      	strb	r5, [r0, #9]
    d6b8:	2203      	movs	r2, #3
    d6ba:	7022      	strb	r2, [r4, #0]
    d6bc:	2202      	movs	r2, #2
    d6be:	7062      	strb	r2, [r4, #1]
    d6c0:	8061      	strh	r1, [r4, #2]
    d6c2:	80a1      	strh	r1, [r4, #4]
    d6c4:	f640 61a6 	movw	r1, #3750	; 0xea6
    d6c8:	60a1      	str	r1, [r4, #8]
    d6ca:	0049      	lsls	r1, r1, #1
    d6cc:	60e1      	str	r1, [r4, #12]
    d6ce:	7205      	strb	r5, [r0, #8]
    d6d0:	4804      	ldr	r0, [pc, #16]	; (d6e4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x68>)
    d6d2:	7005      	strb	r5, [r0, #0]
    d6d4:	75a5      	strb	r5, [r4, #22]
    d6d6:	7425      	strb	r5, [r4, #16]
    d6d8:	bd70      	pop	{r4, r5, r6, pc}
    d6da:	0000      	.short	0x0000
    d6dc:	20000ed0 	.word	0x20000ed0
    d6e0:	200010ce 	.word	0x200010ce
    d6e4:	2000027c 	.word	0x2000027c
    d6e8:	b570      	push	{r4, r5, r6, lr}
    d6ea:	4604      	mov	r4, r0
    d6ec:	7800      	ldrb	r0, [r0, #0]
    d6ee:	2500      	movs	r5, #0
    d6f0:	2801      	cmp	r0, #1
    d6f2:	d004      	beq.n	d6fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x82>
    d6f4:	b118      	cbz	r0, d6fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x82>
    d6f6:	2802      	cmp	r0, #2
    d6f8:	d001      	beq.n	d6fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x82>
    d6fa:	2803      	cmp	r0, #3
    d6fc:	d168      	bne.n	d7d0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x154>
    d6fe:	7860      	ldrb	r0, [r4, #1]
    d700:	b128      	cbz	r0, d70e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x92>
    d702:	2801      	cmp	r0, #1
    d704:	d003      	beq.n	d70e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x92>
    d706:	2802      	cmp	r0, #2
    d708:	d001      	beq.n	d70e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x92>
    d70a:	2803      	cmp	r0, #3
    d70c:	d160      	bne.n	d7d0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x154>
    d70e:	7e60      	ldrb	r0, [r4, #25]
    d710:	b910      	cbnz	r0, d718 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    d712:	78a0      	ldrb	r0, [r4, #2]
    d714:	2801      	cmp	r0, #1
    d716:	d15b      	bne.n	d7d0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x154>
    d718:	78a0      	ldrb	r0, [r4, #2]
    d71a:	08c1      	lsrs	r1, r0, #3
    d71c:	d158      	bne.n	d7d0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x154>
    d71e:	0781      	lsls	r1, r0, #30
    d720:	d504      	bpl.n	d72c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
    d722:	2802      	cmp	r0, #2
    d724:	d154      	bne.n	d7d0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x154>
    d726:	492c      	ldr	r1, [pc, #176]	; (d7d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x15c>)
    d728:	7a49      	ldrb	r1, [r1, #9]
    d72a:	b3e9      	cbz	r1, d7a8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12c>
    d72c:	0740      	lsls	r0, r0, #29
    d72e:	d04f      	beq.n	d7d0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x154>
    d730:	f000 fa8c 	bl	dc4c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d734:	4601      	mov	r1, r0
    d736:	78a0      	ldrb	r0, [r4, #2]
    d738:	ea30 0101 	bics.w	r1, r0, r1
    d73c:	d001      	beq.n	d742 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc6>
    d73e:	2011      	movs	r0, #17
    d740:	bd70      	pop	{r4, r5, r6, pc}
    d742:	07c0      	lsls	r0, r0, #31
    d744:	d006      	beq.n	d754 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd8>
    d746:	78e0      	ldrb	r0, [r4, #3]
    d748:	2301      	movs	r3, #1
    d74a:	6922      	ldr	r2, [r4, #16]
    d74c:	68a1      	ldr	r1, [r4, #8]
    d74e:	f006 f862 	bl	13816 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x342>
    d752:	4605      	mov	r5, r0
    d754:	78a0      	ldrb	r0, [r4, #2]
    d756:	0780      	lsls	r0, r0, #30
    d758:	d506      	bpl.n	d768 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xec>
    d75a:	78e0      	ldrb	r0, [r4, #3]
    d75c:	2302      	movs	r3, #2
    d75e:	6922      	ldr	r2, [r4, #16]
    d760:	68a1      	ldr	r1, [r4, #8]
    d762:	f006 f858 	bl	13816 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x342>
    d766:	4305      	orrs	r5, r0
    d768:	78a0      	ldrb	r0, [r4, #2]
    d76a:	0740      	lsls	r0, r0, #29
    d76c:	d506      	bpl.n	d77c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x100>
    d76e:	78e0      	ldrb	r0, [r4, #3]
    d770:	2304      	movs	r3, #4
    d772:	6922      	ldr	r2, [r4, #16]
    d774:	68a1      	ldr	r1, [r4, #8]
    d776:	f006 f84e 	bl	13816 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x342>
    d77a:	4305      	orrs	r5, r0
    d77c:	b10d      	cbz	r5, d782 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x106>
    d77e:	4628      	mov	r0, r5
    d780:	bd70      	pop	{r4, r5, r6, pc}
    d782:	78a0      	ldrb	r0, [r4, #2]
    d784:	2805      	cmp	r0, #5
    d786:	d11f      	bne.n	d7c8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14c>
    d788:	e9d4 1503 	ldrd	r1, r5, [r4, #12]
    d78c:	7920      	ldrb	r0, [r4, #4]
    d78e:	2304      	movs	r3, #4
    d790:	6962      	ldr	r2, [r4, #20]
    d792:	f006 f840 	bl	13816 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x342>
    d796:	2800      	cmp	r0, #0
    d798:	d1f2      	bne.n	d780 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x104>
    d79a:	2001      	movs	r0, #1
    d79c:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    d7a0:	690a      	ldr	r2, [r1, #16]
    d7a2:	4415      	add	r5, r2
    d7a4:	1822      	adds	r2, r4, r0
    d7a6:	e000      	b.n	d7aa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    d7a8:	e012      	b.n	d7d0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x154>
    d7aa:	78d3      	ldrb	r3, [r2, #3]
    d7ac:	7892      	ldrb	r2, [r2, #2]
    d7ae:	4293      	cmp	r3, r2
    d7b0:	d10e      	bne.n	d7d0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x154>
    d7b2:	688a      	ldr	r2, [r1, #8]
    d7b4:	6849      	ldr	r1, [r1, #4]
    d7b6:	428a      	cmp	r2, r1
    d7b8:	d10a      	bne.n	d7d0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x154>
    d7ba:	1c40      	adds	r0, r0, #1
    d7bc:	b2c0      	uxtb	r0, r0
    d7be:	2802      	cmp	r0, #2
    d7c0:	d3ec      	bcc.n	d79c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x120>
    d7c2:	68a0      	ldr	r0, [r4, #8]
    d7c4:	42a8      	cmp	r0, r5
    d7c6:	d303      	bcc.n	d7d0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x154>
    d7c8:	7e20      	ldrb	r0, [r4, #24]
    d7ca:	b108      	cbz	r0, d7d0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x154>
    d7cc:	2807      	cmp	r0, #7
    d7ce:	d901      	bls.n	d7d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x158>
    d7d0:	2012      	movs	r0, #18
    d7d2:	bd70      	pop	{r4, r5, r6, pc}
    d7d4:	2000      	movs	r0, #0
    d7d6:	bd70      	pop	{r4, r5, r6, pc}
    d7d8:	200010ce 	.word	0x200010ce
    d7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d7e0:	461d      	mov	r5, r3
    d7e2:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    d7e6:	f1a1 0c06 	sub.w	ip, r1, #6
    d7ea:	f640 437a 	movw	r3, #3194	; 0xc7a
    d7ee:	9e08      	ldr	r6, [sp, #32]
    d7f0:	459c      	cmp	ip, r3
    d7f2:	d805      	bhi.n	d800 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x184>
    d7f4:	f1a2 0c06 	sub.w	ip, r2, #6
    d7f8:	459c      	cmp	ip, r3
    d7fa:	d801      	bhi.n	d800 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x184>
    d7fc:	2301      	movs	r3, #1
    d7fe:	e000      	b.n	d802 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x186>
    d800:	2300      	movs	r3, #0
    d802:	b120      	cbz	r0, d80e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x192>
    d804:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    d808:	b168      	cbz	r0, d826 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1aa>
    d80a:	b96b      	cbnz	r3, d828 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ac>
    d80c:	e002      	b.n	d814 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x198>
    d80e:	4815      	ldr	r0, [pc, #84]	; (d864 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e8>)
    d810:	7a00      	ldrb	r0, [r0, #8]
    d812:	e7f9      	b.n	d808 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18c>
    d814:	f6a1 5001 	subw	r0, r1, #3329	; 0xd01
    d818:	2806      	cmp	r0, #6
    d81a:	d821      	bhi.n	d860 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e4>
    d81c:	f6a2 5001 	subw	r0, r2, #3329	; 0xd01
    d820:	2806      	cmp	r0, #6
    d822:	d901      	bls.n	d828 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ac>
    d824:	e01c      	b.n	d860 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e4>
    d826:	b1db      	cbz	r3, d860 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e4>
    d828:	4291      	cmp	r1, r2
    d82a:	d819      	bhi.n	d860 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e4>
    d82c:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    d830:	d216      	bcs.n	d860 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e4>
    d832:	f1a4 000a 	sub.w	r0, r4, #10
    d836:	f640 4176 	movw	r1, #3190	; 0xc76
    d83a:	4288      	cmp	r0, r1
    d83c:	d810      	bhi.n	d860 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e4>
    d83e:	4610      	mov	r0, r2
    d840:	f003 fcfe 	bl	11240 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    d844:	1c6d      	adds	r5, r5, #1
    d846:	4368      	muls	r0, r5
    d848:	f240 2171 	movw	r1, #625	; 0x271
    d84c:	0040      	lsls	r0, r0, #1
    d84e:	434c      	muls	r4, r1
    d850:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    d854:	d204      	bcs.n	d860 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e4>
    d856:	42b7      	cmp	r7, r6
    d858:	d802      	bhi.n	d860 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e4>
    d85a:	2001      	movs	r0, #1
    d85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d860:	2000      	movs	r0, #0
    d862:	e7fb      	b.n	d85c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e0>
    d864:	200010ce 	.word	0x200010ce
    d868:	b530      	push	{r4, r5, lr}
    d86a:	b087      	sub	sp, #28
    d86c:	4605      	mov	r5, r0
    d86e:	8808      	ldrh	r0, [r1, #0]
    d870:	f8ad 0004 	strh.w	r0, [sp, #4]
    d874:	4813      	ldr	r0, [pc, #76]	; (d8c4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x248>)
    d876:	460c      	mov	r4, r1
    d878:	ab03      	add	r3, sp, #12
    d87a:	7c81      	ldrb	r1, [r0, #18]
    d87c:	f88d 1006 	strb.w	r1, [sp, #6]
    d880:	7cc1      	ldrb	r1, [r0, #19]
    d882:	f88d 1007 	strb.w	r1, [sp, #7]
    d886:	8a80      	ldrh	r0, [r0, #20]
    d888:	f8ad 0008 	strh.w	r0, [sp, #8]
    d88c:	a804      	add	r0, sp, #16
    d88e:	9000      	str	r0, [sp, #0]
    d890:	aa01      	add	r2, sp, #4
    d892:	4621      	mov	r1, r4
    d894:	4628      	mov	r0, r5
    d896:	f006 f822 	bl	138de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x40a>
    d89a:	0005      	movs	r5, r0
    d89c:	d110      	bne.n	d8c0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x244>
    d89e:	f89d 000c 	ldrb.w	r0, [sp, #12]
    d8a2:	f88d 0014 	strb.w	r0, [sp, #20]
    d8a6:	f89d 0010 	ldrb.w	r0, [sp, #16]
    d8aa:	f88d 0015 	strb.w	r0, [sp, #21]
    d8ae:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    d8b2:	f8ad 0016 	strh.w	r0, [sp, #22]
    d8b6:	a905      	add	r1, sp, #20
    d8b8:	4620      	mov	r0, r4
    d8ba:	f003 fda4 	bl	11406 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    d8be:	4628      	mov	r0, r5
    d8c0:	b007      	add	sp, #28
    d8c2:	bd30      	pop	{r4, r5, pc}
    d8c4:	20000ed0 	.word	0x20000ed0
    d8c8:	4904      	ldr	r1, [pc, #16]	; (d8dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x260>)
    d8ca:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    d8ce:	4288      	cmp	r0, r1
    d8d0:	d301      	bcc.n	d8d6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x25a>
    d8d2:	2000      	movs	r0, #0
    d8d4:	4770      	bx	lr
    d8d6:	2001      	movs	r0, #1
    d8d8:	4770      	bx	lr
    d8da:	0000      	.short	0x0000
    d8dc:	0270f3cc 	.word	0x0270f3cc
    d8e0:	4904      	ldr	r1, [pc, #16]	; (d8f4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x278>)
    d8e2:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    d8e6:	4288      	cmp	r0, r1
    d8e8:	d301      	bcc.n	d8ee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x272>
    d8ea:	2000      	movs	r0, #0
    d8ec:	4770      	bx	lr
    d8ee:	2001      	movs	r0, #1
    d8f0:	4770      	bx	lr
    d8f2:	0000      	.short	0x0000
    d8f4:	009c363d 	.word	0x009c363d
    d8f8:	4904      	ldr	r1, [pc, #16]	; (d90c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x290>)
    d8fa:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    d8fe:	4288      	cmp	r0, r1
    d900:	d301      	bcc.n	d906 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x28a>
    d902:	2000      	movs	r0, #0
    d904:	4770      	bx	lr
    d906:	2001      	movs	r0, #1
    d908:	4770      	bx	lr
    d90a:	0000      	.short	0x0000
    d90c:	009c363d 	.word	0x009c363d
    d910:	b530      	push	{r4, r5, lr}
    d912:	2200      	movs	r2, #0
    d914:	4d07      	ldr	r5, [pc, #28]	; (d934 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b8>)
    d916:	e009      	b.n	d92c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b0>
    d918:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    d91c:	462b      	mov	r3, r5
    d91e:	429c      	cmp	r4, r3
    d920:	d800      	bhi.n	d924 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a8>
    d922:	4623      	mov	r3, r4
    d924:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    d928:	1c52      	adds	r2, r2, #1
    d92a:	b2d2      	uxtb	r2, r2
    d92c:	428a      	cmp	r2, r1
    d92e:	d3f3      	bcc.n	d918 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x29c>
    d930:	bd30      	pop	{r4, r5, pc}
    d932:	0000      	.short	0x0000
    d934:	00f42400 	.word	0x00f42400
    d938:	4904      	ldr	r1, [pc, #16]	; (d94c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2d0>)
    d93a:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
    d93e:	4288      	cmp	r0, r1
    d940:	d301      	bcc.n	d946 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ca>
    d942:	2000      	movs	r0, #0
    d944:	4770      	bx	lr
    d946:	2001      	movs	r0, #1
    d948:	4770      	bx	lr
    d94a:	0000      	.short	0x0000
    d94c:	0270f9a8 	.word	0x0270f9a8
    d950:	4904      	ldr	r1, [pc, #16]	; (d964 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e8>)
    d952:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
    d956:	4288      	cmp	r0, r1
    d958:	d301      	bcc.n	d95e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e2>
    d95a:	2000      	movs	r0, #0
    d95c:	4770      	bx	lr
    d95e:	2001      	movs	r0, #1
    d960:	4770      	bx	lr
    d962:	0000      	.short	0x0000
    d964:	0270f9a8 	.word	0x0270f9a8
    d968:	4a09      	ldr	r2, [pc, #36]	; (d990 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x314>)
    d96a:	4290      	cmp	r0, r2
    d96c:	d80b      	bhi.n	d986 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30a>
    d96e:	2901      	cmp	r1, #1
    d970:	d002      	beq.n	d978 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2fc>
    d972:	2904      	cmp	r1, #4
    d974:	d003      	beq.n	d97e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x302>
    d976:	e008      	b.n	d98a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30e>
    d978:	f240 7153 	movw	r1, #1875	; 0x753
    d97c:	e001      	b.n	d982 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x306>
    d97e:	f640 11c4 	movw	r1, #2500	; 0x9c4
    d982:	4288      	cmp	r0, r1
    d984:	d201      	bcs.n	d98a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30e>
    d986:	2000      	movs	r0, #0
    d988:	4770      	bx	lr
    d98a:	2001      	movs	r0, #1
    d98c:	4770      	bx	lr
    d98e:	0000      	.short	0x0000
    d990:	0270fd8f 	.word	0x0270fd8f

0000d994 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    d994:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    d998:	460c      	mov	r4, r1
    d99a:	4606      	mov	r6, r0
    d99c:	f004 fb80 	bl	120a0 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    d9a0:	b198      	cbz	r0, d9ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x36>
    d9a2:	4630      	mov	r0, r6
    d9a4:	f004 fb6d 	bl	12082 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    d9a8:	b130      	cbz	r0, d9b8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24>
    d9aa:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    d9ae:	2012      	movs	r0, #18
    d9b0:	2900      	cmp	r1, #0
    d9b2:	d00b      	beq.n	d9cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    d9b4:	2980      	cmp	r1, #128	; 0x80
    d9b6:	d809      	bhi.n	d9cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    d9b8:	4630      	mov	r0, r6
    d9ba:	f004 fb27 	bl	1200c <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    d9be:	b138      	cbz	r0, d9d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    d9c0:	4630      	mov	r0, r6
    d9c2:	f004 f970 	bl	11ca6 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    d9c6:	b128      	cbz	r0, d9d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    d9c8:	e009      	b.n	d9de <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4a>
    d9ca:	2042      	movs	r0, #66	; 0x42
    d9cc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    d9d0:	200c      	movs	r0, #12
    d9d2:	e7fb      	b.n	d9cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    d9d4:	4630      	mov	r0, r6
    d9d6:	f004 fb46 	bl	12066 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    d9da:	2800      	cmp	r0, #0
    d9dc:	d058      	beq.n	da90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfc>
    d9de:	4630      	mov	r0, r6
    d9e0:	f004 fd07 	bl	123f2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    d9e4:	2800      	cmp	r0, #0
    d9e6:	d1f3      	bne.n	d9d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    d9e8:	4630      	mov	r0, r6
    d9ea:	f004 f979 	bl	11ce0 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    d9ee:	2800      	cmp	r0, #0
    d9f0:	d1ee      	bne.n	d9d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    d9f2:	4630      	mov	r0, r6
    d9f4:	f7f9 fe1c 	bl	7630 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    d9f8:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    d9fc:	f242 7110 	movw	r1, #10000	; 0x2710
    da00:	fb00 f801 	mul.w	r8, r0, r1
    da04:	78e1      	ldrb	r1, [r4, #3]
    da06:	4630      	mov	r0, r6
    da08:	f004 faf8 	bl	11ffc <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    da0c:	7820      	ldrb	r0, [r4, #0]
    da0e:	2103      	movs	r1, #3
    da10:	f003 f9cf 	bl	10db2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    da14:	b138      	cbz	r0, da26 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x92>
    da16:	4944      	ldr	r1, [pc, #272]	; (db28 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    da18:	6809      	ldr	r1, [r1, #0]
    da1a:	b121      	cbz	r1, da26 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x92>
    da1c:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
    da20:	b10a      	cbz	r2, da26 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x92>
    da22:	3038      	adds	r0, #56	; 0x38
    da24:	4788      	blx	r1
    da26:	4630      	mov	r0, r6
    da28:	f004 fb21 	bl	1206e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    da2c:	b148      	cbz	r0, da42 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xae>
    da2e:	4630      	mov	r0, r6
    da30:	f004 fb27 	bl	12082 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    da34:	4f3d      	ldr	r7, [pc, #244]	; (db2c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    da36:	b180      	cbz	r0, da5a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc6>
    da38:	4630      	mov	r0, r6
    da3a:	f004 fb26 	bl	1208a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    da3e:	b150      	cbz	r0, da56 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    da40:	e00b      	b.n	da5a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc6>
    da42:	4642      	mov	r2, r8
    da44:	2100      	movs	r1, #0
    da46:	4630      	mov	r0, r6
    da48:	f7fb f8f6 	bl	8c38 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    da4c:	2800      	cmp	r0, #0
    da4e:	d0bd      	beq.n	d9cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    da50:	f241 414c 	movw	r1, #5196	; 0x144c
    da54:	e05b      	b.n	db0e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    da56:	7a38      	ldrb	r0, [r7, #8]
    da58:	b1d0      	cbz	r0, da90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfc>
    da5a:	2200      	movs	r2, #0
    da5c:	2101      	movs	r1, #1
    da5e:	a801      	add	r0, sp, #4
    da60:	f7f6 fcda 	bl	4418 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    da64:	0004      	movs	r4, r0
    da66:	d03c      	beq.n	dae2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    da68:	2100      	movs	r1, #0
    da6a:	f7f8 febf 	bl	67ec <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    da6e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    da72:	8020      	strh	r0, [r4, #0]
    da74:	4621      	mov	r1, r4
    da76:	4630      	mov	r0, r6
    da78:	f004 fb25 	bl	120c6 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    da7c:	f005 ff6e 	bl	1395c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x488>
    da80:	4d2b      	ldr	r5, [pc, #172]	; (db30 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>)
    da82:	2800      	cmp	r0, #0
    da84:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    da88:	d004      	beq.n	da94 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x100>
    da8a:	886a      	ldrh	r2, [r5, #2]
    da8c:	88a9      	ldrh	r1, [r5, #4]
    da8e:	e003      	b.n	da98 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>
    da90:	2012      	movs	r0, #18
    da92:	e79b      	b.n	d9cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    da94:	221b      	movs	r2, #27
    da96:	4611      	mov	r1, r2
    da98:	84c2      	strh	r2, [r0, #38]	; 0x26
    da9a:	8501      	strh	r1, [r0, #40]	; 0x28
    da9c:	7a38      	ldrb	r0, [r7, #8]
    da9e:	b100      	cbz	r0, daa2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x10e>
    daa0:	2001      	movs	r0, #1
    daa2:	f884 006f 	strb.w	r0, [r4, #111]	; 0x6f
    daa6:	68a9      	ldr	r1, [r5, #8]
    daa8:	62e1      	str	r1, [r4, #44]	; 0x2c
    daaa:	b110      	cbz	r0, dab2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x11e>
    daac:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    dab0:	e001      	b.n	dab6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x122>
    dab2:	f641 574c 	movw	r7, #7500	; 0x1d4c
    dab6:	4630      	mov	r0, r6
    dab8:	f004 fae7 	bl	1208a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    dabc:	b910      	cbnz	r0, dac4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x130>
    dabe:	4630      	mov	r0, r6
    dac0:	f004 faff 	bl	120c2 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    dac4:	4621      	mov	r1, r4
    dac6:	2001      	movs	r0, #1
    dac8:	60e7      	str	r7, [r4, #12]
    daca:	f7ff fecd 	bl	d868 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ec>
    dace:	b150      	cbz	r0, dae6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x152>
    dad0:	2101      	movs	r1, #1
    dad2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    dad6:	f7f6 fceb 	bl	44b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    dada:	b110      	cbz	r0, dae2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    dadc:	f241 4198 	movw	r1, #5272	; 0x1498
    dae0:	e015      	b.n	db0e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    dae2:	2009      	movs	r0, #9
    dae4:	e772      	b.n	d9cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    dae6:	7868      	ldrb	r0, [r5, #1]
    dae8:	9000      	str	r0, [sp, #0]
    daea:	782b      	ldrb	r3, [r5, #0]
    daec:	88aa      	ldrh	r2, [r5, #4]
    daee:	8869      	ldrh	r1, [r5, #2]
    daf0:	8820      	ldrh	r0, [r4, #0]
    daf2:	f7f6 fdc3 	bl	467c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    daf6:	b110      	cbz	r0, dafe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    daf8:	f241 41a3 	movw	r1, #5283	; 0x14a3
    dafc:	e007      	b.n	db0e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    dafe:	4642      	mov	r2, r8
    db00:	4621      	mov	r1, r4
    db02:	4630      	mov	r0, r6
    db04:	f7fb f898 	bl	8c38 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    db08:	b120      	cbz	r0, db14 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    db0a:	f241 41a5 	movw	r1, #5285	; 0x14a5
    db0e:	2039      	movs	r0, #57	; 0x39
    db10:	f7f6 fa16 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db14:	4807      	ldr	r0, [pc, #28]	; (db34 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a0>)
    db16:	6843      	ldr	r3, [r0, #4]
    db18:	b123      	cbz	r3, db24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    db1a:	2200      	movs	r2, #0
    db1c:	f504 71da 	add.w	r1, r4, #436	; 0x1b4
    db20:	4620      	mov	r0, r4
    db22:	4798      	blx	r3
    db24:	2000      	movs	r0, #0
    db26:	e751      	b.n	d9cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    db28:	20000284 	.word	0x20000284
    db2c:	200010ce 	.word	0x200010ce
    db30:	20000ed0 	.word	0x20000ed0
    db34:	20000274 	.word	0x20000274
    db38:	0b12fe0b 	.word	0x0b12fe0b
    db3c:	12fe0059 	.word	0x12fe0059
    db40:	05060708 	.word	0x05060708
    db44:	00020304 	.word	0x00020304
    db48:	f0f4f8fc 	.word	0xf0f4f8fc
    db4c:	0304d8ec 	.word	0x0304d8ec
    db50:	f4f8fc00 	.word	0xf4f8fc00
    db54:	00d8ecf0 	.word	0x00d8ecf0

0000db58 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    db58:	b510      	push	{r4, lr}
    db5a:	460c      	mov	r4, r1
    db5c:	f7f9 fbd2 	bl	7304 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    db60:	4805      	ldr	r0, [pc, #20]	; (db78 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    db62:	6044      	str	r4, [r0, #4]
    db64:	6880      	ldr	r0, [r0, #8]
    db66:	f006 f883 	bl	13c70 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4c>
    db6a:	f005 fcb1 	bl	134d0 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    db6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    db72:	f7f9 bd41 	b.w	75f8 <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA>
    db76:	0000      	.short	0x0000
    db78:	20000288 	.word	0x20000288

0000db7c <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>:
    db7c:	4801      	ldr	r0, [pc, #4]	; (db84 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A+0x8>)
    db7e:	7800      	ldrb	r0, [r0, #0]
    db80:	4770      	bx	lr
    db82:	0000      	.short	0x0000
    db84:	20000288 	.word	0x20000288

0000db88 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>:
    db88:	4901      	ldr	r1, [pc, #4]	; (db90 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q+0x8>)
    db8a:	7008      	strb	r0, [r1, #0]
    db8c:	4770      	bx	lr
    db8e:	0000      	.short	0x0000
    db90:	20000288 	.word	0x20000288

0000db94 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    db94:	b510      	push	{r4, lr}
    db96:	4c07      	ldr	r4, [pc, #28]	; (dbb4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    db98:	68e0      	ldr	r0, [r4, #12]
    db9a:	f006 f869 	bl	13c70 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4c>
    db9e:	6920      	ldr	r0, [r4, #16]
    dba0:	f006 f866 	bl	13c70 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4c>
    dba4:	f003 fab1 	bl	1110a <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    dba8:	f7f8 f966 	bl	5e78 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    dbac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dbb0:	f7ff bd64 	b.w	d67c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    dbb4:	20000288 	.word	0x20000288

0000dbb8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    dbb8:	b500      	push	{lr}
    dbba:	4905      	ldr	r1, [pc, #20]	; (dbd0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    dbbc:	4805      	ldr	r0, [pc, #20]	; (dbd4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    dbbe:	f006 f831 	bl	13c24 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    dbc2:	4804      	ldr	r0, [pc, #16]	; (dbd4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    dbc4:	4904      	ldr	r1, [pc, #16]	; (dbd8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    dbc6:	1d00      	adds	r0, r0, #4
    dbc8:	f85d eb04 	ldr.w	lr, [sp], #4
    dbcc:	f006 b82a 	b.w	13c24 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    dbd0:	2000029c 	.word	0x2000029c
    dbd4:	20000290 	.word	0x20000290
    dbd8:	200002a4 	.word	0x200002a4

0000dbdc <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>:
    dbdc:	b500      	push	{lr}
    dbde:	4905      	ldr	r1, [pc, #20]	; (dbf4 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x18>)
    dbe0:	4805      	ldr	r0, [pc, #20]	; (dbf8 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    dbe2:	f006 f81f 	bl	13c24 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    dbe6:	4804      	ldr	r0, [pc, #16]	; (dbf8 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    dbe8:	4904      	ldr	r1, [pc, #16]	; (dbfc <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x20>)
    dbea:	1d00      	adds	r0, r0, #4
    dbec:	f85d eb04 	ldr.w	lr, [sp], #4
    dbf0:	f006 b818 	b.w	13c24 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    dbf4:	200002ac 	.word	0x200002ac
    dbf8:	20000290 	.word	0x20000290
    dbfc:	200002b4 	.word	0x200002b4

0000dc00 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    dc00:	4801      	ldr	r0, [pc, #4]	; (dc08 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    dc02:	7840      	ldrb	r0, [r0, #1]
    dc04:	4770      	bx	lr
    dc06:	0000      	.short	0x0000
    dc08:	20000288 	.word	0x20000288
    dc0c:	b510      	push	{r4, lr}
    dc0e:	f7fb f8eb 	bl	8de8 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    dc12:	4803      	ldr	r0, [pc, #12]	; (dc20 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x20>)
    dc14:	f7f9 fefc 	bl	7a10 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    dc18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc1c:	f7f9 bb94 	b.w	7348 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    dc20:	200012c5 	.word	0x200012c5
    dc24:	b510      	push	{r4, lr}
    dc26:	f7ff fc47 	bl	d4b8 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    dc2a:	f7fd f945 	bl	aeb8 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    dc2e:	4803      	ldr	r0, [pc, #12]	; (dc3c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x3c>)
    dc30:	f7fb fac0 	bl	91b4 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    dc34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc38:	f7f9 bb8e 	b.w	7358 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>
    dc3c:	200012c5 	.word	0x200012c5

0000dc40 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    dc40:	4801      	ldr	r0, [pc, #4]	; (dc48 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    dc42:	6800      	ldr	r0, [r0, #0]
    dc44:	4770      	bx	lr
    dc46:	0000      	.short	0x0000
    dc48:	200002bc 	.word	0x200002bc

0000dc4c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    dc4c:	4805      	ldr	r0, [pc, #20]	; (dc64 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x18>)
    dc4e:	2201      	movs	r2, #1
    dc50:	8800      	ldrh	r0, [r0, #0]
    dc52:	f3c0 21c0 	ubfx	r1, r0, #11, #1
    dc56:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    dc5a:	f3c0 2000 	ubfx	r0, r0, #8, #1
    dc5e:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    dc62:	4770      	bx	lr
    dc64:	200002bc 	.word	0x200002bc

0000dc68 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    dc68:	b510      	push	{r4, lr}
    dc6a:	f7f5 fcd9 	bl	3620 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    dc6e:	2200      	movs	r2, #0
    dc70:	4b08      	ldr	r3, [pc, #32]	; (dc94 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    dc72:	4611      	mov	r1, r2
    dc74:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    dc78:	4284      	cmp	r4, r0
    dc7a:	d303      	bcc.n	dc84 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    dc7c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    dc80:	7882      	ldrb	r2, [r0, #2]
    dc82:	e003      	b.n	dc8c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    dc84:	1c49      	adds	r1, r1, #1
    dc86:	b2c9      	uxtb	r1, r1
    dc88:	290c      	cmp	r1, #12
    dc8a:	d3f3      	bcc.n	dc74 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    dc8c:	4802      	ldr	r0, [pc, #8]	; (dc98 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    dc8e:	7002      	strb	r2, [r0, #0]
    dc90:	bd10      	pop	{r4, pc}
    dc92:	0000      	.short	0x0000
    dc94:	00013cd0 	.word	0x00013cd0
    dc98:	20000320 	.word	0x20000320

0000dc9c <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    dc9c:	4801      	ldr	r0, [pc, #4]	; (dca4 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0x8>)
    dc9e:	7800      	ldrb	r0, [r0, #0]
    dca0:	4770      	bx	lr
    dca2:	0000      	.short	0x0000
    dca4:	20000320 	.word	0x20000320

0000dca8 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I>:
    dca8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcac:	460f      	mov	r7, r1
    dcae:	4605      	mov	r5, r0
    dcb0:	2102      	movs	r1, #2
    dcb2:	4690      	mov	r8, r2
    dcb4:	460e      	mov	r6, r1
    dcb6:	20ff      	movs	r0, #255	; 0xff
    dcb8:	f002 ffb7 	bl	10c2a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    dcbc:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    dcc0:	1cc0      	adds	r0, r0, #3
    dcc2:	ea00 0401 	and.w	r4, r0, r1
    dcc6:	b325      	cbz	r5, dd12 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x6a>
    dcc8:	f8df 9050 	ldr.w	r9, [pc, #80]	; dd1c <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x74>
    dccc:	fb04 5307 	mla	r3, r4, r7, r5
    dcd0:	e9c9 5301 	strd	r5, r3, [r9, #4]
    dcd4:	f8a9 4000 	strh.w	r4, [r9]
    dcd8:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
    dcdc:	2100      	movs	r1, #0
    dcde:	4618      	mov	r0, r3
    dce0:	f002 f902 	bl	fee8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dce4:	2500      	movs	r5, #0
    dce6:	46aa      	mov	sl, r5
    dce8:	e011      	b.n	dd0e <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x66>
    dcea:	4628      	mov	r0, r5
    dcec:	f000 f818 	bl	dd20 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x78>
    dcf0:	4621      	mov	r1, r4
    dcf2:	22ff      	movs	r2, #255	; 0xff
    dcf4:	4633      	mov	r3, r6
    dcf6:	f8cd 8000 	str.w	r8, [sp]
    dcfa:	f002 ff34 	bl	10b66 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    dcfe:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
    dd02:	f8d9 1008 	ldr.w	r1, [r9, #8]
    dd06:	1c6d      	adds	r5, r5, #1
    dd08:	b2ad      	uxth	r5, r5
    dd0a:	f801 a002 	strb.w	sl, [r1, r2]
    dd0e:	42bd      	cmp	r5, r7
    dd10:	d3eb      	bcc.n	dcea <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x42>
    dd12:	1de4      	adds	r4, r4, #7
    dd14:	fb04 f007 	mul.w	r0, r4, r7
    dd18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd1c:	200002c0 	.word	0x200002c0
    dd20:	4902      	ldr	r1, [pc, #8]	; (dd2c <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x84>)
    dd22:	684a      	ldr	r2, [r1, #4]
    dd24:	8809      	ldrh	r1, [r1, #0]
    dd26:	fb00 2001 	mla	r0, r0, r1, r2
    dd2a:	4770      	bx	lr
    dd2c:	200002c0 	.word	0x200002c0

0000dd30 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    dd30:	b570      	push	{r4, r5, r6, lr}
    dd32:	4605      	mov	r5, r0
    dd34:	4616      	mov	r6, r2
    dd36:	460c      	mov	r4, r1
    dd38:	2002      	movs	r0, #2
    dd3a:	f000 fa85 	bl	e248 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    dd3e:	4905      	ldr	r1, [pc, #20]	; (dd54 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x24>)
    dd40:	2001      	movs	r0, #1
    dd42:	7008      	strb	r0, [r1, #0]
    dd44:	4904      	ldr	r1, [pc, #16]	; (dd58 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    dd46:	1ef0      	subs	r0, r6, #3
    dd48:	6008      	str	r0, [r1, #0]
    dd4a:	4804      	ldr	r0, [pc, #16]	; (dd5c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    dd4c:	6005      	str	r5, [r0, #0]
    dd4e:	1f00      	subs	r0, r0, #4
    dd50:	6004      	str	r4, [r0, #0]
    dd52:	bd70      	pop	{r4, r5, r6, pc}
    dd54:	20000321 	.word	0x20000321
    dd58:	4000f510 	.word	0x4000f510
    dd5c:	4000f508 	.word	0x4000f508

0000dd60 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    dd60:	4810      	ldr	r0, [pc, #64]	; (dda4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x44>)
    dd62:	7801      	ldrb	r1, [r0, #0]
    dd64:	b1a9      	cbz	r1, dd92 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x32>
    dd66:	4a10      	ldr	r2, [pc, #64]	; (dda8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x48>)
    dd68:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    dd6c:	6011      	str	r1, [r2, #0]
    dd6e:	490f      	ldr	r1, [pc, #60]	; (ddac <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x4c>)
    dd70:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    dd74:	2200      	movs	r2, #0
    dd76:	2b00      	cmp	r3, #0
    dd78:	bf1c      	itt	ne
    dd7a:	f8d1 3104 	ldrne.w	r3, [r1, #260]	; 0x104
    dd7e:	2b00      	cmpne	r3, #0
    dd80:	d002      	beq.n	dd88 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x28>
    dd82:	f8d1 1108 	ldr.w	r1, [r1, #264]	; 0x108
    dd86:	b141      	cbz	r1, dd9a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3a>
    dd88:	7042      	strb	r2, [r0, #1]
    dd8a:	f04f 0110 	mov.w	r1, #16
    dd8e:	7081      	strb	r1, [r0, #2]
    dd90:	7002      	strb	r2, [r0, #0]
    dd92:	f04f 0000 	mov.w	r0, #0
    dd96:	f000 ba57 	b.w	e248 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    dd9a:	2101      	movs	r1, #1
    dd9c:	7041      	strb	r1, [r0, #1]
    dd9e:	4904      	ldr	r1, [pc, #16]	; (ddb0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x50>)
    dda0:	6809      	ldr	r1, [r1, #0]
    dda2:	e7f4      	b.n	dd8e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2e>
    dda4:	20000321 	.word	0x20000321
    dda8:	4001f508 	.word	0x4001f508
    ddac:	4000f000 	.word	0x4000f000
    ddb0:	4000f400 	.word	0x4000f400

0000ddb4 <sym_MSITFZMEKFRIBNA2WU2C6VUZYGJRSJIVBH2SBPI>:
    ddb4:	b510      	push	{r4, lr}
    ddb6:	2002      	movs	r0, #2
    ddb8:	f000 fa46 	bl	e248 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    ddbc:	4806      	ldr	r0, [pc, #24]	; (ddd8 <sym_MSITFZMEKFRIBNA2WU2C6VUZYGJRSJIVBH2SBPI+0x24>)
    ddbe:	2201      	movs	r2, #1
    ddc0:	2100      	movs	r1, #0
    ddc2:	7002      	strb	r2, [r0, #0]
    ddc4:	4805      	ldr	r0, [pc, #20]	; (dddc <sym_MSITFZMEKFRIBNA2WU2C6VUZYGJRSJIVBH2SBPI+0x28>)
    ddc6:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    ddca:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    ddce:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    ddd2:	6002      	str	r2, [r0, #0]
    ddd4:	bd10      	pop	{r4, pc}
    ddd6:	0000      	.short	0x0000
    ddd8:	20000321 	.word	0x20000321
    dddc:	4000f000 	.word	0x4000f000

0000dde0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    dde0:	b510      	push	{r4, lr}
    dde2:	2002      	movs	r0, #2
    dde4:	f000 fa30 	bl	e248 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    dde8:	4907      	ldr	r1, [pc, #28]	; (de08 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x28>)
    ddea:	2001      	movs	r0, #1
    ddec:	7008      	strb	r0, [r1, #0]
    ddee:	4907      	ldr	r1, [pc, #28]	; (de0c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x2c>)
    ddf0:	2000      	movs	r0, #0
    ddf2:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    ddf6:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    ddfa:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    ddfe:	4904      	ldr	r1, [pc, #16]	; (de10 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x30>)
    de00:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    de04:	6008      	str	r0, [r1, #0]
    de06:	bd10      	pop	{r4, pc}
    de08:	20000321 	.word	0x20000321
    de0c:	4000f000 	.word	0x4000f000
    de10:	4001f504 	.word	0x4001f504

0000de14 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    de14:	4803      	ldr	r0, [pc, #12]	; (de24 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    de16:	2100      	movs	r1, #0
    de18:	7001      	strb	r1, [r0, #0]
    de1a:	7041      	strb	r1, [r0, #1]
    de1c:	2110      	movs	r1, #16
    de1e:	7081      	strb	r1, [r0, #2]
    de20:	4770      	bx	lr
    de22:	0000      	.short	0x0000
    de24:	20000321 	.word	0x20000321

0000de28 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    de28:	480c      	ldr	r0, [pc, #48]	; (de5c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x34>)
    de2a:	7801      	ldrb	r1, [r0, #0]
    de2c:	2900      	cmp	r1, #0
    de2e:	bf04      	itt	eq
    de30:	7880      	ldrbeq	r0, [r0, #2]
    de32:	4770      	bxeq	lr
    de34:	480a      	ldr	r0, [pc, #40]	; (de60 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x38>)
    de36:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    de3a:	2900      	cmp	r1, #0
    de3c:	bf1c      	itt	ne
    de3e:	f8d0 1104 	ldrne.w	r1, [r0, #260]	; 0x104
    de42:	2900      	cmpne	r1, #0
    de44:	d002      	beq.n	de4c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>
    de46:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    de4a:	b110      	cbz	r0, de52 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x2a>
    de4c:	f04f 0010 	mov.w	r0, #16
    de50:	4770      	bx	lr
    de52:	4804      	ldr	r0, [pc, #16]	; (de64 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x3c>)
    de54:	6800      	ldr	r0, [r0, #0]
    de56:	b2c0      	uxtb	r0, r0
    de58:	4770      	bx	lr
    de5a:	0000      	.short	0x0000
    de5c:	20000321 	.word	0x20000321
    de60:	4000f000 	.word	0x4000f000
    de64:	4000f400 	.word	0x4000f400

0000de68 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    de68:	4811      	ldr	r0, [pc, #68]	; (deb0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x48>)
    de6a:	b510      	push	{r4, lr}
    de6c:	7802      	ldrb	r2, [r0, #0]
    de6e:	4b11      	ldr	r3, [pc, #68]	; (deb4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4c>)
    de70:	7840      	ldrb	r0, [r0, #1]
    de72:	21c8      	movs	r1, #200	; 0xc8
    de74:	1e49      	subs	r1, r1, #1
    de76:	b2c9      	uxtb	r1, r1
    de78:	b15a      	cbz	r2, de92 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2a>
    de7a:	f8d3 c100 	ldr.w	ip, [r3, #256]	; 0x100
    de7e:	f1bc 0f00 	cmp.w	ip, #0
    de82:	d00c      	beq.n	de9e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x36>
    de84:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    de88:	b138      	cbz	r0, de9a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x32>
    de8a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    de8e:	b160      	cbz	r0, deaa <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x42>
    de90:	e003      	b.n	de9a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x32>
    de92:	2802      	cmp	r0, #2
    de94:	d003      	beq.n	de9e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x36>
    de96:	2801      	cmp	r0, #1
    de98:	d007      	beq.n	deaa <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x42>
    de9a:	2000      	movs	r0, #0
    de9c:	bd10      	pop	{r4, pc}
    de9e:	2900      	cmp	r1, #0
    dea0:	d1e8      	bne.n	de74 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0xc>
    dea2:	2193      	movs	r1, #147	; 0x93
    dea4:	203b      	movs	r0, #59	; 0x3b
    dea6:	f7f6 f84b 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    deaa:	2001      	movs	r0, #1
    deac:	bd10      	pop	{r4, pc}
    deae:	0000      	.short	0x0000
    deb0:	20000321 	.word	0x20000321
    deb4:	4000f000 	.word	0x4000f000

0000deb8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    deb8:	4a09      	ldr	r2, [pc, #36]	; (dee0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    deba:	b510      	push	{r4, lr}
    debc:	e9c2 0102 	strd	r0, r1, [r2, #8]
    dec0:	4908      	ldr	r1, [pc, #32]	; (dee4 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x2c>)
    dec2:	4610      	mov	r0, r2
    dec4:	f7f5 fea0 	bl	3c08 <mpsl_fem_lna_configuration_set>
    dec8:	2800      	cmp	r0, #0
    deca:	bf14      	ite	ne
    decc:	f1b0 3fff 	cmpne.w	r0, #4294967295	; 0xffffffff
    ded0:	bd10      	popeq	{r4, pc}
    ded2:	f04f 017d 	mov.w	r1, #125	; 0x7d
    ded6:	f04f 0040 	mov.w	r0, #64	; 0x40
    deda:	f7f6 f831 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dede:	0000      	.short	0x0000
    dee0:	200002cc 	.word	0x200002cc
    dee4:	0000df18 	.word	0x0000df18

0000dee8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    dee8:	4a09      	ldr	r2, [pc, #36]	; (df10 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    deea:	b510      	push	{r4, lr}
    deec:	e9c2 0102 	strd	r0, r1, [r2, #8]
    def0:	4908      	ldr	r1, [pc, #32]	; (df14 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x2c>)
    def2:	4610      	mov	r0, r2
    def4:	f7f5 fe94 	bl	3c20 <mpsl_fem_pa_configuration_set>
    def8:	2800      	cmp	r0, #0
    defa:	bf14      	ite	ne
    defc:	f1b0 3fff 	cmpne.w	r0, #4294967295	; 0xffffffff
    df00:	bd10      	popeq	{r4, pc}
    df02:	f04f 0172 	mov.w	r1, #114	; 0x72
    df06:	f04f 0040 	mov.w	r0, #64	; 0x40
    df0a:	f7f6 f819 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df0e:	0000      	.short	0x0000
    df10:	200002cc 	.word	0x200002cc
    df14:	0000df18 	.word	0x0000df18
    df18:	00000001 	.word	0x00000001
    df1c:	40001110 	.word	0x40001110
	...

0000df30 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
    df30:	4a07      	ldr	r2, [pc, #28]	; (df50 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
    df32:	b510      	push	{r4, lr}
    df34:	7853      	ldrb	r3, [r2, #1]
    df36:	b133      	cbz	r3, df46 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
    df38:	4b06      	ldr	r3, [pc, #24]	; (df54 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
    df3a:	6019      	str	r1, [r3, #0]
    df3c:	1d19      	adds	r1, r3, #4
    df3e:	6008      	str	r0, [r1, #0]
    df40:	2001      	movs	r0, #1
    df42:	7090      	strb	r0, [r2, #2]
    df44:	bd10      	pop	{r4, pc}
    df46:	21ba      	movs	r1, #186	; 0xba
    df48:	203c      	movs	r0, #60	; 0x3c
    df4a:	f7f5 fff9 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df4e:	0000      	.short	0x0000
    df50:	20000324 	.word	0x20000324
    df54:	4000f50c 	.word	0x4000f50c

0000df58 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
    df58:	4811      	ldr	r0, [pc, #68]	; (dfa0 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x48>)
    df5a:	b510      	push	{r4, lr}
    df5c:	7801      	ldrb	r1, [r0, #0]
    df5e:	2900      	cmp	r1, #0
    df60:	bf1c      	itt	ne
    df62:	7881      	ldrbne	r1, [r0, #2]
    df64:	2900      	cmpne	r1, #0
    df66:	d00a      	beq.n	df7e <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x26>
    df68:	4a0e      	ldr	r2, [pc, #56]	; (dfa4 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x4c>)
    df6a:	f04f 0100 	mov.w	r1, #0
    df6e:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
    df72:	7900      	ldrb	r0, [r0, #4]
    df74:	2802      	cmp	r0, #2
    df76:	bf18      	it	ne
    df78:	2803      	cmpne	r0, #3
    df7a:	d006      	beq.n	df8a <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x32>
    df7c:	e00b      	b.n	df96 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x3e>
    df7e:	f04f 01e1 	mov.w	r1, #225	; 0xe1
    df82:	f04f 003c 	mov.w	r0, #60	; 0x3c
    df86:	f7f5 ffdb 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df8a:	4807      	ldr	r0, [pc, #28]	; (dfa8 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x50>)
    df8c:	f8c0 1150 	str.w	r1, [r0, #336]	; 0x150
    df90:	4806      	ldr	r0, [pc, #24]	; (dfac <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x54>)
    df92:	2103      	movs	r1, #3
    df94:	6001      	str	r1, [r0, #0]
    df96:	4907      	ldr	r1, [pc, #28]	; (dfb4 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x5c>)
    df98:	4805      	ldr	r0, [pc, #20]	; (dfb0 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x58>)
    df9a:	6008      	str	r0, [r1, #0]
    df9c:	bd10      	pop	{r4, pc}
    df9e:	0000      	.short	0x0000
    dfa0:	20000324 	.word	0x20000324
    dfa4:	4000f000 	.word	0x4000f000
    dfa8:	40001000 	.word	0x40001000
    dfac:	4000f51c 	.word	0x4000f51c
    dfb0:	02020000 	.word	0x02020000
    dfb4:	4001f504 	.word	0x4001f504

0000dfb8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    dfb8:	b570      	push	{r4, r5, r6, lr}
    dfba:	4c0c      	ldr	r4, [pc, #48]	; (dfec <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    dfbc:	2500      	movs	r5, #0
    dfbe:	7820      	ldrb	r0, [r4, #0]
    dfc0:	b168      	cbz	r0, dfde <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x26>
    dfc2:	490c      	ldr	r1, [pc, #48]	; (dff4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x3c>)
    dfc4:	480a      	ldr	r0, [pc, #40]	; (dff0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    dfc6:	6008      	str	r0, [r1, #0]
    dfc8:	480b      	ldr	r0, [pc, #44]	; (dff8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x40>)
    dfca:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    dfce:	2800      	cmp	r0, #0
    dfd0:	bf08      	it	eq
    dfd2:	70e5      	strbeq	r5, [r4, #3]
    dfd4:	d002      	beq.n	dfdc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x24>
    dfd6:	4809      	ldr	r0, [pc, #36]	; (dffc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x44>)
    dfd8:	6800      	ldr	r0, [r0, #0]
    dfda:	70e0      	strb	r0, [r4, #3]
    dfdc:	7025      	strb	r5, [r4, #0]
    dfde:	2000      	movs	r0, #0
    dfe0:	f000 f932 	bl	e248 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    dfe4:	7065      	strb	r5, [r4, #1]
    dfe6:	70a5      	strb	r5, [r4, #2]
    dfe8:	bd70      	pop	{r4, r5, r6, pc}
    dfea:	0000      	.short	0x0000
    dfec:	20000324 	.word	0x20000324
    dff0:	02020000 	.word	0x02020000
    dff4:	4001f508 	.word	0x4001f508
    dff8:	4000f000 	.word	0x4000f000
    dffc:	4000f400 	.word	0x4000f400

0000e000 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
    e000:	480f      	ldr	r0, [pc, #60]	; (e040 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    e002:	b510      	push	{r4, lr}
    e004:	7801      	ldrb	r1, [r0, #0]
    e006:	2900      	cmp	r1, #0
    e008:	bf1c      	itt	ne
    e00a:	7880      	ldrbne	r0, [r0, #2]
    e00c:	2800      	cmpne	r0, #0
    e00e:	d013      	beq.n	e038 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>
    e010:	480c      	ldr	r0, [pc, #48]	; (e044 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x44>)
    e012:	f04f 0100 	mov.w	r1, #0
    e016:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    e01a:	4a0b      	ldr	r2, [pc, #44]	; (e048 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x48>)
    e01c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    e020:	6011      	str	r1, [r2, #0]
    e022:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    e026:	2901      	cmp	r1, #1
    e028:	bf18      	it	ne
    e02a:	bd10      	popne	{r4, pc}
    e02c:	2101      	movs	r1, #1
    e02e:	6041      	str	r1, [r0, #4]
    e030:	0448      	lsls	r0, r1, #17
    e032:	4906      	ldr	r1, [pc, #24]	; (e04c <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x4c>)
    e034:	6008      	str	r0, [r1, #0]
    e036:	bd10      	pop	{r4, pc}
    e038:	21d1      	movs	r1, #209	; 0xd1
    e03a:	203c      	movs	r0, #60	; 0x3c
    e03c:	f7f5 ff80 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e040:	20000324 	.word	0x20000324
    e044:	4000f000 	.word	0x4000f000
    e048:	4001f504 	.word	0x4001f504
    e04c:	4001f508 	.word	0x4001f508

0000e050 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    e050:	4803      	ldr	r0, [pc, #12]	; (e060 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
    e052:	2100      	movs	r1, #0
    e054:	7001      	strb	r1, [r0, #0]
    e056:	7041      	strb	r1, [r0, #1]
    e058:	7081      	strb	r1, [r0, #2]
    e05a:	70c1      	strb	r1, [r0, #3]
    e05c:	4770      	bx	lr
    e05e:	0000      	.short	0x0000
    e060:	20000324 	.word	0x20000324

0000e064 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
    e064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e068:	4604      	mov	r4, r0
    e06a:	461d      	mov	r5, r3
    e06c:	4617      	mov	r7, r2
    e06e:	4688      	mov	r8, r1
    e070:	2001      	movs	r0, #1
    e072:	f000 f8e9 	bl	e248 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    e076:	4e13      	ldr	r6, [pc, #76]	; (e0c4 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    e078:	4813      	ldr	r0, [pc, #76]	; (e0c8 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    e07a:	7135      	strb	r5, [r6, #4]
    e07c:	f8c0 8000 	str.w	r8, [r0]
    e080:	4912      	ldr	r1, [pc, #72]	; (e0cc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
    e082:	ea44 4005 	orr.w	r0, r4, r5, lsl #16
    e086:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    e08a:	6008      	str	r0, [r1, #0]
    e08c:	f001 fe60 	bl	fd50 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    e090:	b928      	cbnz	r0, e09e <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3a>
    e092:	480f      	ldr	r0, [pc, #60]	; (e0d0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x6c>)
    e094:	6801      	ldr	r1, [r0, #0]
    e096:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    e09a:	4339      	orrs	r1, r7
    e09c:	6001      	str	r1, [r0, #0]
    e09e:	490e      	ldr	r1, [pc, #56]	; (e0d8 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x74>)
    e0a0:	480c      	ldr	r0, [pc, #48]	; (e0d4 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x70>)
    e0a2:	6008      	str	r0, [r1, #0]
    e0a4:	490d      	ldr	r1, [pc, #52]	; (e0dc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x78>)
    e0a6:	2c00      	cmp	r4, #0
    e0a8:	bf0c      	ite	eq
    e0aa:	480d      	ldreq	r0, [pc, #52]	; (e0e0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x7c>)
    e0ac:	480d      	ldrne	r0, [pc, #52]	; (e0e4 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x80>)
    e0ae:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    e0b2:	bf0c      	ite	eq
    e0b4:	480c      	ldreq	r0, [pc, #48]	; (e0e8 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x84>)
    e0b6:	480d      	ldrne	r0, [pc, #52]	; (e0ec <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x88>)
    e0b8:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    e0bc:	2001      	movs	r0, #1
    e0be:	7070      	strb	r0, [r6, #1]
    e0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e0c4:	20000324 	.word	0x20000324
    e0c8:	4000f508 	.word	0x4000f508
    e0cc:	4000f504 	.word	0x4000f504
    e0d0:	4000f518 	.word	0x4000f518
    e0d4:	02020000 	.word	0x02020000
    e0d8:	4001f508 	.word	0x4001f508
    e0dc:	4001f088 	.word	0x4001f088
    e0e0:	4000f100 	.word	0x4000f100
    e0e4:	40001150 	.word	0x40001150
    e0e8:	4000f004 	.word	0x4000f004
    e0ec:	4000f00c 	.word	0x4000f00c

0000e0f0 <sym_IGA5ZEPU34KNQ4RFU4J67PZ2YHJD2Q5L4PZMUQY>:
    e0f0:	490c      	ldr	r1, [pc, #48]	; (e124 <sym_IGA5ZEPU34KNQ4RFU4J67PZ2YHJD2Q5L4PZMUQY+0x34>)
    e0f2:	b510      	push	{r4, lr}
    e0f4:	7848      	ldrb	r0, [r1, #1]
    e0f6:	2800      	cmp	r0, #0
    e0f8:	bf1c      	itt	ne
    e0fa:	7888      	ldrbne	r0, [r1, #2]
    e0fc:	2800      	cmpne	r0, #0
    e0fe:	d00b      	beq.n	e118 <sym_IGA5ZEPU34KNQ4RFU4J67PZ2YHJD2Q5L4PZMUQY+0x28>
    e100:	f04f 0001 	mov.w	r0, #1
    e104:	7008      	strb	r0, [r1, #0]
    e106:	4908      	ldr	r1, [pc, #32]	; (e128 <sym_IGA5ZEPU34KNQ4RFU4J67PZ2YHJD2Q5L4PZMUQY+0x38>)
    e108:	f04f 0200 	mov.w	r2, #0
    e10c:	f8c1 2104 	str.w	r2, [r1, #260]	; 0x104
    e110:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    e114:	6008      	str	r0, [r1, #0]
    e116:	bd10      	pop	{r4, pc}
    e118:	f240 110b 	movw	r1, #267	; 0x10b
    e11c:	f04f 003c 	mov.w	r0, #60	; 0x3c
    e120:	f7f5 ff0e 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e124:	20000324 	.word	0x20000324
    e128:	4000f000 	.word	0x4000f000

0000e12c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
    e12c:	4808      	ldr	r0, [pc, #32]	; (e150 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
    e12e:	b510      	push	{r4, lr}
    e130:	7841      	ldrb	r1, [r0, #1]
    e132:	b149      	cbz	r1, e148 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
    e134:	2101      	movs	r1, #1
    e136:	7001      	strb	r1, [r0, #0]
    e138:	4806      	ldr	r0, [pc, #24]	; (e154 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
    e13a:	2200      	movs	r2, #0
    e13c:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    e140:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    e144:	6001      	str	r1, [r0, #0]
    e146:	bd10      	pop	{r4, pc}
    e148:	21c5      	movs	r1, #197	; 0xc5
    e14a:	203c      	movs	r0, #60	; 0x3c
    e14c:	f7f5 fef8 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e150:	20000324 	.word	0x20000324
    e154:	4000f000 	.word	0x4000f000

0000e158 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    e158:	4807      	ldr	r0, [pc, #28]	; (e178 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    e15a:	7801      	ldrb	r1, [r0, #0]
    e15c:	2900      	cmp	r1, #0
    e15e:	bf04      	itt	eq
    e160:	78c0      	ldrbeq	r0, [r0, #3]
    e162:	4770      	bxeq	lr
    e164:	4805      	ldr	r0, [pc, #20]	; (e17c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    e166:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    e16a:	2800      	cmp	r0, #0
    e16c:	bf08      	it	eq
    e16e:	4770      	bxeq	lr
    e170:	4803      	ldr	r0, [pc, #12]	; (e180 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x28>)
    e172:	6800      	ldr	r0, [r0, #0]
    e174:	b2c0      	uxtb	r0, r0
    e176:	4770      	bx	lr
    e178:	20000324 	.word	0x20000324
    e17c:	4000f000 	.word	0x4000f000
    e180:	4000f400 	.word	0x4000f400

0000e184 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    e184:	4901      	ldr	r1, [pc, #4]	; (e18c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    e186:	2001      	movs	r0, #1
    e188:	6088      	str	r0, [r1, #8]
    e18a:	4770      	bx	lr
    e18c:	4000f000 	.word	0x4000f000

0000e190 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    e190:	2800      	cmp	r0, #0
    e192:	bf08      	it	eq
    e194:	4770      	bxeq	lr
    e196:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e19a:	481c      	ldr	r0, [pc, #112]	; (e20c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    e19c:	7800      	ldrb	r0, [r0, #0]
    e19e:	b1e0      	cbz	r0, e1da <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4a>
    e1a0:	4c1b      	ldr	r4, [pc, #108]	; (e210 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    e1a2:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    e1a6:	2800      	cmp	r0, #0
    e1a8:	bf18      	it	ne
    e1aa:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e1ae:	f04f 0902 	mov.w	r9, #2
    e1b2:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    e1b6:	4f17      	ldr	r7, [pc, #92]	; (e214 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
    e1b8:	6838      	ldr	r0, [r7, #0]
    e1ba:	f3c0 1800 	ubfx	r8, r0, #4, #1
    e1be:	6838      	ldr	r0, [r7, #0]
    e1c0:	f040 0010 	orr.w	r0, r0, #16
    e1c4:	6038      	str	r0, [r7, #0]
    e1c6:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    e1ca:	2800      	cmp	r0, #0
    e1cc:	bf04      	itt	eq
    e1ce:	f44f 4500 	moveq.w	r5, #32768	; 0x8000
    e1d2:	f04f 26e0 	moveq.w	r6, #3758153728	; 0xe000e000
    e1d6:	d10d      	bne.n	e1f4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x64>
    e1d8:	e004      	b.n	e1e4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    e1da:	f240 1153 	movw	r1, #339	; 0x153
    e1de:	203c      	movs	r0, #60	; 0x3c
    e1e0:	f7f5 feae 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e1e4:	f8c6 5280 	str.w	r5, [r6, #640]	; 0x280
    e1e8:	f7f5 fc1a 	bl	3a20 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    e1ec:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    e1f0:	2800      	cmp	r0, #0
    e1f2:	d0f7      	beq.n	e1e4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    e1f4:	f1b8 0f00 	cmp.w	r8, #0
    e1f8:	d103      	bne.n	e202 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x72>
    e1fa:	6838      	ldr	r0, [r7, #0]
    e1fc:	f020 0010 	bic.w	r0, r0, #16
    e200:	6038      	str	r0, [r7, #0]
    e202:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    e206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e20a:	0000      	.short	0x0000
    e20c:	20000324 	.word	0x20000324
    e210:	4000f000 	.word	0x4000f000
    e214:	e000ed10 	.word	0xe000ed10

0000e218 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    e218:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    e21c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    e220:	2000      	movs	r0, #0
    e222:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    e226:	f3bf 8f4f 	dsb	sy
    e22a:	f3bf 8f6f 	isb	sy
    e22e:	4904      	ldr	r1, [pc, #16]	; (e240 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x28>)
    e230:	6008      	str	r0, [r1, #0]
    e232:	6008      	str	r0, [r1, #0]
    e234:	4903      	ldr	r1, [pc, #12]	; (e244 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x2c>)
    e236:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    e23a:	6008      	str	r0, [r1, #0]
    e23c:	4770      	bx	lr
    e23e:	0000      	.short	0x0000
    e240:	4000f500 	.word	0x4000f500
    e244:	4001f508 	.word	0x4001f508

0000e248 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    e248:	4912      	ldr	r1, [pc, #72]	; (e294 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>)
    e24a:	b510      	push	{r4, lr}
    e24c:	2200      	movs	r2, #0
    e24e:	600a      	str	r2, [r1, #0]
    e250:	600a      	str	r2, [r1, #0]
    e252:	4b11      	ldr	r3, [pc, #68]	; (e298 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x50>)
    e254:	f04f 7220 	mov.w	r2, #41943040	; 0x2800000
    e258:	601a      	str	r2, [r3, #0]
    e25a:	2800      	cmp	r0, #0
    e25c:	bf08      	it	eq
    e25e:	bd10      	popeq	{r4, pc}
    e260:	4a0e      	ldr	r2, [pc, #56]	; (e29c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x54>)
    e262:	4b0f      	ldr	r3, [pc, #60]	; (e2a0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x58>)
    e264:	f8df c03c 	ldr.w	ip, [pc, #60]	; e2a4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x5c>
    e268:	2801      	cmp	r0, #1
    e26a:	d005      	beq.n	e278 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    e26c:	2802      	cmp	r0, #2
    e26e:	d008      	beq.n	e282 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    e270:	2183      	movs	r1, #131	; 0x83
    e272:	203d      	movs	r0, #61	; 0x3d
    e274:	f7f5 fe64 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e278:	2002      	movs	r0, #2
    e27a:	6008      	str	r0, [r1, #0]
    e27c:	601a      	str	r2, [r3, #0]
    e27e:	0600      	lsls	r0, r0, #24
    e280:	e004      	b.n	e28c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>
    e282:	2003      	movs	r0, #3
    e284:	6008      	str	r0, [r1, #0]
    e286:	601a      	str	r2, [r3, #0]
    e288:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    e28c:	f8cc 0000 	str.w	r0, [ip]
    e290:	bd10      	pop	{r4, pc}
    e292:	0000      	.short	0x0000
    e294:	4000f500 	.word	0x4000f500
    e298:	4001f508 	.word	0x4001f508
    e29c:	200013c7 	.word	0x200013c7
    e2a0:	4000f514 	.word	0x4000f514
    e2a4:	4001f504 	.word	0x4001f504

0000e2a8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    e2a8:	4805      	ldr	r0, [pc, #20]	; (e2c0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    e2aa:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    e2ae:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    e2b2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    e2b6:	2100      	movs	r1, #0
    e2b8:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    e2bc:	4770      	bx	lr
    e2be:	0000      	.short	0x0000
    e2c0:	40001000 	.word	0x40001000

0000e2c4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    e2c4:	4904      	ldr	r1, [pc, #16]	; (e2d8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    e2c6:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    e2ca:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    e2ce:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    e2d2:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    e2d6:	4770      	bx	lr
    e2d8:	40001000 	.word	0x40001000

0000e2dc <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    e2dc:	4801      	ldr	r0, [pc, #4]	; (e2e4 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    e2de:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    e2e2:	4770      	bx	lr
    e2e4:	2000106c 	.word	0x2000106c

0000e2e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    e2e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e2ec:	f7f5 fbe8 	bl	3ac0 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>
    e2f0:	f7f5 fc56 	bl	3ba0 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>
    e2f4:	4c2e      	ldr	r4, [pc, #184]	; (e3b0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xc8>)
    e2f6:	4607      	mov	r7, r0
    e2f8:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    e2fc:	f010 0f10 	tst.w	r0, #16
    e300:	bf14      	ite	ne
    e302:	f04f 0801 	movne.w	r8, #1
    e306:	f04f 0800 	moveq.w	r8, #0
    e30a:	2010      	movs	r0, #16
    e30c:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    e310:	2002      	movs	r0, #2
    e312:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    e316:	4d27      	ldr	r5, [pc, #156]	; (e3b4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xcc>)
    e318:	4928      	ldr	r1, [pc, #160]	; (e3bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xd4>)
    e31a:	2600      	movs	r6, #0
    e31c:	f885 602c 	strb.w	r6, [r5, #44]	; 0x2c
    e320:	4825      	ldr	r0, [pc, #148]	; (e3b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xd0>)
    e322:	6008      	str	r0, [r1, #0]
    e324:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    e328:	f04f 0901 	mov.w	r9, #1
    e32c:	f010 0fff 	tst.w	r0, #255	; 0xff
    e330:	d017      	beq.n	e362 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7a>
    e332:	20ff      	movs	r0, #255	; 0xff
    e334:	f88d 0000 	strb.w	r0, [sp]
    e338:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    e33c:	f8c4 9010 	str.w	r9, [r4, #16]
    e340:	e005      	b.n	e34e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x66>
    e342:	bf00      	nop
    e344:	f89d 0000 	ldrb.w	r0, [sp]
    e348:	1e40      	subs	r0, r0, #1
    e34a:	f88d 0000 	strb.w	r0, [sp]
    e34e:	f89d 1000 	ldrb.w	r1, [sp]
    e352:	b119      	cbz	r1, e35c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x74>
    e354:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    e358:	2800      	cmp	r0, #0
    e35a:	d0f3      	beq.n	e344 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5c>
    e35c:	f89d 0000 	ldrb.w	r0, [sp]
    e360:	b150      	cbz	r0, e378 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>
    e362:	7da8      	ldrb	r0, [r5, #22]
    e364:	2896      	cmp	r0, #150	; 0x96
    e366:	d30e      	bcc.n	e386 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9e>
    e368:	7a68      	ldrb	r0, [r5, #9]
    e36a:	2801      	cmp	r0, #1
    e36c:	d009      	beq.n	e382 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9a>
    e36e:	2802      	cmp	r0, #2
    e370:	bf08      	it	eq
    e372:	f005 fcdb 	bleq	13d2c <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    e376:	e006      	b.n	e386 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9e>
    e378:	f240 718f 	movw	r1, #1935	; 0x78f
    e37c:	203e      	movs	r0, #62	; 0x3e
    e37e:	f7f5 fddf 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e382:	f005 fce1 	bl	13d48 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    e386:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    e38a:	2000      	movs	r0, #0
    e38c:	f001 fb1e 	bl	f9cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    e390:	71ee      	strb	r6, [r5, #7]
    e392:	722e      	strb	r6, [r5, #8]
    e394:	726e      	strb	r6, [r5, #9]
    e396:	f1b8 0f00 	cmp.w	r8, #0
    e39a:	bf1c      	itt	ne
    e39c:	2010      	movne	r0, #16
    e39e:	f8c4 0304 	strne.w	r0, [r4, #772]	; 0x304
    e3a2:	2f00      	cmp	r7, #0
    e3a4:	bf18      	it	ne
    e3a6:	f8c4 9010 	strne.w	r9, [r4, #16]
    e3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e3ae:	0000      	.short	0x0000
    e3b0:	40001000 	.word	0x40001000
    e3b4:	2000106c 	.word	0x2000106c
    e3b8:	0c0e0000 	.word	0x0c0e0000
    e3bc:	4001f508 	.word	0x4001f508

0000e3c0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    e3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e3c4:	4c87      	ldr	r4, [pc, #540]	; (e5e4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x224>)
    e3c6:	4680      	mov	r8, r0
    e3c8:	b086      	sub	sp, #24
    e3ca:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    e3ce:	460f      	mov	r7, r1
    e3d0:	f010 0f01 	tst.w	r0, #1
    e3d4:	d046      	beq.n	e464 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xa4>
    e3d6:	4a84      	ldr	r2, [pc, #528]	; (e5e8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x228>)
    e3d8:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    e3dc:	6011      	str	r1, [r2, #0]
    e3de:	4d83      	ldr	r5, [pc, #524]	; (e5ec <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x22c>)
    e3e0:	f8d5 1200 	ldr.w	r1, [r5, #512]	; 0x200
    e3e4:	f041 0101 	orr.w	r1, r1, #1
    e3e8:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
    e3ec:	f040 0002 	orr.w	r0, r0, #2
    e3f0:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    e3f4:	4638      	mov	r0, r7
    e3f6:	f001 fb55 	bl	faa4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    e3fa:	f894 c015 	ldrb.w	ip, [r4, #21]
    e3fe:	f1bc 0f25 	cmp.w	ip, #37	; 0x25
    e402:	bf08      	it	eq
    e404:	f640 1162 	movweq	r1, #2402	; 0x962
    e408:	d01c      	beq.n	e444 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>
    e40a:	f1bc 0f26 	cmp.w	ip, #38	; 0x26
    e40e:	bf08      	it	eq
    e410:	f640 117a 	movweq	r1, #2426	; 0x97a
    e414:	d016      	beq.n	e444 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>
    e416:	f1bc 0f27 	cmp.w	ip, #39	; 0x27
    e41a:	bf08      	it	eq
    e41c:	f44f 611b 	moveq.w	r1, #2480	; 0x9b0
    e420:	d010      	beq.n	e444 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>
    e422:	f1bc 0f0a 	cmp.w	ip, #10
    e426:	ea4f 004c 	mov.w	r0, ip, lsl #1
    e42a:	bf94      	ite	ls
    e42c:	f600 1164 	addwls	r1, r0, #2404	; 0x964
    e430:	f600 1166 	addwhi	r1, r0, #2406	; 0x966
    e434:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    e438:	bf3c      	itt	cc
    e43a:	f6a1 1038 	subwcc	r0, r1, #2360	; 0x938
    e43e:	f440 7080 	orrcc.w	r0, r0, #256	; 0x100
    e442:	d301      	bcc.n	e448 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>
    e444:	f5a1 6016 	sub.w	r0, r1, #2400	; 0x960
    e448:	f8c5 0508 	str.w	r0, [r5, #1288]	; 0x508
    e44c:	4968      	ldr	r1, [pc, #416]	; (e5f0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x230>)
    e44e:	f00c 007f 	and.w	r0, ip, #127	; 0x7f
    e452:	6008      	str	r0, [r1, #0]
    e454:	2601      	movs	r6, #1
    e456:	f1b8 0f00 	cmp.w	r8, #0
    e45a:	d008      	beq.n	e46e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xae>
    e45c:	f1b8 0f01 	cmp.w	r8, #1
    e460:	d037      	beq.n	e4d2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x112>
    e462:	e08f      	b.n	e584 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x1c4>
    e464:	f240 611a 	movw	r1, #1562	; 0x61a
    e468:	203e      	movs	r0, #62	; 0x3e
    e46a:	f7f5 fd69 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e46e:	2f01      	cmp	r7, #1
    e470:	bf08      	it	eq
    e472:	2000      	moveq	r0, #0
    e474:	d00b      	beq.n	e48e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xce>
    e476:	2f02      	cmp	r7, #2
    e478:	bf08      	it	eq
    e47a:	2001      	moveq	r0, #1
    e47c:	d007      	beq.n	e48e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xce>
    e47e:	2f04      	cmp	r7, #4
    e480:	bf08      	it	eq
    e482:	2003      	moveq	r0, #3
    e484:	d003      	beq.n	e48e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xce>
    e486:	2f08      	cmp	r7, #8
    e488:	bf08      	it	eq
    e48a:	2002      	moveq	r0, #2
    e48c:	d135      	bne.n	e4fa <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x13a>
    e48e:	f994 2014 	ldrsb.w	r2, [r4, #20]
    e492:	ab05      	add	r3, sp, #20
    e494:	4661      	mov	r1, ip
    e496:	f7f1 ffad 	bl	3f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    e49a:	2800      	cmp	r0, #0
    e49c:	d139      	bne.n	e512 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x152>
    e49e:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    e4a2:	f001 faf9 	bl	fa98 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    e4a6:	f001 fc6f 	bl	fd88 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    e4aa:	b178      	cbz	r0, e4cc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x10c>
    e4ac:	4951      	ldr	r1, [pc, #324]	; (e5f4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x234>)
    e4ae:	680a      	ldr	r2, [r1, #0]
    e4b0:	0648      	lsls	r0, r1, #25
    e4b2:	2f02      	cmp	r7, #2
    e4b4:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    e4b8:	bf0c      	ite	eq
    e4ba:	f3c0 6006 	ubfxeq	r0, r0, #24, #7
    e4be:	f3c0 2006 	ubfxne	r0, r0, #8, #7
    e4c2:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
    e4c6:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    e4ca:	6008      	str	r0, [r1, #0]
    e4cc:	7266      	strb	r6, [r4, #9]
    e4ce:	602e      	str	r6, [r5, #0]
    e4d0:	e058      	b.n	e584 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x1c4>
    e4d2:	7a20      	ldrb	r0, [r4, #8]
    e4d4:	2801      	cmp	r0, #1
    e4d6:	d125      	bne.n	e524 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x164>
    e4d8:	7aa0      	ldrb	r0, [r4, #10]
    e4da:	2801      	cmp	r0, #1
    e4dc:	bf08      	it	eq
    e4de:	2000      	moveq	r0, #0
    e4e0:	d010      	beq.n	e504 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x144>
    e4e2:	2802      	cmp	r0, #2
    e4e4:	bf08      	it	eq
    e4e6:	2001      	moveq	r0, #1
    e4e8:	d00c      	beq.n	e504 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x144>
    e4ea:	2804      	cmp	r0, #4
    e4ec:	bf08      	it	eq
    e4ee:	2003      	moveq	r0, #3
    e4f0:	d008      	beq.n	e504 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x144>
    e4f2:	2808      	cmp	r0, #8
    e4f4:	bf08      	it	eq
    e4f6:	2002      	moveq	r0, #2
    e4f8:	d004      	beq.n	e504 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x144>
    e4fa:	f240 31ed 	movw	r1, #1005	; 0x3ed
    e4fe:	2006      	movs	r0, #6
    e500:	f7f5 fd1e 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e504:	f994 2014 	ldrsb.w	r2, [r4, #20]
    e508:	ab05      	add	r3, sp, #20
    e50a:	4661      	mov	r1, ip
    e50c:	f7f1 ff72 	bl	3f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    e510:	b120      	cbz	r0, e51c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x15c>
    e512:	f240 41de 	movw	r1, #1246	; 0x4de
    e516:	203e      	movs	r0, #62	; 0x3e
    e518:	f7f5 fd12 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e51c:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    e520:	f001 faba 	bl	fa98 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    e524:	20ff      	movs	r0, #255	; 0xff
    e526:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    e52a:	2000      	movs	r0, #0
    e52c:	f8c5 011c 	str.w	r0, [r5, #284]	; 0x11c
    e530:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    e534:	f440 7088 	orr.w	r0, r0, #272	; 0x110
    e538:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    e53c:	f001 fc3e 	bl	fdbc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    e540:	b178      	cbz	r0, e562 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x1a2>
    e542:	f017 0f0c 	tst.w	r7, #12
    e546:	d009      	beq.n	e55c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x19c>
    e548:	2001      	movs	r0, #1
    e54a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    e54e:	f001 fa3d 	bl	f9cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    e552:	63ee      	str	r6, [r5, #60]	; 0x3c
    e554:	642e      	str	r6, [r5, #64]	; 0x40
    e556:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    e55a:	e002      	b.n	e562 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x1a2>
    e55c:	2000      	movs	r0, #0
    e55e:	f001 fa35 	bl	f9cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    e562:	4638      	mov	r0, r7
    e564:	f001 fa7e 	bl	fa64 <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI>
    e568:	2002      	movs	r0, #2
    e56a:	7260      	strb	r0, [r4, #9]
    e56c:	f001 fc0c 	bl	fd88 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    e570:	b938      	cbnz	r0, e582 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x1c2>
    e572:	f001 fbf9 	bl	fd68 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    e576:	b920      	cbnz	r0, e582 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x1c2>
    e578:	481f      	ldr	r0, [pc, #124]	; (e5f8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x238>)
    e57a:	6801      	ldr	r1, [r0, #0]
    e57c:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    e580:	6001      	str	r1, [r0, #0]
    e582:	606e      	str	r6, [r5, #4]
    e584:	481d      	ldr	r0, [pc, #116]	; (e5fc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x23c>)
    e586:	64c6      	str	r6, [r0, #76]	; 0x4c
    e588:	481d      	ldr	r0, [pc, #116]	; (e600 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x240>)
    e58a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    e58e:	7da1      	ldrb	r1, [r4, #22]
    e590:	2996      	cmp	r1, #150	; 0x96
    e592:	d313      	bcc.n	e5bc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x1fc>
    e594:	f1b8 0f00 	cmp.w	r8, #0
    e598:	d007      	beq.n	e5aa <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x1ea>
    e59a:	f1b8 0f01 	cmp.w	r8, #1
    e59e:	d009      	beq.n	e5b4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x1f4>
    e5a0:	f240 6114 	movw	r1, #1556	; 0x614
    e5a4:	203e      	movs	r0, #62	; 0x3e
    e5a6:	f7f5 fccb 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5aa:	f100 0128 	add.w	r1, r0, #40	; 0x28
    e5ae:	f7ff fc9b 	bl	dee8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    e5b2:	e003      	b.n	e5bc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x1fc>
    e5b4:	f100 0129 	add.w	r1, r0, #41	; 0x29
    e5b8:	f7ff fc7e 	bl	deb8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>
    e5bc:	4811      	ldr	r0, [pc, #68]	; (e604 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x244>)
    e5be:	f1b8 0f01 	cmp.w	r8, #1
    e5c2:	e890 100e 	ldmia.w	r0, {r1, r2, r3, ip}
    e5c6:	e88d 100e 	stmia.w	sp, {r1, r2, r3, ip}
    e5ca:	6900      	ldr	r0, [r0, #16]
    e5cc:	9004      	str	r0, [sp, #16]
    e5ce:	bf14      	ite	ne
    e5d0:	2001      	movne	r0, #1
    e5d2:	2000      	moveq	r0, #0
    e5d4:	f88d 0001 	strb.w	r0, [sp, #1]
    e5d8:	4668      	mov	r0, sp
    e5da:	f7f5 facb 	bl	3b74 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    e5de:	b006      	add	sp, #24
    e5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e5e4:	2000106c 	.word	0x2000106c
    e5e8:	4001f504 	.word	0x4001f504
    e5ec:	40001000 	.word	0x40001000
    e5f0:	40001554 	.word	0x40001554
    e5f4:	40001588 	.word	0x40001588
    e5f8:	40001568 	.word	0x40001568
    e5fc:	40008000 	.word	0x40008000
    e600:	4000800c 	.word	0x4000800c
    e604:	0000fa14 	.word	0x0000fa14

0000e608 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    e608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e60c:	f8df a328 	ldr.w	sl, [pc, #808]	; e938 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x330>
    e610:	4607      	mov	r7, r0
    e612:	b087      	sub	sp, #28
    e614:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    e618:	460d      	mov	r5, r1
    e61a:	f8ca 0000 	str.w	r0, [sl]
    e61e:	4cc7      	ldr	r4, [pc, #796]	; (e93c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x334>)
    e620:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    e624:	f040 0002 	orr.w	r0, r0, #2
    e628:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    e62c:	4608      	mov	r0, r1
    e62e:	f001 fa39 	bl	faa4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    e632:	7d60      	ldrb	r0, [r4, #21]
    e634:	2825      	cmp	r0, #37	; 0x25
    e636:	bf08      	it	eq
    e638:	f640 1162 	movweq	r1, #2402	; 0x962
    e63c:	d019      	beq.n	e672 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x6a>
    e63e:	2826      	cmp	r0, #38	; 0x26
    e640:	bf08      	it	eq
    e642:	f640 117a 	movweq	r1, #2426	; 0x97a
    e646:	d014      	beq.n	e672 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x6a>
    e648:	2827      	cmp	r0, #39	; 0x27
    e64a:	bf08      	it	eq
    e64c:	f44f 611b 	moveq.w	r1, #2480	; 0x9b0
    e650:	d00f      	beq.n	e672 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x6a>
    e652:	280a      	cmp	r0, #10
    e654:	ea4f 0140 	mov.w	r1, r0, lsl #1
    e658:	bf94      	ite	ls
    e65a:	f601 1164 	addwls	r1, r1, #2404	; 0x964
    e65e:	f601 1166 	addwhi	r1, r1, #2406	; 0x966
    e662:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    e666:	bf3c      	itt	cc
    e668:	f6a1 1138 	subwcc	r1, r1, #2360	; 0x938
    e66c:	f441 7180 	orrcc.w	r1, r1, #256	; 0x100
    e670:	d301      	bcc.n	e676 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x6e>
    e672:	f5a1 6116 	sub.w	r1, r1, #2400	; 0x960
    e676:	4eb2      	ldr	r6, [pc, #712]	; (e940 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x338>)
    e678:	f8c6 1508 	str.w	r1, [r6, #1288]	; 0x508
    e67c:	49b1      	ldr	r1, [pc, #708]	; (e944 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x33c>)
    e67e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    e682:	6008      	str	r0, [r1, #0]
    e684:	4628      	mov	r0, r5
    e686:	f001 f9ed 	bl	fa64 <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI>
    e68a:	f04f 0900 	mov.w	r9, #0
    e68e:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
    e692:	f04f 0801 	mov.w	r8, #1
    e696:	b117      	cbz	r7, e69e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    e698:	2f01      	cmp	r7, #1
    e69a:	d053      	beq.n	e744 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x13c>
    e69c:	e0bc      	b.n	e818 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x210>
    e69e:	2d01      	cmp	r5, #1
    e6a0:	bf08      	it	eq
    e6a2:	2000      	moveq	r0, #0
    e6a4:	d00b      	beq.n	e6be <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    e6a6:	2d02      	cmp	r5, #2
    e6a8:	bf08      	it	eq
    e6aa:	2001      	moveq	r0, #1
    e6ac:	d007      	beq.n	e6be <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    e6ae:	2d04      	cmp	r5, #4
    e6b0:	bf08      	it	eq
    e6b2:	2003      	moveq	r0, #3
    e6b4:	d003      	beq.n	e6be <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    e6b6:	2d08      	cmp	r5, #8
    e6b8:	bf08      	it	eq
    e6ba:	2002      	moveq	r0, #2
    e6bc:	d156      	bne.n	e76c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x164>
    e6be:	f994 2014 	ldrsb.w	r2, [r4, #20]
    e6c2:	7d61      	ldrb	r1, [r4, #21]
    e6c4:	ab05      	add	r3, sp, #20
    e6c6:	f7f1 fe95 	bl	3f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    e6ca:	2800      	cmp	r0, #0
    e6cc:	d15a      	bne.n	e784 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x17c>
    e6ce:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    e6d2:	f001 f9e1 	bl	fa98 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    e6d6:	79e0      	ldrb	r0, [r4, #7]
    e6d8:	2801      	cmp	r0, #1
    e6da:	d105      	bne.n	e6e8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>
    e6dc:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    e6e0:	f040 0008 	orr.w	r0, r0, #8
    e6e4:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    e6e8:	f001 fb4e 	bl	fd88 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    e6ec:	b178      	cbz	r0, e70e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x106>
    e6ee:	4996      	ldr	r1, [pc, #600]	; (e948 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x340>)
    e6f0:	680a      	ldr	r2, [r1, #0]
    e6f2:	0648      	lsls	r0, r1, #25
    e6f4:	2d02      	cmp	r5, #2
    e6f6:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    e6fa:	bf0c      	ite	eq
    e6fc:	f3c0 6006 	ubfxeq	r0, r0, #24, #7
    e700:	f3c0 2006 	ubfxne	r0, r0, #8, #7
    e704:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
    e708:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    e70c:	6008      	str	r0, [r1, #0]
    e70e:	f884 8009 	strb.w	r8, [r4, #9]
    e712:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    e714:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    e718:	62a0      	str	r0, [r4, #40]	; 0x28
    e71a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    e71e:	f8ca 0000 	str.w	r0, [sl]
    e722:	2d02      	cmp	r5, #2
    e724:	bf08      	it	eq
    e726:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    e72a:	d005      	beq.n	e738 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x130>
    e72c:	2d01      	cmp	r5, #1
    e72e:	bf0c      	ite	eq
    e730:	f640 0034 	movweq	r0, #2100	; 0x834
    e734:	f640 2028 	movwne	r0, #2600	; 0xa28
    e738:	f649 71ec 	movw	r1, #40940	; 0x9fec
    e73c:	4408      	add	r0, r1
    e73e:	fbb0 f9fb 	udiv	r9, r0, fp
    e742:	e069      	b.n	e818 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x210>
    e744:	7a20      	ldrb	r0, [r4, #8]
    e746:	2801      	cmp	r0, #1
    e748:	d125      	bne.n	e796 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x18e>
    e74a:	7aa0      	ldrb	r0, [r4, #10]
    e74c:	2801      	cmp	r0, #1
    e74e:	bf08      	it	eq
    e750:	2000      	moveq	r0, #0
    e752:	d010      	beq.n	e776 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x16e>
    e754:	2802      	cmp	r0, #2
    e756:	bf08      	it	eq
    e758:	2001      	moveq	r0, #1
    e75a:	d00c      	beq.n	e776 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x16e>
    e75c:	2804      	cmp	r0, #4
    e75e:	bf08      	it	eq
    e760:	2003      	moveq	r0, #3
    e762:	d008      	beq.n	e776 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x16e>
    e764:	2808      	cmp	r0, #8
    e766:	bf08      	it	eq
    e768:	2002      	moveq	r0, #2
    e76a:	d004      	beq.n	e776 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x16e>
    e76c:	f240 31ed 	movw	r1, #1005	; 0x3ed
    e770:	2006      	movs	r0, #6
    e772:	f7f5 fbe5 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e776:	f994 2014 	ldrsb.w	r2, [r4, #20]
    e77a:	7d61      	ldrb	r1, [r4, #21]
    e77c:	ab05      	add	r3, sp, #20
    e77e:	f7f1 fe39 	bl	3f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    e782:	b120      	cbz	r0, e78e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x186>
    e784:	f240 41de 	movw	r1, #1246	; 0x4de
    e788:	203e      	movs	r0, #62	; 0x3e
    e78a:	f7f5 fbd9 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e78e:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    e792:	f001 f981 	bl	fa98 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    e796:	20ff      	movs	r0, #255	; 0xff
    e798:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    e79c:	2000      	movs	r0, #0
    e79e:	f8c6 011c 	str.w	r0, [r6, #284]	; 0x11c
    e7a2:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    e7a6:	f440 7088 	orr.w	r0, r0, #272	; 0x110
    e7aa:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    e7ae:	79e0      	ldrb	r0, [r4, #7]
    e7b0:	2801      	cmp	r0, #1
    e7b2:	d105      	bne.n	e7c0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1b8>
    e7b4:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    e7b8:	f040 0004 	orr.w	r0, r0, #4
    e7bc:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    e7c0:	2002      	movs	r0, #2
    e7c2:	7260      	strb	r0, [r4, #9]
    e7c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    e7c6:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    e7ca:	62a0      	str	r0, [r4, #40]	; 0x28
    e7cc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    e7d0:	f8ca 0000 	str.w	r0, [sl]
    e7d4:	f04f 0929 	mov.w	r9, #41	; 0x29
    e7d8:	f001 faf0 	bl	fdbc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    e7dc:	b188      	cbz	r0, e802 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1fa>
    e7de:	f015 0f0c 	tst.w	r5, #12
    e7e2:	d00b      	beq.n	e7fc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1f4>
    e7e4:	2001      	movs	r0, #1
    e7e6:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    e7ea:	f001 f8ef 	bl	f9cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    e7ee:	f8c6 803c 	str.w	r8, [r6, #60]	; 0x3c
    e7f2:	f8c6 8040 	str.w	r8, [r6, #64]	; 0x40
    e7f6:	f884 802d 	strb.w	r8, [r4, #45]	; 0x2d
    e7fa:	e002      	b.n	e802 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1fa>
    e7fc:	2000      	movs	r0, #0
    e7fe:	f001 f8e5 	bl	f9cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    e802:	f001 fac1 	bl	fd88 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    e806:	b938      	cbnz	r0, e818 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x210>
    e808:	f001 faae 	bl	fd68 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    e80c:	b920      	cbnz	r0, e818 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x210>
    e80e:	484f      	ldr	r0, [pc, #316]	; (e94c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x344>)
    e810:	6801      	ldr	r1, [r0, #0]
    e812:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    e816:	6001      	str	r1, [r0, #0]
    e818:	79e0      	ldrb	r0, [r4, #7]
    e81a:	2800      	cmp	r0, #0
    e81c:	bf04      	itt	eq
    e81e:	f894 002c 	ldrbeq.w	r0, [r4, #44]	; 0x2c
    e822:	f040 0002 	orreq.w	r0, r0, #2
    e826:	d006      	beq.n	e836 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x22e>
    e828:	2801      	cmp	r0, #1
    e82a:	bf04      	itt	eq
    e82c:	f894 002c 	ldrbeq.w	r0, [r4, #44]	; 0x2c
    e830:	f040 0004 	orreq.w	r0, r0, #4
    e834:	d101      	bne.n	e83a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x232>
    e836:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    e83a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    e83e:	f8df 8110 	ldr.w	r8, [pc, #272]	; e950 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x348>
    e842:	f010 0f01 	tst.w	r0, #1
    e846:	d029      	beq.n	e89c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x294>
    e848:	f010 0f02 	tst.w	r0, #2
    e84c:	d016      	beq.n	e87c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x274>
    e84e:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    e852:	f040 0001 	orr.w	r0, r0, #1
    e856:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    e85a:	f8d6 0550 	ldr.w	r0, [r6, #1360]	; 0x550
    e85e:	b2c0      	uxtb	r0, r0
    e860:	280b      	cmp	r0, #11
    e862:	bf18      	it	ne
    e864:	280a      	cmpne	r0, #10
    e866:	d003      	beq.n	e870 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x268>
    e868:	2803      	cmp	r0, #3
    e86a:	bf18      	it	ne
    e86c:	2802      	cmpne	r0, #2
    e86e:	d115      	bne.n	e89c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x294>
    e870:	f240 510f 	movw	r1, #1295	; 0x50f
    e874:	f04f 003e 	mov.w	r0, #62	; 0x3e
    e878:	f7f5 fb62 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e87c:	f010 0f04 	tst.w	r0, #4
    e880:	d00c      	beq.n	e89c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x294>
    e882:	4935      	ldr	r1, [pc, #212]	; (e958 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x350>)
    e884:	4833      	ldr	r0, [pc, #204]	; (e954 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x34c>)
    e886:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    e88a:	f8d8 0140 	ldr.w	r0, [r8, #320]	; 0x140
    e88e:	b128      	cbz	r0, e89c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x294>
    e890:	f240 5117 	movw	r1, #1303	; 0x517
    e894:	f04f 003e 	mov.w	r0, #62	; 0x3e
    e898:	f7f5 fb52 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e89c:	f001 f932 	bl	fb04 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    e8a0:	6800      	ldr	r0, [r0, #0]
    e8a2:	2801      	cmp	r0, #1
    e8a4:	d036      	beq.n	e914 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x30c>
    e8a6:	2f01      	cmp	r7, #1
    e8a8:	bf08      	it	eq
    e8aa:	f649 70ba 	movweq	r0, #40890	; 0x9fba
    e8ae:	d00d      	beq.n	e8cc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2c4>
    e8b0:	2d02      	cmp	r5, #2
    e8b2:	bf08      	it	eq
    e8b4:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    e8b8:	d005      	beq.n	e8c6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2be>
    e8ba:	2d01      	cmp	r5, #1
    e8bc:	bf0c      	ite	eq
    e8be:	f640 0034 	movweq	r0, #2100	; 0x834
    e8c2:	f640 2028 	movwne	r0, #2600	; 0xa28
    e8c6:	f24a 0150 	movw	r1, #41040	; 0xa050
    e8ca:	4408      	add	r0, r1
    e8cc:	fbb0 f0fb 	udiv	r0, r0, fp
    e8d0:	f8d8 1540 	ldr.w	r1, [r8, #1344]	; 0x540
    e8d4:	4a21      	ldr	r2, [pc, #132]	; (e95c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x354>)
    e8d6:	2f01      	cmp	r7, #1
    e8d8:	f102 0314 	add.w	r3, r2, #20
    e8dc:	e893 1068 	ldmia.w	r3, {r3, r5, r6, ip}
    e8e0:	e88d 1068 	stmia.w	sp, {r3, r5, r6, ip}
    e8e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
    e8e6:	9204      	str	r2, [sp, #16]
    e8e8:	bf14      	ite	ne
    e8ea:	2201      	movne	r2, #1
    e8ec:	2200      	moveq	r2, #0
    e8ee:	f88d 2001 	strb.w	r2, [sp, #1]
    e8f2:	e9cd 1003 	strd	r1, r0, [sp, #12]
    e8f6:	4668      	mov	r0, sp
    e8f8:	f7f5 f93c 	bl	3b74 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    e8fc:	7da1      	ldrb	r1, [r4, #22]
    e8fe:	2000      	movs	r0, #0
    e900:	2996      	cmp	r1, #150	; 0x96
    e902:	d314      	bcc.n	e92e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x326>
    e904:	b167      	cbz	r7, e920 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x318>
    e906:	2f01      	cmp	r7, #1
    e908:	d00e      	beq.n	e928 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x320>
    e90a:	f240 6114 	movw	r1, #1556	; 0x614
    e90e:	203e      	movs	r0, #62	; 0x3e
    e910:	f7f5 fb16 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e914:	f7ff fce8 	bl	e2e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e918:	b007      	add	sp, #28
    e91a:	2000      	movs	r0, #0
    e91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e920:	2128      	movs	r1, #40	; 0x28
    e922:	f7ff fae1 	bl	dee8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    e926:	e002      	b.n	e92e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x326>
    e928:	2129      	movs	r1, #41	; 0x29
    e92a:	f7ff fac5 	bl	deb8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>
    e92e:	b007      	add	sp, #28
    e930:	4648      	mov	r0, r9
    e932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e936:	0000      	.short	0x0000
    e938:	4001f504 	.word	0x4001f504
    e93c:	2000106c 	.word	0x2000106c
    e940:	40001000 	.word	0x40001000
    e944:	40001554 	.word	0x40001554
    e948:	40001588 	.word	0x40001588
    e94c:	40001568 	.word	0x40001568
    e950:	40008000 	.word	0x40008000
    e954:	40001008 	.word	0x40001008
    e958:	4001f098 	.word	0x4001f098
    e95c:	0000fa14 	.word	0x0000fa14

0000e960 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    e960:	e890 100d 	ldmia.w	r0, {r0, r2, r3, ip}
    e964:	4901      	ldr	r1, [pc, #4]	; (e96c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    e966:	e881 100d 	stmia.w	r1, {r0, r2, r3, ip}
    e96a:	4770      	bx	lr
    e96c:	2000105c 	.word	0x2000105c

0000e970 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    e970:	4916      	ldr	r1, [pc, #88]	; (e9cc <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x5c>)
    e972:	b510      	push	{r4, lr}
    e974:	69ca      	ldr	r2, [r1, #28]
    e976:	4282      	cmp	r2, r0
    e978:	d304      	bcc.n	e984 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x14>
    e97a:	f640 010a 	movw	r1, #2058	; 0x80a
    e97e:	203e      	movs	r0, #62	; 0x3e
    e980:	f7f5 fade 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e984:	2201      	movs	r2, #1
    e986:	f8df c048 	ldr.w	ip, [pc, #72]	; e9d0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x60>
    e98a:	730a      	strb	r2, [r1, #12]
    e98c:	6108      	str	r0, [r1, #16]
    e98e:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
    e992:	f10c 0304 	add.w	r3, ip, #4
    e996:	f8d3 4540 	ldr.w	r4, [r3, #1344]	; 0x540
    e99a:	1d64      	adds	r4, r4, #5
    e99c:	4284      	cmp	r4, r0
    e99e:	d306      	bcc.n	e9ae <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x3e>
    e9a0:	480c      	ldr	r0, [pc, #48]	; (e9d4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x64>)
    e9a2:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    e9a6:	2900      	cmp	r1, #0
    e9a8:	bf08      	it	eq
    e9aa:	6102      	streq	r2, [r0, #16]
    e9ac:	bd10      	pop	{r4, pc}
    e9ae:	2200      	movs	r2, #0
    e9b0:	f8cc 2144 	str.w	r2, [ip, #324]	; 0x144
    e9b4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    e9b8:	6a88      	ldr	r0, [r1, #40]	; 0x28
    e9ba:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    e9be:	6288      	str	r0, [r1, #40]	; 0x28
    e9c0:	4905      	ldr	r1, [pc, #20]	; (e9d8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x68>)
    e9c2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    e9c6:	6008      	str	r0, [r1, #0]
    e9c8:	bd10      	pop	{r4, pc}
    e9ca:	0000      	.short	0x0000
    e9cc:	2000106c 	.word	0x2000106c
    e9d0:	40008000 	.word	0x40008000
    e9d4:	40001000 	.word	0x40001000
    e9d8:	4001f504 	.word	0x4001f504

0000e9dc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    e9dc:	b570      	push	{r4, r5, r6, lr}
    e9de:	4c11      	ldr	r4, [pc, #68]	; (ea24 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    e9e0:	4606      	mov	r6, r0
    e9e2:	2002      	movs	r0, #2
    e9e4:	7320      	strb	r0, [r4, #12]
    e9e6:	7da5      	ldrb	r5, [r4, #22]
    e9e8:	f000 f8a0 	bl	eb2c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    e9ec:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    e9f0:	2901      	cmp	r1, #1
    e9f2:	f894 1020 	ldrb.w	r1, [r4, #32]
    e9f6:	d00f      	beq.n	ea18 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3c>
    e9f8:	4602      	mov	r2, r0
    e9fa:	4628      	mov	r0, r5
    e9fc:	f005 fa02 	bl	13e04 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    ea00:	6120      	str	r0, [r4, #16]
    ea02:	4809      	ldr	r0, [pc, #36]	; (ea28 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    ea04:	2100      	movs	r1, #0
    ea06:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    ea0a:	6921      	ldr	r1, [r4, #16]
    ea0c:	69e0      	ldr	r0, [r4, #28]
    ea0e:	4408      	add	r0, r1
    ea10:	4906      	ldr	r1, [pc, #24]	; (ea2c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x50>)
    ea12:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    ea16:	bd70      	pop	{r4, r5, r6, pc}
    ea18:	4602      	mov	r2, r0
    ea1a:	4633      	mov	r3, r6
    ea1c:	4628      	mov	r0, r5
    ea1e:	f005 fa12 	bl	13e46 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    ea22:	e7ed      	b.n	ea00 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    ea24:	2000106c 	.word	0x2000106c
    ea28:	40008000 	.word	0x40008000
    ea2c:	40008004 	.word	0x40008004

0000ea30 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    ea30:	b510      	push	{r4, lr}
    ea32:	f001 f9a9 	bl	fd88 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ea36:	2800      	cmp	r0, #0
    ea38:	bf08      	it	eq
    ea3a:	bd10      	popeq	{r4, pc}
    ea3c:	4803      	ldr	r0, [pc, #12]	; (ea4c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    ea3e:	6801      	ldr	r1, [r0, #0]
    ea40:	f021 0101 	bic.w	r1, r1, #1
    ea44:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    ea48:	6001      	str	r1, [r0, #0]
    ea4a:	bd10      	pop	{r4, pc}
    ea4c:	40001774 	.word	0x40001774

0000ea50 <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>:
    ea50:	b510      	push	{r4, lr}
    ea52:	2896      	cmp	r0, #150	; 0x96
    ea54:	bf9e      	ittt	ls
    ea56:	4904      	ldrls	r1, [pc, #16]	; (ea68 <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY+0x18>)
    ea58:	7588      	strbls	r0, [r1, #22]
    ea5a:	bd10      	popls	{r4, pc}
    ea5c:	f240 116d 	movw	r1, #365	; 0x16d
    ea60:	203e      	movs	r0, #62	; 0x3e
    ea62:	f7f5 fa6d 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea66:	0000      	.short	0x0000
    ea68:	2000106c 	.word	0x2000106c

0000ea6c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    ea6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea70:	4823      	ldr	r0, [pc, #140]	; (eb00 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x94>)
    ea72:	2400      	movs	r4, #0
    ea74:	21ff      	movs	r1, #255	; 0xff
    ea76:	6104      	str	r4, [r0, #16]
    ea78:	6144      	str	r4, [r0, #20]
    ea7a:	6184      	str	r4, [r0, #24]
    ea7c:	61c4      	str	r4, [r0, #28]
    ea7e:	6204      	str	r4, [r0, #32]
    ea80:	6244      	str	r4, [r0, #36]	; 0x24
    ea82:	6284      	str	r4, [r0, #40]	; 0x28
    ea84:	62c4      	str	r4, [r0, #44]	; 0x2c
    ea86:	6304      	str	r4, [r0, #48]	; 0x30
    ea88:	6344      	str	r4, [r0, #52]	; 0x34
    ea8a:	6384      	str	r4, [r0, #56]	; 0x38
    ea8c:	63c4      	str	r4, [r0, #60]	; 0x3c
    ea8e:	6404      	str	r4, [r0, #64]	; 0x40
    ea90:	6444      	str	r4, [r0, #68]	; 0x44
    ea92:	6484      	str	r4, [r0, #72]	; 0x48
    ea94:	3010      	adds	r0, #16
    ea96:	71c4      	strb	r4, [r0, #7]
    ea98:	7204      	strb	r4, [r0, #8]
    ea9a:	7244      	strb	r4, [r0, #9]
    ea9c:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    eaa0:	215f      	movs	r1, #95	; 0x5f
    eaa2:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
    eaa6:	f001 f928 	bl	fcfa <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    eaaa:	4f16      	ldr	r7, [pc, #88]	; (eb04 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x98>)
    eaac:	4d16      	ldr	r5, [pc, #88]	; (eb08 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x9c>)
    eaae:	4e17      	ldr	r6, [pc, #92]	; (eb0c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0xa0>)
    eab0:	b928      	cbnz	r0, eabe <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    eab2:	f001 f939 	bl	fd28 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    eab6:	b910      	cbnz	r0, eabe <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    eab8:	f001 f940 	bl	fd3c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    eabc:	b140      	cbz	r0, ead0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x64>
    eabe:	2224      	movs	r2, #36	; 0x24
    eac0:	21ff      	movs	r1, #255	; 0xff
    eac2:	4638      	mov	r0, r7
    eac4:	f001 fa10 	bl	fee8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    eac8:	602c      	str	r4, [r5, #0]
    eaca:	6034      	str	r4, [r6, #0]
    eacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ead0:	f001 f974 	bl	fdbc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    ead4:	b910      	cbnz	r0, eadc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x70>
    ead6:	f001 f967 	bl	fda8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    eada:	b140      	cbz	r0, eaee <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x82>
    eadc:	2240      	movs	r2, #64	; 0x40
    eade:	21ff      	movs	r1, #255	; 0xff
    eae0:	4638      	mov	r0, r7
    eae2:	f001 fa01 	bl	fee8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    eae6:	602c      	str	r4, [r5, #0]
    eae8:	6034      	str	r4, [r6, #0]
    eaea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eaee:	2238      	movs	r2, #56	; 0x38
    eaf0:	21ff      	movs	r1, #255	; 0xff
    eaf2:	4638      	mov	r0, r7
    eaf4:	f001 f9f8 	bl	fee8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    eaf8:	602c      	str	r4, [r5, #0]
    eafa:	6034      	str	r4, [r6, #0]
    eafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb00:	2000105c 	.word	0x2000105c
    eb04:	40000e00 	.word	0x40000e00
    eb08:	40000e08 	.word	0x40000e08
    eb0c:	40000e10 	.word	0x40000e10

0000eb10 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    eb10:	4805      	ldr	r0, [pc, #20]	; (eb28 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x18>)
    eb12:	69c0      	ldr	r0, [r0, #28]
    eb14:	2800      	cmp	r0, #0
    eb16:	bf18      	it	ne
    eb18:	4770      	bxne	lr
    eb1a:	b510      	push	{r4, lr}
    eb1c:	f240 11fb 	movw	r1, #507	; 0x1fb
    eb20:	203e      	movs	r0, #62	; 0x3e
    eb22:	f7f5 fa0d 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb26:	0000      	.short	0x0000
    eb28:	2000106c 	.word	0x2000106c

0000eb2c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    eb2c:	b570      	push	{r4, r5, r6, lr}
    eb2e:	4825      	ldr	r0, [pc, #148]	; (ebc4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x98>)
    eb30:	4924      	ldr	r1, [pc, #144]	; (ebc4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x98>)
    eb32:	4d25      	ldr	r5, [pc, #148]	; (ebc8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x9c>)
    eb34:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    eb38:	2002      	movs	r0, #2
    eb3a:	2201      	movs	r2, #1
    eb3c:	7a49      	ldrb	r1, [r1, #9]
    eb3e:	2308      	movs	r3, #8
    eb40:	f04f 0c04 	mov.w	ip, #4
    eb44:	b1cc      	cbz	r4, eb7a <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4e>
    eb46:	2c02      	cmp	r4, #2
    eb48:	d01e      	beq.n	eb88 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x5c>
    eb4a:	2902      	cmp	r1, #2
    eb4c:	d01c      	beq.n	eb88 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x5c>
    eb4e:	2c01      	cmp	r4, #1
    eb50:	bf1e      	ittt	ne
    eb52:	2901      	cmpne	r1, #1
    eb54:	2001      	movne	r0, #1
    eb56:	bd70      	popne	{r4, r5, r6, pc}
    eb58:	6829      	ldr	r1, [r5, #0]
    eb5a:	f001 010f 	and.w	r1, r1, #15
    eb5e:	2903      	cmp	r1, #3
    eb60:	d02b      	beq.n	ebba <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x8e>
    eb62:	2904      	cmp	r1, #4
    eb64:	bf08      	it	eq
    eb66:	bd70      	popeq	{r4, r5, r6, pc}
    eb68:	2905      	cmp	r1, #5
    eb6a:	d028      	beq.n	ebbe <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x92>
    eb6c:	2906      	cmp	r1, #6
    eb6e:	d022      	beq.n	ebb6 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x8a>
    eb70:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    eb74:	203e      	movs	r0, #62	; 0x3e
    eb76:	f7f5 f9e3 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb7a:	2900      	cmp	r1, #0
    eb7c:	d1e5      	bne.n	eb4a <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    eb7e:	f240 117d 	movw	r1, #381	; 0x17d
    eb82:	203e      	movs	r0, #62	; 0x3e
    eb84:	f7f5 f9dc 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb88:	4c10      	ldr	r4, [pc, #64]	; (ebcc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0xa0>)
    eb8a:	6829      	ldr	r1, [r5, #0]
    eb8c:	f001 010f 	and.w	r1, r1, #15
    eb90:	2903      	cmp	r1, #3
    eb92:	d012      	beq.n	ebba <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x8e>
    eb94:	2904      	cmp	r1, #4
    eb96:	bf08      	it	eq
    eb98:	bd70      	popeq	{r4, r5, r6, pc}
    eb9a:	2905      	cmp	r1, #5
    eb9c:	bf18      	it	ne
    eb9e:	2906      	cmpne	r1, #6
    eba0:	d005      	beq.n	ebae <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x82>
    eba2:	f240 11dd 	movw	r1, #477	; 0x1dd
    eba6:	f04f 003e 	mov.w	r0, #62	; 0x3e
    ebaa:	f7f5 f9c9 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ebae:	6820      	ldr	r0, [r4, #0]
    ebb0:	f010 0f06 	tst.w	r0, #6
    ebb4:	d003      	beq.n	ebbe <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x92>
    ebb6:	4660      	mov	r0, ip
    ebb8:	bd70      	pop	{r4, r5, r6, pc}
    ebba:	4610      	mov	r0, r2
    ebbc:	bd70      	pop	{r4, r5, r6, pc}
    ebbe:	4618      	mov	r0, r3
    ebc0:	bd70      	pop	{r4, r5, r6, pc}
    ebc2:	0000      	.short	0x0000
    ebc4:	2000106c 	.word	0x2000106c
    ebc8:	40001510 	.word	0x40001510
    ebcc:	40001414 	.word	0x40001414

0000ebd0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    ebd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ebd4:	4e20      	ldr	r6, [pc, #128]	; (ec58 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x88>)
    ebd6:	4d1f      	ldr	r5, [pc, #124]	; (ec54 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x84>)
    ebd8:	2000      	movs	r0, #0
    ebda:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    ebde:	1d2f      	adds	r7, r5, #4
    ebe0:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
    ebe4:	f8c5 0540 	str.w	r0, [r5, #1344]	; 0x540
    ebe8:	f106 0804 	add.w	r8, r6, #4
    ebec:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
    ebf0:	f7ff fb7a 	bl	e2e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ebf4:	4c19      	ldr	r4, [pc, #100]	; (ec5c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x8c>)
    ebf6:	7da0      	ldrb	r0, [r4, #22]
    ebf8:	2896      	cmp	r0, #150	; 0x96
    ebfa:	bf28      	it	cs
    ebfc:	f005 f8b2 	blcs	13d64 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    ec00:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ec02:	4917      	ldr	r1, [pc, #92]	; (ec60 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x90>)
    ec04:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    ec08:	6008      	str	r0, [r1, #0]
    ec0a:	2000      	movs	r0, #0
    ec0c:	62a0      	str	r0, [r4, #40]	; 0x28
    ec0e:	7320      	strb	r0, [r4, #12]
    ec10:	61e0      	str	r0, [r4, #28]
    ec12:	61a0      	str	r0, [r4, #24]
    ec14:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    ec18:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
    ec1c:	f8c5 0540 	str.w	r0, [r5, #1344]	; 0x540
    ec20:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
    ec24:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
    ec28:	f8c5 0144 	str.w	r0, [r5, #324]	; 0x144
    ec2c:	f8c5 0140 	str.w	r0, [r5, #320]	; 0x140
    ec30:	f8c5 014c 	str.w	r0, [r5, #332]	; 0x14c
    ec34:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ec38:	2002      	movs	r0, #2
    ec3a:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    ec3e:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    ec42:	f3bf 8f4f 	dsb	sy
    ec46:	f3bf 8f6f 	isb	sy
    ec4a:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    ec4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ec52:	0000      	.short	0x0000
    ec54:	40008000 	.word	0x40008000
    ec58:	40008008 	.word	0x40008008
    ec5c:	2000106c 	.word	0x2000106c
    ec60:	4001f508 	.word	0x4001f508

0000ec64 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    ec64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ec68:	2702      	movs	r7, #2
    ec6a:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    ec6e:	f04f 0901 	mov.w	r9, #1
    ec72:	2500      	movs	r5, #0
    ec74:	f8c8 7180 	str.w	r7, [r8, #384]	; 0x180
    ec78:	f3bf 8f4f 	dsb	sy
    ec7c:	f3bf 8f6f 	isb	sy
    ec80:	4c36      	ldr	r4, [pc, #216]	; (ed5c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    ec82:	f8c4 5ffc 	str.w	r5, [r4, #4092]	; 0xffc
    ec86:	f8c4 9ffc 	str.w	r9, [r4, #4092]	; 0xffc
    ec8a:	f001 f86d 	bl	fd68 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    ec8e:	4e34      	ldr	r6, [pc, #208]	; (ed60 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    ec90:	b118      	cbz	r0, ec9a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x36>
    ec92:	6830      	ldr	r0, [r6, #0]
    ec94:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    ec98:	6030      	str	r0, [r6, #0]
    ec9a:	f001 f859 	bl	fd50 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ec9e:	b138      	cbz	r0, ecb0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4c>
    eca0:	6830      	ldr	r0, [r6, #0]
    eca2:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    eca6:	f040 0096 	orr.w	r0, r0, #150	; 0x96
    ecaa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    ecae:	6030      	str	r0, [r6, #0]
    ecb0:	f001 f86a 	bl	fd88 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ecb4:	b130      	cbz	r0, ecc4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x60>
    ecb6:	482b      	ldr	r0, [pc, #172]	; (ed64 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    ecb8:	6801      	ldr	r1, [r0, #0]
    ecba:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    ecbe:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    ecc2:	6001      	str	r1, [r0, #0]
    ecc4:	4929      	ldr	r1, [pc, #164]	; (ed6c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    ecc6:	4828      	ldr	r0, [pc, #160]	; (ed68 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    ecc8:	6008      	str	r0, [r1, #0]
    ecca:	f7f4 ffb5 	bl	3c38 <mpsl_fem_device_config_254_apply_get>
    ecce:	b140      	cbz	r0, ece2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x7e>
    ecd0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ecd4:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    ecd8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    ecdc:	bf1c      	itt	ne
    ecde:	4924      	ldrne	r1, [pc, #144]	; (ed70 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    ece0:	6008      	strne	r0, [r1, #0]
    ece2:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    ece6:	6e00      	ldr	r0, [r0, #96]	; 0x60
    ece8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    ecec:	d004      	beq.n	ecf8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x94>
    ecee:	4921      	ldr	r1, [pc, #132]	; (ed74 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x110>)
    ecf0:	680a      	ldr	r2, [r1, #0]
    ecf2:	f360 4217 	bfi	r2, r0, #16, #8
    ecf6:	600a      	str	r2, [r1, #0]
    ecf8:	f240 1103 	movw	r1, #259	; 0x103
    ecfc:	f240 605b 	movw	r0, #1627	; 0x65b
    ed00:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    ed04:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    ed08:	481b      	ldr	r0, [pc, #108]	; (ed78 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x114>)
    ed0a:	f8c0 9000 	str.w	r9, [r0]
    ed0e:	2001      	movs	r0, #1
    ed10:	f000 fec8 	bl	faa4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ed14:	f240 1001 	movw	r0, #257	; 0x101
    ed18:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    ed1c:	2002      	movs	r0, #2
    ed1e:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    ed22:	4917      	ldr	r1, [pc, #92]	; (ed80 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x11c>)
    ed24:	4815      	ldr	r0, [pc, #84]	; (ed7c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x118>)
    ed26:	6008      	str	r0, [r1, #0]
    ed28:	4816      	ldr	r0, [pc, #88]	; (ed84 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x120>)
    ed2a:	2296      	movs	r2, #150	; 0x96
    ed2c:	f100 0110 	add.w	r1, r0, #16
    ed30:	8605      	strh	r5, [r0, #48]	; 0x30
    ed32:	4815      	ldr	r0, [pc, #84]	; (ed88 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x124>)
    ed34:	61cd      	str	r5, [r1, #28]
    ed36:	f881 502c 	strb.w	r5, [r1, #44]	; 0x2c
    ed3a:	7005      	strb	r5, [r0, #0]
    ed3c:	758a      	strb	r2, [r1, #22]
    ed3e:	f8c8 7280 	str.w	r7, [r8, #640]	; 0x280
    ed42:	2110      	movs	r1, #16
    ed44:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    ed48:	f8c8 7100 	str.w	r7, [r8, #256]	; 0x100
    ed4c:	6840      	ldr	r0, [r0, #4]
    ed4e:	2800      	cmp	r0, #0
    ed50:	bf08      	it	eq
    ed52:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ed56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ed5a:	4700      	bx	r0
    ed5c:	40001000 	.word	0x40001000
    ed60:	4000173c 	.word	0x4000173c
    ed64:	40001740 	.word	0x40001740
    ed68:	8900002c 	.word	0x8900002c
    ed6c:	40001778 	.word	0x40001778
    ed70:	4000174c 	.word	0x4000174c
    ed74:	4000158c 	.word	0x4000158c
    ed78:	40001530 	.word	0x40001530
    ed7c:	0c0e0000 	.word	0x0c0e0000
    ed80:	4001f508 	.word	0x4001f508
    ed84:	2000105c 	.word	0x2000105c
    ed88:	200002e4 	.word	0x200002e4

0000ed8c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    ed8c:	4901      	ldr	r1, [pc, #4]	; (ed94 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    ed8e:	7508      	strb	r0, [r1, #20]
    ed90:	4770      	bx	lr
    ed92:	0000      	.short	0x0000
    ed94:	2000106c 	.word	0x2000106c

0000ed98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    ed98:	491e      	ldr	r1, [pc, #120]	; (ee14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x7c>)
    ed9a:	b510      	push	{r4, lr}
    ed9c:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    eda0:	4a1d      	ldr	r2, [pc, #116]	; (ee18 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x80>)
    eda2:	f892 002c 	ldrb.w	r0, [r2, #44]	; 0x2c
    eda6:	f040 0001 	orr.w	r0, r0, #1
    edaa:	f882 002c 	strb.w	r0, [r2, #44]	; 0x2c
    edae:	f010 0f01 	tst.w	r0, #1
    edb2:	bf08      	it	eq
    edb4:	bd10      	popeq	{r4, pc}
    edb6:	f010 0f02 	tst.w	r0, #2
    edba:	d016      	beq.n	edea <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x52>
    edbc:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    edc0:	f040 0001 	orr.w	r0, r0, #1
    edc4:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    edc8:	f8d1 0550 	ldr.w	r0, [r1, #1360]	; 0x550
    edcc:	b2c0      	uxtb	r0, r0
    edce:	280b      	cmp	r0, #11
    edd0:	bf18      	it	ne
    edd2:	280a      	cmpne	r0, #10
    edd4:	d003      	beq.n	edde <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x46>
    edd6:	2803      	cmp	r0, #3
    edd8:	bf1c      	itt	ne
    edda:	2802      	cmpne	r0, #2
    eddc:	bd10      	popne	{r4, pc}
    edde:	f240 510f 	movw	r1, #1295	; 0x50f
    ede2:	f04f 003e 	mov.w	r0, #62	; 0x3e
    ede6:	f7f5 f8ab 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    edea:	f010 0f04 	tst.w	r0, #4
    edee:	bf08      	it	eq
    edf0:	bd10      	popeq	{r4, pc}
    edf2:	480a      	ldr	r0, [pc, #40]	; (ee1c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x84>)
    edf4:	490a      	ldr	r1, [pc, #40]	; (ee20 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x88>)
    edf6:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    edfa:	480a      	ldr	r0, [pc, #40]	; (ee24 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x8c>)
    edfc:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    ee00:	2800      	cmp	r0, #0
    ee02:	bf08      	it	eq
    ee04:	bd10      	popeq	{r4, pc}
    ee06:	f240 5117 	movw	r1, #1303	; 0x517
    ee0a:	f04f 003e 	mov.w	r0, #62	; 0x3e
    ee0e:	f7f5 f897 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee12:	0000      	.short	0x0000
    ee14:	40001000 	.word	0x40001000
    ee18:	2000106c 	.word	0x2000106c
    ee1c:	40001008 	.word	0x40001008
    ee20:	4001f098 	.word	0x4001f098
    ee24:	40008000 	.word	0x40008000

0000ee28 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    ee28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee2c:	460d      	mov	r5, r1
    ee2e:	49d8      	ldr	r1, [pc, #864]	; (f190 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x368>)
    ee30:	4680      	mov	r8, r0
    ee32:	b087      	sub	sp, #28
    ee34:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    ee38:	4616      	mov	r6, r2
    ee3a:	6008      	str	r0, [r1, #0]
    ee3c:	4610      	mov	r0, r2
    ee3e:	f000 fe31 	bl	faa4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ee42:	4cd4      	ldr	r4, [pc, #848]	; (f194 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x36c>)
    ee44:	7d61      	ldrb	r1, [r4, #21]
    ee46:	2925      	cmp	r1, #37	; 0x25
    ee48:	bf08      	it	eq
    ee4a:	f640 1062 	movweq	r0, #2402	; 0x962
    ee4e:	d019      	beq.n	ee84 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x5c>
    ee50:	2926      	cmp	r1, #38	; 0x26
    ee52:	bf08      	it	eq
    ee54:	f640 107a 	movweq	r0, #2426	; 0x97a
    ee58:	d014      	beq.n	ee84 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x5c>
    ee5a:	2927      	cmp	r1, #39	; 0x27
    ee5c:	bf08      	it	eq
    ee5e:	f44f 601b 	moveq.w	r0, #2480	; 0x9b0
    ee62:	d00f      	beq.n	ee84 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x5c>
    ee64:	290a      	cmp	r1, #10
    ee66:	ea4f 0041 	mov.w	r0, r1, lsl #1
    ee6a:	bf94      	ite	ls
    ee6c:	f600 1064 	addwls	r0, r0, #2404	; 0x964
    ee70:	f600 1066 	addwhi	r0, r0, #2406	; 0x966
    ee74:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    ee78:	bf3c      	itt	cc
    ee7a:	f6a0 1038 	subwcc	r0, r0, #2360	; 0x938
    ee7e:	f440 7080 	orrcc.w	r0, r0, #256	; 0x100
    ee82:	d301      	bcc.n	ee88 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x60>
    ee84:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    ee88:	4fc3      	ldr	r7, [pc, #780]	; (f198 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x370>)
    ee8a:	f8c7 0508 	str.w	r0, [r7, #1288]	; 0x508
    ee8e:	4ac3      	ldr	r2, [pc, #780]	; (f19c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x374>)
    ee90:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ee94:	6010      	str	r0, [r2, #0]
    ee96:	f8df a308 	ldr.w	sl, [pc, #776]	; f1a0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x378>
    ee9a:	f04f 0b00 	mov.w	fp, #0
    ee9e:	f04f 0901 	mov.w	r9, #1
    eea2:	f1b8 0f00 	cmp.w	r8, #0
    eea6:	d007      	beq.n	eeb8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x90>
    eea8:	f1b8 0f01 	cmp.w	r8, #1
    eeac:	d06a      	beq.n	ef84 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x15c>
    eeae:	f240 710f 	movw	r1, #1807	; 0x70f
    eeb2:	203e      	movs	r0, #62	; 0x3e
    eeb4:	f7f5 f844 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eeb8:	2e01      	cmp	r6, #1
    eeba:	bf08      	it	eq
    eebc:	2000      	moveq	r0, #0
    eebe:	d00b      	beq.n	eed8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb0>
    eec0:	2e02      	cmp	r6, #2
    eec2:	bf08      	it	eq
    eec4:	2001      	moveq	r0, #1
    eec6:	d007      	beq.n	eed8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb0>
    eec8:	2e04      	cmp	r6, #4
    eeca:	bf08      	it	eq
    eecc:	2003      	moveq	r0, #3
    eece:	d003      	beq.n	eed8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb0>
    eed0:	2e08      	cmp	r6, #8
    eed2:	bf08      	it	eq
    eed4:	2002      	moveq	r0, #2
    eed6:	d169      	bne.n	efac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x184>
    eed8:	f994 2014 	ldrsb.w	r2, [r4, #20]
    eedc:	ab05      	add	r3, sp, #20
    eede:	f7f1 fa89 	bl	3f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    eee2:	2800      	cmp	r0, #0
    eee4:	d16d      	bne.n	efc2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x19a>
    eee6:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    eeea:	f000 fdd5 	bl	fa98 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    eeee:	f000 ff4b 	bl	fd88 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    eef2:	b178      	cbz	r0, ef14 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>
    eef4:	4aab      	ldr	r2, [pc, #684]	; (f1a4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x37c>)
    eef6:	6811      	ldr	r1, [r2, #0]
    eef8:	0650      	lsls	r0, r2, #25
    eefa:	2e02      	cmp	r6, #2
    eefc:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    ef00:	bf0c      	ite	eq
    ef02:	f3c0 6006 	ubfxeq	r0, r0, #24, #7
    ef06:	f3c0 2006 	ubfxne	r0, r0, #8, #7
    ef0a:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    ef0e:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    ef12:	6010      	str	r0, [r2, #0]
    ef14:	2e02      	cmp	r6, #2
    ef16:	bf08      	it	eq
    ef18:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    ef1c:	d005      	beq.n	ef2a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x102>
    ef1e:	2e01      	cmp	r6, #1
    ef20:	bf0c      	ite	eq
    ef22:	f640 0034 	movweq	r0, #2100	; 0x834
    ef26:	f640 2028 	movwne	r0, #2600	; 0xa28
    ef2a:	f649 51f8 	movw	r1, #40440	; 0x9df8
    ef2e:	4401      	add	r1, r0
    ef30:	79e0      	ldrb	r0, [r4, #7]
    ef32:	2801      	cmp	r0, #1
    ef34:	d006      	beq.n	ef44 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x11c>
    ef36:	f501 72fa 	add.w	r2, r1, #500	; 0x1f4
    ef3a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ef3e:	fbb2 f1f1 	udiv	r1, r2, r1
    ef42:	1a6d      	subs	r5, r5, r1
    ef44:	2800      	cmp	r0, #0
    ef46:	bf04      	itt	eq
    ef48:	4638      	moveq	r0, r7
    ef4a:	f8ca 7514 	streq.w	r7, [sl, #1300]	; 0x514
    ef4e:	f884 9009 	strb.w	r9, [r4, #9]
    ef52:	f8df b254 	ldr.w	fp, [pc, #596]	; f1a8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x380>
    ef56:	f8cb 5540 	str.w	r5, [fp, #1344]	; 0x540
    ef5a:	4991      	ldr	r1, [pc, #580]	; (f1a0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x378>)
    ef5c:	4893      	ldr	r0, [pc, #588]	; (f1ac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x384>)
    ef5e:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    ef62:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ef64:	f8df a228 	ldr.w	sl, [pc, #552]	; f190 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x368>
    ef68:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    ef6c:	62a0      	str	r0, [r4, #40]	; 0x28
    ef6e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    ef72:	f8ca 0000 	str.w	r0, [sl]
    ef76:	2010      	movs	r0, #16
    ef78:	f8c7 0304 	str.w	r0, [r7, #772]	; 0x304
    ef7c:	f1b8 0f01 	cmp.w	r8, #1
    ef80:	d168      	bne.n	f054 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22c>
    ef82:	e052      	b.n	f02a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x202>
    ef84:	7a20      	ldrb	r0, [r4, #8]
    ef86:	2801      	cmp	r0, #1
    ef88:	d124      	bne.n	efd4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1ac>
    ef8a:	7aa0      	ldrb	r0, [r4, #10]
    ef8c:	2801      	cmp	r0, #1
    ef8e:	bf08      	it	eq
    ef90:	2000      	moveq	r0, #0
    ef92:	d010      	beq.n	efb6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x18e>
    ef94:	2802      	cmp	r0, #2
    ef96:	bf08      	it	eq
    ef98:	2001      	moveq	r0, #1
    ef9a:	d00c      	beq.n	efb6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x18e>
    ef9c:	2804      	cmp	r0, #4
    ef9e:	bf08      	it	eq
    efa0:	2003      	moveq	r0, #3
    efa2:	d008      	beq.n	efb6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x18e>
    efa4:	2808      	cmp	r0, #8
    efa6:	bf08      	it	eq
    efa8:	2002      	moveq	r0, #2
    efaa:	d004      	beq.n	efb6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x18e>
    efac:	f240 31ed 	movw	r1, #1005	; 0x3ed
    efb0:	2006      	movs	r0, #6
    efb2:	f7f4 ffc5 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    efb6:	f994 2014 	ldrsb.w	r2, [r4, #20]
    efba:	ab05      	add	r3, sp, #20
    efbc:	f7f1 fa1a 	bl	3f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    efc0:	b120      	cbz	r0, efcc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1a4>
    efc2:	f240 41de 	movw	r1, #1246	; 0x4de
    efc6:	203e      	movs	r0, #62	; 0x3e
    efc8:	f7f4 ffba 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    efcc:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    efd0:	f000 fd62 	bl	fa98 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    efd4:	20ff      	movs	r0, #255	; 0xff
    efd6:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    efda:	f8c7 b11c 	str.w	fp, [r7, #284]	; 0x11c
    efde:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
    efe2:	f440 7088 	orr.w	r0, r0, #272	; 0x110
    efe6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
    efea:	4630      	mov	r0, r6
    efec:	f000 fd3a 	bl	fa64 <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI>
    eff0:	f000 feca 	bl	fd88 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    eff4:	b938      	cbnz	r0, f006 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1de>
    eff6:	f000 feb7 	bl	fd68 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    effa:	b920      	cbnz	r0, f006 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1de>
    effc:	496c      	ldr	r1, [pc, #432]	; (f1b0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x388>)
    effe:	6808      	ldr	r0, [r1, #0]
    f000:	f440 20c0 	orr.w	r0, r0, #393216	; 0x60000
    f004:	6008      	str	r0, [r1, #0]
    f006:	79e1      	ldrb	r1, [r4, #7]
    f008:	2901      	cmp	r1, #1
    f00a:	d006      	beq.n	f01a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1f2>
    f00c:	f24a 12ae 	movw	r2, #41390	; 0xa1ae
    f010:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    f014:	fbb2 f0f0 	udiv	r0, r2, r0
    f018:	1a2d      	subs	r5, r5, r0
    f01a:	4866      	ldr	r0, [pc, #408]	; (f1b4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x38c>)
    f01c:	2900      	cmp	r1, #0
    f01e:	bf08      	it	eq
    f020:	f8ca 0514 	streq.w	r0, [sl, #1300]	; 0x514
    f024:	2002      	movs	r0, #2
    f026:	7260      	strb	r0, [r4, #9]
    f028:	e793      	b.n	ef52 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x12a>
    f02a:	f000 fec7 	bl	fdbc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    f02e:	b168      	cbz	r0, f04c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x224>
    f030:	f016 0f0c 	tst.w	r6, #12
    f034:	d00b      	beq.n	f04e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x226>
    f036:	2001      	movs	r0, #1
    f038:	f8c7 0304 	str.w	r0, [r7, #772]	; 0x304
    f03c:	f000 fcc6 	bl	f9cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    f040:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
    f044:	f8c7 9040 	str.w	r9, [r7, #64]	; 0x40
    f048:	f884 902d 	strb.w	r9, [r4, #45]	; 0x2d
    f04c:	e002      	b.n	f054 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22c>
    f04e:	2000      	movs	r0, #0
    f050:	f000 fcbc 	bl	f9cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    f054:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    f058:	f8ca 0000 	str.w	r0, [sl]
    f05c:	79e0      	ldrb	r0, [r4, #7]
    f05e:	2800      	cmp	r0, #0
    f060:	bf04      	itt	eq
    f062:	f894 002c 	ldrbeq.w	r0, [r4, #44]	; 0x2c
    f066:	f040 0002 	orreq.w	r0, r0, #2
    f06a:	d006      	beq.n	f07a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x252>
    f06c:	2801      	cmp	r0, #1
    f06e:	bf04      	itt	eq
    f070:	f894 002c 	ldrbeq.w	r0, [r4, #44]	; 0x2c
    f074:	f040 0004 	orreq.w	r0, r0, #4
    f078:	d101      	bne.n	f07e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x256>
    f07a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    f07e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    f082:	f010 0f01 	tst.w	r0, #1
    f086:	d029      	beq.n	f0dc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2b4>
    f088:	f010 0f02 	tst.w	r0, #2
    f08c:	d016      	beq.n	f0bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x294>
    f08e:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
    f092:	f040 0001 	orr.w	r0, r0, #1
    f096:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
    f09a:	f8d7 0550 	ldr.w	r0, [r7, #1360]	; 0x550
    f09e:	b2c0      	uxtb	r0, r0
    f0a0:	280b      	cmp	r0, #11
    f0a2:	bf18      	it	ne
    f0a4:	280a      	cmpne	r0, #10
    f0a6:	d003      	beq.n	f0b0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x288>
    f0a8:	2803      	cmp	r0, #3
    f0aa:	bf18      	it	ne
    f0ac:	2802      	cmpne	r0, #2
    f0ae:	d115      	bne.n	f0dc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2b4>
    f0b0:	f240 510f 	movw	r1, #1295	; 0x50f
    f0b4:	f04f 003e 	mov.w	r0, #62	; 0x3e
    f0b8:	f7f4 ff42 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0bc:	f010 0f04 	tst.w	r0, #4
    f0c0:	d00c      	beq.n	f0dc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2b4>
    f0c2:	4937      	ldr	r1, [pc, #220]	; (f1a0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x378>)
    f0c4:	483c      	ldr	r0, [pc, #240]	; (f1b8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x390>)
    f0c6:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    f0ca:	f8db 0140 	ldr.w	r0, [fp, #320]	; 0x140
    f0ce:	b128      	cbz	r0, f0dc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2b4>
    f0d0:	f240 5117 	movw	r1, #1303	; 0x517
    f0d4:	f04f 003e 	mov.w	r0, #62	; 0x3e
    f0d8:	f7f4 ff32 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0dc:	f8cb 904c 	str.w	r9, [fp, #76]	; 0x4c
    f0e0:	4836      	ldr	r0, [pc, #216]	; (f1bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x394>)
    f0e2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    f0e6:	42a8      	cmp	r0, r5
    f0e8:	d304      	bcc.n	f0f4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2cc>
    f0ea:	f240 7136 	movw	r1, #1846	; 0x736
    f0ee:	203e      	movs	r0, #62	; 0x3e
    f0f0:	f7f4 ff26 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0f4:	f1b8 0f01 	cmp.w	r8, #1
    f0f8:	bf08      	it	eq
    f0fa:	f649 70ba 	movweq	r0, #40890	; 0x9fba
    f0fe:	d00d      	beq.n	f11c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2f4>
    f100:	2e02      	cmp	r6, #2
    f102:	bf08      	it	eq
    f104:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    f108:	d005      	beq.n	f116 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2ee>
    f10a:	2e01      	cmp	r6, #1
    f10c:	bf0c      	ite	eq
    f10e:	f640 0034 	movweq	r0, #2100	; 0x834
    f112:	f640 2028 	movwne	r0, #2600	; 0xa28
    f116:	f24a 0150 	movw	r1, #41040	; 0xa050
    f11a:	4408      	add	r0, r1
    f11c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f120:	fbb0 f0f1 	udiv	r0, r0, r1
    f124:	4926      	ldr	r1, [pc, #152]	; (f1c0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x398>)
    f126:	f1b8 0f01 	cmp.w	r8, #1
    f12a:	f101 0228 	add.w	r2, r1, #40	; 0x28
    f12e:	e892 104c 	ldmia.w	r2, {r2, r3, r6, ip}
    f132:	e88d 104c 	stmia.w	sp, {r2, r3, r6, ip}
    f136:	6b89      	ldr	r1, [r1, #56]	; 0x38
    f138:	9104      	str	r1, [sp, #16]
    f13a:	bf14      	ite	ne
    f13c:	2101      	movne	r1, #1
    f13e:	2100      	moveq	r1, #0
    f140:	f88d 1001 	strb.w	r1, [sp, #1]
    f144:	e9cd 5003 	strd	r5, r0, [sp, #12]
    f148:	4668      	mov	r0, sp
    f14a:	f7f4 fd13 	bl	3b74 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    f14e:	7da1      	ldrb	r1, [r4, #22]
    f150:	4628      	mov	r0, r5
    f152:	2996      	cmp	r1, #150	; 0x96
    f154:	bf3c      	itt	cc
    f156:	b007      	addcc	sp, #28
    f158:	e8bd 8ff0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f15c:	f1b8 0f00 	cmp.w	r8, #0
    f160:	d007      	beq.n	f172 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x34a>
    f162:	f1b8 0f01 	cmp.w	r8, #1
    f166:	d00b      	beq.n	f180 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x358>
    f168:	f240 6114 	movw	r1, #1556	; 0x614
    f16c:	203e      	movs	r0, #62	; 0x3e
    f16e:	f7f4 fee7 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f172:	f100 0128 	add.w	r1, r0, #40	; 0x28
    f176:	f7fe feb7 	bl	dee8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    f17a:	b007      	add	sp, #28
    f17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f180:	f100 0129 	add.w	r1, r0, #41	; 0x29
    f184:	f7fe fe98 	bl	deb8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>
    f188:	b007      	add	sp, #28
    f18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f18e:	0000      	.short	0x0000
    f190:	4001f504 	.word	0x4001f504
    f194:	2000106c 	.word	0x2000106c
    f198:	40001000 	.word	0x40001000
    f19c:	40001554 	.word	0x40001554
    f1a0:	4001f098 	.word	0x4001f098
    f1a4:	40001588 	.word	0x40001588
    f1a8:	40008000 	.word	0x40008000
    f1ac:	40008140 	.word	0x40008140
    f1b0:	40001568 	.word	0x40001568
    f1b4:	40001004 	.word	0x40001004
    f1b8:	40001008 	.word	0x40001008
    f1bc:	4000800c 	.word	0x4000800c
    f1c0:	0000fa14 	.word	0x0000fa14

0000f1c4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    f1c4:	b530      	push	{r4, r5, lr}
    f1c6:	4c4b      	ldr	r4, [pc, #300]	; (f2f4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x130>)
    f1c8:	b087      	sub	sp, #28
    f1ca:	000d      	movs	r5, r1
    f1cc:	71e0      	strb	r0, [r4, #7]
    f1ce:	72a2      	strb	r2, [r4, #10]
    f1d0:	bf0c      	ite	eq
    f1d2:	2001      	moveq	r0, #1
    f1d4:	2002      	movne	r0, #2
    f1d6:	7220      	strb	r0, [r4, #8]
    f1d8:	2801      	cmp	r0, #1
    f1da:	d006      	beq.n	f1ea <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x26>
    f1dc:	2802      	cmp	r0, #2
    f1de:	d039      	beq.n	f254 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x90>
    f1e0:	f640 1112 	movw	r1, #2322	; 0x912
    f1e4:	203e      	movs	r0, #62	; 0x3e
    f1e6:	f7f4 feab 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f1ea:	7a60      	ldrb	r0, [r4, #9]
    f1ec:	2802      	cmp	r0, #2
    f1ee:	d131      	bne.n	f254 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x90>
    f1f0:	2a01      	cmp	r2, #1
    f1f2:	bf08      	it	eq
    f1f4:	2000      	moveq	r0, #0
    f1f6:	d010      	beq.n	f21a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x56>
    f1f8:	2a02      	cmp	r2, #2
    f1fa:	bf08      	it	eq
    f1fc:	2001      	moveq	r0, #1
    f1fe:	d00c      	beq.n	f21a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x56>
    f200:	2a04      	cmp	r2, #4
    f202:	bf08      	it	eq
    f204:	2003      	moveq	r0, #3
    f206:	d008      	beq.n	f21a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x56>
    f208:	2a08      	cmp	r2, #8
    f20a:	bf08      	it	eq
    f20c:	2002      	moveq	r0, #2
    f20e:	d004      	beq.n	f21a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x56>
    f210:	f240 31ed 	movw	r1, #1005	; 0x3ed
    f214:	2006      	movs	r0, #6
    f216:	f7f4 fe93 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f21a:	f994 2014 	ldrsb.w	r2, [r4, #20]
    f21e:	7d61      	ldrb	r1, [r4, #21]
    f220:	ab05      	add	r3, sp, #20
    f222:	f7f1 f8e7 	bl	3f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    f226:	b120      	cbz	r0, f232 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x6e>
    f228:	f240 41de 	movw	r1, #1246	; 0x4de
    f22c:	203e      	movs	r0, #62	; 0x3e
    f22e:	f7f4 fe87 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f232:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    f236:	f000 fc2f 	bl	fa98 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    f23a:	20ff      	movs	r0, #255	; 0xff
    f23c:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    f240:	482d      	ldr	r0, [pc, #180]	; (f2f8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x134>)
    f242:	2100      	movs	r1, #0
    f244:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    f248:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    f24c:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    f250:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    f254:	f7ff fc6a 	bl	eb2c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    f258:	7a62      	ldrb	r2, [r4, #9]
    f25a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f25e:	2a02      	cmp	r2, #2
    f260:	7da2      	ldrb	r2, [r4, #22]
    f262:	d028      	beq.n	f2b6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xf2>
    f264:	2802      	cmp	r0, #2
    f266:	bf08      	it	eq
    f268:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    f26c:	d009      	beq.n	f282 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xbe>
    f26e:	2801      	cmp	r0, #1
    f270:	bf08      	it	eq
    f272:	f240 50dc 	movweq	r0, #1500	; 0x5dc
    f276:	d004      	beq.n	f282 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xbe>
    f278:	2804      	cmp	r0, #4
    f27a:	bf0c      	ite	eq
    f27c:	2000      	moveq	r0, #0
    f27e:	f241 70d4 	movwne	r0, #6100	; 0x17d4
    f282:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f286:	fbb0 f0f1 	udiv	r0, r0, r1
    f28a:	4410      	add	r0, r2
    f28c:	491b      	ldr	r1, [pc, #108]	; (f2fc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x138>)
    f28e:	2d01      	cmp	r5, #1
    f290:	f101 023c 	add.w	r2, r1, #60	; 0x3c
    f294:	e892 101c 	ldmia.w	r2, {r2, r3, r4, ip}
    f298:	e88d 101c 	stmia.w	sp, {r2, r3, r4, ip}
    f29c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    f29e:	9104      	str	r1, [sp, #16]
    f2a0:	bf14      	ite	ne
    f2a2:	2101      	movne	r1, #1
    f2a4:	2100      	moveq	r1, #0
    f2a6:	f88d 1001 	strb.w	r1, [sp, #1]
    f2aa:	9001      	str	r0, [sp, #4]
    f2ac:	4668      	mov	r0, sp
    f2ae:	f7f4 fc61 	bl	3b74 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    f2b2:	b007      	add	sp, #28
    f2b4:	bd30      	pop	{r4, r5, pc}
    f2b6:	2801      	cmp	r0, #1
    f2b8:	bf08      	it	eq
    f2ba:	f641 6014 	movweq	r0, #7700	; 0x1e14
    f2be:	d013      	beq.n	f2e8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x124>
    f2c0:	2802      	cmp	r0, #2
    f2c2:	bf08      	it	eq
    f2c4:	f241 1030 	movweq	r0, #4400	; 0x1130
    f2c8:	d00e      	beq.n	f2e8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x124>
    f2ca:	2804      	cmp	r0, #4
    f2cc:	bf08      	it	eq
    f2ce:	f645 70b4 	movweq	r0, #24500	; 0x5fb4
    f2d2:	d009      	beq.n	f2e8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x124>
    f2d4:	2808      	cmp	r0, #8
    f2d6:	bf08      	it	eq
    f2d8:	f247 303c 	movweq	r0, #29500	; 0x733c
    f2dc:	d004      	beq.n	f2e8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x124>
    f2de:	f640 3155 	movw	r1, #2901	; 0xb55
    f2e2:	203e      	movs	r0, #62	; 0x3e
    f2e4:	f7f4 fe2c 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2e8:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f2ec:	fbb0 f0f1 	udiv	r0, r0, r1
    f2f0:	1a10      	subs	r0, r2, r0
    f2f2:	e7cb      	b.n	f28c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc8>
    f2f4:	2000106c 	.word	0x2000106c
    f2f8:	40001000 	.word	0x40001000
    f2fc:	0000fa14 	.word	0x0000fa14

0000f300 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>:
    f300:	4901      	ldr	r1, [pc, #4]	; (f308 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q+0x8>)
    f302:	71c8      	strb	r0, [r1, #7]
    f304:	4770      	bx	lr
    f306:	0000      	.short	0x0000
    f308:	2000106c 	.word	0x2000106c

0000f30c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    f30c:	4902      	ldr	r1, [pc, #8]	; (f318 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    f30e:	2000      	movs	r0, #0
    f310:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    f314:	4770      	bx	lr
    f316:	0000      	.short	0x0000
    f318:	40008000 	.word	0x40008000

0000f31c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    f31c:	490f      	ldr	r1, [pc, #60]	; (f35c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x40>)
    f31e:	b081      	sub	sp, #4
    f320:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    f324:	b172      	cbz	r2, f344 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x28>
    f326:	4a0e      	ldr	r2, [pc, #56]	; (f360 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x44>)
    f328:	6812      	ldr	r2, [r2, #0]
    f32a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    f32e:	4252      	negs	r2, r2
    f330:	7002      	strb	r2, [r0, #0]
    f332:	2000      	movs	r0, #0
    f334:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    f338:	480a      	ldr	r0, [pc, #40]	; (f364 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x48>)
    f33a:	6800      	ldr	r0, [r0, #0]
    f33c:	9000      	str	r0, [sp, #0]
    f33e:	2001      	movs	r0, #1
    f340:	b001      	add	sp, #4
    f342:	4770      	bx	lr
    f344:	4908      	ldr	r1, [pc, #32]	; (f368 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x4c>)
    f346:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    f34a:	29ff      	cmp	r1, #255	; 0xff
    f34c:	bf1a      	itte	ne
    f34e:	4249      	negne	r1, r1
    f350:	7001      	strbne	r1, [r0, #0]
    f352:	2000      	moveq	r0, #0
    f354:	d1f3      	bne.n	f33e <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x22>
    f356:	b001      	add	sp, #4
    f358:	4770      	bx	lr
    f35a:	0000      	.short	0x0000
    f35c:	40001000 	.word	0x40001000
    f360:	40001548 	.word	0x40001548
    f364:	4000111c 	.word	0x4000111c
    f368:	2000106c 	.word	0x2000106c

0000f36c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    f36c:	4903      	ldr	r1, [pc, #12]	; (f37c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    f36e:	0e02      	lsrs	r2, r0, #24
    f370:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    f374:	0200      	lsls	r0, r0, #8
    f376:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    f37a:	4770      	bx	lr
    f37c:	40001000 	.word	0x40001000

0000f380 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    f380:	6800      	ldr	r0, [r0, #0]
    f382:	4903      	ldr	r1, [pc, #12]	; (f390 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    f384:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f388:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    f38c:	4770      	bx	lr
    f38e:	0000      	.short	0x0000
    f390:	40001000 	.word	0x40001000

0000f394 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    f394:	b510      	push	{r4, lr}
    f396:	2200      	movs	r2, #0
    f398:	2901      	cmp	r1, #1
    f39a:	d010      	beq.n	f3be <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x2a>
    f39c:	2902      	cmp	r1, #2
    f39e:	bf08      	it	eq
    f3a0:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
    f3a4:	d00b      	beq.n	f3be <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x2a>
    f3a6:	2904      	cmp	r1, #4
    f3a8:	bf14      	ite	ne
    f3aa:	2908      	cmpne	r1, #8
    f3ac:	f04f 42c7 	moveq.w	r2, #1669332992	; 0x63800000
    f3b0:	d005      	beq.n	f3be <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x2a>
    f3b2:	f240 2163 	movw	r1, #611	; 0x263
    f3b6:	f04f 003e 	mov.w	r0, #62	; 0x3e
    f3ba:	f7f4 fdc1 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3be:	f442 7184 	orr.w	r1, r2, #264	; 0x108
    f3c2:	4a0c      	ldr	r2, [pc, #48]	; (f3f4 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x60>)
    f3c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    f3c8:	6011      	str	r1, [r2, #0]
    f3ca:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
    f3ce:	1d11      	adds	r1, r2, #4
    f3d0:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
    f3d4:	6008      	str	r0, [r1, #0]
    f3d6:	4808      	ldr	r0, [pc, #32]	; (f3f8 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x64>)
    f3d8:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    f3dc:	b2c0      	uxtb	r0, r0
    f3de:	2803      	cmp	r0, #3
    f3e0:	bf1c      	itt	ne
    f3e2:	280b      	cmpne	r0, #11
    f3e4:	bd10      	popne	{r4, pc}
    f3e6:	f44f 7121 	mov.w	r1, #644	; 0x284
    f3ea:	f04f 003e 	mov.w	r0, #62	; 0x3e
    f3ee:	f7f4 fda7 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3f2:	0000      	.short	0x0000
    f3f4:	40001514 	.word	0x40001514
    f3f8:	40001000 	.word	0x40001000

0000f3fc <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    f3fc:	b510      	push	{r4, lr}
    f3fe:	2200      	movs	r2, #0
    f400:	2901      	cmp	r1, #1
    f402:	d010      	beq.n	f426 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x2a>
    f404:	2902      	cmp	r1, #2
    f406:	bf08      	it	eq
    f408:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
    f40c:	d00b      	beq.n	f426 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x2a>
    f40e:	2904      	cmp	r1, #4
    f410:	bf14      	ite	ne
    f412:	2908      	cmpne	r1, #8
    f414:	f04f 42c7 	moveq.w	r2, #1669332992	; 0x63800000
    f418:	d005      	beq.n	f426 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x2a>
    f41a:	f240 2163 	movw	r1, #611	; 0x263
    f41e:	f04f 003e 	mov.w	r0, #62	; 0x3e
    f422:	f7f4 fd8d 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f426:	f442 7184 	orr.w	r1, r2, #264	; 0x108
    f42a:	4a05      	ldr	r2, [pc, #20]	; (f440 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x44>)
    f42c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    f430:	6011      	str	r1, [r2, #0]
    f432:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
    f436:	1d11      	adds	r1, r2, #4
    f438:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
    f43c:	6008      	str	r0, [r1, #0]
    f43e:	bd10      	pop	{r4, pc}
    f440:	40001514 	.word	0x40001514

0000f444 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    f444:	4901      	ldr	r1, [pc, #4]	; (f44c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    f446:	7548      	strb	r0, [r1, #21]
    f448:	4770      	bx	lr
    f44a:	0000      	.short	0x0000
    f44c:	2000106c 	.word	0x2000106c

0000f450 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    f450:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f454:	f8df 83fc 	ldr.w	r8, [pc, #1020]	; f854 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x404>
    f458:	2701      	movs	r7, #1
    f45a:	f8c8 704c 	str.w	r7, [r8, #76]	; 0x4c
    f45e:	48fe      	ldr	r0, [pc, #1016]	; (f858 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
    f460:	f8d0 b540 	ldr.w	fp, [r0, #1344]	; 0x540
    f464:	48fd      	ldr	r0, [pc, #1012]	; (f85c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40c>)
    f466:	f8d0 0504 	ldr.w	r0, [r0, #1284]	; 0x504
    f46a:	4cfd      	ldr	r4, [pc, #1012]	; (f860 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x410>)
    f46c:	4dfd      	ldr	r5, [pc, #1012]	; (f864 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x414>)
    f46e:	f108 0904 	add.w	r9, r8, #4
    f472:	e9c4 0b0d 	strd	r0, fp, [r4, #52]	; 0x34
    f476:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    f47a:	2600      	movs	r6, #0
    f47c:	b1d8      	cbz	r0, f4b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x66>
    f47e:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    f482:	f110 0a00 	adds.w	sl, r0, #0
    f486:	bf18      	it	ne
    f488:	f04f 0a01 	movne.w	sl, #1
    f48c:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
    f490:	2800      	cmp	r0, #0
    f492:	bf18      	it	ne
    f494:	2001      	movne	r0, #1
    f496:	ea50 010a 	orrs.w	r1, r0, sl
    f49a:	d017      	beq.n	f4cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x7c>
    f49c:	2180      	movs	r1, #128	; 0x80
    f49e:	f8c5 1308 	str.w	r1, [r5, #776]	; 0x308
    f4a2:	4af1      	ldr	r2, [pc, #964]	; (f868 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x418>)
    f4a4:	0309      	lsls	r1, r1, #12
    f4a6:	6011      	str	r1, [r2, #0]
    f4a8:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    f4ac:	f090 0f01 	teq	r0, #1
    f4b0:	bf18      	it	ne
    f4b2:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f4b6:	7da0      	ldrb	r0, [r4, #22]
    f4b8:	2896      	cmp	r0, #150	; 0x96
    f4ba:	d37d      	bcc.n	f5b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>
    f4bc:	7a60      	ldrb	r0, [r4, #9]
    f4be:	2801      	cmp	r0, #1
    f4c0:	d07b      	beq.n	f5ba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16a>
    f4c2:	2802      	cmp	r0, #2
    f4c4:	bf08      	it	eq
    f4c6:	f004 fc31 	bleq	13d2c <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    f4ca:	e09d      	b.n	f608 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b8>
    f4cc:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
    f4d0:	48e3      	ldr	r0, [pc, #908]	; (f860 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x410>)
    f4d2:	49e6      	ldr	r1, [pc, #920]	; (f86c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    f4d4:	f8df b398 	ldr.w	fp, [pc, #920]	; f870 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>
    f4d8:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    f4dc:	b32a      	cbz	r2, f52a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    f4de:	f8c5 6100 	str.w	r6, [r5, #256]	; 0x100
    f4e2:	616f      	str	r7, [r5, #20]
    f4e4:	22ff      	movs	r2, #255	; 0xff
    f4e6:	9200      	str	r2, [sp, #0]
    f4e8:	e002      	b.n	f4f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa0>
    f4ea:	1e52      	subs	r2, r2, #1
    f4ec:	9200      	str	r2, [sp, #0]
    f4ee:	d017      	beq.n	f520 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd0>
    f4f0:	f8d5 211c 	ldr.w	r2, [r5, #284]	; 0x11c
    f4f4:	2a00      	cmp	r2, #0
    f4f6:	9a00      	ldr	r2, [sp, #0]
    f4f8:	d0f7      	beq.n	f4ea <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x9a>
    f4fa:	b18a      	cbz	r2, f520 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd0>
    f4fc:	6809      	ldr	r1, [r1, #0]
    f4fe:	f001 0b7f 	and.w	fp, r1, #127	; 0x7f
    f502:	4558      	cmp	r0, fp
    f504:	bf3c      	itt	cc
    f506:	2000      	movcc	r0, #0
    f508:	f000 fa60 	blcc	f9cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    f50c:	f884 b02f 	strb.w	fp, [r4, #47]	; 0x2f
    f510:	f8c5 611c 	str.w	r6, [r5, #284]	; 0x11c
    f514:	2001      	movs	r0, #1
    f516:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    f51a:	642f      	str	r7, [r5, #64]	; 0x40
    f51c:	63af      	str	r7, [r5, #56]	; 0x38
    f51e:	e007      	b.n	f530 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
    f520:	f640 210e 	movw	r1, #2574	; 0xa0e
    f524:	203e      	movs	r0, #62	; 0x3e
    f526:	f7f4 fd0b 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f52a:	f1ba 0f00 	cmp.w	sl, #0
    f52e:	d003      	beq.n	f538 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    f530:	f1ba 0f00 	cmp.w	sl, #0
    f534:	d026      	beq.n	f584 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
    f536:	e05d      	b.n	f5f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1a4>
    f538:	6809      	ldr	r1, [r1, #0]
    f53a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    f53e:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    f542:	f8c5 611c 	str.w	r6, [r5, #284]	; 0x11c
    f546:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    f54a:	b13a      	cbz	r2, f55c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x10c>
    f54c:	4288      	cmp	r0, r1
    f54e:	d216      	bcs.n	f57e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12e>
    f550:	2000      	movs	r0, #0
    f552:	f000 fa3b 	bl	f9cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    f556:	642f      	str	r7, [r5, #64]	; 0x40
    f558:	63af      	str	r7, [r5, #56]	; 0x38
    f55a:	e010      	b.n	f57e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12e>
    f55c:	4ac5      	ldr	r2, [pc, #788]	; (f874 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>)
    f55e:	6812      	ldr	r2, [r2, #0]
    f560:	b293      	uxth	r3, r2
    f562:	0c12      	lsrs	r2, r2, #16
    f564:	4281      	cmp	r1, r0
    f566:	d303      	bcc.n	f570 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x120>
    f568:	2b0f      	cmp	r3, #15
    f56a:	d906      	bls.n	f57a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
    f56c:	2a02      	cmp	r2, #2
    f56e:	d204      	bcs.n	f57a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
    f570:	2001      	movs	r0, #1
    f572:	f000 fa2b 	bl	f9cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    f576:	642f      	str	r7, [r5, #64]	; 0x40
    f578:	e001      	b.n	f57e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12e>
    f57a:	642f      	str	r7, [r5, #64]	; 0x40
    f57c:	63af      	str	r7, [r5, #56]	; 0x38
    f57e:	f8db 0000 	ldr.w	r0, [fp]
    f582:	9000      	str	r0, [sp, #0]
    f584:	2080      	movs	r0, #128	; 0x80
    f586:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    f58a:	f8c8 7040 	str.w	r7, [r8, #64]	; 0x40
    f58e:	f8d8 0540 	ldr.w	r0, [r8, #1344]	; 0x540
    f592:	f8d9 1540 	ldr.w	r1, [r9, #1344]	; 0x540
    f596:	f643 2298 	movw	r2, #15000	; 0x3a98
    f59a:	4410      	add	r0, r2
    f59c:	4ab6      	ldr	r2, [pc, #728]	; (f878 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x428>)
    f59e:	4288      	cmp	r0, r1
    f5a0:	d21b      	bcs.n	f5da <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x18a>
    f5a2:	f8d8 0540 	ldr.w	r0, [r8, #1344]	; 0x540
    f5a6:	f242 7110 	movw	r1, #10000	; 0x2710
    f5aa:	4408      	add	r0, r1
    f5ac:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
    f5b0:	f8c8 6140 	str.w	r6, [r8, #320]	; 0x140
    f5b4:	48b1      	ldr	r0, [pc, #708]	; (f87c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
    f5b6:	e001      	b.n	f5bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>
    f5b8:	e026      	b.n	f608 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b8>
    f5ba:	e023      	b.n	f604 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b4>
    f5bc:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    f5c0:	49af      	ldr	r1, [pc, #700]	; (f880 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x430>)
    f5c2:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    f5c6:	49af      	ldr	r1, [pc, #700]	; (f884 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x434>)
    f5c8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    f5cc:	6008      	str	r0, [r1, #0]
    f5ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f5d0:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    f5d4:	62a0      	str	r0, [r4, #40]	; 0x28
    f5d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f5da:	2000      	movs	r0, #0
    f5dc:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
    f5e0:	f8c8 6140 	str.w	r6, [r8, #320]	; 0x140
    f5e4:	2080      	movs	r0, #128	; 0x80
    f5e6:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    f5ea:	499f      	ldr	r1, [pc, #636]	; (f868 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x418>)
    f5ec:	0300      	lsls	r0, r0, #12
    f5ee:	6008      	str	r0, [r1, #0]
    f5f0:	f8c8 6140 	str.w	r6, [r8, #320]	; 0x140
    f5f4:	2080      	movs	r0, #128	; 0x80
    f5f6:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    f5fa:	499b      	ldr	r1, [pc, #620]	; (f868 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x418>)
    f5fc:	0300      	lsls	r0, r0, #12
    f5fe:	6008      	str	r0, [r1, #0]
    f600:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f604:	f004 fba0 	bl	13d48 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    f608:	4997      	ldr	r1, [pc, #604]	; (f868 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x418>)
    f60a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f60c:	6008      	str	r0, [r1, #0]
    f60e:	62a6      	str	r6, [r4, #40]	; 0x28
    f610:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    f614:	f020 001d 	bic.w	r0, r0, #29
    f618:	f420 7080 	bic.w	r0, r0, #256	; 0x100
    f61c:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    f620:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    f624:	7b20      	ldrb	r0, [r4, #12]
    f626:	f04f 0a00 	mov.w	sl, #0
    f62a:	2800      	cmp	r0, #0
    f62c:	bf1b      	ittet	ne
    f62e:	f8d8 0144 	ldrne.w	r0, [r8, #324]	; 0x144
    f632:	2800      	cmpne	r0, #0
    f634:	2100      	moveq	r1, #0
    f636:	2101      	movne	r1, #1
    f638:	7a60      	ldrb	r0, [r4, #9]
    f63a:	2801      	cmp	r0, #1
    f63c:	d06c      	beq.n	f718 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2c8>
    f63e:	2802      	cmp	r0, #2
    f640:	d075      	beq.n	f72e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2de>
    f642:	bf00      	nop
    f644:	f01a 0f0b 	tst.w	sl, #11
    f648:	d070      	beq.n	f72c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2dc>
    f64a:	488f      	ldr	r0, [pc, #572]	; (f888 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x438>)
    f64c:	7800      	ldrb	r0, [r0, #0]
    f64e:	b1c0      	cbz	r0, f682 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x232>
    f650:	488e      	ldr	r0, [pc, #568]	; (f88c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x43c>)
    f652:	6800      	ldr	r0, [r0, #0]
    f654:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    f658:	bf1b      	ittet	ne
    f65a:	f8d5 1114 	ldrne.w	r1, [r5, #276]	; 0x114
    f65e:	2900      	cmpne	r1, #0
    f660:	2100      	moveq	r1, #0
    f662:	2101      	movne	r1, #1
    f664:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    f668:	2800      	cmp	r0, #0
    f66a:	bf1b      	ittet	ne
    f66c:	f8d5 0118 	ldrne.w	r0, [r5, #280]	; 0x118
    f670:	2800      	cmpne	r0, #0
    f672:	2000      	moveq	r0, #0
    f674:	2001      	movne	r0, #1
    f676:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    f67a:	f8d5 0410 	ldr.w	r0, [r5, #1040]	; 0x410
    f67e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    f682:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    f686:	2800      	cmp	r0, #0
    f688:	bf18      	it	ne
    f68a:	2001      	movne	r0, #1
    f68c:	f88d 0000 	strb.w	r0, [sp]
    f690:	4874      	ldr	r0, [pc, #464]	; (f864 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x414>)
    f692:	f8c0 6100 	str.w	r6, [r0, #256]	; 0x100
    f696:	f8c0 610c 	str.w	r6, [r0, #268]	; 0x10c
    f69a:	f8c0 6110 	str.w	r6, [r0, #272]	; 0x110
    f69e:	f8c0 6104 	str.w	r6, [r0, #260]	; 0x104
    f6a2:	f8c0 6114 	str.w	r6, [r0, #276]	; 0x114
    f6a6:	f8c0 6118 	str.w	r6, [r0, #280]	; 0x118
    f6aa:	4668      	mov	r0, sp
    f6ac:	f7f4 fa54 	bl	3b58 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>
    f6b0:	2800      	cmp	r0, #0
    f6b2:	bf18      	it	ne
    f6b4:	2010      	movne	r0, #16
    f6b6:	ea40 050a 	orr.w	r5, r0, sl
    f6ba:	f8c8 6144 	str.w	r6, [r8, #324]	; 0x144
    f6be:	f015 0f10 	tst.w	r5, #16
    f6c2:	d006      	beq.n	f6d2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x282>
    f6c4:	f015 0f08 	tst.w	r5, #8
    f6c8:	bf02      	ittt	eq
    f6ca:	7a60      	ldrbeq	r0, [r4, #9]
    f6cc:	2801      	cmpeq	r0, #1
    f6ce:	f045 0520 	orreq.w	r5, r5, #32
    f6d2:	486f      	ldr	r0, [pc, #444]	; (f890 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x440>)
    f6d4:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    f6d8:	61e0      	str	r0, [r4, #28]
    f6da:	f7ff fa27 	bl	eb2c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    f6de:	f884 0020 	strb.w	r0, [r4, #32]
    f6e2:	7a61      	ldrb	r1, [r4, #9]
    f6e4:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    f6e8:	4602      	mov	r2, r0
    f6ea:	f015 0f02 	tst.w	r5, #2
    f6ee:	61a6      	str	r6, [r4, #24]
    f6f0:	bf1c      	itt	ne
    f6f2:	f8d9 0540 	ldrne.w	r0, [r9, #1344]	; 0x540
    f6f6:	61a0      	strne	r0, [r4, #24]
    f6f8:	f015 0f08 	tst.w	r5, #8
    f6fc:	bf1c      	itt	ne
    f6fe:	f8d9 0540 	ldrne.w	r0, [r9, #1344]	; 0x540
    f702:	61a0      	strne	r0, [r4, #24]
    f704:	f04f 0800 	mov.w	r8, #0
    f708:	7a20      	ldrb	r0, [r4, #8]
    f70a:	b340      	cbz	r0, f75e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x30e>
    f70c:	f015 0f11 	tst.w	r5, #17
    f710:	d02e      	beq.n	f770 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x320>
    f712:	f7fe fde9 	bl	e2e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    f716:	e072      	b.n	f7fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ae>
    f718:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    f71c:	2800      	cmp	r0, #0
    f71e:	bf14      	ite	ne
    f720:	f04f 0a08 	movne.w	sl, #8
    f724:	f04f 0a00 	moveq.w	sl, #0
    f728:	e78c      	b.n	f644 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1f4>
    f72a:	e000      	b.n	f72e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2de>
    f72c:	e00f      	b.n	f74e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2fe>
    f72e:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    f732:	2800      	cmp	r0, #0
    f734:	bf18      	it	ne
    f736:	2002      	movne	r0, #2
    f738:	4a56      	ldr	r2, [pc, #344]	; (f894 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    f73a:	6812      	ldr	r2, [r2, #0]
    f73c:	f012 0f01 	tst.w	r2, #1
    f740:	bf14      	ite	ne
    f742:	2200      	movne	r2, #0
    f744:	2204      	moveq	r2, #4
    f746:	4310      	orrs	r0, r2
    f748:	ea40 0a01 	orr.w	sl, r0, r1
    f74c:	e77a      	b.n	f644 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1f4>
    f74e:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
    f752:	2800      	cmp	r0, #0
    f754:	bf18      	it	ne
    f756:	2010      	movne	r0, #16
    f758:	ea40 0a0a 	orr.w	sl, r0, sl
    f75c:	e775      	b.n	f64a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1fa>
    f75e:	4942      	ldr	r1, [pc, #264]	; (f868 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x418>)
    f760:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    f764:	6008      	str	r0, [r1, #0]
    f766:	71e6      	strb	r6, [r4, #7]
    f768:	7226      	strb	r6, [r4, #8]
    f76a:	7266      	strb	r6, [r4, #9]
    f76c:	7326      	strb	r6, [r4, #12]
    f76e:	e046      	b.n	f7fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ae>
    f770:	2801      	cmp	r0, #1
    f772:	bf14      	ite	ne
    f774:	f04f 0a01 	movne.w	sl, #1
    f778:	f04f 0a00 	moveq.w	sl, #0
    f77c:	79e0      	ldrb	r0, [r4, #7]
    f77e:	2801      	cmp	r0, #1
    f780:	bf18      	it	ne
    f782:	2000      	movne	r0, #0
    f784:	9000      	str	r0, [sp, #0]
    f786:	71e6      	strb	r6, [r4, #7]
    f788:	7226      	strb	r6, [r4, #8]
    f78a:	7266      	strb	r6, [r4, #9]
    f78c:	7da0      	ldrb	r0, [r4, #22]
    f78e:	2300      	movs	r3, #0
    f790:	b1d1      	cbz	r1, f7c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>
    f792:	f1ba 0f00 	cmp.w	sl, #0
    f796:	d01c      	beq.n	f7d2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x382>
    f798:	f1ba 0f00 	cmp.w	sl, #0
    f79c:	d006      	beq.n	f7ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x35c>
    f79e:	2901      	cmp	r1, #1
    f7a0:	4611      	mov	r1, r2
    f7a2:	d023      	beq.n	f7ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x39c>
    f7a4:	f004 fb81 	bl	13eaa <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    f7a8:	69e1      	ldr	r1, [r4, #28]
    f7aa:	1843      	adds	r3, r0, r1
    f7ac:	9800      	ldr	r0, [sp, #0]
    f7ae:	4619      	mov	r1, r3
    f7b0:	b308      	cbz	r0, f7f6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3a6>
    f7b2:	f10b 003b 	add.w	r0, fp, #59	; 0x3b
    f7b6:	4288      	cmp	r0, r1
    f7b8:	bf98      	it	ls
    f7ba:	71e7      	strbls	r7, [r4, #7]
    f7bc:	d91b      	bls.n	f7f6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3a6>
    f7be:	4829      	ldr	r0, [pc, #164]	; (f864 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x414>)
    f7c0:	6107      	str	r7, [r0, #16]
    f7c2:	f04f 0801 	mov.w	r8, #1
    f7c6:	e01a      	b.n	f7fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ae>
    f7c8:	f240 7152 	movw	r1, #1874	; 0x752
    f7cc:	203e      	movs	r0, #62	; 0x3e
    f7ce:	f7f4 fbb7 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7d2:	2901      	cmp	r1, #1
    f7d4:	4611      	mov	r1, r2
    f7d6:	d004      	beq.n	f7e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x392>
    f7d8:	f004 fb75 	bl	13ec6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    f7dc:	69e1      	ldr	r1, [r4, #28]
    f7de:	1843      	adds	r3, r0, r1
    f7e0:	e7e4      	b.n	f7ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x35c>
    f7e2:	f004 fb93 	bl	13f0c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    f7e6:	69e1      	ldr	r1, [r4, #28]
    f7e8:	1843      	adds	r3, r0, r1
    f7ea:	e7df      	b.n	f7ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x35c>
    f7ec:	f004 fb76 	bl	13edc <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    f7f0:	69e1      	ldr	r1, [r4, #28]
    f7f2:	1843      	adds	r3, r0, r1
    f7f4:	e7da      	b.n	f7ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x35c>
    f7f6:	7aa2      	ldrb	r2, [r4, #10]
    f7f8:	4650      	mov	r0, sl
    f7fa:	f7ff fb15 	bl	ee28 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    f7fe:	f8df a098 	ldr.w	sl, [pc, #152]	; f898 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x448>
    f802:	f015 0f01 	tst.w	r5, #1
    f806:	d003      	beq.n	f810 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3c0>
    f808:	f8da 0000 	ldr.w	r0, [sl]
    f80c:	4780      	blx	r0
    f80e:	e05e      	b.n	f8ce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x47e>
    f810:	f015 0f02 	tst.w	r5, #2
    f814:	d052      	beq.n	f8bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x46c>
    f816:	f015 0f04 	tst.w	r5, #4
    f81a:	d149      	bne.n	f8b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    f81c:	f000 fab4 	bl	fd88 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    f820:	b9b8      	cbnz	r0, f852 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x402>
    f822:	f000 faa1 	bl	fd68 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    f826:	b9a0      	cbnz	r0, f852 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x402>
    f828:	481c      	ldr	r0, [pc, #112]	; (f89c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x44c>)
    f82a:	6800      	ldr	r0, [r0, #0]
    f82c:	f3c0 6c00 	ubfx	ip, r0, #24, #1
    f830:	f3c0 5242 	ubfx	r2, r0, #21, #3
    f834:	f000 030f 	and.w	r3, r0, #15
    f838:	f3c0 1103 	ubfx	r1, r0, #4, #4
    f83c:	f3c0 2003 	ubfx	r0, r0, #8, #4
    f840:	f1bc 0f00 	cmp.w	ip, #0
    f844:	d034      	beq.n	f8b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    f846:	2b00      	cmp	r3, #0
    f848:	bf1c      	itt	ne
    f84a:	2900      	cmpne	r1, #0
    f84c:	2800      	cmpne	r0, #0
    f84e:	d12f      	bne.n	f8b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    f850:	e026      	b.n	f8a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x450>
    f852:	e02d      	b.n	f8b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    f854:	40008000 	.word	0x40008000
    f858:	4000800c 	.word	0x4000800c
    f85c:	4000b000 	.word	0x4000b000
    f860:	2000106c 	.word	0x2000106c
    f864:	40001000 	.word	0x40001000
    f868:	4001f508 	.word	0x4001f508
    f86c:	40001548 	.word	0x40001548
    f870:	4000111c 	.word	0x4000111c
    f874:	40001574 	.word	0x40001574
    f878:	40008140 	.word	0x40008140
    f87c:	4001f098 	.word	0x4001f098
    f880:	40001014 	.word	0x40001014
    f884:	4001f504 	.word	0x4001f504
    f888:	200002e4 	.word	0x200002e4
    f88c:	40001640 	.word	0x40001640
    f890:	40008008 	.word	0x40008008
    f894:	40001400 	.word	0x40001400
    f898:	2000105c 	.word	0x2000105c
    f89c:	40001450 	.word	0x40001450
    f8a0:	4829      	ldr	r0, [pc, #164]	; (f948 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4f8>)
    f8a2:	6800      	ldr	r0, [r0, #0]
    f8a4:	2800      	cmp	r0, #0
    f8a6:	bf18      	it	ne
    f8a8:	2a03      	cmpne	r2, #3
    f8aa:	bf38      	it	cc
    f8ac:	f045 0504 	orrcc.w	r5, r5, #4
    f8b0:	ea27 0095 	bic.w	r0, r7, r5, lsr #2
    f8b4:	4641      	mov	r1, r8
    f8b6:	f8da 2004 	ldr.w	r2, [sl, #4]
    f8ba:	e007      	b.n	f8cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x47c>
    f8bc:	f015 0f28 	tst.w	r5, #40	; 0x28
    f8c0:	d005      	beq.n	f8ce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x47e>
    f8c2:	f8da 2008 	ldr.w	r2, [sl, #8]
    f8c6:	ea27 1155 	bic.w	r1, r7, r5, lsr #5
    f8ca:	4640      	mov	r0, r8
    f8cc:	4790      	blx	r2
    f8ce:	f015 0f10 	tst.w	r5, #16
    f8d2:	bf1c      	itt	ne
    f8d4:	f8da 000c 	ldrne.w	r0, [sl, #12]
    f8d8:	4780      	blxne	r0
    f8da:	7a60      	ldrb	r0, [r4, #9]
    f8dc:	2802      	cmp	r0, #2
    f8de:	d117      	bne.n	f910 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c0>
    f8e0:	7b20      	ldrb	r0, [r4, #12]
    f8e2:	b1a8      	cbz	r0, f910 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c0>
    f8e4:	2802      	cmp	r0, #2
    f8e6:	d006      	beq.n	f8f6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4a6>
    f8e8:	2801      	cmp	r0, #1
    f8ea:	d020      	beq.n	f92e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4de>
    f8ec:	f640 21e1 	movw	r1, #2785	; 0xae1
    f8f0:	203e      	movs	r0, #62	; 0x3e
    f8f2:	f7f4 fb25 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8f6:	6921      	ldr	r1, [r4, #16]
    f8f8:	69e0      	ldr	r0, [r4, #28]
    f8fa:	4408      	add	r0, r1
    f8fc:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
    f900:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f902:	4912      	ldr	r1, [pc, #72]	; (f94c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4fc>)
    f904:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    f908:	62a0      	str	r0, [r4, #40]	; 0x28
    f90a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    f90e:	6008      	str	r0, [r1, #0]
    f910:	f015 0f10 	tst.w	r5, #16
    f914:	bf08      	it	eq
    f916:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f91a:	480d      	ldr	r0, [pc, #52]	; (f950 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x500>)
    f91c:	f8c0 6110 	str.w	r6, [r0, #272]	; 0x110
    f920:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    f924:	2002      	movs	r0, #2
    f926:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    f92a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f92e:	69e1      	ldr	r1, [r4, #28]
    f930:	6920      	ldr	r0, [r4, #16]
    f932:	4288      	cmp	r0, r1
    f934:	bf88      	it	hi
    f936:	f8c9 0540 	strhi.w	r0, [r9, #1344]	; 0x540
    f93a:	d8e1      	bhi.n	f900 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    f93c:	f640 21e2 	movw	r1, #2786	; 0xae2
    f940:	203e      	movs	r0, #62	; 0x3e
    f942:	f7f4 fafd 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f946:	0000      	.short	0x0000
    f948:	40001454 	.word	0x40001454
    f94c:	4001f504 	.word	0x4001f504
    f950:	40001000 	.word	0x40001000

0000f954 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    f954:	b510      	push	{r4, lr}
    f956:	4b18      	ldr	r3, [pc, #96]	; (f9b8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x64>)
    f958:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    f95c:	eb03 0480 	add.w	r4, r3, r0, lsl #2
    f960:	f8c4 c620 	str.w	ip, [r4, #1568]	; 0x620
    f964:	f891 c000 	ldrb.w	ip, [r1]
    f968:	f8d1 1001 	ldr.w	r1, [r1, #1]
    f96c:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
    f970:	f8c4 1600 	str.w	r1, [r4, #1536]	; 0x600
    f974:	4911      	ldr	r1, [pc, #68]	; (f9bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x68>)
    f976:	f8d1 c000 	ldr.w	ip, [r1]
    f97a:	2101      	movs	r1, #1
    f97c:	fa01 f000 	lsl.w	r0, r1, r0
    f980:	ea4c 0100 	orr.w	r1, ip, r0
    f984:	b2c9      	uxtb	r1, r1
    f986:	b132      	cbz	r2, f996 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x42>
    f988:	2a01      	cmp	r2, #1
    f98a:	d00b      	beq.n	f9a4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    f98c:	f240 41ac 	movw	r1, #1196	; 0x4ac
    f990:	203e      	movs	r0, #62	; 0x3e
    f992:	f7f4 fad5 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f996:	f8d3 2640 	ldr.w	r2, [r3, #1600]	; 0x640
    f99a:	f3c2 2207 	ubfx	r2, r2, #8, #8
    f99e:	ea22 0000 	bic.w	r0, r2, r0
    f9a2:	e004      	b.n	f9ae <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5a>
    f9a4:	f8d3 2640 	ldr.w	r2, [r3, #1600]	; 0x640
    f9a8:	ea40 2012 	orr.w	r0, r0, r2, lsr #8
    f9ac:	b2c0      	uxtb	r0, r0
    f9ae:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    f9b2:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    f9b6:	bd10      	pop	{r4, pc}
    f9b8:	40001000 	.word	0x40001000
    f9bc:	40001640 	.word	0x40001640

0000f9c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    f9c0:	4901      	ldr	r1, [pc, #4]	; (f9c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    f9c2:	2001      	movs	r0, #1
    f9c4:	7008      	strb	r0, [r1, #0]
    f9c6:	4770      	bx	lr
    f9c8:	200002e4 	.word	0x200002e4
    f9cc:	4a0e      	ldr	r2, [pc, #56]	; (fa08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>)
    f9ce:	490f      	ldr	r1, [pc, #60]	; (fa0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c>)
    f9d0:	6813      	ldr	r3, [r2, #0]
    f9d2:	b170      	cbz	r0, f9f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x32>
    f9d4:	f023 0382 	bic.w	r3, r3, #130	; 0x82
    f9d8:	f043 037d 	orr.w	r3, r3, #125	; 0x7d
    f9dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    f9e0:	6013      	str	r3, [r2, #0]
    f9e2:	680a      	ldr	r2, [r1, #0]
    f9e4:	f022 0210 	bic.w	r2, r2, #16
    f9e8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
    f9ec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    f9f0:	e005      	b.n	f9fe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e>
    f9f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    f9f6:	6013      	str	r3, [r2, #0]
    f9f8:	680a      	ldr	r2, [r1, #0]
    f9fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    f9fe:	600a      	str	r2, [r1, #0]
    fa00:	4903      	ldr	r1, [pc, #12]	; (fa10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x50>)
    fa02:	f881 002e 	strb.w	r0, [r1, #46]	; 0x2e
    fa06:	4770      	bx	lr
    fa08:	4000173c 	.word	0x4000173c
    fa0c:	4000177c 	.word	0x4000177c
    fa10:	2000106c 	.word	0x2000106c
    fa14:	00000002 	.word	0x00000002
	...
    fa2c:	40008000 	.word	0x40008000
	...
    fa40:	40008000 	.word	0x40008000
	...
    fa50:	00000001 	.word	0x00000001
	...

0000fa64 <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI>:
    fa64:	b510      	push	{r4, lr}
    fa66:	4604      	mov	r4, r0
    fa68:	f000 f9a8 	bl	fdbc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    fa6c:	2800      	cmp	r0, #0
    fa6e:	bf08      	it	eq
    fa70:	bd10      	popeq	{r4, pc}
    fa72:	4908      	ldr	r1, [pc, #32]	; (fa94 <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI+0x30>)
    fa74:	2c08      	cmp	r4, #8
    fa76:	bf18      	it	ne
    fa78:	2c04      	cmpne	r4, #4
    fa7a:	6808      	ldr	r0, [r1, #0]
    fa7c:	bf03      	ittte	eq
    fa7e:	f420 506c 	biceq.w	r0, r0, #15104	; 0x3b00
    fa82:	f440 4044 	orreq.w	r0, r0, #50176	; 0xc400
    fa86:	f040 4000 	orreq.w	r0, r0, #2147483648	; 0x80000000
    fa8a:	f020 4000 	bicne.w	r0, r0, #2147483648	; 0x80000000
    fa8e:	6008      	str	r0, [r1, #0]
    fa90:	bd10      	pop	{r4, pc}
    fa92:	0000      	.short	0x0000
    fa94:	40001740 	.word	0x40001740

0000fa98 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    fa98:	4901      	ldr	r1, [pc, #4]	; (faa0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    fa9a:	b2c0      	uxtb	r0, r0
    fa9c:	6008      	str	r0, [r1, #0]
    fa9e:	4770      	bx	lr
    faa0:	4000150c 	.word	0x4000150c

0000faa4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    faa4:	b510      	push	{r4, lr}
    faa6:	490b      	ldr	r1, [pc, #44]	; (fad4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x30>)
    faa8:	2801      	cmp	r0, #1
    faaa:	bf08      	it	eq
    faac:	2003      	moveq	r0, #3
    faae:	d00f      	beq.n	fad0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2c>
    fab0:	2802      	cmp	r0, #2
    fab2:	bf08      	it	eq
    fab4:	2004      	moveq	r0, #4
    fab6:	d00b      	beq.n	fad0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2c>
    fab8:	2804      	cmp	r0, #4
    faba:	bf08      	it	eq
    fabc:	2006      	moveq	r0, #6
    fabe:	d007      	beq.n	fad0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2c>
    fac0:	2808      	cmp	r0, #8
    fac2:	bf08      	it	eq
    fac4:	2005      	moveq	r0, #5
    fac6:	d003      	beq.n	fad0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2c>
    fac8:	218b      	movs	r1, #139	; 0x8b
    faca:	203f      	movs	r0, #63	; 0x3f
    facc:	f7f4 fa38 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fad0:	6008      	str	r0, [r1, #0]
    fad2:	bd10      	pop	{r4, pc}
    fad4:	40001510 	.word	0x40001510

0000fad8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    fad8:	4770      	bx	lr
    fada:	2100      	movs	r1, #0
    fadc:	7081      	strb	r1, [r0, #2]
    fade:	7001      	strb	r1, [r0, #0]
    fae0:	7041      	strb	r1, [r0, #1]
    fae2:	4770      	bx	lr

0000fae4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    fae4:	b570      	push	{r4, r5, r6, lr}
    fae6:	f7f0 fc9f 	bl	428 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    faea:	4605      	mov	r5, r0
    faec:	2400      	movs	r4, #0
    faee:	e006      	b.n	fafe <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    faf0:	4620      	mov	r0, r4
    faf2:	f7f0 fc9f 	bl	434 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    faf6:	f7ff fff0 	bl	fada <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    fafa:	1c64      	adds	r4, r4, #1
    fafc:	b2e4      	uxtb	r4, r4
    fafe:	42ac      	cmp	r4, r5
    fb00:	d3f6      	bcc.n	faf0 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    fb02:	bd70      	pop	{r4, r5, r6, pc}

0000fb04 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    fb04:	2000      	movs	r0, #0
    fb06:	f7f3 baa9 	b.w	305c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000fb0a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    fb0a:	b510      	push	{r4, lr}
    fb0c:	f7f2 ff7c 	bl	2a08 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    fb10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb14:	f000 b800 	b.w	fb18 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000fb18 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    fb18:	0a41      	lsrs	r1, r0, #9
    fb1a:	f643 5209 	movw	r2, #15625	; 0x3d09
    fb1e:	4351      	muls	r1, r2
    fb20:	f3c0 0008 	ubfx	r0, r0, #0, #9
    fb24:	fb10 f002 	smulbb	r0, r0, r2
    fb28:	f500 7080 	add.w	r0, r0, #256	; 0x100
    fb2c:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    fb30:	4770      	bx	lr

0000fb32 <MPSL_IRQ_RADIO_Handler>:
    fb32:	f7f1 bd87 	b.w	1644 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    fb36:	2800      	cmp	r0, #0
    fb38:	db09      	blt.n	fb4e <MPSL_IRQ_RADIO_Handler+0x1c>
    fb3a:	f000 021f 	and.w	r2, r0, #31
    fb3e:	2101      	movs	r1, #1
    fb40:	4091      	lsls	r1, r2
    fb42:	0940      	lsrs	r0, r0, #5
    fb44:	0080      	lsls	r0, r0, #2
    fb46:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fb4a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    fb4e:	4770      	bx	lr
    fb50:	2800      	cmp	r0, #0
    fb52:	db0d      	blt.n	fb70 <MPSL_IRQ_RADIO_Handler+0x3e>
    fb54:	f000 021f 	and.w	r2, r0, #31
    fb58:	2101      	movs	r1, #1
    fb5a:	4091      	lsls	r1, r2
    fb5c:	0940      	lsrs	r0, r0, #5
    fb5e:	0080      	lsls	r0, r0, #2
    fb60:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fb64:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    fb68:	f3bf 8f4f 	dsb	sy
    fb6c:	f3bf 8f6f 	isb	sy
    fb70:	4770      	bx	lr

0000fb72 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    fb72:	b570      	push	{r4, r5, r6, lr}
    fb74:	4602      	mov	r2, r0
    fb76:	2000      	movs	r0, #0
    fb78:	2900      	cmp	r1, #0
    fb7a:	d01d      	beq.n	fbb8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    fb7c:	fba2 0101 	umull	r0, r1, r2, r1
    fb80:	0a40      	lsrs	r0, r0, #9
    fb82:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    fb86:	0a49      	lsrs	r1, r1, #9
    fb88:	1c40      	adds	r0, r0, #1
    fb8a:	f141 0100 	adc.w	r1, r1, #0
    fb8e:	f240 72a1 	movw	r2, #1953	; 0x7a1
    fb92:	1883      	adds	r3, r0, r2
    fb94:	f141 0100 	adc.w	r1, r1, #0
    fb98:	1c5b      	adds	r3, r3, #1
    fb9a:	f141 0400 	adc.w	r4, r1, #0
    fb9e:	2100      	movs	r1, #0
    fba0:	f1d3 33ff 	rsbs	r3, r3, #4294967295	; 0xffffffff
    fba4:	41a1      	sbcs	r1, r4
    fba6:	d203      	bcs.n	fbb0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    fba8:	2171      	movs	r1, #113	; 0x71
    fbaa:	206d      	movs	r0, #109	; 0x6d
    fbac:	f7f3 fe12 	bl	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fbb0:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    fbb4:	fbb0 f0f2 	udiv	r0, r0, r2
    fbb8:	bd70      	pop	{r4, r5, r6, pc}
    fbba:	5840      	ldr	r0, [r0, r1]
    fbbc:	2800      	cmp	r0, #0
    fbbe:	d000      	beq.n	fbc2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    fbc0:	2001      	movs	r0, #1
    fbc2:	4770      	bx	lr
    fbc4:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    fbc8:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    fbcc:	f002 0201 	and.w	r2, r2, #1
    fbd0:	03c0      	lsls	r0, r0, #15
    fbd2:	d503      	bpl.n	fbdc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    fbd4:	428a      	cmp	r2, r1
    fbd6:	d101      	bne.n	fbdc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    fbd8:	2001      	movs	r0, #1
    fbda:	4770      	bx	lr
    fbdc:	2000      	movs	r0, #0
    fbde:	4770      	bx	lr

0000fbe0 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    fbe0:	b510      	push	{r4, lr}
    fbe2:	2101      	movs	r1, #1
    fbe4:	0788      	lsls	r0, r1, #30
    fbe6:	f7f3 fd9f 	bl	3728 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    fbea:	2800      	cmp	r0, #0
    fbec:	d000      	beq.n	fbf0 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    fbee:	2001      	movs	r0, #1
    fbf0:	bd10      	pop	{r4, pc}

0000fbf2 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    fbf2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    fbf6:	2101      	movs	r1, #1
    fbf8:	6001      	str	r1, [r0, #0]
    fbfa:	4770      	bx	lr

0000fbfc <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    fbfc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    fc00:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    fc04:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    fc08:	f002 0203 	and.w	r2, r2, #3
    fc0c:	03c9      	lsls	r1, r1, #15
    fc0e:	d503      	bpl.n	fc18 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    fc10:	4282      	cmp	r2, r0
    fc12:	d101      	bne.n	fc18 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    fc14:	2001      	movs	r0, #1
    fc16:	4770      	bx	lr
    fc18:	2000      	movs	r0, #0
    fc1a:	4770      	bx	lr

0000fc1c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    fc1c:	b510      	push	{r4, lr}
    fc1e:	2100      	movs	r1, #0
    fc20:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    fc24:	f7f3 fd80 	bl	3728 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    fc28:	2800      	cmp	r0, #0
    fc2a:	d000      	beq.n	fc2e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    fc2c:	2001      	movs	r0, #1
    fc2e:	bd10      	pop	{r4, pc}
    fc30:	2800      	cmp	r0, #0
    fc32:	db09      	blt.n	fc48 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    fc34:	f000 021f 	and.w	r2, r0, #31
    fc38:	2101      	movs	r1, #1
    fc3a:	4091      	lsls	r1, r2
    fc3c:	0940      	lsrs	r0, r0, #5
    fc3e:	0080      	lsls	r0, r0, #2
    fc40:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fc44:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    fc48:	4770      	bx	lr
    fc4a:	2800      	cmp	r0, #0
    fc4c:	db0d      	blt.n	fc6a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    fc4e:	f000 021f 	and.w	r2, r0, #31
    fc52:	2101      	movs	r1, #1
    fc54:	4091      	lsls	r1, r2
    fc56:	0940      	lsrs	r0, r0, #5
    fc58:	0080      	lsls	r0, r0, #2
    fc5a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fc5e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    fc62:	f3bf 8f4f 	dsb	sy
    fc66:	f3bf 8f6f 	isb	sy
    fc6a:	4770      	bx	lr
    fc6c:	00021000 	.word	0x00021000
    fc70:	000000fa 	.word	0x000000fa
    fc74:	24625723 	.word	0x24625723
    fc78:	578f3123 	.word	0x578f3123
    fc7c:	2fd1ee74 	.word	0x2fd1ee74
    fc80:	4594c088 	.word	0x4594c088
    fc84:	36f9a2f7 	.word	0x36f9a2f7
    fc88:	2800      	cmp	r0, #0
    fc8a:	db09      	blt.n	fca0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    fc8c:	f000 021f 	and.w	r2, r0, #31
    fc90:	2101      	movs	r1, #1
    fc92:	4091      	lsls	r1, r2
    fc94:	0940      	lsrs	r0, r0, #5
    fc96:	0080      	lsls	r0, r0, #2
    fc98:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fc9c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    fca0:	4770      	bx	lr

0000fca2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    fca2:	f3ef 8110 	mrs	r1, PRIMASK
    fca6:	b672      	cpsid	i
    fca8:	7802      	ldrb	r2, [r0, #0]
    fcaa:	2a01      	cmp	r2, #1
    fcac:	d001      	beq.n	fcb2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    fcae:	2201      	movs	r2, #1
    fcb0:	e000      	b.n	fcb4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    fcb2:	2200      	movs	r2, #0
    fcb4:	2301      	movs	r3, #1
    fcb6:	7003      	strb	r3, [r0, #0]
    fcb8:	b901      	cbnz	r1, fcbc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    fcba:	b662      	cpsie	i
    fcbc:	b10a      	cbz	r2, fcc2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    fcbe:	2000      	movs	r0, #0
    fcc0:	4770      	bx	lr
    fcc2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    fcc6:	4770      	bx	lr

0000fcc8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    fcc8:	2100      	movs	r1, #0
    fcca:	7001      	strb	r1, [r0, #0]
    fccc:	4608      	mov	r0, r1
    fcce:	4770      	bx	lr

0000fcd0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    fcd0:	f3ef 8110 	mrs	r1, PRIMASK
    fcd4:	b672      	cpsid	i
    fcd6:	2200      	movs	r2, #0
    fcd8:	7002      	strb	r2, [r0, #0]
    fcda:	b901      	cbnz	r1, fcde <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    fcdc:	b662      	cpsie	i
    fcde:	2000      	movs	r0, #0
    fce0:	4770      	bx	lr

0000fce2 <mpsl_low_priority_process>:
    fce2:	f7f3 be63 	b.w	39ac <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000fce6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    fce6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    fcea:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    fcee:	280f      	cmp	r0, #15
    fcf0:	d001      	beq.n	fcf6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    fcf2:	2000      	movs	r0, #0
    fcf4:	4770      	bx	lr
    fcf6:	2001      	movs	r0, #1
    fcf8:	4770      	bx	lr

0000fcfa <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    fcfa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    fcfe:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    fd02:	280a      	cmp	r0, #10
    fd04:	d001      	beq.n	fd0a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    fd06:	2000      	movs	r0, #0
    fd08:	4770      	bx	lr
    fd0a:	2001      	movs	r0, #1
    fd0c:	4770      	bx	lr

0000fd0e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    fd0e:	b500      	push	{lr}
    fd10:	f7ff fff3 	bl	fcfa <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    fd14:	b120      	cbz	r0, fd20 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    fd16:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    fd1a:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    fd1e:	b108      	cbz	r0, fd24 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    fd20:	2000      	movs	r0, #0
    fd22:	bd00      	pop	{pc}
    fd24:	2001      	movs	r0, #1
    fd26:	bd00      	pop	{pc}

0000fd28 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    fd28:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    fd2c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    fd30:	280e      	cmp	r0, #14
    fd32:	d001      	beq.n	fd38 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    fd34:	2000      	movs	r0, #0
    fd36:	4770      	bx	lr
    fd38:	2001      	movs	r0, #1
    fd3a:	4770      	bx	lr

0000fd3c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    fd3c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    fd40:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    fd44:	2810      	cmp	r0, #16
    fd46:	d001      	beq.n	fd4c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    fd48:	2000      	movs	r0, #0
    fd4a:	4770      	bx	lr
    fd4c:	2001      	movs	r0, #1
    fd4e:	4770      	bx	lr

0000fd50 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    fd50:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    fd54:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    fd58:	2806      	cmp	r0, #6
    fd5a:	d003      	beq.n	fd64 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    fd5c:	1c40      	adds	r0, r0, #1
    fd5e:	d001      	beq.n	fd64 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    fd60:	2000      	movs	r0, #0
    fd62:	4770      	bx	lr
    fd64:	2001      	movs	r0, #1
    fd66:	4770      	bx	lr

0000fd68 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    fd68:	b500      	push	{lr}
    fd6a:	f7ff fff1 	bl	fd50 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    fd6e:	b148      	cbz	r0, fd84 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    fd70:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    fd74:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    fd78:	2806      	cmp	r0, #6
    fd7a:	d303      	bcc.n	fd84 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    fd7c:	1c40      	adds	r0, r0, #1
    fd7e:	d001      	beq.n	fd84 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    fd80:	2001      	movs	r0, #1
    fd82:	bd00      	pop	{pc}
    fd84:	2000      	movs	r0, #0
    fd86:	bd00      	pop	{pc}

0000fd88 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    fd88:	b500      	push	{lr}
    fd8a:	f7ff ffe1 	bl	fd50 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    fd8e:	b138      	cbz	r0, fda0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    fd90:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    fd94:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    fd98:	2806      	cmp	r0, #6
    fd9a:	d303      	bcc.n	fda4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    fd9c:	1c40      	adds	r0, r0, #1
    fd9e:	d001      	beq.n	fda4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    fda0:	2000      	movs	r0, #0
    fda2:	bd00      	pop	{pc}
    fda4:	2001      	movs	r0, #1
    fda6:	bd00      	pop	{pc}

0000fda8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    fda8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    fdac:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    fdb0:	280d      	cmp	r0, #13
    fdb2:	d001      	beq.n	fdb8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    fdb4:	2000      	movs	r0, #0
    fdb6:	4770      	bx	lr
    fdb8:	2001      	movs	r0, #1
    fdba:	4770      	bx	lr

0000fdbc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    fdbc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    fdc0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    fdc4:	2808      	cmp	r0, #8
    fdc6:	d001      	beq.n	fdcc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    fdc8:	2000      	movs	r0, #0
    fdca:	4770      	bx	lr
    fdcc:	2001      	movs	r0, #1
    fdce:	4770      	bx	lr

0000fdd0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    fdd0:	2a00      	cmp	r2, #0
    fdd2:	bf04      	itt	eq
    fdd4:	2000      	moveq	r0, #0
    fdd6:	4770      	bxeq	lr
    fdd8:	1e52      	subs	r2, r2, #1
    fdda:	d007      	beq.n	fdec <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    fddc:	7803      	ldrb	r3, [r0, #0]
    fdde:	f891 c000 	ldrb.w	ip, [r1]
    fde2:	4563      	cmp	r3, ip
    fde4:	bf04      	itt	eq
    fde6:	1c40      	addeq	r0, r0, #1
    fde8:	1c49      	addeq	r1, r1, #1
    fdea:	d0f5      	beq.n	fdd8 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    fdec:	7800      	ldrb	r0, [r0, #0]
    fdee:	7809      	ldrb	r1, [r1, #0]
    fdf0:	1a40      	subs	r0, r0, r1
    fdf2:	4770      	bx	lr

0000fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    fdf4:	b4f0      	push	{r4, r5, r6, r7}
    fdf6:	ea80 0c01 	eor.w	ip, r0, r1
    fdfa:	4603      	mov	r3, r0
    fdfc:	f01c 0f03 	tst.w	ip, #3
    fe00:	d13c      	bne.n	fe7c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    fe02:	f013 0f03 	tst.w	r3, #3
    fe06:	d00b      	beq.n	fe20 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    fe08:	2a00      	cmp	r2, #0
    fe0a:	bf04      	itt	eq
    fe0c:	bcf0      	popeq	{r4, r5, r6, r7}
    fe0e:	4770      	bxeq	lr
    fe10:	f811 cb01 	ldrb.w	ip, [r1], #1
    fe14:	f803 cb01 	strb.w	ip, [r3], #1
    fe18:	1e52      	subs	r2, r2, #1
    fe1a:	f013 0f03 	tst.w	r3, #3
    fe1e:	d1f3      	bne.n	fe08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    fe20:	2a03      	cmp	r2, #3
    fe22:	d94f      	bls.n	fec4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    fe24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    fe28:	d24c      	bcs.n	fec4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    fe2a:	f1c2 0c00 	rsb	ip, r2, #0
    fe2e:	ea4f 74ec 	mov.w	r4, ip, asr #31
    fe32:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    fe36:	ea4f 0cac 	mov.w	ip, ip, asr #2
    fe3a:	f1cc 0c00 	rsb	ip, ip, #0
    fe3e:	f1bc 0f00 	cmp.w	ip, #0
    fe42:	dd1b      	ble.n	fe7c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    fe44:	1f0d      	subs	r5, r1, #4
    fe46:	1f1c      	subs	r4, r3, #4
    fe48:	f01c 0f01 	tst.w	ip, #1
    fe4c:	d003      	beq.n	fe56 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    fe4e:	f855 6f04 	ldr.w	r6, [r5, #4]!
    fe52:	f844 6f04 	str.w	r6, [r4, #4]!
    fe56:	ea5f 066c 	movs.w	r6, ip, asr #1
    fe5a:	d007      	beq.n	fe6c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    fe5c:	686f      	ldr	r7, [r5, #4]
    fe5e:	6067      	str	r7, [r4, #4]
    fe60:	f855 7f08 	ldr.w	r7, [r5, #8]!
    fe64:	f844 7f08 	str.w	r7, [r4, #8]!
    fe68:	1e76      	subs	r6, r6, #1
    fe6a:	d1f7      	bne.n	fe5c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    fe6c:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    fe70:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    fe74:	f1cc 0c00 	rsb	ip, ip, #0
    fe78:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    fe7c:	2a00      	cmp	r2, #0
    fe7e:	bf04      	itt	eq
    fe80:	bcf0      	popeq	{r4, r5, r6, r7}
    fe82:	4770      	bxeq	lr
    fe84:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    fe88:	d226      	bcs.n	fed8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    fe8a:	2a00      	cmp	r2, #0
    fe8c:	bfdc      	itt	le
    fe8e:	bcf0      	pople	{r4, r5, r6, r7}
    fe90:	4770      	bxle	lr
    fe92:	1e49      	subs	r1, r1, #1
    fe94:	1e5b      	subs	r3, r3, #1
    fe96:	f012 0f01 	tst.w	r2, #1
    fe9a:	d003      	beq.n	fea4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    fe9c:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    fea0:	f803 cf01 	strb.w	ip, [r3, #1]!
    fea4:	1052      	asrs	r2, r2, #1
    fea6:	bf04      	itt	eq
    fea8:	bcf0      	popeq	{r4, r5, r6, r7}
    feaa:	4770      	bxeq	lr
    feac:	f891 c001 	ldrb.w	ip, [r1, #1]
    feb0:	f883 c001 	strb.w	ip, [r3, #1]
    feb4:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    feb8:	f803 cf02 	strb.w	ip, [r3, #2]!
    febc:	1e52      	subs	r2, r2, #1
    febe:	d1f5      	bne.n	feac <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    fec0:	bcf0      	pop	{r4, r5, r6, r7}
    fec2:	4770      	bx	lr
    fec4:	2a04      	cmp	r2, #4
    fec6:	d3d9      	bcc.n	fe7c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    fec8:	f851 cb04 	ldr.w	ip, [r1], #4
    fecc:	1f12      	subs	r2, r2, #4
    fece:	f843 cb04 	str.w	ip, [r3], #4
    fed2:	2a04      	cmp	r2, #4
    fed4:	d2f8      	bcs.n	fec8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    fed6:	e7d1      	b.n	fe7c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    fed8:	f811 cb01 	ldrb.w	ip, [r1], #1
    fedc:	f803 cb01 	strb.w	ip, [r3], #1
    fee0:	1e52      	subs	r2, r2, #1
    fee2:	d1f9      	bne.n	fed8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    fee4:	bcf0      	pop	{r4, r5, r6, r7}
    fee6:	4770      	bx	lr

0000fee8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    fee8:	b470      	push	{r4, r5, r6}
    feea:	4603      	mov	r3, r0
    feec:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    fef0:	f010 0f03 	tst.w	r0, #3
    fef4:	d009      	beq.n	ff0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    fef6:	2a00      	cmp	r2, #0
    fef8:	bf04      	itt	eq
    fefa:	bc70      	popeq	{r4, r5, r6}
    fefc:	4770      	bxeq	lr
    fefe:	f803 cb01 	strb.w	ip, [r3], #1
    ff02:	1e52      	subs	r2, r2, #1
    ff04:	f013 0f03 	tst.w	r3, #3
    ff08:	d1f5      	bne.n	fef6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    ff0a:	b2c9      	uxtb	r1, r1
    ff0c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    ff10:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    ff14:	2a03      	cmp	r2, #3
    ff16:	d939      	bls.n	ff8c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    ff18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ff1c:	d236      	bcs.n	ff8c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    ff1e:	4251      	negs	r1, r2
    ff20:	17cc      	asrs	r4, r1, #31
    ff22:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    ff26:	1089      	asrs	r1, r1, #2
    ff28:	424e      	negs	r6, r1
    ff2a:	2e00      	cmp	r6, #0
    ff2c:	dd11      	ble.n	ff52 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    ff2e:	1f19      	subs	r1, r3, #4
    ff30:	f016 0f01 	tst.w	r6, #1
    ff34:	bf18      	it	ne
    ff36:	f841 5f04 	strne.w	r5, [r1, #4]!
    ff3a:	1074      	asrs	r4, r6, #1
    ff3c:	d004      	beq.n	ff48 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    ff3e:	604d      	str	r5, [r1, #4]
    ff40:	f841 5f08 	str.w	r5, [r1, #8]!
    ff44:	1e64      	subs	r4, r4, #1
    ff46:	d1fa      	bne.n	ff3e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    ff48:	4271      	negs	r1, r6
    ff4a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    ff4e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    ff52:	2a00      	cmp	r2, #0
    ff54:	bf04      	itt	eq
    ff56:	bc70      	popeq	{r4, r5, r6}
    ff58:	4770      	bxeq	lr
    ff5a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ff5e:	d21d      	bcs.n	ff9c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    ff60:	2a00      	cmp	r2, #0
    ff62:	bfdc      	itt	le
    ff64:	bc70      	pople	{r4, r5, r6}
    ff66:	4770      	bxle	lr
    ff68:	1e59      	subs	r1, r3, #1
    ff6a:	f012 0f01 	tst.w	r2, #1
    ff6e:	bf18      	it	ne
    ff70:	f801 cf01 	strbne.w	ip, [r1, #1]!
    ff74:	1052      	asrs	r2, r2, #1
    ff76:	bf04      	itt	eq
    ff78:	bc70      	popeq	{r4, r5, r6}
    ff7a:	4770      	bxeq	lr
    ff7c:	f881 c001 	strb.w	ip, [r1, #1]
    ff80:	f801 cf02 	strb.w	ip, [r1, #2]!
    ff84:	1e52      	subs	r2, r2, #1
    ff86:	d1f9      	bne.n	ff7c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    ff88:	bc70      	pop	{r4, r5, r6}
    ff8a:	4770      	bx	lr
    ff8c:	2a04      	cmp	r2, #4
    ff8e:	d3e0      	bcc.n	ff52 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    ff90:	1f12      	subs	r2, r2, #4
    ff92:	f843 5b04 	str.w	r5, [r3], #4
    ff96:	2a04      	cmp	r2, #4
    ff98:	d2fa      	bcs.n	ff90 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    ff9a:	e7da      	b.n	ff52 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    ff9c:	f803 cb01 	strb.w	ip, [r3], #1
    ffa0:	1e52      	subs	r2, r2, #1
    ffa2:	d1fb      	bne.n	ff9c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    ffa4:	bc70      	pop	{r4, r5, r6}
    ffa6:	4770      	bx	lr
    ffa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ffac:	4770      	bx	lr
    ffae:	2000      	movs	r0, #0
    ffb0:	4770      	bx	lr
    ffb2:	2000      	movs	r0, #0
    ffb4:	4770      	bx	lr
    ffb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ffba:	4770      	bx	lr
    ffbc:	4770      	bx	lr
    ffbe:	4770      	bx	lr
    ffc0:	2000      	movs	r0, #0
    ffc2:	4770      	bx	lr
    ffc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ffc8:	4770      	bx	lr
    ffca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ffce:	4770      	bx	lr
    ffd0:	2100      	movs	r1, #0
    ffd2:	7001      	strb	r1, [r0, #0]
    ffd4:	4770      	bx	lr
    ffd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ffda:	4770      	bx	lr
    ffdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ffe0:	4770      	bx	lr
    ffe2:	2000      	movs	r0, #0
    ffe4:	4770      	bx	lr
    ffe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ffe8:	4604      	mov	r4, r0
    ffea:	9000      	str	r0, [sp, #0]
    ffec:	4615      	mov	r5, r2
    ffee:	460e      	mov	r6, r1
    fff0:	4668      	mov	r0, sp
    fff2:	f7f3 fe5b 	bl	3cac <mpsl_fem_device_config_254_apply_get+0x74>
    fff6:	462a      	mov	r2, r5
    fff8:	4631      	mov	r1, r6
    fffa:	4668      	mov	r0, sp
    fffc:	f000 f807 	bl	1000e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x126>
   10000:	9800      	ldr	r0, [sp, #0]
   10002:	1dc0      	adds	r0, r0, #7
   10004:	f020 0007 	bic.w	r0, r0, #7
   10008:	9000      	str	r0, [sp, #0]
   1000a:	1b00      	subs	r0, r0, r4
   1000c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1000e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10012:	4606      	mov	r6, r0
   10014:	460c      	mov	r4, r1
   10016:	7808      	ldrb	r0, [r1, #0]
   10018:	7849      	ldrb	r1, [r1, #1]
   1001a:	2700      	movs	r7, #0
   1001c:	4408      	add	r0, r1
   1001e:	4691      	mov	r9, r2
   10020:	f000 08ff 	and.w	r8, r0, #255	; 0xff
   10024:	463d      	mov	r5, r7
   10026:	e00e      	b.n	10046 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x15e>
   10028:	7a23      	ldrb	r3, [r4, #8]
   1002a:	2b02      	cmp	r3, #2
   1002c:	d200      	bcs.n	10030 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x148>
   1002e:	2302      	movs	r3, #2
   10030:	79e2      	ldrb	r2, [r4, #7]
   10032:	2a03      	cmp	r2, #3
   10034:	d200      	bcs.n	10038 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x150>
   10036:	2203      	movs	r2, #3
   10038:	79a1      	ldrb	r1, [r4, #6]
   1003a:	7960      	ldrb	r0, [r4, #5]
   1003c:	f000 fedf 	bl	10dfe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
   10040:	1c6d      	adds	r5, r5, #1
   10042:	4407      	add	r7, r0
   10044:	b2ed      	uxtb	r5, r5
   10046:	4545      	cmp	r5, r8
   10048:	d3ee      	bcc.n	10028 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x140>
   1004a:	6830      	ldr	r0, [r6, #0]
   1004c:	1cc0      	adds	r0, r0, #3
   1004e:	f020 0003 	bic.w	r0, r0, #3
   10052:	6030      	str	r0, [r6, #0]
   10054:	f1b9 0f00 	cmp.w	r9, #0
   10058:	d000      	beq.n	1005c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x174>
   1005a:	2000      	movs	r0, #0
   1005c:	463a      	mov	r2, r7
   1005e:	4641      	mov	r1, r8
   10060:	f7f4 fb8a 	bl	4778 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
   10064:	6831      	ldr	r1, [r6, #0]
   10066:	4408      	add	r0, r1
   10068:	6030      	str	r0, [r6, #0]
   1006a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001006e <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
   1006e:	2000      	movs	r0, #0
   10070:	4770      	bx	lr

00010072 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
   10072:	b510      	push	{r4, lr}
   10074:	4604      	mov	r4, r0
   10076:	4620      	mov	r0, r4
   10078:	f7f4 f838 	bl	40ec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
   1007c:	2800      	cmp	r0, #0
   1007e:	d006      	beq.n	1008e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
   10080:	78a1      	ldrb	r1, [r4, #2]
   10082:	7820      	ldrb	r0, [r4, #0]
   10084:	f7f4 f876 	bl	4174 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
   10088:	2800      	cmp	r0, #0
   1008a:	d0f4      	beq.n	10076 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
   1008c:	2001      	movs	r0, #1
   1008e:	bd10      	pop	{r4, pc}

00010090 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
   10090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10094:	4604      	mov	r4, r0
   10096:	f891 c000 	ldrb.w	ip, [r1]
   1009a:	460d      	mov	r5, r1
   1009c:	2000      	movs	r0, #0
   1009e:	2710      	movs	r7, #16
   100a0:	223e      	movs	r2, #62	; 0x3e
   100a2:	2612      	movs	r6, #18
   100a4:	23ff      	movs	r3, #255	; 0xff
   100a6:	f04f 0e14 	mov.w	lr, #20
   100aa:	f04f 0a0c 	mov.w	sl, #12
   100ae:	f04f 0b05 	mov.w	fp, #5
   100b2:	f104 010d 	add.w	r1, r4, #13
   100b6:	f04f 0911 	mov.w	r9, #17
   100ba:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
   100be:	d271      	bcs.n	101a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
   100c0:	e8df f00c 	tbb	[pc, ip]
   100c4:	2c2a1270 	.word	0x2c2a1270
   100c8:	a871f231 	.word	0xa871f231
   100cc:	f0f3c4b2 	.word	0xf0f3c4b2
   100d0:	ecedeeef 	.word	0xecedeeef
   100d4:	537070eb 	.word	0x537070eb
   100d8:	e8e9ea76 	.word	0xe8e9ea76
   100dc:	e4e5e6e7 	.word	0xe4e5e6e7
   100e0:	e0e1e2e3 	.word	0xe0e1e2e3
   100e4:	00de70df 	.word	0x00de70df
   100e8:	f884 a000 	strb.w	sl, [r4]
   100ec:	7928      	ldrb	r0, [r5, #4]
   100ee:	70a0      	strb	r0, [r4, #2]
   100f0:	7968      	ldrb	r0, [r5, #5]
   100f2:	70e0      	strb	r0, [r4, #3]
   100f4:	f8b5 0005 	ldrh.w	r0, [r5, #5]
   100f8:	0a00      	lsrs	r0, r0, #8
   100fa:	7120      	strb	r0, [r4, #4]
   100fc:	79e8      	ldrb	r0, [r5, #7]
   100fe:	7160      	strb	r0, [r4, #5]
   10100:	7a28      	ldrb	r0, [r5, #8]
   10102:	71a0      	strb	r0, [r4, #6]
   10104:	8928      	ldrh	r0, [r5, #8]
   10106:	0a00      	lsrs	r0, r0, #8
   10108:	71e0      	strb	r0, [r4, #7]
   1010a:	7aa8      	ldrb	r0, [r5, #10]
   1010c:	7220      	strb	r0, [r4, #8]
   1010e:	8968      	ldrh	r0, [r5, #10]
   10110:	0a00      	lsrs	r0, r0, #8
   10112:	7260      	strb	r0, [r4, #9]
   10114:	2008      	movs	r0, #8
   10116:	e182      	b.n	1041e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
   10118:	7027      	strb	r7, [r4, #0]
   1011a:	e001      	b.n	10120 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x90>
   1011c:	201a      	movs	r0, #26
   1011e:	7020      	strb	r0, [r4, #0]
   10120:	7928      	ldrb	r0, [r5, #4]
   10122:	70a0      	strb	r0, [r4, #2]
   10124:	e153      	b.n	103ce <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33e>
   10126:	7022      	strb	r2, [r4, #0]
   10128:	2002      	movs	r0, #2
   1012a:	70a0      	strb	r0, [r4, #2]
   1012c:	f815 0f04 	ldrb.w	r0, [r5, #4]!
   10130:	70e0      	strb	r0, [r4, #3]
   10132:	7aa8      	ldrb	r0, [r5, #10]
   10134:	7120      	strb	r0, [r4, #4]
   10136:	7868      	ldrb	r0, [r5, #1]
   10138:	7160      	strb	r0, [r4, #5]
   1013a:	f8d5 0002 	ldr.w	r0, [r5, #2]
   1013e:	f8c4 0006 	str.w	r0, [r4, #6]
   10142:	88e8      	ldrh	r0, [r5, #6]
   10144:	8160      	strh	r0, [r4, #10]
   10146:	7a28      	ldrb	r0, [r5, #8]
   10148:	7320      	strb	r0, [r4, #12]
   1014a:	7a2e      	ldrb	r6, [r5, #8]
   1014c:	2e1f      	cmp	r6, #31
   1014e:	d300      	bcc.n	10152 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xc2>
   10150:	261f      	movs	r6, #31
   10152:	4608      	mov	r0, r1
   10154:	4632      	mov	r2, r6
   10156:	f105 010b 	add.w	r1, r5, #11
   1015a:	f7ff fe4b 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1015e:	360d      	adds	r6, #13
   10160:	7a69      	ldrb	r1, [r5, #9]
   10162:	55a1      	strb	r1, [r4, r6]
   10164:	1e76      	subs	r6, r6, #1
   10166:	b2f0      	uxtb	r0, r6
   10168:	e157      	b.n	1041a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38a>
   1016a:	7022      	strb	r2, [r4, #0]
   1016c:	200b      	movs	r0, #11
   1016e:	70a0      	strb	r0, [r4, #2]
   10170:	7928      	ldrb	r0, [r5, #4]
   10172:	70e0      	strb	r0, [r4, #3]
   10174:	7968      	ldrb	r0, [r5, #5]
   10176:	7120      	strb	r0, [r4, #4]
   10178:	79a8      	ldrb	r0, [r5, #6]
   1017a:	7160      	strb	r0, [r4, #5]
   1017c:	f8d5 0007 	ldr.w	r0, [r5, #7]
   10180:	f8c4 0006 	str.w	r0, [r4, #6]
   10184:	f8b5 000b 	ldrh.w	r0, [r5, #11]
   10188:	8160      	strh	r0, [r4, #10]
   1018a:	7b68      	ldrb	r0, [r5, #13]
   1018c:	7320      	strb	r0, [r4, #12]
   1018e:	f8d5 000e 	ldr.w	r0, [r5, #14]
   10192:	f8c4 000d 	str.w	r0, [r4, #13]
   10196:	8a68      	ldrh	r0, [r5, #18]
   10198:	f8a4 0011 	strh.w	r0, [r4, #17]
   1019c:	7d28      	ldrb	r0, [r5, #20]
   1019e:	74e0      	strb	r0, [r4, #19]
   101a0:	4630      	mov	r0, r6
   101a2:	e13c      	b.n	1041e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
   101a4:	e13d      	b.n	10422 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x392>
   101a6:	4629      	mov	r1, r5
   101a8:	4620      	mov	r0, r4
   101aa:	f000 f9ac 	bl	10506 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
   101ae:	e134      	b.n	1041a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38a>
   101b0:	7022      	strb	r2, [r4, #0]
   101b2:	200a      	movs	r0, #10
   101b4:	70a0      	strb	r0, [r4, #2]
   101b6:	f815 0f04 	ldrb.w	r0, [r5, #4]!
   101ba:	70e0      	strb	r0, [r4, #3]
   101bc:	78a8      	ldrb	r0, [r5, #2]
   101be:	7120      	strb	r0, [r4, #4]
   101c0:	8868      	ldrh	r0, [r5, #2]
   101c2:	0a00      	lsrs	r0, r0, #8
   101c4:	7160      	strb	r0, [r4, #5]
   101c6:	7928      	ldrb	r0, [r5, #4]
   101c8:	71a0      	strb	r0, [r4, #6]
   101ca:	7968      	ldrb	r0, [r5, #5]
   101cc:	71e0      	strb	r0, [r4, #7]
   101ce:	f8d5 0006 	ldr.w	r0, [r5, #6]
   101d2:	60a0      	str	r0, [r4, #8]
   101d4:	8968      	ldrh	r0, [r5, #10]
   101d6:	81a0      	strh	r0, [r4, #12]
   101d8:	68e8      	ldr	r0, [r5, #12]
   101da:	f8c4 000e 	str.w	r0, [r4, #14]
   101de:	8a28      	ldrh	r0, [r5, #16]
   101e0:	8260      	strh	r0, [r4, #18]
   101e2:	f8d5 0012 	ldr.w	r0, [r5, #18]
   101e6:	6160      	str	r0, [r4, #20]
   101e8:	8ae8      	ldrh	r0, [r5, #22]
   101ea:	8320      	strh	r0, [r4, #24]
   101ec:	7e28      	ldrb	r0, [r5, #24]
   101ee:	76a0      	strb	r0, [r4, #26]
   101f0:	8b28      	ldrh	r0, [r5, #24]
   101f2:	0a00      	lsrs	r0, r0, #8
   101f4:	76e0      	strb	r0, [r4, #27]
   101f6:	7ea8      	ldrb	r0, [r5, #26]
   101f8:	7720      	strb	r0, [r4, #28]
   101fa:	8b68      	ldrh	r0, [r5, #26]
   101fc:	0a00      	lsrs	r0, r0, #8
   101fe:	7760      	strb	r0, [r4, #29]
   10200:	7f28      	ldrb	r0, [r5, #28]
   10202:	77a0      	strb	r0, [r4, #30]
   10204:	8ba8      	ldrh	r0, [r5, #28]
   10206:	0a00      	lsrs	r0, r0, #8
   10208:	77e0      	strb	r0, [r4, #31]
   1020a:	7fa8      	ldrb	r0, [r5, #30]
   1020c:	f884 0020 	strb.w	r0, [r4, #32]
   10210:	201f      	movs	r0, #31
   10212:	e104      	b.n	1041e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
   10214:	7022      	strb	r2, [r4, #0]
   10216:	f884 e002 	strb.w	lr, [r4, #2]
   1021a:	7928      	ldrb	r0, [r5, #4]
   1021c:	70e0      	strb	r0, [r4, #3]
   1021e:	88a8      	ldrh	r0, [r5, #4]
   10220:	0a00      	lsrs	r0, r0, #8
   10222:	7120      	strb	r0, [r4, #4]
   10224:	79a8      	ldrb	r0, [r5, #6]
   10226:	e10d      	b.n	10444 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3b4>
   10228:	7022      	strb	r2, [r4, #0]
   1022a:	2004      	movs	r0, #4
   1022c:	70a0      	strb	r0, [r4, #2]
   1022e:	7928      	ldrb	r0, [r5, #4]
   10230:	70e0      	strb	r0, [r4, #3]
   10232:	79a8      	ldrb	r0, [r5, #6]
   10234:	7120      	strb	r0, [r4, #4]
   10236:	88e8      	ldrh	r0, [r5, #6]
   10238:	0a00      	lsrs	r0, r0, #8
   1023a:	7160      	strb	r0, [r4, #5]
   1023c:	68a8      	ldr	r0, [r5, #8]
   1023e:	f8c4 0006 	str.w	r0, [r4, #6]
   10242:	68e8      	ldr	r0, [r5, #12]
   10244:	f8c4 000a 	str.w	r0, [r4, #10]
   10248:	200c      	movs	r0, #12
   1024a:	e0e8      	b.n	1041e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
   1024c:	7022      	strb	r2, [r4, #0]
   1024e:	2003      	movs	r0, #3
   10250:	70a0      	strb	r0, [r4, #2]
   10252:	7928      	ldrb	r0, [r5, #4]
   10254:	70e0      	strb	r0, [r4, #3]
   10256:	79a8      	ldrb	r0, [r5, #6]
   10258:	7120      	strb	r0, [r4, #4]
   1025a:	88e8      	ldrh	r0, [r5, #6]
   1025c:	0a00      	lsrs	r0, r0, #8
   1025e:	7160      	strb	r0, [r4, #5]
   10260:	7a28      	ldrb	r0, [r5, #8]
   10262:	71a0      	strb	r0, [r4, #6]
   10264:	8928      	ldrh	r0, [r5, #8]
   10266:	0a00      	lsrs	r0, r0, #8
   10268:	71e0      	strb	r0, [r4, #7]
   1026a:	7aa8      	ldrb	r0, [r5, #10]
   1026c:	7220      	strb	r0, [r4, #8]
   1026e:	8968      	ldrh	r0, [r5, #10]
   10270:	0a00      	lsrs	r0, r0, #8
   10272:	7260      	strb	r0, [r4, #9]
   10274:	7b28      	ldrb	r0, [r5, #12]
   10276:	72a0      	strb	r0, [r4, #10]
   10278:	89a8      	ldrh	r0, [r5, #12]
   1027a:	0a00      	lsrs	r0, r0, #8
   1027c:	72e0      	strb	r0, [r4, #11]
   1027e:	e140      	b.n	10502 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x472>
   10280:	e12c      	b.n	104dc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x44c>
   10282:	e100      	b.n	10486 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3f6>
   10284:	e0e1      	b.n	1044a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ba>
   10286:	e10c      	b.n	104a2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x412>
   10288:	e11a      	b.n	104c0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x430>
   1028a:	e0d3      	b.n	10434 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3a4>
   1028c:	e0cb      	b.n	10426 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x396>
   1028e:	e0b9      	b.n	10404 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
   10290:	e0ae      	b.n	103f0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x360>
   10292:	e099      	b.n	103c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x338>
   10294:	e09d      	b.n	103d2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x342>
   10296:	e044      	b.n	10322 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x292>
   10298:	e040      	b.n	1031c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x28c>
   1029a:	e055      	b.n	10348 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2b8>
   1029c:	e04f      	b.n	1033e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ae>
   1029e:	e033      	b.n	10308 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x278>
   102a0:	e027      	b.n	102f2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x262>
   102a2:	e01a      	b.n	102da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
   102a4:	e016      	b.n	102d4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
   102a6:	e000      	b.n	102aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21a>
   102a8:	e057      	b.n	1035a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ca>
   102aa:	7022      	strb	r2, [r4, #0]
   102ac:	f884 b002 	strb.w	fp, [r4, #2]
   102b0:	7928      	ldrb	r0, [r5, #4]
   102b2:	70e0      	strb	r0, [r4, #3]
   102b4:	88a8      	ldrh	r0, [r5, #4]
   102b6:	0a00      	lsrs	r0, r0, #8
   102b8:	7120      	strb	r0, [r4, #4]
   102ba:	f8d5 0006 	ldr.w	r0, [r5, #6]
   102be:	f8c4 0005 	str.w	r0, [r4, #5]
   102c2:	f8d5 000a 	ldr.w	r0, [r5, #10]
   102c6:	f8c4 0009 	str.w	r0, [r4, #9]
   102ca:	89e8      	ldrh	r0, [r5, #14]
   102cc:	f8a4 000d 	strh.w	r0, [r4, #13]
   102d0:	200d      	movs	r0, #13
   102d2:	e0a4      	b.n	1041e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
   102d4:	f884 9000 	strb.w	r9, [r4]
   102d8:	e038      	b.n	1034c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2bc>
   102da:	f884 b000 	strb.w	fp, [r4]
   102de:	7928      	ldrb	r0, [r5, #4]
   102e0:	70a0      	strb	r0, [r4, #2]
   102e2:	7968      	ldrb	r0, [r5, #5]
   102e4:	70e0      	strb	r0, [r4, #3]
   102e6:	f8b5 0005 	ldrh.w	r0, [r5, #5]
   102ea:	0a00      	lsrs	r0, r0, #8
   102ec:	7120      	strb	r0, [r4, #4]
   102ee:	79e8      	ldrb	r0, [r5, #7]
   102f0:	e0a8      	b.n	10444 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3b4>
   102f2:	2008      	movs	r0, #8
   102f4:	7020      	strb	r0, [r4, #0]
   102f6:	7928      	ldrb	r0, [r5, #4]
   102f8:	70a0      	strb	r0, [r4, #2]
   102fa:	79a8      	ldrb	r0, [r5, #6]
   102fc:	70e0      	strb	r0, [r4, #3]
   102fe:	88e8      	ldrh	r0, [r5, #6]
   10300:	0a00      	lsrs	r0, r0, #8
   10302:	7120      	strb	r0, [r4, #4]
   10304:	7a28      	ldrb	r0, [r5, #8]
   10306:	e09d      	b.n	10444 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3b4>
   10308:	2030      	movs	r0, #48	; 0x30
   1030a:	7020      	strb	r0, [r4, #0]
   1030c:	7928      	ldrb	r0, [r5, #4]
   1030e:	70a0      	strb	r0, [r4, #2]
   10310:	79a8      	ldrb	r0, [r5, #6]
   10312:	70e0      	strb	r0, [r4, #3]
   10314:	88e8      	ldrh	r0, [r5, #6]
   10316:	0a00      	lsrs	r0, r0, #8
   10318:	7120      	strb	r0, [r4, #4]
   1031a:	e089      	b.n	10430 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3a0>
   1031c:	7022      	strb	r2, [r4, #0]
   1031e:	2007      	movs	r0, #7
   10320:	e095      	b.n	1044e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3be>
   10322:	7022      	strb	r2, [r4, #0]
   10324:	f884 a002 	strb.w	sl, [r4, #2]
   10328:	7928      	ldrb	r0, [r5, #4]
   1032a:	70e0      	strb	r0, [r4, #3]
   1032c:	79a8      	ldrb	r0, [r5, #6]
   1032e:	7120      	strb	r0, [r4, #4]
   10330:	88e8      	ldrh	r0, [r5, #6]
   10332:	0a00      	lsrs	r0, r0, #8
   10334:	7160      	strb	r0, [r4, #5]
   10336:	7a28      	ldrb	r0, [r5, #8]
   10338:	71a0      	strb	r0, [r4, #6]
   1033a:	7a68      	ldrb	r0, [r5, #9]
   1033c:	e055      	b.n	103ea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
   1033e:	1d29      	adds	r1, r5, #4
   10340:	4620      	mov	r0, r4
   10342:	f7f3 ff39 	bl	41b8 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0xc>
   10346:	e068      	b.n	1041a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38a>
   10348:	2057      	movs	r0, #87	; 0x57
   1034a:	7020      	strb	r0, [r4, #0]
   1034c:	7928      	ldrb	r0, [r5, #4]
   1034e:	70a0      	strb	r0, [r4, #2]
   10350:	88a8      	ldrh	r0, [r5, #4]
   10352:	0a00      	lsrs	r0, r0, #8
   10354:	70e0      	strb	r0, [r4, #3]
   10356:	2002      	movs	r0, #2
   10358:	e061      	b.n	1041e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
   1035a:	7022      	strb	r2, [r4, #0]
   1035c:	220d      	movs	r2, #13
   1035e:	70a2      	strb	r2, [r4, #2]
   10360:	792a      	ldrb	r2, [r5, #4]
   10362:	70e2      	strb	r2, [r4, #3]
   10364:	89ea      	ldrh	r2, [r5, #14]
   10366:	80a2      	strh	r2, [r4, #4]
   10368:	796a      	ldrb	r2, [r5, #5]
   1036a:	71a2      	strb	r2, [r4, #6]
   1036c:	f8d5 2006 	ldr.w	r2, [r5, #6]
   10370:	f8c4 2007 	str.w	r2, [r4, #7]
   10374:	896a      	ldrh	r2, [r5, #10]
   10376:	f8a4 200b 	strh.w	r2, [r4, #11]
   1037a:	7c2a      	ldrb	r2, [r5, #16]
   1037c:	4620      	mov	r0, r4
   1037e:	7362      	strb	r2, [r4, #13]
   10380:	1d29      	adds	r1, r5, #4
   10382:	7c6a      	ldrb	r2, [r5, #17]
   10384:	7382      	strb	r2, [r0, #14]
   10386:	7b8a      	ldrb	r2, [r1, #14]
   10388:	73c2      	strb	r2, [r0, #15]
   1038a:	7e8a      	ldrb	r2, [r1, #26]
   1038c:	7402      	strb	r2, [r0, #16]
   1038e:	7a4a      	ldrb	r2, [r1, #9]
   10390:	7442      	strb	r2, [r0, #17]
   10392:	f8b1 2011 	ldrh.w	r2, [r1, #17]
   10396:	f8ad 2000 	strh.w	r2, [sp]
   1039a:	8242      	strh	r2, [r0, #18]
   1039c:	7cca      	ldrb	r2, [r1, #19]
   1039e:	7502      	strb	r2, [r0, #20]
   103a0:	694a      	ldr	r2, [r1, #20]
   103a2:	f8c0 2015 	str.w	r2, [r0, #21]
   103a6:	8b0a      	ldrh	r2, [r1, #24]
   103a8:	f8a0 2019 	strh.w	r2, [r0, #25]
   103ac:	7a0a      	ldrb	r2, [r1, #8]
   103ae:	76c2      	strb	r2, [r0, #27]
   103b0:	7a0d      	ldrb	r5, [r1, #8]
   103b2:	2de5      	cmp	r5, #229	; 0xe5
   103b4:	d300      	bcc.n	103b8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
   103b6:	25e5      	movs	r5, #229	; 0xe5
   103b8:	462a      	mov	r2, r5
   103ba:	301c      	adds	r0, #28
   103bc:	311c      	adds	r1, #28
   103be:	f7ff fd19 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   103c2:	351a      	adds	r5, #26
   103c4:	b2e8      	uxtb	r0, r5
   103c6:	e028      	b.n	1041a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38a>
   103c8:	7022      	strb	r2, [r4, #0]
   103ca:	f884 9002 	strb.w	r9, [r4, #2]
   103ce:	2001      	movs	r0, #1
   103d0:	e025      	b.n	1041e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
   103d2:	7022      	strb	r2, [r4, #0]
   103d4:	70a6      	strb	r6, [r4, #2]
   103d6:	7928      	ldrb	r0, [r5, #4]
   103d8:	70e0      	strb	r0, [r4, #3]
   103da:	7968      	ldrb	r0, [r5, #5]
   103dc:	7120      	strb	r0, [r4, #4]
   103de:	79a8      	ldrb	r0, [r5, #6]
   103e0:	7160      	strb	r0, [r4, #5]
   103e2:	88e8      	ldrh	r0, [r5, #6]
   103e4:	0a00      	lsrs	r0, r0, #8
   103e6:	71a0      	strb	r0, [r4, #6]
   103e8:	7a28      	ldrb	r0, [r5, #8]
   103ea:	71e0      	strb	r0, [r4, #7]
   103ec:	2006      	movs	r0, #6
   103ee:	e016      	b.n	1041e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
   103f0:	7022      	strb	r2, [r4, #0]
   103f2:	200e      	movs	r0, #14
   103f4:	70a0      	strb	r0, [r4, #2]
   103f6:	220f      	movs	r2, #15
   103f8:	1d29      	adds	r1, r5, #4
   103fa:	1ce0      	adds	r0, r4, #3
   103fc:	f7ff fcfa 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10400:	2010      	movs	r0, #16
   10402:	e00c      	b.n	1041e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
   10404:	7022      	strb	r2, [r4, #0]
   10406:	200f      	movs	r0, #15
   10408:	70a0      	strb	r0, [r4, #2]
   1040a:	7aaa      	ldrb	r2, [r5, #10]
   1040c:	1d29      	adds	r1, r5, #4
   1040e:	1ce0      	adds	r0, r4, #3
   10410:	1dd2      	adds	r2, r2, #7
   10412:	f7ff fcef 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10416:	7aa8      	ldrb	r0, [r5, #10]
   10418:	3008      	adds	r0, #8
   1041a:	2800      	cmp	r0, #0
   1041c:	d001      	beq.n	10422 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x392>
   1041e:	7060      	strb	r0, [r4, #1]
   10420:	1c80      	adds	r0, r0, #2
   10422:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10426:	7022      	strb	r2, [r4, #0]
   10428:	70a7      	strb	r7, [r4, #2]
   1042a:	88a8      	ldrh	r0, [r5, #4]
   1042c:	f8a4 0003 	strh.w	r0, [r4, #3]
   10430:	2003      	movs	r0, #3
   10432:	e7f4      	b.n	1041e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
   10434:	7023      	strb	r3, [r4, #0]
   10436:	20a1      	movs	r0, #161	; 0xa1
   10438:	70a0      	strb	r0, [r4, #2]
   1043a:	7928      	ldrb	r0, [r5, #4]
   1043c:	70e0      	strb	r0, [r4, #3]
   1043e:	7968      	ldrb	r0, [r5, #5]
   10440:	7120      	strb	r0, [r4, #4]
   10442:	2000      	movs	r0, #0
   10444:	7160      	strb	r0, [r4, #5]
   10446:	2004      	movs	r0, #4
   10448:	e7e9      	b.n	1041e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
   1044a:	7023      	strb	r3, [r4, #0]
   1044c:	20a2      	movs	r0, #162	; 0xa2
   1044e:	70a0      	strb	r0, [r4, #2]
   10450:	7928      	ldrb	r0, [r5, #4]
   10452:	70e0      	strb	r0, [r4, #3]
   10454:	88a8      	ldrh	r0, [r5, #4]
   10456:	0a00      	lsrs	r0, r0, #8
   10458:	7120      	strb	r0, [r4, #4]
   1045a:	79a8      	ldrb	r0, [r5, #6]
   1045c:	7160      	strb	r0, [r4, #5]
   1045e:	88e8      	ldrh	r0, [r5, #6]
   10460:	0a00      	lsrs	r0, r0, #8
   10462:	71a0      	strb	r0, [r4, #6]
   10464:	7a28      	ldrb	r0, [r5, #8]
   10466:	71e0      	strb	r0, [r4, #7]
   10468:	8928      	ldrh	r0, [r5, #8]
   1046a:	0a00      	lsrs	r0, r0, #8
   1046c:	7220      	strb	r0, [r4, #8]
   1046e:	7aa8      	ldrb	r0, [r5, #10]
   10470:	7260      	strb	r0, [r4, #9]
   10472:	8968      	ldrh	r0, [r5, #10]
   10474:	0a00      	lsrs	r0, r0, #8
   10476:	72a0      	strb	r0, [r4, #10]
   10478:	7b28      	ldrb	r0, [r5, #12]
   1047a:	72e0      	strb	r0, [r4, #11]
   1047c:	89a8      	ldrh	r0, [r5, #12]
   1047e:	0a00      	lsrs	r0, r0, #8
   10480:	7320      	strb	r0, [r4, #12]
   10482:	200b      	movs	r0, #11
   10484:	e7cb      	b.n	1041e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
   10486:	7023      	strb	r3, [r4, #0]
   10488:	20a3      	movs	r0, #163	; 0xa3
   1048a:	70a0      	strb	r0, [r4, #2]
   1048c:	7928      	ldrb	r0, [r5, #4]
   1048e:	70e0      	strb	r0, [r4, #3]
   10490:	88a8      	ldrh	r0, [r5, #4]
   10492:	0a00      	lsrs	r0, r0, #8
   10494:	7120      	strb	r0, [r4, #4]
   10496:	79a8      	ldrb	r0, [r5, #6]
   10498:	7160      	strb	r0, [r4, #5]
   1049a:	79e8      	ldrb	r0, [r5, #7]
   1049c:	71a0      	strb	r0, [r4, #6]
   1049e:	2005      	movs	r0, #5
   104a0:	e7bd      	b.n	1041e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
   104a2:	7022      	strb	r2, [r4, #0]
   104a4:	2013      	movs	r0, #19
   104a6:	70a0      	strb	r0, [r4, #2]
   104a8:	7928      	ldrb	r0, [r5, #4]
   104aa:	70e0      	strb	r0, [r4, #3]
   104ac:	7968      	ldrb	r0, [r5, #5]
   104ae:	7120      	strb	r0, [r4, #4]
   104b0:	f8d5 0006 	ldr.w	r0, [r5, #6]
   104b4:	f8c4 0005 	str.w	r0, [r4, #5]
   104b8:	8968      	ldrh	r0, [r5, #10]
   104ba:	f8a4 0009 	strh.w	r0, [r4, #9]
   104be:	e020      	b.n	10502 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x472>
   104c0:	7023      	strb	r3, [r4, #0]
   104c2:	20a4      	movs	r0, #164	; 0xa4
   104c4:	70a0      	strb	r0, [r4, #2]
   104c6:	7928      	ldrb	r0, [r5, #4]
   104c8:	70e0      	strb	r0, [r4, #3]
   104ca:	88a8      	ldrh	r0, [r5, #4]
   104cc:	0a00      	lsrs	r0, r0, #8
   104ce:	7120      	strb	r0, [r4, #4]
   104d0:	79a8      	ldrb	r0, [r5, #6]
   104d2:	7160      	strb	r0, [r4, #5]
   104d4:	79e8      	ldrb	r0, [r5, #7]
   104d6:	71a0      	strb	r0, [r4, #6]
   104d8:	2007      	movs	r0, #7
   104da:	e7a0      	b.n	1041e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
   104dc:	7023      	strb	r3, [r4, #0]
   104de:	2080      	movs	r0, #128	; 0x80
   104e0:	70a0      	strb	r0, [r4, #2]
   104e2:	88a9      	ldrh	r1, [r5, #4]
   104e4:	f8a4 1003 	strh.w	r1, [r4, #3]
   104e8:	88e9      	ldrh	r1, [r5, #6]
   104ea:	f8a4 1005 	strh.w	r1, [r4, #5]
   104ee:	7a29      	ldrb	r1, [r5, #8]
   104f0:	71e1      	strb	r1, [r4, #7]
   104f2:	7a69      	ldrb	r1, [r5, #9]
   104f4:	8121      	strh	r1, [r4, #8]
   104f6:	7aa9      	ldrb	r1, [r5, #10]
   104f8:	72a1      	strb	r1, [r4, #10]
   104fa:	7ae9      	ldrb	r1, [r5, #11]
   104fc:	f001 0101 	and.w	r1, r1, #1
   10500:	72e1      	strb	r1, [r4, #11]
   10502:	200a      	movs	r0, #10
   10504:	e78b      	b.n	1041e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>

00010506 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
   10506:	223e      	movs	r2, #62	; 0x3e
   10508:	7002      	strb	r2, [r0, #0]
   1050a:	2201      	movs	r2, #1
   1050c:	7082      	strb	r2, [r0, #2]
   1050e:	790a      	ldrb	r2, [r1, #4]
   10510:	70c2      	strb	r2, [r0, #3]
   10512:	798a      	ldrb	r2, [r1, #6]
   10514:	7102      	strb	r2, [r0, #4]
   10516:	88ca      	ldrh	r2, [r1, #6]
   10518:	0a12      	lsrs	r2, r2, #8
   1051a:	7142      	strb	r2, [r0, #5]
   1051c:	7a0a      	ldrb	r2, [r1, #8]
   1051e:	7182      	strb	r2, [r0, #6]
   10520:	7a4a      	ldrb	r2, [r1, #9]
   10522:	71c2      	strb	r2, [r0, #7]
   10524:	f8d1 200a 	ldr.w	r2, [r1, #10]
   10528:	6082      	str	r2, [r0, #8]
   1052a:	89ca      	ldrh	r2, [r1, #14]
   1052c:	8182      	strh	r2, [r0, #12]
   1052e:	7c0a      	ldrb	r2, [r1, #16]
   10530:	7382      	strb	r2, [r0, #14]
   10532:	8a0a      	ldrh	r2, [r1, #16]
   10534:	0a12      	lsrs	r2, r2, #8
   10536:	73c2      	strb	r2, [r0, #15]
   10538:	7c8a      	ldrb	r2, [r1, #18]
   1053a:	7402      	strb	r2, [r0, #16]
   1053c:	8a4a      	ldrh	r2, [r1, #18]
   1053e:	0a12      	lsrs	r2, r2, #8
   10540:	7442      	strb	r2, [r0, #17]
   10542:	7d0a      	ldrb	r2, [r1, #20]
   10544:	7482      	strb	r2, [r0, #18]
   10546:	8a8a      	ldrh	r2, [r1, #20]
   10548:	0a12      	lsrs	r2, r2, #8
   1054a:	74c2      	strb	r2, [r0, #19]
   1054c:	7d89      	ldrb	r1, [r1, #22]
   1054e:	7501      	strb	r1, [r0, #20]
   10550:	2013      	movs	r0, #19
   10552:	4770      	bx	lr

00010554 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
   10554:	223e      	movs	r2, #62	; 0x3e
   10556:	7002      	strb	r2, [r0, #0]
   10558:	2201      	movs	r2, #1
   1055a:	7082      	strb	r2, [r0, #2]
   1055c:	f811 2f04 	ldrb.w	r2, [r1, #4]!
   10560:	70c2      	strb	r2, [r0, #3]
   10562:	788a      	ldrb	r2, [r1, #2]
   10564:	7102      	strb	r2, [r0, #4]
   10566:	884a      	ldrh	r2, [r1, #2]
   10568:	0a12      	lsrs	r2, r2, #8
   1056a:	7142      	strb	r2, [r0, #5]
   1056c:	790a      	ldrb	r2, [r1, #4]
   1056e:	7182      	strb	r2, [r0, #6]
   10570:	794a      	ldrb	r2, [r1, #5]
   10572:	71c2      	strb	r2, [r0, #7]
   10574:	f8d1 2006 	ldr.w	r2, [r1, #6]
   10578:	6082      	str	r2, [r0, #8]
   1057a:	894a      	ldrh	r2, [r1, #10]
   1057c:	8182      	strh	r2, [r0, #12]
   1057e:	7e0a      	ldrb	r2, [r1, #24]
   10580:	7382      	strb	r2, [r0, #14]
   10582:	8b0a      	ldrh	r2, [r1, #24]
   10584:	0a12      	lsrs	r2, r2, #8
   10586:	73c2      	strb	r2, [r0, #15]
   10588:	7e8a      	ldrb	r2, [r1, #26]
   1058a:	7402      	strb	r2, [r0, #16]
   1058c:	8b4a      	ldrh	r2, [r1, #26]
   1058e:	0a12      	lsrs	r2, r2, #8
   10590:	7442      	strb	r2, [r0, #17]
   10592:	7f0a      	ldrb	r2, [r1, #28]
   10594:	7482      	strb	r2, [r0, #18]
   10596:	8b8a      	ldrh	r2, [r1, #28]
   10598:	0a12      	lsrs	r2, r2, #8
   1059a:	74c2      	strb	r2, [r0, #19]
   1059c:	7f89      	ldrb	r1, [r1, #30]
   1059e:	7501      	strb	r1, [r0, #20]
   105a0:	2113      	movs	r1, #19
   105a2:	7041      	strb	r1, [r0, #1]
   105a4:	4608      	mov	r0, r1
   105a6:	4770      	bx	lr

000105a8 <sdc_hci_evt_get>:
   105a8:	b510      	push	{r4, lr}
   105aa:	b120      	cbz	r0, 105b6 <sdc_hci_evt_get+0xe>
   105ac:	f7ff fd61 	bl	10072 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
   105b0:	b120      	cbz	r0, 105bc <sdc_hci_evt_get+0x14>
   105b2:	2000      	movs	r0, #0
   105b4:	bd10      	pop	{r4, pc}
   105b6:	f06f 0015 	mvn.w	r0, #21
   105ba:	bd10      	pop	{r4, pc}
   105bc:	f06f 0022 	mvn.w	r0, #34	; 0x22
   105c0:	bd10      	pop	{r4, pc}

000105c2 <sdc_hci_cmd_cb_set_event_mask>:
   105c2:	b510      	push	{r4, lr}
   105c4:	f7f3 fe56 	bl	4274 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
   105c8:	2000      	movs	r0, #0
   105ca:	bd10      	pop	{r4, pc}

000105cc <sdc_hci_cmd_vs_conn_event_extend>:
   105cc:	b508      	push	{r3, lr}
   105ce:	7800      	ldrb	r0, [r0, #0]
   105d0:	f88d 0000 	strb.w	r0, [sp]
   105d4:	4668      	mov	r0, sp
   105d6:	f002 fe02 	bl	131de <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
   105da:	bd08      	pop	{r3, pc}

000105dc <sdc_hci_cmd_vs_conn_update>:
   105dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   105de:	2100      	movs	r1, #0
   105e0:	9100      	str	r1, [sp, #0]
   105e2:	9101      	str	r1, [sp, #4]
   105e4:	9102      	str	r1, [sp, #8]
   105e6:	9103      	str	r1, [sp, #12]
   105e8:	f8d0 1002 	ldr.w	r1, [r0, #2]
   105ec:	f641 524c 	movw	r2, #7500	; 0x1d4c
   105f0:	4291      	cmp	r1, r2
   105f2:	d304      	bcc.n	105fe <sdc_hci_cmd_vs_conn_update+0x22>
   105f4:	f240 42e2 	movw	r2, #1250	; 0x4e2
   105f8:	fbb1 f1f2 	udiv	r1, r1, r2
   105fc:	e005      	b.n	1060a <sdc_hci_cmd_vs_conn_update+0x2e>
   105fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10602:	fbb1 f1f2 	udiv	r1, r1, r2
   10606:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
   1060a:	8802      	ldrh	r2, [r0, #0]
   1060c:	b289      	uxth	r1, r1
   1060e:	f8ad 2000 	strh.w	r2, [sp]
   10612:	f8ad 1002 	strh.w	r1, [sp, #2]
   10616:	f8ad 1004 	strh.w	r1, [sp, #4]
   1061a:	88c1      	ldrh	r1, [r0, #6]
   1061c:	f8ad 1006 	strh.w	r1, [sp, #6]
   10620:	8900      	ldrh	r0, [r0, #8]
   10622:	f8ad 0008 	strh.w	r0, [sp, #8]
   10626:	4668      	mov	r0, sp
   10628:	f002 faef 	bl	12c0a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
   1062c:	b004      	add	sp, #16
   1062e:	bd10      	pop	{r4, pc}

00010630 <sdc_hci_cmd_vs_event_length_set>:
   10630:	f7fc bf76 	b.w	d520 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

00010634 <sdc_hci_cmd_vs_llpm_mode_set>:
   10634:	b508      	push	{r3, lr}
   10636:	7800      	ldrb	r0, [r0, #0]
   10638:	f88d 0000 	strb.w	r0, [sp]
   1063c:	4668      	mov	r0, sp
   1063e:	f7fc ff7b 	bl	d538 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>
   10642:	bd08      	pop	{r3, pc}

00010644 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
   10644:	7800      	ldrb	r0, [r0, #0]
   10646:	b100      	cbz	r0, 1064a <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
   10648:	2001      	movs	r0, #1
   1064a:	f002 bd2c 	b.w	130a6 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0001064e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
   1064e:	b570      	push	{r4, r5, r6, lr}
   10650:	4605      	mov	r5, r0
   10652:	2210      	movs	r2, #16
   10654:	2100      	movs	r1, #0
   10656:	f7ff fc47 	bl	fee8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1065a:	2210      	movs	r2, #16
   1065c:	2100      	movs	r1, #0
   1065e:	f105 0010 	add.w	r0, r5, #16
   10662:	f7ff fc41 	bl	fee8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   10666:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
   1066a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   1066e:	1c40      	adds	r0, r0, #1
   10670:	d10b      	bne.n	1068a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
   10672:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   10676:	1c40      	adds	r0, r0, #1
   10678:	d107      	bne.n	1068a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
   1067a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   1067e:	1c40      	adds	r0, r0, #1
   10680:	d103      	bne.n	1068a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
   10682:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   10686:	1c40      	adds	r0, r0, #1
   10688:	d00b      	beq.n	106a2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
   1068a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   1068e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   10692:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   10696:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   1069a:	612a      	str	r2, [r5, #16]
   1069c:	6168      	str	r0, [r5, #20]
   1069e:	61a9      	str	r1, [r5, #24]
   106a0:	61eb      	str	r3, [r5, #28]
   106a2:	2000      	movs	r0, #0
   106a4:	f7f4 fbfe 	bl	4ea4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
   106a8:	b918      	cbnz	r0, 106b2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
   106aa:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   106ae:	07c0      	lsls	r0, r0, #31
   106b0:	d118      	bne.n	106e4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
   106b2:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   106b6:	1c40      	adds	r0, r0, #1
   106b8:	d10b      	bne.n	106d2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
   106ba:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   106be:	1c40      	adds	r0, r0, #1
   106c0:	d107      	bne.n	106d2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
   106c2:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   106c6:	1c40      	adds	r0, r0, #1
   106c8:	d103      	bne.n	106d2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
   106ca:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   106ce:	1c40      	adds	r0, r0, #1
   106d0:	d008      	beq.n	106e4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
   106d2:	f854 0f90 	ldr.w	r0, [r4, #144]!
   106d6:	6861      	ldr	r1, [r4, #4]
   106d8:	68a2      	ldr	r2, [r4, #8]
   106da:	68e3      	ldr	r3, [r4, #12]
   106dc:	6028      	str	r0, [r5, #0]
   106de:	6069      	str	r1, [r5, #4]
   106e0:	60aa      	str	r2, [r5, #8]
   106e2:	60eb      	str	r3, [r5, #12]
   106e4:	2000      	movs	r0, #0
   106e6:	bd70      	pop	{r4, r5, r6, pc}

000106e8 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
   106e8:	b538      	push	{r3, r4, r5, lr}
   106ea:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   106ee:	4604      	mov	r4, r0
   106f0:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   106f4:	1c40      	adds	r0, r0, #1
   106f6:	d105      	bne.n	10704 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
   106f8:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   106fc:	43c0      	mvns	r0, r0
   106fe:	0400      	lsls	r0, r0, #16
   10700:	0c00      	lsrs	r0, r0, #16
   10702:	d03e      	beq.n	10782 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
   10704:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
   10708:	07c0      	lsls	r0, r0, #31
   1070a:	d03a      	beq.n	10782 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
   1070c:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   10710:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
   10714:	f8ad 1000 	strh.w	r1, [sp]
   10718:	f8c4 0001 	str.w	r0, [r4, #1]
   1071c:	f8bd 0000 	ldrh.w	r0, [sp]
   10720:	f8a4 0005 	strh.w	r0, [r4, #5]
   10724:	79a0      	ldrb	r0, [r4, #6]
   10726:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   1072a:	71a0      	strb	r0, [r4, #6]
   1072c:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
   10730:	1c40      	adds	r0, r0, #1
   10732:	d00f      	beq.n	10754 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   10734:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
   10738:	1c40      	adds	r0, r0, #1
   1073a:	d00b      	beq.n	10754 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   1073c:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
   10740:	1c40      	adds	r0, r0, #1
   10742:	d007      	beq.n	10754 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   10744:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   10748:	1c40      	adds	r0, r0, #1
   1074a:	d003      	beq.n	10754 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   1074c:	2000      	movs	r0, #0
   1074e:	f7f4 fba9 	bl	4ea4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
   10752:	b140      	cbz	r0, 10766 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
   10754:	2210      	movs	r2, #16
   10756:	2100      	movs	r1, #0
   10758:	1de0      	adds	r0, r4, #7
   1075a:	f7ff fbc5 	bl	fee8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1075e:	2001      	movs	r0, #1
   10760:	7020      	strb	r0, [r4, #0]
   10762:	2000      	movs	r0, #0
   10764:	bd38      	pop	{r3, r4, r5, pc}
   10766:	f855 2f90 	ldr.w	r2, [r5, #144]!
   1076a:	6869      	ldr	r1, [r5, #4]
   1076c:	68a8      	ldr	r0, [r5, #8]
   1076e:	68eb      	ldr	r3, [r5, #12]
   10770:	f8c4 2007 	str.w	r2, [r4, #7]
   10774:	f8c4 100b 	str.w	r1, [r4, #11]
   10778:	f8c4 000f 	str.w	r0, [r4, #15]
   1077c:	f8c4 3013 	str.w	r3, [r4, #19]
   10780:	e7ed      	b.n	1075e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
   10782:	2000      	movs	r0, #0
   10784:	e7ec      	b.n	10760 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

00010786 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
   10786:	f002 bd1c 	b.w	131c2 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0001078a <sdc_hci_cmd_ip_read_bd_addr>:
   1078a:	f002 be90 	b.w	134ae <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0001078e <sdc_hci_cmd_ip_read_local_version_information>:
   1078e:	f7fc bee9 	b.w	d564 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

00010792 <sdc_hci_cmd_le_add_device_to_resolving_list>:
   10792:	f002 b9eb 	b.w	12b6c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

00010796 <sdc_hci_cmd_le_add_device_to_white_list>:
   10796:	f002 ba04 	b.w	12ba2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0001079a <sdc_hci_cmd_le_clear_resolving_list>:
   1079a:	f002 ba1f 	b.w	12bdc <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0001079e <sdc_hci_cmd_le_clear_white_list>:
   1079e:	f002 ba2a 	b.w	12bf6 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

000107a2 <sdc_hci_cmd_le_encrypt>:
   107a2:	f002 ba82 	b.w	12caa <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

000107a6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
   107a6:	8802      	ldrh	r2, [r0, #0]
   107a8:	800a      	strh	r2, [r1, #0]
   107aa:	f002 ba87 	b.w	12cbc <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

000107ae <sdc_hci_cmd_le_rand>:
   107ae:	f002 ba9e 	b.w	12cee <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

000107b2 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
   107b2:	f002 baa2 	b.w	12cfa <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

000107b6 <sdc_hci_cmd_le_read_buffer_size>:
   107b6:	f7fc be93 	b.w	d4e0 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

000107ba <sdc_hci_cmd_le_read_resolving_list_size>:
   107ba:	f002 baaa 	b.w	12d12 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

000107be <sdc_hci_cmd_le_read_transmit_power>:
   107be:	f002 baac 	b.w	12d1a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

000107c2 <sdc_hci_cmd_le_read_white_list_size>:
   107c2:	f002 bab3 	b.w	12d2c <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

000107c6 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
   107c6:	f002 bab5 	b.w	12d34 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

000107ca <sdc_hci_cmd_le_remove_device_from_white_list>:
   107ca:	f002 bacc 	b.w	12d66 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

000107ce <sdc_hci_cmd_le_set_address_resolution_enable>:
   107ce:	f002 bae6 	b.w	12d9e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

000107d2 <sdc_hci_cmd_le_set_adv_data>:
   107d2:	f002 baf2 	b.w	12dba <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

000107d6 <sdc_hci_cmd_le_set_adv_enable>:
   107d6:	f002 bb08 	b.w	12dea <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

000107da <sdc_hci_cmd_le_set_adv_params>:
   107da:	f002 bb3c 	b.w	12e56 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

000107de <sdc_hci_cmd_le_set_event_mask>:
   107de:	b510      	push	{r4, lr}
   107e0:	f7f3 fd42 	bl	4268 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
   107e4:	2000      	movs	r0, #0
   107e6:	bd10      	pop	{r4, pc}

000107e8 <sdc_hci_cmd_le_set_privacy_mode>:
   107e8:	f002 bbcd 	b.w	12f86 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

000107ec <sdc_hci_cmd_le_set_random_address>:
   107ec:	f002 bbe1 	b.w	12fb2 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

000107f0 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
   107f0:	f002 bbed 	b.w	12fce <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

000107f4 <sdc_hci_cmd_le_set_scan_enable>:
   107f4:	f002 bbf4 	b.w	12fe0 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

000107f8 <sdc_hci_cmd_le_set_scan_params>:
   107f8:	f002 bc0c 	b.w	13014 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

000107fc <sdc_hci_cmd_le_set_scan_response_data>:
   107fc:	f002 bc3b 	b.w	13076 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>
   10800:	1d89      	adds	r1, r1, #6
   10802:	4408      	add	r0, r1
   10804:	4350      	muls	r0, r2
   10806:	b280      	uxth	r0, r0
   10808:	4770      	bx	lr
   1080a:	b570      	push	{r4, r5, r6, lr}
   1080c:	880b      	ldrh	r3, [r1, #0]
   1080e:	7f04      	ldrb	r4, [r0, #28]
   10810:	f100 0624 	add.w	r6, r0, #36	; 0x24
   10814:	f423 4500 	bic.w	r5, r3, #32768	; 0x8000
   10818:	8802      	ldrh	r2, [r0, #0]
   1081a:	442e      	add	r6, r5
   1081c:	1da4      	adds	r4, r4, #6
   1081e:	8836      	ldrh	r6, [r6, #0]
   10820:	4422      	add	r2, r4
   10822:	b292      	uxth	r2, r2
   10824:	4426      	add	r6, r4
   10826:	1e54      	subs	r4, r2, #1
   10828:	4434      	add	r4, r6
   1082a:	fb94 f4f2 	sdiv	r4, r4, r2
   1082e:	fb02 5204 	mla	r2, r2, r4, r5
   10832:	8840      	ldrh	r0, [r0, #2]
   10834:	b292      	uxth	r2, r2
   10836:	4290      	cmp	r0, r2
   10838:	d903      	bls.n	10842 <sdc_hci_cmd_le_set_scan_response_data+0x46>
   1083a:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
   1083e:	4310      	orrs	r0, r2
   10840:	e002      	b.n	10848 <sdc_hci_cmd_le_set_scan_response_data+0x4c>
   10842:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10846:	4398      	bics	r0, r3
   10848:	8008      	strh	r0, [r1, #0]
   1084a:	bd70      	pop	{r4, r5, r6, pc}
   1084c:	4288      	cmp	r0, r1
   1084e:	d101      	bne.n	10854 <sdc_hci_cmd_le_set_scan_response_data+0x58>
   10850:	2001      	movs	r0, #1
   10852:	4770      	bx	lr
   10854:	2000      	movs	r0, #0
   10856:	4770      	bx	lr
   10858:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
   1085c:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
   10860:	429a      	cmp	r2, r3
   10862:	d107      	bne.n	10874 <sdc_hci_cmd_le_set_scan_response_data+0x78>
   10864:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
   10868:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
   1086c:	4288      	cmp	r0, r1
   1086e:	d001      	beq.n	10874 <sdc_hci_cmd_le_set_scan_response_data+0x78>
   10870:	2001      	movs	r0, #1
   10872:	4770      	bx	lr
   10874:	2000      	movs	r0, #0
   10876:	4770      	bx	lr

00010878 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
   10878:	88c1      	ldrh	r1, [r0, #6]
   1087a:	8880      	ldrh	r0, [r0, #4]
   1087c:	f7ff bfe6 	b.w	1084c <sdc_hci_cmd_le_set_scan_response_data+0x50>

00010880 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
   10880:	8881      	ldrh	r1, [r0, #4]
   10882:	8900      	ldrh	r0, [r0, #8]
   10884:	f7ff bfe2 	b.w	1084c <sdc_hci_cmd_le_set_scan_response_data+0x50>

00010888 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
   10888:	b570      	push	{r4, r5, r6, lr}
   1088a:	4604      	mov	r4, r0
   1088c:	f100 0224 	add.w	r2, r0, #36	; 0x24
   10890:	8880      	ldrh	r0, [r0, #4]
   10892:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
   10896:	1881      	adds	r1, r0, r2
   10898:	8a20      	ldrh	r0, [r4, #16]
   1089a:	2800      	cmp	r0, #0
   1089c:	d01a      	beq.n	108d4 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
   1089e:	89a2      	ldrh	r2, [r4, #12]
   108a0:	2500      	movs	r5, #0
   108a2:	4410      	add	r0, r2
   108a4:	b280      	uxth	r0, r0
   108a6:	81a0      	strh	r0, [r4, #12]
   108a8:	880a      	ldrh	r2, [r1, #0]
   108aa:	4290      	cmp	r0, r2
   108ac:	d905      	bls.n	108ba <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
   108ae:	f240 1163 	movw	r1, #355	; 0x163
   108b2:	f04f 0014 	mov.w	r0, #20
   108b6:	f7f3 fb43 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   108ba:	d109      	bne.n	108d0 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
   108bc:	69a0      	ldr	r0, [r4, #24]
   108be:	b108      	cbz	r0, 108c4 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
   108c0:	7f40      	ldrb	r0, [r0, #29]
   108c2:	7088      	strb	r0, [r1, #2]
   108c4:	f104 0104 	add.w	r1, r4, #4
   108c8:	4620      	mov	r0, r4
   108ca:	f7ff ff9e 	bl	1080a <sdc_hci_cmd_le_set_scan_response_data+0xe>
   108ce:	81a5      	strh	r5, [r4, #12]
   108d0:	8225      	strh	r5, [r4, #16]
   108d2:	2001      	movs	r0, #1
   108d4:	bd70      	pop	{r4, r5, r6, pc}

000108d6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
   108d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   108d8:	4604      	mov	r4, r0
   108da:	f100 0324 	add.w	r3, r0, #36	; 0x24
   108de:	88c0      	ldrh	r0, [r0, #6]
   108e0:	460f      	mov	r7, r1
   108e2:	f420 4600 	bic.w	r6, r0, #32768	; 0x8000
   108e6:	8a60      	ldrh	r0, [r4, #18]
   108e8:	1999      	adds	r1, r3, r6
   108ea:	b108      	cbz	r0, 108f0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
   108ec:	42b8      	cmp	r0, r7
   108ee:	d201      	bcs.n	108f4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
   108f0:	2000      	movs	r0, #0
   108f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   108f4:	89e0      	ldrh	r0, [r4, #14]
   108f6:	2500      	movs	r5, #0
   108f8:	b140      	cbz	r0, 1090c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
   108fa:	f8b1 c000 	ldrh.w	ip, [r1]
   108fe:	4560      	cmp	r0, ip
   10900:	d008      	beq.n	10914 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
   10902:	f240 214b 	movw	r1, #587	; 0x24b
   10906:	2014      	movs	r0, #20
   10908:	f7f3 fb1a 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1090c:	7f60      	ldrb	r0, [r4, #29]
   1090e:	7088      	strb	r0, [r1, #2]
   10910:	800d      	strh	r5, [r1, #0]
   10912:	e00e      	b.n	10932 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
   10914:	f894 c01c 	ldrb.w	ip, [r4, #28]
   10918:	4418      	add	r0, r3
   1091a:	f10c 0c06 	add.w	ip, ip, #6
   1091e:	44b4      	add	ip, r6
   10920:	4460      	add	r0, ip
   10922:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
   10926:	f820 cc03 	strh.w	ip, [r0, #-3]
   1092a:	f894 c020 	ldrb.w	ip, [r4, #32]
   1092e:	f800 cc01 	strb.w	ip, [r0, #-1]
   10932:	89e0      	ldrh	r0, [r4, #14]
   10934:	4438      	add	r0, r7
   10936:	81e0      	strh	r0, [r4, #14]
   10938:	8808      	ldrh	r0, [r1, #0]
   1093a:	4438      	add	r0, r7
   1093c:	8008      	strh	r0, [r1, #0]
   1093e:	b19a      	cbz	r2, 10968 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
   10940:	1da1      	adds	r1, r4, #6
   10942:	4620      	mov	r0, r4
   10944:	f7ff ff61 	bl	1080a <sdc_hci_cmd_le_set_scan_response_data+0xe>
   10948:	81e5      	strh	r5, [r4, #14]
   1094a:	7f60      	ldrb	r0, [r4, #29]
   1094c:	1c40      	adds	r0, r0, #1
   1094e:	7760      	strb	r0, [r4, #29]
   10950:	7da0      	ldrb	r0, [r4, #22]
   10952:	f88d 0000 	strb.w	r0, [sp]
   10956:	9800      	ldr	r0, [sp, #0]
   10958:	9000      	str	r0, [sp, #0]
   1095a:	f89d 0000 	ldrb.w	r0, [sp]
   1095e:	b178      	cbz	r0, 10980 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
   10960:	88e0      	ldrh	r0, [r4, #6]
   10962:	82a0      	strh	r0, [r4, #20]
   10964:	75a5      	strb	r5, [r4, #22]
   10966:	e00b      	b.n	10980 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
   10968:	7f20      	ldrb	r0, [r4, #28]
   1096a:	89e1      	ldrh	r1, [r4, #14]
   1096c:	1d80      	adds	r0, r0, #6
   1096e:	4430      	add	r0, r6
   10970:	4419      	add	r1, r3
   10972:	4408      	add	r0, r1
   10974:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
   10978:	83e1      	strh	r1, [r4, #30]
   1097a:	7880      	ldrb	r0, [r0, #2]
   1097c:	f884 0020 	strb.w	r0, [r4, #32]
   10980:	8265      	strh	r5, [r4, #18]
   10982:	2001      	movs	r0, #1
   10984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010986 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
   10986:	1cc0      	adds	r0, r0, #3
   10988:	4770      	bx	lr

0001098a <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
   1098a:	b510      	push	{r4, lr}
   1098c:	88c2      	ldrh	r2, [r0, #6]
   1098e:	8943      	ldrh	r3, [r0, #10]
   10990:	f422 4400 	bic.w	r4, r2, #32768	; 0x8000
   10994:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
   10998:	1b09      	subs	r1, r1, r4
   1099a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
   1099e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
   109a2:	429a      	cmp	r2, r3
   109a4:	d101      	bne.n	109aa <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
   109a6:	8842      	ldrh	r2, [r0, #2]
   109a8:	4411      	add	r1, r2
   109aa:	8802      	ldrh	r2, [r0, #0]
   109ac:	7f00      	ldrb	r0, [r0, #28]
   109ae:	1d80      	adds	r0, r0, #6
   109b0:	4410      	add	r0, r2
   109b2:	b280      	uxth	r0, r0
   109b4:	fb91 f0f0 	sdiv	r0, r1, r0
   109b8:	b280      	uxth	r0, r0
   109ba:	bd10      	pop	{r4, pc}

000109bc <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
   109bc:	b510      	push	{r4, lr}
   109be:	4604      	mov	r4, r0
   109c0:	88c1      	ldrh	r1, [r0, #6]
   109c2:	8880      	ldrh	r0, [r0, #4]
   109c4:	f7ff ff42 	bl	1084c <sdc_hci_cmd_le_set_scan_response_data+0x50>
   109c8:	b938      	cbnz	r0, 109da <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1e>
   109ca:	89a0      	ldrh	r0, [r4, #12]
   109cc:	b928      	cbnz	r0, 109da <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1e>
   109ce:	8a20      	ldrh	r0, [r4, #16]
   109d0:	b918      	cbnz	r0, 109da <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1e>
   109d2:	88a0      	ldrh	r0, [r4, #4]
   109d4:	8aa1      	ldrh	r1, [r4, #20]
   109d6:	4288      	cmp	r0, r1
   109d8:	d101      	bne.n	109de <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x22>
   109da:	2000      	movs	r0, #0
   109dc:	bd10      	pop	{r4, pc}
   109de:	1d21      	adds	r1, r4, #4
   109e0:	4620      	mov	r0, r4
   109e2:	f7ff ff12 	bl	1080a <sdc_hci_cmd_le_set_scan_response_data+0xe>
   109e6:	2000      	movs	r0, #0
   109e8:	8220      	strh	r0, [r4, #16]
   109ea:	2001      	movs	r0, #1
   109ec:	bd10      	pop	{r4, pc}

000109ee <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
   109ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   109f2:	4604      	mov	r4, r0
   109f4:	8940      	ldrh	r0, [r0, #10]
   109f6:	88a7      	ldrh	r7, [r4, #4]
   109f8:	2500      	movs	r5, #0
   109fa:	f104 060a 	add.w	r6, r4, #10
   109fe:	e006      	b.n	10a0e <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
   10a00:	4631      	mov	r1, r6
   10a02:	4620      	mov	r0, r4
   10a04:	f7ff ff01 	bl	1080a <sdc_hci_cmd_le_set_scan_response_data+0xe>
   10a08:	1c6d      	adds	r5, r5, #1
   10a0a:	8960      	ldrh	r0, [r4, #10]
   10a0c:	b2ad      	uxth	r5, r5
   10a0e:	4639      	mov	r1, r7
   10a10:	f7ff ff1c 	bl	1084c <sdc_hci_cmd_le_set_scan_response_data+0x50>
   10a14:	2800      	cmp	r0, #0
   10a16:	d0f3      	beq.n	10a00 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
   10a18:	4628      	mov	r0, r5
   10a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010a1e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
   10a1e:	b570      	push	{r4, r5, r6, lr}
   10a20:	4604      	mov	r4, r0
   10a22:	f100 0224 	add.w	r2, r0, #36	; 0x24
   10a26:	88c1      	ldrh	r1, [r0, #6]
   10a28:	8880      	ldrh	r0, [r0, #4]
   10a2a:	f420 4300 	bic.w	r3, r0, #32768	; 0x8000
   10a2e:	18d5      	adds	r5, r2, r3
   10a30:	88a2      	ldrh	r2, [r4, #4]
   10a32:	8aa3      	ldrh	r3, [r4, #20]
   10a34:	429a      	cmp	r2, r3
   10a36:	d013      	beq.n	10a60 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
   10a38:	f7ff ff08 	bl	1084c <sdc_hci_cmd_le_set_scan_response_data+0x50>
   10a3c:	b980      	cbnz	r0, 10a60 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
   10a3e:	89a0      	ldrh	r0, [r4, #12]
   10a40:	b970      	cbnz	r0, 10a60 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
   10a42:	69a4      	ldr	r4, [r4, #24]
   10a44:	b174      	cbz	r4, 10a64 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
   10a46:	4620      	mov	r0, r4
   10a48:	f7ff ff1a 	bl	10880 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
   10a4c:	b950      	cbnz	r0, 10a64 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
   10a4e:	8920      	ldrh	r0, [r4, #8]
   10a50:	3424      	adds	r4, #36	; 0x24
   10a52:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
   10a56:	4420      	add	r0, r4
   10a58:	78a9      	ldrb	r1, [r5, #2]
   10a5a:	7880      	ldrb	r0, [r0, #2]
   10a5c:	4288      	cmp	r0, r1
   10a5e:	d101      	bne.n	10a64 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
   10a60:	2000      	movs	r0, #0
   10a62:	bd70      	pop	{r4, r5, r6, pc}
   10a64:	4628      	mov	r0, r5
   10a66:	bd70      	pop	{r4, r5, r6, pc}

00010a68 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
   10a68:	8803      	ldrh	r3, [r0, #0]
   10a6a:	2b45      	cmp	r3, #69	; 0x45
   10a6c:	d200      	bcs.n	10a70 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
   10a6e:	2345      	movs	r3, #69	; 0x45
   10a70:	8013      	strh	r3, [r2, #0]
   10a72:	88c2      	ldrh	r2, [r0, #6]
   10a74:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
   10a78:	f100 0224 	add.w	r2, r0, #36	; 0x24
   10a7c:	441a      	add	r2, r3
   10a7e:	600a      	str	r2, [r1, #0]
   10a80:	89c0      	ldrh	r0, [r0, #14]
   10a82:	4770      	bx	lr

00010a84 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
   10a84:	7f00      	ldrb	r0, [r0, #28]
   10a86:	1d80      	adds	r0, r0, #6
   10a88:	4408      	add	r0, r1
   10a8a:	1ec0      	subs	r0, r0, #3
   10a8c:	6010      	str	r0, [r2, #0]
   10a8e:	8808      	ldrh	r0, [r1, #0]
   10a90:	4770      	bx	lr

00010a92 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
   10a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10a94:	88c6      	ldrh	r6, [r0, #6]
   10a96:	8885      	ldrh	r5, [r0, #4]
   10a98:	4604      	mov	r4, r0
   10a9a:	f100 0224 	add.w	r2, r0, #36	; 0x24
   10a9e:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
   10aa2:	1817      	adds	r7, r2, r0
   10aa4:	4631      	mov	r1, r6
   10aa6:	4628      	mov	r0, r5
   10aa8:	f7ff fed0 	bl	1084c <sdc_hci_cmd_le_set_scan_response_data+0x50>
   10aac:	b108      	cbz	r0, 10ab2 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x20>
   10aae:	2000      	movs	r0, #0
   10ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10ab2:	89a0      	ldrh	r0, [r4, #12]
   10ab4:	8a21      	ldrh	r1, [r4, #16]
   10ab6:	4408      	add	r0, r1
   10ab8:	8839      	ldrh	r1, [r7, #0]
   10aba:	4288      	cmp	r0, r1
   10abc:	d201      	bcs.n	10ac2 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x30>
   10abe:	2001      	movs	r0, #1
   10ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10ac2:	f8ad 5000 	strh.w	r5, [sp]
   10ac6:	4669      	mov	r1, sp
   10ac8:	4620      	mov	r0, r4
   10aca:	f7ff fe9e 	bl	1080a <sdc_hci_cmd_le_set_scan_response_data+0xe>
   10ace:	4631      	mov	r1, r6
   10ad0:	f8bd 0000 	ldrh.w	r0, [sp]
   10ad4:	f7ff feba 	bl	1084c <sdc_hci_cmd_le_set_scan_response_data+0x50>
   10ad8:	f080 0001 	eor.w	r0, r0, #1
   10adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010ade <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
   10ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ae2:	4617      	mov	r7, r2
   10ae4:	460d      	mov	r5, r1
   10ae6:	4604      	mov	r4, r0
   10ae8:	f100 0124 	add.w	r1, r0, #36	; 0x24
   10aec:	88c2      	ldrh	r2, [r0, #6]
   10aee:	8880      	ldrh	r0, [r0, #4]
   10af0:	f420 4300 	bic.w	r3, r0, #32768	; 0x8000
   10af4:	18ce      	adds	r6, r1, r3
   10af6:	4611      	mov	r1, r2
   10af8:	f7ff fea8 	bl	1084c <sdc_hci_cmd_le_set_scan_response_data+0x50>
   10afc:	b118      	cbz	r0, 10b06 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x28>
   10afe:	2000      	movs	r0, #0
   10b00:	8220      	strh	r0, [r4, #16]
   10b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10b06:	8830      	ldrh	r0, [r6, #0]
   10b08:	89a1      	ldrh	r1, [r4, #12]
   10b0a:	7f22      	ldrb	r2, [r4, #28]
   10b0c:	1a40      	subs	r0, r0, r1
   10b0e:	4411      	add	r1, r2
   10b10:	4431      	add	r1, r6
   10b12:	882a      	ldrh	r2, [r5, #0]
   10b14:	b280      	uxth	r0, r0
   10b16:	1cc9      	adds	r1, r1, #3
   10b18:	4282      	cmp	r2, r0
   10b1a:	d900      	bls.n	10b1e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x40>
   10b1c:	8028      	strh	r0, [r5, #0]
   10b1e:	89a0      	ldrh	r0, [r4, #12]
   10b20:	b128      	cbz	r0, 10b2e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x50>
   10b22:	2000      	movs	r0, #0
   10b24:	7038      	strb	r0, [r7, #0]
   10b26:	8828      	ldrh	r0, [r5, #0]
   10b28:	8220      	strh	r0, [r4, #16]
   10b2a:	4608      	mov	r0, r1
   10b2c:	e7e9      	b.n	10b02 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x24>
   10b2e:	2001      	movs	r0, #1
   10b30:	e7f8      	b.n	10b24 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x46>

00010b32 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
   10b32:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10b36:	8281      	strh	r1, [r0, #20]
   10b38:	2100      	movs	r1, #0
   10b3a:	7581      	strb	r1, [r0, #22]
   10b3c:	4770      	bx	lr

00010b3e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
   10b3e:	b510      	push	{r4, lr}
   10b40:	8a81      	ldrh	r1, [r0, #20]
   10b42:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
   10b46:	3aff      	subs	r2, #255	; 0xff
   10b48:	d004      	beq.n	10b54 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
   10b4a:	f44f 7159 	mov.w	r1, #868	; 0x364
   10b4e:	2014      	movs	r0, #20
   10b50:	f7f3 f9f6 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10b54:	88c1      	ldrh	r1, [r0, #6]
   10b56:	8281      	strh	r1, [r0, #20]
   10b58:	89c1      	ldrh	r1, [r0, #14]
   10b5a:	b109      	cbz	r1, 10b60 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
   10b5c:	2101      	movs	r1, #1
   10b5e:	e000      	b.n	10b62 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
   10b60:	2100      	movs	r1, #0
   10b62:	7581      	strb	r1, [r0, #22]
   10b64:	bd10      	pop	{r4, pc}

00010b66 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
   10b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10b6a:	4616      	mov	r6, r2
   10b6c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   10b70:	460f      	mov	r7, r1
   10b72:	4604      	mov	r4, r0
   10b74:	461d      	mov	r5, r3
   10b76:	4642      	mov	r2, r8
   10b78:	4619      	mov	r1, r3
   10b7a:	4630      	mov	r0, r6
   10b7c:	f000 f855 	bl	10c2a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   10b80:	4287      	cmp	r7, r0
   10b82:	d201      	bcs.n	10b88 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x22>
   10b84:	21a8      	movs	r1, #168	; 0xa8
   10b86:	e019      	b.n	10bbc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x56>
   10b88:	1ce0      	adds	r0, r4, #3
   10b8a:	f020 0103 	bic.w	r1, r0, #3
   10b8e:	4620      	mov	r0, r4
   10b90:	42a1      	cmp	r1, r4
   10b92:	d001      	beq.n	10b98 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x32>
   10b94:	21a9      	movs	r1, #169	; 0xa9
   10b96:	e011      	b.n	10bbc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x56>
   10b98:	2224      	movs	r2, #36	; 0x24
   10b9a:	2100      	movs	r1, #0
   10b9c:	f7ff f9a4 	bl	fee8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   10ba0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   10ba4:	82a0      	strh	r0, [r4, #20]
   10ba6:	7725      	strb	r5, [r4, #28]
   10ba8:	4642      	mov	r2, r8
   10baa:	4629      	mov	r1, r5
   10bac:	4630      	mov	r0, r6
   10bae:	f7ff fe27 	bl	10800 <sdc_hci_cmd_le_set_scan_response_data+0x4>
   10bb2:	8060      	strh	r0, [r4, #2]
   10bb4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   10bb8:	d903      	bls.n	10bc2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x5c>
   10bba:	21af      	movs	r1, #175	; 0xaf
   10bbc:	2014      	movs	r0, #20
   10bbe:	f7f3 f9bf 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10bc2:	8026      	strh	r6, [r4, #0]
   10bc4:	2000      	movs	r0, #0
   10bc6:	7760      	strb	r0, [r4, #29]
   10bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010bcc <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
   10bcc:	6181      	str	r1, [r0, #24]
   10bce:	6188      	str	r0, [r1, #24]
   10bd0:	4770      	bx	lr

00010bd2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
   10bd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10bd6:	4689      	mov	r9, r1
   10bd8:	4604      	mov	r4, r0
   10bda:	f100 0124 	add.w	r1, r0, #36	; 0x24
   10bde:	8906      	ldrh	r6, [r0, #8]
   10be0:	f8b0 800a 	ldrh.w	r8, [r0, #10]
   10be4:	8880      	ldrh	r0, [r0, #4]
   10be6:	4617      	mov	r7, r2
   10be8:	f426 4200 	bic.w	r2, r6, #32768	; 0x8000
   10bec:	188d      	adds	r5, r1, r2
   10bee:	4601      	mov	r1, r0
   10bf0:	4630      	mov	r0, r6
   10bf2:	f7ff fe2b 	bl	1084c <sdc_hci_cmd_le_set_scan_response_data+0x50>
   10bf6:	b110      	cbz	r0, 10bfe <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2c>
   10bf8:	2000      	movs	r0, #0
   10bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10bfe:	b10f      	cbz	r7, 10c04 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x32>
   10c00:	1ce8      	adds	r0, r5, #3
   10c02:	6038      	str	r0, [r7, #0]
   10c04:	f1b9 0000 	subs.w	r0, r9, #0
   10c08:	d003      	beq.n	10c12 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x40>
   10c0a:	7f22      	ldrb	r2, [r4, #28]
   10c0c:	1ce9      	adds	r1, r5, #3
   10c0e:	f7ff f8f1 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10c12:	882d      	ldrh	r5, [r5, #0]
   10c14:	f104 0108 	add.w	r1, r4, #8
   10c18:	4620      	mov	r0, r4
   10c1a:	f7ff fdf6 	bl	1080a <sdc_hci_cmd_le_set_scan_response_data+0xe>
   10c1e:	4546      	cmp	r6, r8
   10c20:	d101      	bne.n	10c26 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x54>
   10c22:	8920      	ldrh	r0, [r4, #8]
   10c24:	8160      	strh	r0, [r4, #10]
   10c26:	4628      	mov	r0, r5
   10c28:	e7e7      	b.n	10bfa <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>

00010c2a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
   10c2a:	b510      	push	{r4, lr}
   10c2c:	4604      	mov	r4, r0
   10c2e:	f7ff fde7 	bl	10800 <sdc_hci_cmd_le_set_scan_response_data+0x4>
   10c32:	2100      	movs	r1, #0
   10c34:	2c45      	cmp	r4, #69	; 0x45
   10c36:	d201      	bcs.n	10c3c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
   10c38:	f1c4 0145 	rsb	r1, r4, #69	; 0x45
   10c3c:	3024      	adds	r0, #36	; 0x24
   10c3e:	4408      	add	r0, r1
   10c40:	b280      	uxth	r0, r0
   10c42:	bd10      	pop	{r4, pc}

00010c44 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
   10c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10c48:	4688      	mov	r8, r1
   10c4a:	88c1      	ldrh	r1, [r0, #6]
   10c4c:	4604      	mov	r4, r0
   10c4e:	8900      	ldrh	r0, [r0, #8]
   10c50:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
   10c54:	f104 0624 	add.w	r6, r4, #36	; 0x24
   10c58:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
   10c5c:	eb06 0905 	add.w	r9, r6, r5
   10c60:	f7ff fdfa 	bl	10858 <sdc_hci_cmd_le_set_scan_response_data+0x5c>
   10c64:	2200      	movs	r2, #0
   10c66:	b998      	cbnz	r0, 10c90 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
   10c68:	8820      	ldrh	r0, [r4, #0]
   10c6a:	2845      	cmp	r0, #69	; 0x45
   10c6c:	d200      	bcs.n	10c70 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
   10c6e:	2045      	movs	r0, #69	; 0x45
   10c70:	42af      	cmp	r7, r5
   10c72:	d906      	bls.n	10c82 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
   10c74:	7f21      	ldrb	r1, [r4, #28]
   10c76:	1b7b      	subs	r3, r7, r5
   10c78:	1d89      	adds	r1, r1, #6
   10c7a:	1a59      	subs	r1, r3, r1
   10c7c:	4281      	cmp	r1, r0
   10c7e:	da00      	bge.n	10c82 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
   10c80:	4608      	mov	r0, r1
   10c82:	89e1      	ldrh	r1, [r4, #14]
   10c84:	b111      	cbz	r1, 10c8c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
   10c86:	f8b9 3000 	ldrh.w	r3, [r9]
   10c8a:	1ac0      	subs	r0, r0, r3
   10c8c:	4540      	cmp	r0, r8
   10c8e:	da03      	bge.n	10c98 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
   10c90:	8262      	strh	r2, [r4, #18]
   10c92:	2000      	movs	r0, #0
   10c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10c98:	7f20      	ldrb	r0, [r4, #28]
   10c9a:	4431      	add	r1, r6
   10c9c:	1d80      	adds	r0, r0, #6
   10c9e:	4428      	add	r0, r5
   10ca0:	4408      	add	r0, r1
   10ca2:	f8a4 8012 	strh.w	r8, [r4, #18]
   10ca6:	1ec0      	subs	r0, r0, #3
   10ca8:	e7f4      	b.n	10c94 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

00010caa <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
   10caa:	2100      	movs	r1, #0
   10cac:	81c1      	strh	r1, [r0, #14]
   10cae:	8241      	strh	r1, [r0, #18]
   10cb0:	7581      	strb	r1, [r0, #22]
   10cb2:	4770      	bx	lr

00010cb4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
   10cb4:	b570      	push	{r4, r5, r6, lr}
   10cb6:	2300      	movs	r3, #0
   10cb8:	2908      	cmp	r1, #8
   10cba:	d204      	bcs.n	10cc6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
   10cbc:	f240 11cb 	movw	r1, #459	; 0x1cb
   10cc0:	2015      	movs	r0, #21
   10cc2:	f7f3 f93d 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10cc6:	6802      	ldr	r2, [r0, #0]
   10cc8:	b90a      	cbnz	r2, 10cce <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
   10cca:	e01e      	b.n	10d0a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
   10ccc:	4610      	mov	r0, r2
   10cce:	6802      	ldr	r2, [r0, #0]
   10cd0:	8893      	ldrh	r3, [r2, #4]
   10cd2:	428b      	cmp	r3, r1
   10cd4:	d002      	beq.n	10cdc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
   10cd6:	6813      	ldr	r3, [r2, #0]
   10cd8:	2b00      	cmp	r3, #0
   10cda:	d1f7      	bne.n	10ccc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
   10cdc:	8894      	ldrh	r4, [r2, #4]
   10cde:	4613      	mov	r3, r2
   10ce0:	428c      	cmp	r4, r1
   10ce2:	d101      	bne.n	10ce8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
   10ce4:	6811      	ldr	r1, [r2, #0]
   10ce6:	e00d      	b.n	10d04 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
   10ce8:	f101 0508 	add.w	r5, r1, #8
   10cec:	b2ad      	uxth	r5, r5
   10cee:	42ac      	cmp	r4, r5
   10cf0:	d30a      	bcc.n	10d08 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
   10cf2:	1a64      	subs	r4, r4, r1
   10cf4:	4411      	add	r1, r2
   10cf6:	2200      	movs	r2, #0
   10cf8:	600a      	str	r2, [r1, #0]
   10cfa:	808c      	strh	r4, [r1, #4]
   10cfc:	6802      	ldr	r2, [r0, #0]
   10cfe:	6812      	ldr	r2, [r2, #0]
   10d00:	6002      	str	r2, [r0, #0]
   10d02:	600a      	str	r2, [r1, #0]
   10d04:	6001      	str	r1, [r0, #0]
   10d06:	e000      	b.n	10d0a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
   10d08:	2300      	movs	r3, #0
   10d0a:	4618      	mov	r0, r3
   10d0c:	bd70      	pop	{r4, r5, r6, pc}

00010d0e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
   10d0e:	b510      	push	{r4, lr}
   10d10:	000c      	movs	r4, r1
   10d12:	d006      	beq.n	10d22 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
   10d14:	2c08      	cmp	r4, #8
   10d16:	d209      	bcs.n	10d2c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
   10d18:	f240 1195 	movw	r1, #405	; 0x195
   10d1c:	2015      	movs	r0, #21
   10d1e:	f7f3 f90f 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10d22:	b108      	cbz	r0, 10d28 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
   10d24:	2100      	movs	r1, #0
   10d26:	6001      	str	r1, [r0, #0]
   10d28:	2000      	movs	r0, #0
   10d2a:	bd10      	pop	{r4, pc}
   10d2c:	b118      	cbz	r0, 10d36 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
   10d2e:	b2a1      	uxth	r1, r4
   10d30:	6800      	ldr	r0, [r0, #0]
   10d32:	f000 f814 	bl	10d5e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
   10d36:	1d20      	adds	r0, r4, #4
   10d38:	bd10      	pop	{r4, pc}

00010d3a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
   10d3a:	2100      	movs	r1, #0
   10d3c:	6802      	ldr	r2, [r0, #0]
   10d3e:	e003      	b.n	10d48 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
   10d40:	8893      	ldrh	r3, [r2, #4]
   10d42:	6812      	ldr	r2, [r2, #0]
   10d44:	4419      	add	r1, r3
   10d46:	b289      	uxth	r1, r1
   10d48:	2a00      	cmp	r2, #0
   10d4a:	d1f9      	bne.n	10d40 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
   10d4c:	f000 b807 	b.w	10d5e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

00010d50 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
   10d50:	2300      	movs	r3, #0
   10d52:	600b      	str	r3, [r1, #0]
   10d54:	808a      	strh	r2, [r1, #4]
   10d56:	6802      	ldr	r2, [r0, #0]
   10d58:	600a      	str	r2, [r1, #0]
   10d5a:	6001      	str	r1, [r0, #0]
   10d5c:	4770      	bx	lr
   10d5e:	2300      	movs	r3, #0
   10d60:	6043      	str	r3, [r0, #4]
   10d62:	1d02      	adds	r2, r0, #4
   10d64:	8101      	strh	r1, [r0, #8]
   10d66:	6002      	str	r2, [r0, #0]
   10d68:	4770      	bx	lr

00010d6a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
   10d6a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10d6c:	4604      	mov	r4, r0
   10d6e:	4669      	mov	r1, sp
   10d70:	f000 f829 	bl	10dc6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   10d74:	b168      	cbz	r0, 10d92 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x28>
   10d76:	f240 215a 	movw	r1, #602	; 0x25a
   10d7a:	e007      	b.n	10d8c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x22>
   10d7c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   10d80:	4621      	mov	r1, r4
   10d82:	f7f3 fb95 	bl	44b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   10d86:	b120      	cbz	r0, 10d92 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x28>
   10d88:	f240 215f 	movw	r1, #607	; 0x25f
   10d8c:	2017      	movs	r0, #23
   10d8e:	f7f3 f8d7 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10d92:	4668      	mov	r0, sp
   10d94:	f7f3 fb1a 	bl	43cc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   10d98:	2800      	cmp	r0, #0
   10d9a:	d0ef      	beq.n	10d7c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x12>
   10d9c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00010d9e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
   10d9e:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
   10da2:	3bff      	subs	r3, #255	; 0xff
   10da4:	d001      	beq.n	10daa <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
   10da6:	2905      	cmp	r1, #5
   10da8:	d301      	bcc.n	10dae <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
   10daa:	2000      	movs	r0, #0
   10dac:	4770      	bx	lr
   10dae:	f7f3 bbb1 	b.w	4514 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

00010db2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
   10db2:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
   10db6:	3aff      	subs	r2, #255	; 0xff
   10db8:	d001      	beq.n	10dbe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
   10dba:	2905      	cmp	r1, #5
   10dbc:	d301      	bcc.n	10dc2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
   10dbe:	2000      	movs	r0, #0
   10dc0:	4770      	bx	lr
   10dc2:	f7f3 bbe1 	b.w	4588 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

00010dc6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
   10dc6:	b570      	push	{r4, r5, r6, lr}
   10dc8:	4605      	mov	r5, r0
   10dca:	460c      	mov	r4, r1
   10dcc:	4608      	mov	r0, r1
   10dce:	f000 f987 	bl	110e0 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
   10dd2:	b108      	cbz	r0, 10dd8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
   10dd4:	2010      	movs	r0, #16
   10dd6:	bd70      	pop	{r4, r5, r6, pc}
   10dd8:	2d05      	cmp	r5, #5
   10dda:	d301      	bcc.n	10de0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
   10ddc:	2007      	movs	r0, #7
   10dde:	bd70      	pop	{r4, r5, r6, pc}
   10de0:	7025      	strb	r5, [r4, #0]
   10de2:	2000      	movs	r0, #0
   10de4:	8060      	strh	r0, [r4, #2]
   10de6:	bd70      	pop	{r4, r5, r6, pc}
   10de8:	b510      	push	{r4, lr}
   10dea:	4604      	mov	r4, r0
   10dec:	f7f3 fc18 	bl	4620 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
   10df0:	42a0      	cmp	r0, r4
   10df2:	d901      	bls.n	10df8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
   10df4:	2001      	movs	r0, #1
   10df6:	bd10      	pop	{r4, pc}
   10df8:	2000      	movs	r0, #0
   10dfa:	bd10      	pop	{r4, pc}
   10dfc:	4770      	bx	lr

00010dfe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
   10dfe:	b570      	push	{r4, r5, r6, lr}
   10e00:	460e      	mov	r6, r1
   10e02:	461d      	mov	r5, r3
   10e04:	4611      	mov	r1, r2
   10e06:	f000 f811 	bl	10e2c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
   10e0a:	4604      	mov	r4, r0
   10e0c:	4629      	mov	r1, r5
   10e0e:	4630      	mov	r0, r6
   10e10:	f000 f803 	bl	10e1a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
   10e14:	4420      	add	r0, r4
   10e16:	1d00      	adds	r0, r0, #4
   10e18:	bd70      	pop	{r4, r5, r6, pc}
   10e1a:	b510      	push	{r4, lr}
   10e1c:	460a      	mov	r2, r1
   10e1e:	2101      	movs	r1, #1
   10e20:	f7ff ff03 	bl	10c2a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   10e24:	1cc0      	adds	r0, r0, #3
   10e26:	f020 0003 	bic.w	r0, r0, #3
   10e2a:	bd10      	pop	{r4, pc}
   10e2c:	b510      	push	{r4, lr}
   10e2e:	460a      	mov	r2, r1
   10e30:	2101      	movs	r1, #1
   10e32:	f7ff fefa 	bl	10c2a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   10e36:	1cc0      	adds	r0, r0, #3
   10e38:	f020 0003 	bic.w	r0, r0, #3
   10e3c:	bd10      	pop	{r4, pc}
   10e3e:	b510      	push	{r4, lr}
   10e40:	4604      	mov	r4, r0
   10e42:	4608      	mov	r0, r1
   10e44:	f000 f815 	bl	10e72 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x74>
   10e48:	1821      	adds	r1, r4, r0
   10e4a:	7d0a      	ldrb	r2, [r1, #20]
   10e4c:	2a02      	cmp	r2, #2
   10e4e:	d008      	beq.n	10e62 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x64>
   10e50:	7d49      	ldrb	r1, [r1, #21]
   10e52:	2902      	cmp	r1, #2
   10e54:	d009      	beq.n	10e6a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6c>
   10e56:	2a03      	cmp	r2, #3
   10e58:	d003      	beq.n	10e62 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x64>
   10e5a:	2903      	cmp	r1, #3
   10e5c:	d005      	beq.n	10e6a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6c>
   10e5e:	2000      	movs	r0, #0
   10e60:	bd10      	pop	{r4, pc}
   10e62:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   10e66:	8b00      	ldrh	r0, [r0, #24]
   10e68:	bd10      	pop	{r4, pc}
   10e6a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   10e6e:	8b40      	ldrh	r0, [r0, #26]
   10e70:	bd10      	pop	{r4, pc}
   10e72:	b108      	cbz	r0, 10e78 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
   10e74:	2000      	movs	r0, #0
   10e76:	4770      	bx	lr
   10e78:	2002      	movs	r0, #2
   10e7a:	4770      	bx	lr
   10e7c:	b510      	push	{r4, lr}
   10e7e:	4604      	mov	r4, r0
   10e80:	4608      	mov	r0, r1
   10e82:	f7ff fff6 	bl	10e72 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x74>
   10e86:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   10e8a:	8b01      	ldrh	r1, [r0, #24]
   10e8c:	b911      	cbnz	r1, 10e94 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x96>
   10e8e:	8b40      	ldrh	r0, [r0, #26]
   10e90:	2800      	cmp	r0, #0
   10e92:	d000      	beq.n	10e96 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x98>
   10e94:	2001      	movs	r0, #1
   10e96:	bd10      	pop	{r4, pc}
   10e98:	b538      	push	{r3, r4, r5, lr}
   10e9a:	4604      	mov	r4, r0
   10e9c:	7880      	ldrb	r0, [r0, #2]
   10e9e:	460d      	mov	r5, r1
   10ea0:	f88d 0000 	strb.w	r0, [sp]
   10ea4:	9800      	ldr	r0, [sp, #0]
   10ea6:	9000      	str	r0, [sp, #0]
   10ea8:	f89d 0000 	ldrb.w	r0, [sp]
   10eac:	b948      	cbnz	r0, 10ec2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc4>
   10eae:	4610      	mov	r0, r2
   10eb0:	f7ff ffdf 	bl	10e72 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x74>
   10eb4:	1821      	adds	r1, r4, r0
   10eb6:	7d0a      	ldrb	r2, [r1, #20]
   10eb8:	2a02      	cmp	r2, #2
   10eba:	d004      	beq.n	10ec6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
   10ebc:	7d49      	ldrb	r1, [r1, #21]
   10ebe:	2902      	cmp	r1, #2
   10ec0:	d005      	beq.n	10ece <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xd0>
   10ec2:	2000      	movs	r0, #0
   10ec4:	bd38      	pop	{r3, r4, r5, pc}
   10ec6:	4602      	mov	r2, r0
   10ec8:	1c40      	adds	r0, r0, #1
   10eca:	b2c0      	uxtb	r0, r0
   10ecc:	e001      	b.n	10ed2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xd4>
   10ece:	1c41      	adds	r1, r0, #1
   10ed0:	b2ca      	uxtb	r2, r1
   10ed2:	b185      	cbz	r5, 10ef6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
   10ed4:	1823      	adds	r3, r4, r0
   10ed6:	2100      	movs	r1, #0
   10ed8:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   10edc:	7519      	strb	r1, [r3, #20]
   10ede:	8301      	strh	r1, [r0, #24]
   10ee0:	2003      	movs	r0, #3
   10ee2:	18a1      	adds	r1, r4, r2
   10ee4:	7508      	strb	r0, [r1, #20]
   10ee6:	eb04 0082 	add.w	r0, r4, r2, lsl #2
   10eea:	6840      	ldr	r0, [r0, #4]
   10eec:	6028      	str	r0, [r5, #0]
   10eee:	eb04 0042 	add.w	r0, r4, r2, lsl #1
   10ef2:	8b00      	ldrh	r0, [r0, #24]
   10ef4:	80a8      	strh	r0, [r5, #4]
   10ef6:	2001      	movs	r0, #1
   10ef8:	bd38      	pop	{r3, r4, r5, pc}
   10efa:	b570      	push	{r4, r5, r6, lr}
   10efc:	4604      	mov	r4, r0
   10efe:	4615      	mov	r5, r2
   10f00:	4608      	mov	r0, r1
   10f02:	f7ff ffb6 	bl	10e72 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x74>
   10f06:	1821      	adds	r1, r4, r0
   10f08:	7d0a      	ldrb	r2, [r1, #20]
   10f0a:	42aa      	cmp	r2, r5
   10f0c:	d103      	bne.n	10f16 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x118>
   10f0e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   10f12:	8b00      	ldrh	r0, [r0, #24]
   10f14:	bd70      	pop	{r4, r5, r6, pc}
   10f16:	7d49      	ldrb	r1, [r1, #21]
   10f18:	42a9      	cmp	r1, r5
   10f1a:	d103      	bne.n	10f24 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
   10f1c:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   10f20:	8b40      	ldrh	r0, [r0, #26]
   10f22:	bd70      	pop	{r4, r5, r6, pc}
   10f24:	2000      	movs	r0, #0
   10f26:	bd70      	pop	{r4, r5, r6, pc}
   10f28:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
   10f2c:	d201      	bcs.n	10f32 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x134>
   10f2e:	0840      	lsrs	r0, r0, #1
   10f30:	4770      	bx	lr
   10f32:	20ff      	movs	r0, #255	; 0xff
   10f34:	4770      	bx	lr
   10f36:	b510      	push	{r4, lr}
   10f38:	4604      	mov	r4, r0
   10f3a:	f7ff fff5 	bl	10f28 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x12a>
   10f3e:	1a20      	subs	r0, r4, r0
   10f40:	f240 6172 	movw	r1, #1650	; 0x672
   10f44:	4288      	cmp	r0, r1
   10f46:	db00      	blt.n	10f4a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x14c>
   10f48:	4608      	mov	r0, r1
   10f4a:	b280      	uxth	r0, r0
   10f4c:	bd10      	pop	{r4, pc}

00010f4e <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
   10f4e:	2101      	movs	r1, #1
   10f50:	f7ff bf75 	b.w	10e3e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>

00010f54 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
   10f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10f58:	4681      	mov	r9, r0
   10f5a:	f342 0780 	sbfx	r7, r2, #2, #1
   10f5e:	7848      	ldrb	r0, [r1, #1]
   10f60:	460c      	mov	r4, r1
   10f62:	f022 0504 	bic.w	r5, r2, #4
   10f66:	1c7f      	adds	r7, r7, #1
   10f68:	b100      	cbz	r0, 10f6c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
   10f6a:	b995      	cbnz	r5, 10f92 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x3e>
   10f6c:	4328      	orrs	r0, r5
   10f6e:	d010      	beq.n	10f92 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x3e>
   10f70:	2000      	movs	r0, #0
   10f72:	b120      	cbz	r0, 10f7e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x2a>
   10f74:	b17d      	cbz	r5, 10f96 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x42>
   10f76:	2100      	movs	r1, #0
   10f78:	4620      	mov	r0, r4
   10f7a:	f7f3 fc5f 	bl	483c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
   10f7e:	2601      	movs	r6, #1
   10f80:	70a6      	strb	r6, [r4, #2]
   10f82:	4638      	mov	r0, r7
   10f84:	f7ff ff75 	bl	10e72 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x74>
   10f88:	1821      	adds	r1, r4, r0
   10f8a:	7d09      	ldrb	r1, [r1, #20]
   10f8c:	2903      	cmp	r1, #3
   10f8e:	d004      	beq.n	10f9a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x46>
   10f90:	e007      	b.n	10fa2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x4e>
   10f92:	2001      	movs	r0, #1
   10f94:	e7ed      	b.n	10f72 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1e>
   10f96:	2101      	movs	r1, #1
   10f98:	e7ee      	b.n	10f78 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x24>
   10f9a:	2d02      	cmp	r5, #2
   10f9c:	d001      	beq.n	10fa2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x4e>
   10f9e:	1c40      	adds	r0, r0, #1
   10fa0:	b2c0      	uxtb	r0, r0
   10fa2:	1821      	adds	r1, r4, r0
   10fa4:	eb04 0240 	add.w	r2, r4, r0, lsl #1
   10fa8:	750e      	strb	r6, [r1, #20]
   10faa:	2100      	movs	r1, #0
   10fac:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   10fb0:	8311      	strh	r1, [r2, #24]
   10fb2:	6842      	ldr	r2, [r0, #4]
   10fb4:	70a1      	strb	r1, [r4, #2]
   10fb6:	f361 080f 	bfi	r8, r1, #0, #16
   10fba:	e9c9 2800 	strd	r2, r8, [r9]
   10fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00010fc2 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
   10fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10fc6:	4604      	mov	r4, r0
   10fc8:	461e      	mov	r6, r3
   10fca:	4690      	mov	r8, r2
   10fcc:	4608      	mov	r0, r1
   10fce:	f7ff ff50 	bl	10e72 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x74>
   10fd2:	2101      	movs	r1, #1
   10fd4:	70a1      	strb	r1, [r4, #2]
   10fd6:	1821      	adds	r1, r4, r0
   10fd8:	7d0a      	ldrb	r2, [r1, #20]
   10fda:	2a01      	cmp	r2, #1
   10fdc:	d004      	beq.n	10fe8 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
   10fde:	7d49      	ldrb	r1, [r1, #21]
   10fe0:	2901      	cmp	r1, #1
   10fe2:	d10c      	bne.n	10ffe <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3c>
   10fe4:	1c40      	adds	r0, r0, #1
   10fe6:	b2c0      	uxtb	r0, r0
   10fe8:	eb04 0540 	add.w	r5, r4, r0, lsl #1
   10fec:	2700      	movs	r7, #0
   10fee:	8b29      	ldrh	r1, [r5, #24]
   10ff0:	8c2b      	ldrh	r3, [r5, #32]
   10ff2:	198a      	adds	r2, r1, r6
   10ff4:	429a      	cmp	r2, r3
   10ff6:	d905      	bls.n	11004 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x42>
   10ff8:	4420      	add	r0, r4
   10ffa:	832f      	strh	r7, [r5, #24]
   10ffc:	7507      	strb	r7, [r0, #20]
   10ffe:	2000      	movs	r0, #0
   11000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11004:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   11008:	4632      	mov	r2, r6
   1100a:	6840      	ldr	r0, [r0, #4]
   1100c:	4408      	add	r0, r1
   1100e:	4641      	mov	r1, r8
   11010:	f7fe fef0 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   11014:	8b28      	ldrh	r0, [r5, #24]
   11016:	4430      	add	r0, r6
   11018:	8328      	strh	r0, [r5, #24]
   1101a:	70a7      	strb	r7, [r4, #2]
   1101c:	2001      	movs	r0, #1
   1101e:	e7ef      	b.n	11000 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>

00011020 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
   11020:	2202      	movs	r2, #2
   11022:	2100      	movs	r1, #0
   11024:	f7ff bf69 	b.w	10efa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xfc>

00011028 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
   11028:	b510      	push	{r4, lr}
   1102a:	2101      	movs	r1, #1
   1102c:	f7ff ff26 	bl	10e7c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
   11030:	2800      	cmp	r0, #0
   11032:	d000      	beq.n	11036 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
   11034:	2001      	movs	r0, #1
   11036:	bd10      	pop	{r4, pc}

00011038 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
   11038:	2201      	movs	r2, #1
   1103a:	f7ff bf2d 	b.w	10e98 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x9a>

0001103e <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
   1103e:	2200      	movs	r2, #0
   11040:	f7ff bf2a 	b.w	10e98 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x9a>

00011044 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
   11044:	b570      	push	{r4, r5, r6, lr}
   11046:	4604      	mov	r4, r0
   11048:	4615      	mov	r5, r2
   1104a:	4608      	mov	r0, r1
   1104c:	f7ff ff11 	bl	10e72 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x74>
   11050:	2101      	movs	r1, #1
   11052:	70a1      	strb	r1, [r4, #2]
   11054:	1821      	adds	r1, r4, r0
   11056:	2202      	movs	r2, #2
   11058:	7d0b      	ldrb	r3, [r1, #20]
   1105a:	2b01      	cmp	r3, #1
   1105c:	d007      	beq.n	1106e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x2a>
   1105e:	7d4b      	ldrb	r3, [r1, #21]
   11060:	2b01      	cmp	r3, #1
   11062:	d009      	beq.n	11078 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x34>
   11064:	f44f 718b 	mov.w	r1, #278	; 0x116
   11068:	2009      	movs	r0, #9
   1106a:	f7f2 ff69 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1106e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   11072:	8305      	strh	r5, [r0, #24]
   11074:	750a      	strb	r2, [r1, #20]
   11076:	e003      	b.n	11080 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3c>
   11078:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   1107c:	8345      	strh	r5, [r0, #26]
   1107e:	754a      	strb	r2, [r1, #21]
   11080:	2000      	movs	r0, #0
   11082:	70a0      	strb	r0, [r4, #2]
   11084:	bd70      	pop	{r4, r5, r6, pc}

00011086 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
   11086:	2101      	movs	r1, #1
   11088:	7001      	strb	r1, [r0, #0]
   1108a:	4770      	bx	lr

0001108c <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
   1108c:	2201      	movs	r2, #1
   1108e:	4611      	mov	r1, r2
   11090:	f7ff bf33 	b.w	10efa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xfc>

00011094 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
   11094:	2201      	movs	r2, #1
   11096:	2100      	movs	r1, #0
   11098:	f7ff bf2f 	b.w	10efa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xfc>

0001109c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
   1109c:	2100      	movs	r1, #0
   1109e:	f7ff bece 	b.w	10e3e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
   110a2:	2800      	cmp	r0, #0
   110a4:	db09      	blt.n	110ba <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
   110a6:	f000 021f 	and.w	r2, r0, #31
   110aa:	2101      	movs	r1, #1
   110ac:	4091      	lsls	r1, r2
   110ae:	0940      	lsrs	r0, r0, #5
   110b0:	0080      	lsls	r0, r0, #2
   110b2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   110b6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   110ba:	4770      	bx	lr
   110bc:	5840      	ldr	r0, [r0, r1]
   110be:	2800      	cmp	r0, #0
   110c0:	d000      	beq.n	110c4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x28>
   110c2:	2001      	movs	r0, #1
   110c4:	4770      	bx	lr

000110c6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
   110c6:	f7f3 bd6d 	b.w	4ba4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

000110ca <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
   110ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   110ce:	2000      	movs	r0, #0
   110d0:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
   110d4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   110d8:	2001      	movs	r0, #1
   110da:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
   110de:	4770      	bx	lr

000110e0 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
   110e0:	b108      	cbz	r0, 110e6 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
   110e2:	2000      	movs	r0, #0
   110e4:	4770      	bx	lr
   110e6:	2001      	movs	r0, #1
   110e8:	4770      	bx	lr

000110ea <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
   110ea:	b510      	push	{r4, lr}
   110ec:	2900      	cmp	r1, #0
   110ee:	4604      	mov	r4, r0
   110f0:	f04f 0106 	mov.w	r1, #6
   110f4:	d002      	beq.n	110fc <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
   110f6:	f7f2 ff91 	bl	401c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   110fa:	e001      	b.n	11100 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
   110fc:	f7f2 ffaa 	bl	4054 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   11100:	7960      	ldrb	r0, [r4, #5]
   11102:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   11106:	7160      	strb	r0, [r4, #5]
   11108:	bd10      	pop	{r4, pc}

0001110a <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
   1110a:	4770      	bx	lr

0001110c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
   1110c:	b530      	push	{r4, r5, lr}
   1110e:	460c      	mov	r4, r1
   11110:	4605      	mov	r5, r0
   11112:	b08d      	sub	sp, #52	; 0x34
   11114:	f04f 0103 	mov.w	r1, #3
   11118:	f104 0003 	add.w	r0, r4, #3
   1111c:	b112      	cbz	r2, 11124 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
   1111e:	f7f2 ff7d 	bl	401c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   11122:	e001      	b.n	11128 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
   11124:	f7f2 ff96 	bl	4054 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   11128:	7960      	ldrb	r0, [r4, #5]
   1112a:	220d      	movs	r2, #13
   1112c:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   11130:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   11134:	7160      	strb	r0, [r4, #5]
   11136:	2100      	movs	r1, #0
   11138:	a804      	add	r0, sp, #16
   1113a:	f7fe fed5 	bl	fee8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1113e:	78e0      	ldrb	r0, [r4, #3]
   11140:	f88d 001f 	strb.w	r0, [sp, #31]
   11144:	7920      	ldrb	r0, [r4, #4]
   11146:	f88d 001e 	strb.w	r0, [sp, #30]
   1114a:	7960      	ldrb	r0, [r4, #5]
   1114c:	f88d 001d 	strb.w	r0, [sp, #29]
   11150:	6828      	ldr	r0, [r5, #0]
   11152:	9000      	str	r0, [sp, #0]
   11154:	6868      	ldr	r0, [r5, #4]
   11156:	9001      	str	r0, [sp, #4]
   11158:	68a8      	ldr	r0, [r5, #8]
   1115a:	9002      	str	r0, [sp, #8]
   1115c:	68e8      	ldr	r0, [r5, #12]
   1115e:	9003      	str	r0, [sp, #12]
   11160:	4668      	mov	r0, sp
   11162:	f7ff ffb0 	bl	110c6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
   11166:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   1116a:	7020      	strb	r0, [r4, #0]
   1116c:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   11170:	7060      	strb	r0, [r4, #1]
   11172:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
   11176:	70a0      	strb	r0, [r4, #2]
   11178:	b00d      	add	sp, #52	; 0x34
   1117a:	bd30      	pop	{r4, r5, pc}

0001117c <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
   1117c:	b530      	push	{r4, r5, lr}
   1117e:	b08d      	sub	sp, #52	; 0x34
   11180:	460c      	mov	r4, r1
   11182:	4605      	mov	r5, r0
   11184:	220d      	movs	r2, #13
   11186:	2100      	movs	r1, #0
   11188:	a804      	add	r0, sp, #16
   1118a:	f7fe fead 	bl	fee8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1118e:	78e0      	ldrb	r0, [r4, #3]
   11190:	f88d 001f 	strb.w	r0, [sp, #31]
   11194:	7920      	ldrb	r0, [r4, #4]
   11196:	f88d 001e 	strb.w	r0, [sp, #30]
   1119a:	7960      	ldrb	r0, [r4, #5]
   1119c:	f88d 001d 	strb.w	r0, [sp, #29]
   111a0:	6828      	ldr	r0, [r5, #0]
   111a2:	9000      	str	r0, [sp, #0]
   111a4:	6868      	ldr	r0, [r5, #4]
   111a6:	9001      	str	r0, [sp, #4]
   111a8:	68a8      	ldr	r0, [r5, #8]
   111aa:	9002      	str	r0, [sp, #8]
   111ac:	68e8      	ldr	r0, [r5, #12]
   111ae:	9003      	str	r0, [sp, #12]
   111b0:	4668      	mov	r0, sp
   111b2:	f7ff ff88 	bl	110c6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
   111b6:	7820      	ldrb	r0, [r4, #0]
   111b8:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
   111bc:	4288      	cmp	r0, r1
   111be:	d10c      	bne.n	111da <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x5e>
   111c0:	7860      	ldrb	r0, [r4, #1]
   111c2:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
   111c6:	4288      	cmp	r0, r1
   111c8:	d107      	bne.n	111da <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x5e>
   111ca:	78a0      	ldrb	r0, [r4, #2]
   111cc:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
   111d0:	4288      	cmp	r0, r1
   111d2:	bf02      	ittt	eq
   111d4:	2001      	moveq	r0, #1
   111d6:	b00d      	addeq	sp, #52	; 0x34
   111d8:	bd30      	popeq	{r4, r5, pc}
   111da:	2000      	movs	r0, #0
   111dc:	b00d      	add	sp, #52	; 0x34
   111de:	bd30      	pop	{r4, r5, pc}

000111e0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
   111e0:	f7f4 bbb8 	b.w	5954 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x560>

000111e4 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
   111e4:	b510      	push	{r4, lr}
   111e6:	f7fc fe3f 	bl	de68 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
   111ea:	2800      	cmp	r0, #0
   111ec:	bf04      	itt	eq
   111ee:	20ff      	moveq	r0, #255	; 0xff
   111f0:	bd10      	popeq	{r4, pc}
   111f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   111f6:	f7fc be17 	b.w	de28 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>

000111fa <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
   111fa:	b510      	push	{r4, lr}
   111fc:	f7f5 f95a 	bl	64b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   11200:	2810      	cmp	r0, #16
   11202:	bf04      	itt	eq
   11204:	2000      	moveq	r0, #0
   11206:	bd10      	popeq	{r4, pc}
   11208:	f7f5 fa0e 	bl	6628 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x218>
   1120c:	2001      	movs	r0, #1
   1120e:	bd10      	pop	{r4, pc}

00011210 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
   11210:	b570      	push	{r4, r5, r6, lr}
   11212:	460c      	mov	r4, r1
   11214:	4605      	mov	r5, r0
   11216:	2100      	movs	r1, #0
   11218:	f7ff fdcb 	bl	10db2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1121c:	6060      	str	r0, [r4, #4]
   1121e:	b110      	cbz	r0, 11226 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
   11220:	2000      	movs	r0, #0
   11222:	7020      	strb	r0, [r4, #0]
   11224:	bd70      	pop	{r4, r5, r6, pc}
   11226:	2101      	movs	r1, #1
   11228:	4628      	mov	r0, r5
   1122a:	f7ff fdc2 	bl	10db2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1122e:	6060      	str	r0, [r4, #4]
   11230:	2800      	cmp	r0, #0
   11232:	bf04      	itt	eq
   11234:	2002      	moveq	r0, #2
   11236:	bd70      	popeq	{r4, r5, r6, pc}
   11238:	2001      	movs	r0, #1
   1123a:	7020      	strb	r0, [r4, #0]
   1123c:	2000      	movs	r0, #0
   1123e:	bd70      	pop	{r4, r5, r6, pc}

00011240 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
   11240:	f6a0 5101 	subw	r1, r0, #3329	; 0xd01
   11244:	2906      	cmp	r1, #6
   11246:	bf9a      	itte	ls
   11248:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
   1124c:	f5a0 6050 	subls.w	r0, r0, #3328	; 0xd00
   11250:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
   11254:	4348      	muls	r0, r1
   11256:	4770      	bx	lr

00011258 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
   11258:	f5a0 717a 	sub.w	r1, r0, #1000	; 0x3e8
   1125c:	f241 7270 	movw	r2, #6000	; 0x1770
   11260:	4291      	cmp	r1, r2
   11262:	bf94      	ite	ls
   11264:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
   11268:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
   1126c:	fbb0 f0f1 	udiv	r0, r0, r1
   11270:	bf98      	it	ls
   11272:	f500 6050 	addls.w	r0, r0, #3328	; 0xd00
   11276:	b280      	uxth	r0, r0
   11278:	4770      	bx	lr

0001127a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
   1127a:	b570      	push	{r4, r5, r6, lr}
   1127c:	4604      	mov	r4, r0
   1127e:	4290      	cmp	r0, r2
   11280:	bf28      	it	cs
   11282:	bd70      	popcs	{r4, r5, r6, pc}
   11284:	1b10      	subs	r0, r2, r4
   11286:	2865      	cmp	r0, #101	; 0x65
   11288:	d30b      	bcc.n	112a2 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x28>
   1128a:	1825      	adds	r5, r4, r0
   1128c:	428d      	cmp	r5, r1
   1128e:	d806      	bhi.n	1129e <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x24>
   11290:	2104      	movs	r1, #4
   11292:	f7f0 f851 	bl	1338 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   11296:	2800      	cmp	r0, #0
   11298:	bf04      	itt	eq
   1129a:	4628      	moveq	r0, r5
   1129c:	bd70      	popeq	{r4, r5, r6, pc}
   1129e:	4620      	mov	r0, r4
   112a0:	bd70      	pop	{r4, r5, r6, pc}
   112a2:	2065      	movs	r0, #101	; 0x65
   112a4:	e7f1      	b.n	1128a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>

000112a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
   112a6:	290c      	cmp	r1, #12
   112a8:	d265      	bcs.n	11376 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   112aa:	e8df f001 	tbb	[pc, r1]
   112ae:	0906      	.short	0x0906
   112b0:	1b16130e 	.word	0x1b16130e
   112b4:	5e433c32 	.word	0x5e433c32
   112b8:	504a      	.short	0x504a
   112ba:	2a00      	cmp	r2, #0
   112bc:	d05d      	beq.n	1137a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   112be:	e05a      	b.n	11376 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   112c0:	2a07      	cmp	r2, #7
   112c2:	bf18      	it	ne
   112c4:	2a08      	cmpne	r2, #8
   112c6:	d058      	beq.n	1137a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   112c8:	e055      	b.n	11376 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   112ca:	2a0c      	cmp	r2, #12
   112cc:	bf18      	it	ne
   112ce:	2a0b      	cmpne	r2, #11
   112d0:	d053      	beq.n	1137a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   112d2:	e050      	b.n	11376 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   112d4:	2a0d      	cmp	r2, #13
   112d6:	d050      	beq.n	1137a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   112d8:	e04d      	b.n	11376 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   112da:	f1a2 000f 	sub.w	r0, r2, #15
   112de:	280c      	cmp	r0, #12
   112e0:	d94b      	bls.n	1137a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   112e2:	e048      	b.n	11376 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   112e4:	b123      	cbz	r3, 112f0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x4a>
   112e6:	f1a2 0010 	sub.w	r0, r2, #16
   112ea:	280b      	cmp	r0, #11
   112ec:	d945      	bls.n	1137a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   112ee:	e042      	b.n	11376 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   112f0:	2a12      	cmp	r2, #18
   112f2:	bf18      	it	ne
   112f4:	2a11      	cmpne	r2, #17
   112f6:	d040      	beq.n	1137a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   112f8:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
   112fc:	b120      	cbz	r0, 11308 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x62>
   112fe:	2a12      	cmp	r2, #18
   11300:	d339      	bcc.n	11376 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   11302:	2a1a      	cmp	r2, #26
   11304:	d939      	bls.n	1137a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   11306:	e036      	b.n	11376 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   11308:	2a16      	cmp	r2, #22
   1130a:	d334      	bcc.n	11376 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   1130c:	2a1a      	cmp	r2, #26
   1130e:	d934      	bls.n	1137a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   11310:	e031      	b.n	11376 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   11312:	f1a2 010f 	sub.w	r1, r2, #15
   11316:	2903      	cmp	r1, #3
   11318:	d92f      	bls.n	1137a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   1131a:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
   1131e:	b318      	cbz	r0, 11368 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
   11320:	2a1b      	cmp	r2, #27
   11322:	d92a      	bls.n	1137a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   11324:	e027      	b.n	11376 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   11326:	b113      	cbz	r3, 1132e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x88>
   11328:	2a04      	cmp	r2, #4
   1132a:	d026      	beq.n	1137a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   1132c:	e023      	b.n	11376 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   1132e:	2a04      	cmp	r2, #4
   11330:	d121      	bne.n	11376 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   11332:	e022      	b.n	1137a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   11334:	b113      	cbz	r3, 1133c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x96>
   11336:	2a06      	cmp	r2, #6
   11338:	d01f      	beq.n	1137a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   1133a:	e01c      	b.n	11376 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   1133c:	2a01      	cmp	r2, #1
   1133e:	d11a      	bne.n	11376 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   11340:	e01b      	b.n	1137a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   11342:	2a1c      	cmp	r2, #28
   11344:	bf1c      	itt	ne
   11346:	2a1d      	cmpne	r2, #29
   11348:	2a1e      	cmpne	r2, #30
   1134a:	d016      	beq.n	1137a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   1134c:	e013      	b.n	11376 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   1134e:	2a1f      	cmp	r2, #31
   11350:	bf18      	it	ne
   11352:	2a20      	cmpne	r2, #32
   11354:	d011      	beq.n	1137a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   11356:	2a21      	cmp	r2, #33	; 0x21
   11358:	bf18      	it	ne
   1135a:	2a22      	cmpne	r2, #34	; 0x22
   1135c:	d00d      	beq.n	1137a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   1135e:	2a23      	cmp	r2, #35	; 0x23
   11360:	bf1c      	itt	ne
   11362:	2a24      	cmpne	r2, #36	; 0x24
   11364:	2a26      	cmpne	r2, #38	; 0x26
   11366:	d008      	beq.n	1137a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   11368:	e005      	b.n	11376 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   1136a:	b113      	cbz	r3, 11372 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xcc>
   1136c:	2a0e      	cmp	r2, #14
   1136e:	d004      	beq.n	1137a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   11370:	e001      	b.n	11376 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   11372:	2a05      	cmp	r2, #5
   11374:	d001      	beq.n	1137a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   11376:	2000      	movs	r0, #0
   11378:	4770      	bx	lr
   1137a:	2001      	movs	r0, #1
   1137c:	4770      	bx	lr

0001137e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
   1137e:	280c      	cmp	r0, #12
   11380:	bf18      	it	ne
   11382:	280b      	cmpne	r0, #11
   11384:	d010      	beq.n	113a8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
   11386:	280d      	cmp	r0, #13
   11388:	bf18      	it	ne
   1138a:	281f      	cmpne	r0, #31
   1138c:	d00c      	beq.n	113a8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
   1138e:	2820      	cmp	r0, #32
   11390:	bf18      	it	ne
   11392:	2821      	cmpne	r0, #33	; 0x21
   11394:	d008      	beq.n	113a8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
   11396:	2822      	cmp	r0, #34	; 0x22
   11398:	bf18      	it	ne
   1139a:	2823      	cmpne	r0, #35	; 0x23
   1139c:	d004      	beq.n	113a8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
   1139e:	2824      	cmp	r0, #36	; 0x24
   113a0:	bf1e      	ittt	ne
   113a2:	2826      	cmpne	r0, #38	; 0x26
   113a4:	2000      	movne	r0, #0
   113a6:	4770      	bxne	lr
   113a8:	f04f 0001 	mov.w	r0, #1
   113ac:	4770      	bx	lr

000113ae <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
   113ae:	f011 0f0c 	tst.w	r1, #12
   113b2:	d013      	beq.n	113dc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2e>
   113b4:	f001 0104 	and.w	r1, r1, #4
   113b8:	2900      	cmp	r1, #0
   113ba:	bf0d      	iteet	eq
   113bc:	2240      	moveq	r2, #64	; 0x40
   113be:	2210      	movne	r2, #16
   113c0:	2196      	movne	r1, #150	; 0x96
   113c2:	f44f 7116 	moveq.w	r1, #600	; 0x258
   113c6:	f501 71bc 	add.w	r1, r1, #376	; 0x178
   113ca:	eba0 0301 	sub.w	r3, r0, r1
   113ce:	4288      	cmp	r0, r1
   113d0:	bf88      	it	hi
   113d2:	fb93 f0f2 	sdivhi	r0, r3, r2
   113d6:	d90e      	bls.n	113f6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x48>
   113d8:	b280      	uxth	r0, r0
   113da:	4770      	bx	lr
   113dc:	2902      	cmp	r1, #2
   113de:	d002      	beq.n	113e6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
   113e0:	2870      	cmp	r0, #112	; 0x70
   113e2:	d908      	bls.n	113f6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x48>
   113e4:	e009      	b.n	113fa <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4c>
   113e6:	283c      	cmp	r0, #60	; 0x3c
   113e8:	d905      	bls.n	113f6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x48>
   113ea:	383c      	subs	r0, #60	; 0x3c
   113ec:	17c1      	asrs	r1, r0, #31
   113ee:	eb00 7091 	add.w	r0, r0, r1, lsr #30
   113f2:	1080      	asrs	r0, r0, #2
   113f4:	e7f0      	b.n	113d8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2a>
   113f6:	2000      	movs	r0, #0
   113f8:	e7ee      	b.n	113d8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2a>
   113fa:	3870      	subs	r0, #112	; 0x70
   113fc:	17c1      	asrs	r1, r0, #31
   113fe:	eb00 7051 	add.w	r0, r0, r1, lsr #29
   11402:	10c0      	asrs	r0, r0, #3
   11404:	e7e8      	b.n	113d8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2a>

00011406 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
   11406:	6809      	ldr	r1, [r1, #0]
   11408:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
   1140c:	4770      	bx	lr

0001140e <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
   1140e:	2801      	cmp	r0, #1
   11410:	bf14      	ite	ne
   11412:	2802      	cmpne	r0, #2
   11414:	4770      	bxeq	lr
   11416:	f010 000c 	ands.w	r0, r0, #12
   1141a:	bf18      	it	ne
   1141c:	2004      	movne	r0, #4
   1141e:	4770      	bx	lr

00011420 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
   11420:	2901      	cmp	r1, #1
   11422:	d008      	beq.n	11436 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x16>
   11424:	2902      	cmp	r1, #2
   11426:	d00b      	beq.n	11440 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x20>
   11428:	2904      	cmp	r1, #4
   1142a:	bf12      	itee	ne
   1142c:	2908      	cmpne	r1, #8
   1142e:	f640 60a6 	movweq	r0, #3750	; 0xea6
   11432:	4770      	bxeq	lr
   11434:	e007      	b.n	11446 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x26>
   11436:	2800      	cmp	r0, #0
   11438:	bf04      	itt	eq
   1143a:	f240 40e2 	movweq	r0, #1250	; 0x4e2
   1143e:	4770      	bxeq	lr
   11440:	f640 10c4 	movw	r0, #2500	; 0x9c4
   11444:	4770      	bx	lr
   11446:	b510      	push	{r4, lr}
   11448:	f240 31b1 	movw	r1, #945	; 0x3b1
   1144c:	2029      	movs	r0, #41	; 0x29
   1144e:	f7f2 fd77 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00011452 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
   11452:	b438      	push	{r3, r4, r5}
   11454:	b2cb      	uxtb	r3, r1
   11456:	f3c1 2c07 	ubfx	ip, r1, #8, #8
   1145a:	b2c1      	uxtb	r1, r0
   1145c:	f3c0 2407 	ubfx	r4, r0, #8, #8
   11460:	2b01      	cmp	r3, #1
   11462:	d007      	beq.n	11474 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x22>
   11464:	2b02      	cmp	r3, #2
   11466:	d009      	beq.n	1147c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x2a>
   11468:	2b04      	cmp	r3, #4
   1146a:	bf08      	it	eq
   1146c:	f1bc 0f04 	cmpeq.w	ip, #4
   11470:	d02d      	beq.n	114ce <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
   11472:	e006      	b.n	11482 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x30>
   11474:	f1bc 0f01 	cmp.w	ip, #1
   11478:	d103      	bne.n	11482 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x30>
   1147a:	e028      	b.n	114ce <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
   1147c:	f1bc 0f02 	cmp.w	ip, #2
   11480:	d025      	beq.n	114ce <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
   11482:	2901      	cmp	r1, #1
   11484:	d006      	beq.n	11494 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x42>
   11486:	2902      	cmp	r1, #2
   11488:	d007      	beq.n	1149a <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x48>
   1148a:	2904      	cmp	r1, #4
   1148c:	bf08      	it	eq
   1148e:	2c04      	cmpeq	r4, #4
   11490:	d01d      	beq.n	114ce <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
   11492:	e004      	b.n	1149e <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x4c>
   11494:	2c01      	cmp	r4, #1
   11496:	d102      	bne.n	1149e <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x4c>
   11498:	e019      	b.n	114ce <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
   1149a:	2c02      	cmp	r4, #2
   1149c:	d017      	beq.n	114ce <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
   1149e:	ea01 010c 	and.w	r1, r1, ip
   114a2:	f361 0207 	bfi	r2, r1, #0, #8
   114a6:	ea04 0103 	and.w	r1, r4, r3
   114aa:	f361 220f 	bfi	r2, r1, #8, #8
   114ae:	b2d1      	uxtb	r1, r2
   114b0:	f011 0f02 	tst.w	r1, #2
   114b4:	bf18      	it	ne
   114b6:	2302      	movne	r3, #2
   114b8:	d010      	beq.n	114dc <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x8a>
   114ba:	f3c2 2107 	ubfx	r1, r2, #8, #8
   114be:	f88d 3000 	strb.w	r3, [sp]
   114c2:	f011 0f02 	tst.w	r1, #2
   114c6:	bf18      	it	ne
   114c8:	2102      	movne	r1, #2
   114ca:	d11b      	bne.n	11504 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0xb2>
   114cc:	e011      	b.n	114f2 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0xa0>
   114ce:	4021      	ands	r1, r4
   114d0:	ea03 030c 	and.w	r3, r3, ip
   114d4:	4019      	ands	r1, r3
   114d6:	f361 0207 	bfi	r2, r1, #0, #8
   114da:	e7e6      	b.n	114aa <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x58>
   114dc:	f011 0f01 	tst.w	r1, #1
   114e0:	bf18      	it	ne
   114e2:	2301      	movne	r3, #1
   114e4:	d1e9      	bne.n	114ba <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x68>
   114e6:	f011 0f04 	tst.w	r1, #4
   114ea:	bf14      	ite	ne
   114ec:	2308      	movne	r3, #8
   114ee:	2300      	moveq	r3, #0
   114f0:	e7e3      	b.n	114ba <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x68>
   114f2:	f011 0f01 	tst.w	r1, #1
   114f6:	bf18      	it	ne
   114f8:	2101      	movne	r1, #1
   114fa:	d103      	bne.n	11504 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0xb2>
   114fc:	f011 0104 	ands.w	r1, r1, #4
   11500:	bf18      	it	ne
   11502:	2108      	movne	r1, #8
   11504:	f88d 1001 	strb.w	r1, [sp, #1]
   11508:	2b08      	cmp	r3, #8
   1150a:	bf01      	itttt	eq
   1150c:	0c00      	lsreq	r0, r0, #16
   1150e:	2801      	cmpeq	r0, #1
   11510:	2004      	moveq	r0, #4
   11512:	f88d 0000 	strbeq.w	r0, [sp]
   11516:	f8bd 0000 	ldrh.w	r0, [sp]
   1151a:	bc38      	pop	{r3, r4, r5}
   1151c:	4770      	bx	lr

0001151e <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA>:
   1151e:	f04f 0c00 	mov.w	ip, #0
   11522:	2908      	cmp	r1, #8
   11524:	d002      	beq.n	1152c <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0xe>
   11526:	2904      	cmp	r1, #4
   11528:	d009      	beq.n	1153e <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x20>
   1152a:	e011      	b.n	11550 <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x32>
   1152c:	2801      	cmp	r0, #1
   1152e:	d10f      	bne.n	11550 <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x32>
   11530:	2004      	movs	r0, #4
   11532:	7090      	strb	r0, [r2, #2]
   11534:	f882 c003 	strb.w	ip, [r2, #3]
   11538:	8013      	strh	r3, [r2, #0]
   1153a:	2001      	movs	r0, #1
   1153c:	4770      	bx	lr
   1153e:	2801      	cmp	r0, #1
   11540:	d006      	beq.n	11550 <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x32>
   11542:	2008      	movs	r0, #8
   11544:	7090      	strb	r0, [r2, #2]
   11546:	f882 c003 	strb.w	ip, [r2, #3]
   1154a:	8013      	strh	r3, [r2, #0]
   1154c:	2001      	movs	r0, #1
   1154e:	4770      	bx	lr
   11550:	2000      	movs	r0, #0
   11552:	4770      	bx	lr

00011554 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
   11554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11558:	460c      	mov	r4, r1
   1155a:	4605      	mov	r5, r0
   1155c:	68c7      	ldr	r7, [r0, #12]
   1155e:	f7f0 fb4f 	bl	1c00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
   11562:	b198      	cbz	r0, 1158c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
   11564:	b1bc      	cbz	r4, 11596 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
   11566:	4638      	mov	r0, r7
   11568:	68e9      	ldr	r1, [r5, #12]
   1156a:	f7f0 f833 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   1156e:	2800      	cmp	r0, #0
   11570:	dd11      	ble.n	11596 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
   11572:	4420      	add	r0, r4
   11574:	1e40      	subs	r0, r0, #1
   11576:	fbb0 f6f4 	udiv	r6, r0, r4
   1157a:	fb06 f104 	mul.w	r1, r6, r4
   1157e:	4638      	mov	r0, r7
   11580:	f7ef fff6 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   11584:	60e8      	str	r0, [r5, #12]
   11586:	4630      	mov	r0, r6
   11588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1158c:	f240 2136 	movw	r1, #566	; 0x236
   11590:	2029      	movs	r0, #41	; 0x29
   11592:	f7f2 fcd5 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11596:	2000      	movs	r0, #0
   11598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001159c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
   1159c:	b538      	push	{r3, r4, r5, lr}
   1159e:	4605      	mov	r5, r0
   115a0:	460c      	mov	r4, r1
   115a2:	4668      	mov	r0, sp
   115a4:	f7fd feba 	bl	f31c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
   115a8:	b320      	cbz	r0, 115f4 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x58>
   115aa:	f99d 2000 	ldrsb.w	r2, [sp]
   115ae:	7262      	strb	r2, [r4, #9]
   115b0:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
   115b4:	72a0      	strb	r0, [r4, #10]
   115b6:	f994 100b 	ldrsb.w	r1, [r4, #11]
   115ba:	2000      	movs	r0, #0
   115bc:	1a51      	subs	r1, r2, r1
   115be:	bf48      	it	mi
   115c0:	4249      	negmi	r1, r1
   115c2:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   115c6:	428b      	cmp	r3, r1
   115c8:	bfc8      	it	gt
   115ca:	bd38      	popgt	{r3, r4, r5, pc}
   115cc:	2bff      	cmp	r3, #255	; 0xff
   115ce:	bf08      	it	eq
   115d0:	bd38      	popeq	{r3, r4, r5, pc}
   115d2:	7b21      	ldrb	r1, [r4, #12]
   115d4:	1c49      	adds	r1, r1, #1
   115d6:	b2c9      	uxtb	r1, r1
   115d8:	7321      	strb	r1, [r4, #12]
   115da:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   115de:	4299      	cmp	r1, r3
   115e0:	d803      	bhi.n	115ea <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
   115e2:	7ae1      	ldrb	r1, [r4, #11]
   115e4:	297f      	cmp	r1, #127	; 0x7f
   115e6:	bf18      	it	ne
   115e8:	bd38      	popne	{r3, r4, r5, pc}
   115ea:	72e2      	strb	r2, [r4, #11]
   115ec:	2000      	movs	r0, #0
   115ee:	7320      	strb	r0, [r4, #12]
   115f0:	2001      	movs	r0, #1
   115f2:	bd38      	pop	{r3, r4, r5, pc}
   115f4:	207f      	movs	r0, #127	; 0x7f
   115f6:	7260      	strb	r0, [r4, #9]
   115f8:	2000      	movs	r0, #0
   115fa:	bd38      	pop	{r3, r4, r5, pc}

000115fc <sym_6A6FSIHLUNNAM2H65LFSFKBXCMGRSGO36R3DB6Q>:
   115fc:	2800      	cmp	r0, #0
   115fe:	db03      	blt.n	11608 <sym_6A6FSIHLUNNAM2H65LFSFKBXCMGRSGO36R3DB6Q+0xc>
   11600:	4288      	cmp	r0, r1
   11602:	db04      	blt.n	1160e <sym_6A6FSIHLUNNAM2H65LFSFKBXCMGRSGO36R3DB6Q+0x12>
   11604:	4608      	mov	r0, r1
   11606:	e002      	b.n	1160e <sym_6A6FSIHLUNNAM2H65LFSFKBXCMGRSGO36R3DB6Q+0x12>
   11608:	4249      	negs	r1, r1
   1160a:	4288      	cmp	r0, r1
   1160c:	dbfa      	blt.n	11604 <sym_6A6FSIHLUNNAM2H65LFSFKBXCMGRSGO36R3DB6Q+0x8>
   1160e:	b200      	sxth	r0, r0
   11610:	4770      	bx	lr

00011612 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
   11612:	f641 524c 	movw	r2, #7500	; 0x1d4c
   11616:	4291      	cmp	r1, r2
   11618:	bf34      	ite	cc
   1161a:	2164      	movcc	r1, #100	; 0x64
   1161c:	f240 41e2 	movwcs	r1, #1250	; 0x4e2
   11620:	4348      	muls	r0, r1
   11622:	4770      	bx	lr

00011624 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
   11624:	f641 524c 	movw	r2, #7500	; 0x1d4c
   11628:	4291      	cmp	r1, r2
   1162a:	bf34      	ite	cc
   1162c:	2164      	movcc	r1, #100	; 0x64
   1162e:	f240 41e2 	movwcs	r1, #1250	; 0x4e2
   11632:	fb10 f001 	smulbb	r0, r0, r1
   11636:	4770      	bx	lr

00011638 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
   11638:	b510      	push	{r4, lr}
   1163a:	29fb      	cmp	r1, #251	; 0xfb
   1163c:	bf9c      	itt	ls
   1163e:	7041      	strbls	r1, [r0, #1]
   11640:	bd10      	popls	{r4, pc}
   11642:	f44f 61af 	mov.w	r1, #1400	; 0x578
   11646:	202a      	movs	r0, #42	; 0x2a
   11648:	f7f2 fc7a 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001164c <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
   1164c:	7101      	strb	r1, [r0, #4]
   1164e:	4770      	bx	lr

00011650 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
   11650:	7141      	strb	r1, [r0, #5]
   11652:	4770      	bx	lr

00011654 <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>:
   11654:	1d00      	adds	r0, r0, #4
   11656:	f002 bc74 	b.w	13f42 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>

0001165a <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>:
   1165a:	72c1      	strb	r1, [r0, #11]
   1165c:	0a09      	lsrs	r1, r1, #8
   1165e:	7301      	strb	r1, [r0, #12]
   11660:	4770      	bx	lr

00011662 <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>:
   11662:	8809      	ldrh	r1, [r1, #0]
   11664:	8181      	strh	r1, [r0, #12]
   11666:	4770      	bx	lr

00011668 <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>:
   11668:	6809      	ldr	r1, [r1, #0]
   1166a:	f8c0 1016 	str.w	r1, [r0, #22]
   1166e:	4770      	bx	lr

00011670 <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>:
   11670:	680a      	ldr	r2, [r1, #0]
   11672:	6042      	str	r2, [r0, #4]
   11674:	6849      	ldr	r1, [r1, #4]
   11676:	6081      	str	r1, [r0, #8]
   11678:	4770      	bx	lr

0001167a <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>:
   1167a:	680a      	ldr	r2, [r1, #0]
   1167c:	f8c0 200e 	str.w	r2, [r0, #14]
   11680:	6849      	ldr	r1, [r1, #4]
   11682:	f8c0 1012 	str.w	r1, [r0, #18]
   11686:	4770      	bx	lr

00011688 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
   11688:	680a      	ldr	r2, [r1, #0]
   1168a:	6042      	str	r2, [r0, #4]
   1168c:	6849      	ldr	r1, [r1, #4]
   1168e:	6081      	str	r1, [r0, #8]
   11690:	4770      	bx	lr

00011692 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
   11692:	7802      	ldrb	r2, [r0, #0]
   11694:	f001 0103 	and.w	r1, r1, #3
   11698:	f022 0203 	bic.w	r2, r2, #3
   1169c:	4311      	orrs	r1, r2
   1169e:	7001      	strb	r1, [r0, #0]
   116a0:	4770      	bx	lr

000116a2 <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>:
   116a2:	7101      	strb	r1, [r0, #4]
   116a4:	4770      	bx	lr

000116a6 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
   116a6:	7101      	strb	r1, [r0, #4]
   116a8:	0a09      	lsrs	r1, r1, #8
   116aa:	7141      	strb	r1, [r0, #5]
   116ac:	4770      	bx	lr

000116ae <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
   116ae:	7181      	strb	r1, [r0, #6]
   116b0:	0a09      	lsrs	r1, r1, #8
   116b2:	71c1      	strb	r1, [r0, #7]
   116b4:	4770      	bx	lr

000116b6 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
   116b6:	7201      	strb	r1, [r0, #8]
   116b8:	0a09      	lsrs	r1, r1, #8
   116ba:	7241      	strb	r1, [r0, #9]
   116bc:	4770      	bx	lr

000116be <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
   116be:	7281      	strb	r1, [r0, #10]
   116c0:	0a09      	lsrs	r1, r1, #8
   116c2:	72c1      	strb	r1, [r0, #11]
   116c4:	4770      	bx	lr

000116c6 <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>:
   116c6:	7181      	strb	r1, [r0, #6]
   116c8:	0a09      	lsrs	r1, r1, #8
   116ca:	71c1      	strb	r1, [r0, #7]
   116cc:	4770      	bx	lr

000116ce <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>:
   116ce:	7141      	strb	r1, [r0, #5]
   116d0:	4770      	bx	lr

000116d2 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>:
   116d2:	b570      	push	{r4, r5, r6, lr}
   116d4:	7802      	ldrb	r2, [r0, #0]
   116d6:	7841      	ldrb	r1, [r0, #1]
   116d8:	f002 020f 	and.w	r2, r2, #15
   116dc:	2a08      	cmp	r2, #8
   116de:	d24b      	bcs.n	11778 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0xa6>
   116e0:	e8df f002 	tbb	[pc, r2]
   116e4:	4a0b0804 	.word	0x4a0b0804
   116e8:	140f4a4a 	.word	0x140f4a4a
   116ec:	1f88      	subs	r0, r1, #6
   116ee:	281f      	cmp	r0, #31
   116f0:	d90a      	bls.n	11708 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x36>
   116f2:	e041      	b.n	11778 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0xa6>
   116f4:	290c      	cmp	r1, #12
   116f6:	d007      	beq.n	11708 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x36>
   116f8:	e03e      	b.n	11778 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0xa6>
   116fa:	1f88      	subs	r0, r1, #6
   116fc:	281f      	cmp	r0, #31
   116fe:	d903      	bls.n	11708 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x36>
   11700:	e03a      	b.n	11778 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0xa6>
   11702:	1f88      	subs	r0, r1, #6
   11704:	281f      	cmp	r0, #31
   11706:	d837      	bhi.n	11778 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0xa6>
   11708:	2001      	movs	r0, #1
   1170a:	bd70      	pop	{r4, r5, r6, pc}
   1170c:	1e4a      	subs	r2, r1, #1
   1170e:	2afe      	cmp	r2, #254	; 0xfe
   11710:	d832      	bhi.n	11778 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0xa6>
   11712:	4604      	mov	r4, r0
   11714:	78c0      	ldrb	r0, [r0, #3]
   11716:	2600      	movs	r6, #0
   11718:	0982      	lsrs	r2, r0, #6
   1171a:	2a03      	cmp	r2, #3
   1171c:	d009      	beq.n	11732 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x60>
   1171e:	f000 053f 	and.w	r5, r0, #63	; 0x3f
   11722:	1c68      	adds	r0, r5, #1
   11724:	4288      	cmp	r0, r1
   11726:	d804      	bhi.n	11732 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x60>
   11728:	4620      	mov	r0, r4
   1172a:	f000 f856 	bl	117da <sym_7T3YS7ZM6TRSXMQ2XWBEJASYAZJXOUEFW4XRVAA>
   1172e:	42a8      	cmp	r0, r5
   11730:	d901      	bls.n	11736 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x64>
   11732:	4630      	mov	r0, r6
   11734:	bd70      	pop	{r4, r5, r6, pc}
   11736:	78e0      	ldrb	r0, [r4, #3]
   11738:	f04f 0501 	mov.w	r5, #1
   1173c:	f010 0f3f 	tst.w	r0, #63	; 0x3f
   11740:	bf1e      	ittt	ne
   11742:	f114 0004 	addsne.w	r0, r4, #4
   11746:	7800      	ldrbne	r0, [r0, #0]
   11748:	f010 0f10 	tstne.w	r0, #16
   1174c:	d012      	beq.n	11774 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0xa2>
   1174e:	2104      	movs	r1, #4
   11750:	4620      	mov	r0, r4
   11752:	f7f5 fa61 	bl	6c18 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x70>
   11756:	2800      	cmp	r0, #0
   11758:	bf18      	it	ne
   1175a:	eb14 0000 	addsne.w	r0, r4, r0
   1175e:	d0e8      	beq.n	11732 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x60>
   11760:	7801      	ldrb	r1, [r0, #0]
   11762:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   11766:	2925      	cmp	r1, #37	; 0x25
   11768:	d2e3      	bcs.n	11732 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x60>
   1176a:	7880      	ldrb	r0, [r0, #2]
   1176c:	2102      	movs	r1, #2
   1176e:	ebb1 1f50 	cmp.w	r1, r0, lsr #5
   11772:	d3de      	bcc.n	11732 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x60>
   11774:	4628      	mov	r0, r5
   11776:	bd70      	pop	{r4, r5, r6, pc}
   11778:	2000      	movs	r0, #0
   1177a:	bd70      	pop	{r4, r5, r6, pc}

0001177c <sym_FITQAUCWEWZALLHJ4Y4UNQWIKT43CPDMCVGNNFY>:
   1177c:	78c1      	ldrb	r1, [r0, #3]
   1177e:	7840      	ldrb	r0, [r0, #1]
   11780:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   11784:	1a40      	subs	r0, r0, r1
   11786:	1e40      	subs	r0, r0, #1
   11788:	b280      	uxth	r0, r0
   1178a:	4770      	bx	lr

0001178c <sym_K5O4S5LXJO2IVEZ2S6XKTRJFPWYBJ3GPNSTV4VA>:
   1178c:	b570      	push	{r4, r5, r6, lr}
   1178e:	78c4      	ldrb	r4, [r0, #3]
   11790:	468c      	mov	ip, r1
   11792:	f004 013f 	and.w	r1, r4, #63	; 0x3f
   11796:	7845      	ldrb	r5, [r0, #1]
   11798:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   1179c:	1b2c      	subs	r4, r5, r4
   1179e:	1e64      	subs	r4, r4, #1
   117a0:	1ae4      	subs	r4, r4, r3
   117a2:	b2a4      	uxth	r4, r4
   117a4:	4294      	cmp	r4, r2
   117a6:	bf88      	it	hi
   117a8:	4614      	movhi	r4, r2
   117aa:	f1bc 0f00 	cmp.w	ip, #0
   117ae:	d006      	beq.n	117be <sym_K5O4S5LXJO2IVEZ2S6XKTRJFPWYBJ3GPNSTV4VA+0x32>
   117b0:	4419      	add	r1, r3
   117b2:	4408      	add	r0, r1
   117b4:	1d01      	adds	r1, r0, #4
   117b6:	4622      	mov	r2, r4
   117b8:	4660      	mov	r0, ip
   117ba:	f7fe fb1b 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   117be:	4620      	mov	r0, r4
   117c0:	bd70      	pop	{r4, r5, r6, pc}

000117c2 <sym_6KYDR3JNRMNBZD2D4KUEK2GB4RCTCKOQRZV2E5Y>:
   117c2:	b510      	push	{r4, lr}
   117c4:	4604      	mov	r4, r0
   117c6:	f7f5 fa27 	bl	6c18 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x70>
   117ca:	2800      	cmp	r0, #0
   117cc:	bf18      	it	ne
   117ce:	4420      	addne	r0, r4
   117d0:	bd10      	pop	{r4, pc}

000117d2 <sym_D66UNDVZ3GOIW7NLNL4N37KLOXWCRBXVM75X56A>:
   117d2:	78c0      	ldrb	r0, [r0, #3]
   117d4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   117d8:	4770      	bx	lr

000117da <sym_7T3YS7ZM6TRSXMQ2XWBEJASYAZJXOUEFW4XRVAA>:
   117da:	78c1      	ldrb	r1, [r0, #3]
   117dc:	f011 0f3f 	tst.w	r1, #63	; 0x3f
   117e0:	bf1b      	ittet	ne
   117e2:	7902      	ldrbne	r2, [r0, #4]
   117e4:	f012 0f01 	tstne.w	r2, #1
   117e8:	2200      	moveq	r2, #0
   117ea:	2201      	movne	r2, #1
   117ec:	f011 0f3f 	tst.w	r1, #63	; 0x3f
   117f0:	bf1b      	ittet	ne
   117f2:	7903      	ldrbne	r3, [r0, #4]
   117f4:	f013 0f02 	tstne.w	r3, #2
   117f8:	2300      	moveq	r3, #0
   117fa:	2301      	movne	r3, #1
   117fc:	441a      	add	r2, r3
   117fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   11802:	0053      	lsls	r3, r2, #1
   11804:	f011 0f3f 	tst.w	r1, #63	; 0x3f
   11808:	bf1b      	ittet	ne
   1180a:	7902      	ldrbne	r2, [r0, #4]
   1180c:	f012 0f08 	tstne.w	r2, #8
   11810:	2200      	moveq	r2, #0
   11812:	2201      	movne	r2, #1
   11814:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   11818:	f011 0f3f 	tst.w	r1, #63	; 0x3f
   1181c:	bf1b      	ittet	ne
   1181e:	7902      	ldrbne	r2, [r0, #4]
   11820:	f012 0f04 	tstne.w	r2, #4
   11824:	2200      	moveq	r2, #0
   11826:	2201      	movne	r2, #1
   11828:	4413      	add	r3, r2
   1182a:	f011 0f3f 	tst.w	r1, #63	; 0x3f
   1182e:	bf1b      	ittet	ne
   11830:	7902      	ldrbne	r2, [r0, #4]
   11832:	f012 0f20 	tstne.w	r2, #32
   11836:	2200      	moveq	r2, #0
   11838:	2201      	movne	r2, #1
   1183a:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
   1183e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   11842:	f011 0f3f 	tst.w	r1, #63	; 0x3f
   11846:	bf1b      	ittet	ne
   11848:	7902      	ldrbne	r2, [r0, #4]
   1184a:	f012 0f10 	tstne.w	r2, #16
   1184e:	2200      	moveq	r2, #0
   11850:	2201      	movne	r2, #1
   11852:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   11856:	441a      	add	r2, r3
   11858:	f011 0f3f 	tst.w	r1, #63	; 0x3f
   1185c:	bf1b      	ittet	ne
   1185e:	7900      	ldrbne	r0, [r0, #4]
   11860:	f010 0f40 	tstne.w	r0, #64	; 0x40
   11864:	2000      	moveq	r0, #0
   11866:	2001      	movne	r0, #1
   11868:	4410      	add	r0, r2
   1186a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   1186e:	bf14      	ite	ne
   11870:	2101      	movne	r1, #1
   11872:	2100      	moveq	r1, #0
   11874:	4408      	add	r0, r1
   11876:	b2c0      	uxtb	r0, r0
   11878:	4770      	bx	lr

0001187a <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>:
   1187a:	7800      	ldrb	r0, [r0, #0]
   1187c:	09c0      	lsrs	r0, r0, #7
   1187e:	4770      	bx	lr

00011880 <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>:
   11880:	f8d0 2003 	ldr.w	r2, [r0, #3]
   11884:	600a      	str	r2, [r1, #0]
   11886:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   1188a:	8088      	strh	r0, [r1, #4]
   1188c:	4770      	bx	lr

0001188e <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>:
   1188e:	7800      	ldrb	r0, [r0, #0]
   11890:	f3c0 1080 	ubfx	r0, r0, #6, #1
   11894:	4770      	bx	lr

00011896 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
   11896:	b530      	push	{r4, r5, lr}
   11898:	7802      	ldrb	r2, [r0, #0]
   1189a:	b083      	sub	sp, #12
   1189c:	f002 020f 	and.w	r2, r2, #15
   118a0:	2a03      	cmp	r2, #3
   118a2:	d057      	beq.n	11954 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xbe>
   118a4:	2a05      	cmp	r2, #5
   118a6:	d152      	bne.n	1194e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
   118a8:	460d      	mov	r5, r1
   118aa:	4604      	mov	r4, r0
   118ac:	f100 011f 	add.w	r1, r0, #31
   118b0:	4668      	mov	r0, sp
   118b2:	f002 fb46 	bl	13f42 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
   118b6:	f89d 0004 	ldrb.w	r0, [sp, #4]
   118ba:	f89d 1000 	ldrb.w	r1, [sp]
   118be:	f020 001f 	bic.w	r0, r0, #31
   118c2:	f88d 0004 	strb.w	r0, [sp, #4]
   118c6:	2900      	cmp	r1, #0
   118c8:	bf04      	itt	eq
   118ca:	f89d 1001 	ldrbeq.w	r1, [sp, #1]
   118ce:	2900      	cmpeq	r1, #0
   118d0:	d10a      	bne.n	118e8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x52>
   118d2:	f89d 1002 	ldrb.w	r1, [sp, #2]
   118d6:	2900      	cmp	r1, #0
   118d8:	bf01      	itttt	eq
   118da:	f89d 1003 	ldrbeq.w	r1, [sp, #3]
   118de:	2900      	cmpeq	r1, #0
   118e0:	2800      	cmpeq	r0, #0
   118e2:	b003      	addeq	sp, #12
   118e4:	bf08      	it	eq
   118e6:	bd30      	popeq	{r4, r5, pc}
   118e8:	f8b4 0019 	ldrh.w	r0, [r4, #25]
   118ec:	f8b4 301b 	ldrh.w	r3, [r4, #27]
   118f0:	f8b4 1017 	ldrh.w	r1, [r4, #23]
   118f4:	7da2      	ldrb	r2, [r4, #22]
   118f6:	2d00      	cmp	r5, #0
   118f8:	bf18      	it	ne
   118fa:	f5b0 6f50 	cmpne.w	r0, #3328	; 0xd00
   118fe:	d909      	bls.n	11914 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x7e>
   11900:	f640 5c07 	movw	ip, #3335	; 0xd07
   11904:	4560      	cmp	r0, ip
   11906:	d805      	bhi.n	11914 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x7e>
   11908:	f894 c001 	ldrb.w	ip, [r4, #1]
   1190c:	f1bc 0f22 	cmp.w	ip, #34	; 0x22
   11910:	d11d      	bne.n	1194e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
   11912:	e011      	b.n	11938 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xa2>
   11914:	f894 c001 	ldrb.w	ip, [r4, #1]
   11918:	f1bc 0f22 	cmp.w	ip, #34	; 0x22
   1191c:	d117      	bne.n	1194e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
   1191e:	f1a0 0c06 	sub.w	ip, r0, #6
   11922:	f640 457a 	movw	r5, #3194	; 0xc7a
   11926:	45ac      	cmp	ip, r5
   11928:	d811      	bhi.n	1194e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
   1192a:	b182      	cbz	r2, 1194e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
   1192c:	2a08      	cmp	r2, #8
   1192e:	bf98      	it	ls
   11930:	4282      	cmpls	r2, r0
   11932:	d20c      	bcs.n	1194e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
   11934:	4288      	cmp	r0, r1
   11936:	d30a      	bcc.n	1194e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
   11938:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1193c:	d207      	bcs.n	1194e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
   1193e:	f8b4 001d 	ldrh.w	r0, [r4, #29]
   11942:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   11946:	d802      	bhi.n	1194e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
   11948:	b003      	add	sp, #12
   1194a:	2001      	movs	r0, #1
   1194c:	bd30      	pop	{r4, r5, pc}
   1194e:	b003      	add	sp, #12
   11950:	2000      	movs	r0, #0
   11952:	bd30      	pop	{r4, r5, pc}
   11954:	7840      	ldrb	r0, [r0, #1]
   11956:	280c      	cmp	r0, #12
   11958:	d1f9      	bne.n	1194e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
   1195a:	e7f5      	b.n	11948 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb2>

0001195c <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>:
   1195c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11960:	7801      	ldrb	r1, [r0, #0]
   11962:	2601      	movs	r6, #1
   11964:	f001 010f 	and.w	r1, r1, #15
   11968:	2500      	movs	r5, #0
   1196a:	2904      	cmp	r1, #4
   1196c:	d00c      	beq.n	11988 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x2c>
   1196e:	2907      	cmp	r1, #7
   11970:	d00f      	beq.n	11992 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x36>
   11972:	2908      	cmp	r1, #8
   11974:	bf1c      	itt	ne
   11976:	2000      	movne	r0, #0
   11978:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
   1197c:	7840      	ldrb	r0, [r0, #1]
   1197e:	280e      	cmp	r0, #14
   11980:	d034      	beq.n	119ec <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x90>
   11982:	4628      	mov	r0, r5
   11984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11988:	7840      	ldrb	r0, [r0, #1]
   1198a:	1f80      	subs	r0, r0, #6
   1198c:	281f      	cmp	r0, #31
   1198e:	d92d      	bls.n	119ec <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x90>
   11990:	e7f7      	b.n	11982 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x26>
   11992:	4604      	mov	r4, r0
   11994:	7840      	ldrb	r0, [r0, #1]
   11996:	78e1      	ldrb	r1, [r4, #3]
   11998:	098a      	lsrs	r2, r1, #6
   1199a:	2a03      	cmp	r2, #3
   1199c:	d0f1      	beq.n	11982 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x26>
   1199e:	f001 073f 	and.w	r7, r1, #63	; 0x3f
   119a2:	1c79      	adds	r1, r7, #1
   119a4:	4281      	cmp	r1, r0
   119a6:	d8ec      	bhi.n	11982 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x26>
   119a8:	4620      	mov	r0, r4
   119aa:	f7ff ff16 	bl	117da <sym_7T3YS7ZM6TRSXMQ2XWBEJASYAZJXOUEFW4XRVAA>
   119ae:	42b8      	cmp	r0, r7
   119b0:	d8e7      	bhi.n	11982 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x26>
   119b2:	78e0      	ldrb	r0, [r4, #3]
   119b4:	f010 0f3f 	tst.w	r0, #63	; 0x3f
   119b8:	bf1e      	ittt	ne
   119ba:	f114 0004 	addsne.w	r0, r4, #4
   119be:	7800      	ldrbne	r0, [r0, #0]
   119c0:	f010 0f10 	tstne.w	r0, #16
   119c4:	d012      	beq.n	119ec <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x90>
   119c6:	2104      	movs	r1, #4
   119c8:	4620      	mov	r0, r4
   119ca:	f7f5 f925 	bl	6c18 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x70>
   119ce:	2800      	cmp	r0, #0
   119d0:	bf18      	it	ne
   119d2:	eb14 0000 	addsne.w	r0, r4, r0
   119d6:	d0d4      	beq.n	11982 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x26>
   119d8:	7801      	ldrb	r1, [r0, #0]
   119da:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   119de:	2925      	cmp	r1, #37	; 0x25
   119e0:	d2cf      	bcs.n	11982 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x26>
   119e2:	7880      	ldrb	r0, [r0, #2]
   119e4:	2102      	movs	r1, #2
   119e6:	ebb1 1f50 	cmp.w	r1, r0, lsr #5
   119ea:	d3ca      	bcc.n	11982 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x26>
   119ec:	4630      	mov	r0, r6
   119ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000119f2 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
   119f2:	b570      	push	{r4, r5, r6, lr}
   119f4:	4614      	mov	r4, r2
   119f6:	4605      	mov	r5, r0
   119f8:	2a1f      	cmp	r2, #31
   119fa:	d903      	bls.n	11a04 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
   119fc:	21b2      	movs	r1, #178	; 0xb2
   119fe:	202a      	movs	r0, #42	; 0x2a
   11a00:	f7f2 fa9e 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11a04:	f105 0009 	add.w	r0, r5, #9
   11a08:	f7fe f9f4 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   11a0c:	1da0      	adds	r0, r4, #6
   11a0e:	7068      	strb	r0, [r5, #1]
   11a10:	bd70      	pop	{r4, r5, r6, pc}

00011a12 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
   11a12:	b510      	push	{r4, lr}
   11a14:	7802      	ldrb	r2, [r0, #0]
   11a16:	f001 030f 	and.w	r3, r1, #15
   11a1a:	f022 020f 	bic.w	r2, r2, #15
   11a1e:	431a      	orrs	r2, r3
   11a20:	7002      	strb	r2, [r0, #0]
   11a22:	2909      	cmp	r1, #9
   11a24:	d213      	bcs.n	11a4e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x3c>
   11a26:	e8df f001 	tbb	[pc, r1]
   11a2a:	0705      	.short	0x0705
   11a2c:	09050705 	.word	0x09050705
   11a30:	000f0b05 	.word	0x000f0b05
   11a34:	2106      	movs	r1, #6
   11a36:	e008      	b.n	11a4a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   11a38:	210c      	movs	r1, #12
   11a3a:	e006      	b.n	11a4a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   11a3c:	2122      	movs	r1, #34	; 0x22
   11a3e:	e004      	b.n	11a4a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   11a40:	2101      	movs	r1, #1
   11a42:	2200      	movs	r2, #0
   11a44:	70c2      	strb	r2, [r0, #3]
   11a46:	e000      	b.n	11a4a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   11a48:	210e      	movs	r1, #14
   11a4a:	7041      	strb	r1, [r0, #1]
   11a4c:	bd10      	pop	{r4, pc}
   11a4e:	216e      	movs	r1, #110	; 0x6e
   11a50:	202a      	movs	r0, #42	; 0x2a
   11a52:	f7f2 fa75 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00011a56 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
   11a56:	680a      	ldr	r2, [r1, #0]
   11a58:	f8c0 2009 	str.w	r2, [r0, #9]
   11a5c:	8889      	ldrh	r1, [r1, #4]
   11a5e:	f8a0 100d 	strh.w	r1, [r0, #13]
   11a62:	4770      	bx	lr

00011a64 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
   11a64:	7802      	ldrb	r2, [r0, #0]
   11a66:	2380      	movs	r3, #128	; 0x80
   11a68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   11a6c:	ea03 11c1 	and.w	r1, r3, r1, lsl #7
   11a70:	4311      	orrs	r1, r2
   11a72:	7001      	strb	r1, [r0, #0]
   11a74:	4770      	bx	lr

00011a76 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
   11a76:	680a      	ldr	r2, [r1, #0]
   11a78:	f8c0 2003 	str.w	r2, [r0, #3]
   11a7c:	8889      	ldrh	r1, [r1, #4]
   11a7e:	f8a0 1007 	strh.w	r1, [r0, #7]
   11a82:	4770      	bx	lr

00011a84 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
   11a84:	7802      	ldrb	r2, [r0, #0]
   11a86:	2340      	movs	r3, #64	; 0x40
   11a88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11a8c:	ea03 1181 	and.w	r1, r3, r1, lsl #6
   11a90:	4311      	orrs	r1, r2
   11a92:	7001      	strb	r1, [r0, #0]
   11a94:	4770      	bx	lr

00011a96 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
   11a96:	b570      	push	{r4, r5, r6, lr}
   11a98:	4614      	mov	r4, r2
   11a9a:	4605      	mov	r5, r0
   11a9c:	2a1f      	cmp	r2, #31
   11a9e:	d903      	bls.n	11aa8 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
   11aa0:	21d4      	movs	r1, #212	; 0xd4
   11aa2:	202a      	movs	r0, #42	; 0x2a
   11aa4:	f7f2 fa4c 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11aa8:	f105 0009 	add.w	r0, r5, #9
   11aac:	f7fe f9a2 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   11ab0:	1da0      	adds	r0, r4, #6
   11ab2:	7068      	strb	r0, [r5, #1]
   11ab4:	bd70      	pop	{r4, r5, r6, pc}

00011ab6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
   11ab6:	b430      	push	{r4, r5}
   11ab8:	8050      	strh	r0, [r2, #2]
   11aba:	f8b1 c008 	ldrh.w	ip, [r1, #8]
   11abe:	f8a2 c004 	strh.w	ip, [r2, #4]
   11ac2:	898b      	ldrh	r3, [r1, #12]
   11ac4:	80d3      	strh	r3, [r2, #6]
   11ac6:	8948      	ldrh	r0, [r1, #10]
   11ac8:	8110      	strh	r0, [r2, #8]
   11aca:	89cc      	ldrh	r4, [r1, #14]
   11acc:	8154      	strh	r4, [r2, #10]
   11ace:	8dcd      	ldrh	r5, [r1, #46]	; 0x2e
   11ad0:	42a5      	cmp	r5, r4
   11ad2:	bf04      	itt	eq
   11ad4:	8d4c      	ldrheq	r4, [r1, #42]	; 0x2a
   11ad6:	4284      	cmpeq	r4, r0
   11ad8:	d106      	bne.n	11ae8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
   11ada:	8e0c      	ldrh	r4, [r1, #48]	; 0x30
   11adc:	429c      	cmp	r4, r3
   11ade:	bf02      	ittt	eq
   11ae0:	8d8b      	ldrheq	r3, [r1, #44]	; 0x2c
   11ae2:	4563      	cmpeq	r3, ip
   11ae4:	2300      	moveq	r3, #0
   11ae6:	d001      	beq.n	11aec <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x36>
   11ae8:	f04f 0301 	mov.w	r3, #1
   11aec:	7313      	strb	r3, [r2, #12]
   11aee:	8548      	strh	r0, [r1, #42]	; 0x2a
   11af0:	8950      	ldrh	r0, [r2, #10]
   11af2:	85c8      	strh	r0, [r1, #46]	; 0x2e
   11af4:	8890      	ldrh	r0, [r2, #4]
   11af6:	8588      	strh	r0, [r1, #44]	; 0x2c
   11af8:	88d0      	ldrh	r0, [r2, #6]
   11afa:	8608      	strh	r0, [r1, #48]	; 0x30
   11afc:	f04f 0001 	mov.w	r0, #1
   11b00:	7010      	strb	r0, [r2, #0]
   11b02:	bc30      	pop	{r4, r5}
   11b04:	4770      	bx	lr

00011b06 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
   11b06:	b570      	push	{r4, r5, r6, lr}
   11b08:	4616      	mov	r6, r2
   11b0a:	460c      	mov	r4, r1
   11b0c:	68c2      	ldr	r2, [r0, #12]
   11b0e:	2596      	movs	r5, #150	; 0x96
   11b10:	f641 514c 	movw	r1, #7500	; 0x1d4c
   11b14:	428a      	cmp	r2, r1
   11b16:	bf3a      	itte	cc
   11b18:	254d      	movcc	r5, #77	; 0x4d
   11b1a:	4629      	movcc	r1, r5
   11b1c:	2196      	movcs	r1, #150	; 0x96
   11b1e:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
   11b22:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
   11b26:	f7f5 fcc3 	bl	74b0 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0xc>
   11b2a:	4428      	add	r0, r5
   11b2c:	4430      	add	r0, r6
   11b2e:	42a0      	cmp	r0, r4
   11b30:	bf94      	ite	ls
   11b32:	1a20      	subls	r0, r4, r0
   11b34:	2000      	movhi	r0, #0
   11b36:	bd70      	pop	{r4, r5, r6, pc}

00011b38 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
   11b38:	b4f0      	push	{r4, r5, r6, r7}
   11b3a:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
   11b3e:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
   11b42:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
   11b44:	8f45      	ldrh	r5, [r0, #58]	; 0x3a
   11b46:	428a      	cmp	r2, r1
   11b48:	bf28      	it	cs
   11b4a:	460a      	movcs	r2, r1
   11b4c:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
   11b50:	f04f 0c00 	mov.w	ip, #0
   11b54:	f011 0f0c 	tst.w	r1, #12
   11b58:	bf18      	it	ne
   11b5a:	f44f 6129 	movne.w	r1, #2704	; 0xa90
   11b5e:	d106      	bne.n	11b6e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
   11b60:	f8b0 304e 	ldrh.w	r3, [r0, #78]	; 0x4e
   11b64:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
   11b68:	428b      	cmp	r3, r1
   11b6a:	bf38      	it	cc
   11b6c:	4619      	movcc	r1, r3
   11b6e:	86c2      	strh	r2, [r0, #54]	; 0x36
   11b70:	8741      	strh	r1, [r0, #58]	; 0x3a
   11b72:	8f84      	ldrh	r4, [r0, #60]	; 0x3c
   11b74:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   11b76:	4294      	cmp	r4, r2
   11b78:	bf38      	it	cc
   11b7a:	4614      	movcc	r4, r2
   11b7c:	428b      	cmp	r3, r1
   11b7e:	bf38      	it	cc
   11b80:	460b      	movcc	r3, r1
   11b82:	8784      	strh	r4, [r0, #60]	; 0x3c
   11b84:	87c3      	strh	r3, [r0, #62]	; 0x3e
   11b86:	42b2      	cmp	r2, r6
   11b88:	bf0a      	itet	eq
   11b8a:	42a9      	cmpeq	r1, r5
   11b8c:	2301      	movne	r3, #1
   11b8e:	2300      	moveq	r3, #0
   11b90:	8e85      	ldrh	r5, [r0, #52]	; 0x34
   11b92:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
   11b96:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
   11b9a:	8f04      	ldrh	r4, [r0, #56]	; 0x38
   11b9c:	428a      	cmp	r2, r1
   11b9e:	bf28      	it	cs
   11ba0:	460a      	movcs	r2, r1
   11ba2:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
   11ba6:	f011 0f0c 	tst.w	r1, #12
   11baa:	bf18      	it	ne
   11bac:	f44f 6129 	movne.w	r1, #2704	; 0xa90
   11bb0:	d106      	bne.n	11bc0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x88>
   11bb2:	f8b0 604a 	ldrh.w	r6, [r0, #74]	; 0x4a
   11bb6:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
   11bba:	428e      	cmp	r6, r1
   11bbc:	bf38      	it	cc
   11bbe:	4631      	movcc	r1, r6
   11bc0:	f890 6060 	ldrb.w	r6, [r0, #96]	; 0x60
   11bc4:	2e02      	cmp	r6, #2
   11bc6:	d00a      	beq.n	11bde <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa6>
   11bc8:	8682      	strh	r2, [r0, #52]	; 0x34
   11bca:	8701      	strh	r1, [r0, #56]	; 0x38
   11bcc:	42aa      	cmp	r2, r5
   11bce:	bf0a      	itet	eq
   11bd0:	42a1      	cmpeq	r1, r4
   11bd2:	2001      	movne	r0, #1
   11bd4:	2000      	moveq	r0, #0
   11bd6:	ea40 0003 	orr.w	r0, r0, r3
   11bda:	bcf0      	pop	{r4, r5, r6, r7}
   11bdc:	4770      	bx	lr
   11bde:	4295      	cmp	r5, r2
   11be0:	bf38      	it	cc
   11be2:	462a      	movcc	r2, r5
   11be4:	428c      	cmp	r4, r1
   11be6:	bf38      	it	cc
   11be8:	4621      	movcc	r1, r4
   11bea:	f880 c060 	strb.w	ip, [r0, #96]	; 0x60
   11bee:	e7eb      	b.n	11bc8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x90>

00011bf0 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
   11bf0:	6840      	ldr	r0, [r0, #4]
   11bf2:	4770      	bx	lr

00011bf4 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
   11bf4:	b570      	push	{r4, r5, r6, lr}
   11bf6:	460d      	mov	r5, r1
   11bf8:	4616      	mov	r6, r2
   11bfa:	68c1      	ldr	r1, [r0, #12]
   11bfc:	f641 524c 	movw	r2, #7500	; 0x1d4c
   11c00:	4604      	mov	r4, r0
   11c02:	4291      	cmp	r1, r2
   11c04:	bf34      	ite	cc
   11c06:	214d      	movcc	r1, #77	; 0x4d
   11c08:	2196      	movcs	r1, #150	; 0x96
   11c0a:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
   11c0e:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
   11c12:	f7f5 fc4d 	bl	74b0 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0xc>
   11c16:	68e3      	ldr	r3, [r4, #12]
   11c18:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   11c1a:	4299      	cmp	r1, r3
   11c1c:	bf38      	it	cc
   11c1e:	460b      	movcc	r3, r1
   11c20:	1b59      	subs	r1, r3, r5
   11c22:	4430      	add	r0, r6
   11c24:	4288      	cmp	r0, r1
   11c26:	bf38      	it	cc
   11c28:	4608      	movcc	r0, r1
   11c2a:	6320      	str	r0, [r4, #48]	; 0x30
   11c2c:	bd70      	pop	{r4, r5, r6, pc}

00011c2e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
   11c2e:	221b      	movs	r2, #27
   11c30:	8402      	strh	r2, [r0, #32]
   11c32:	8382      	strh	r2, [r0, #28]
   11c34:	82c2      	strh	r2, [r0, #22]
   11c36:	8282      	strh	r2, [r0, #20]
   11c38:	8142      	strh	r2, [r0, #10]
   11c3a:	8202      	strh	r2, [r0, #16]
   11c3c:	8102      	strh	r2, [r0, #8]
   11c3e:	8542      	strh	r2, [r0, #42]	; 0x2a
   11c40:	8582      	strh	r2, [r0, #44]	; 0x2c
   11c42:	8482      	strh	r2, [r0, #36]	; 0x24
   11c44:	b159      	cbz	r1, 11c5e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
   11c46:	f44f 6129 	mov.w	r1, #2704	; 0xa90
   11c4a:	8441      	strh	r1, [r0, #34]	; 0x22
   11c4c:	83c1      	strh	r1, [r0, #30]
   11c4e:	8341      	strh	r1, [r0, #26]
   11c50:	8301      	strh	r1, [r0, #24]
   11c52:	81c1      	strh	r1, [r0, #14]
   11c54:	8241      	strh	r1, [r0, #18]
   11c56:	8181      	strh	r1, [r0, #12]
   11c58:	85c1      	strh	r1, [r0, #46]	; 0x2e
   11c5a:	8601      	strh	r1, [r0, #48]	; 0x30
   11c5c:	4770      	bx	lr
   11c5e:	f44f 71a4 	mov.w	r1, #328	; 0x148
   11c62:	8441      	strh	r1, [r0, #34]	; 0x22
   11c64:	83c1      	strh	r1, [r0, #30]
   11c66:	8341      	strh	r1, [r0, #26]
   11c68:	8301      	strh	r1, [r0, #24]
   11c6a:	81c1      	strh	r1, [r0, #14]
   11c6c:	8241      	strh	r1, [r0, #18]
   11c6e:	8181      	strh	r1, [r0, #12]
   11c70:	85c1      	strh	r1, [r0, #46]	; 0x2e
   11c72:	8601      	strh	r1, [r0, #48]	; 0x30
   11c74:	4770      	bx	lr

00011c76 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
   11c76:	6800      	ldr	r0, [r0, #0]
   11c78:	f101 029c 	add.w	r2, r1, #156	; 0x9c
   11c7c:	4290      	cmp	r0, r2
   11c7e:	bf9c      	itt	ls
   11c80:	2000      	movls	r0, #0
   11c82:	4770      	bxls	lr
   11c84:	1a40      	subs	r0, r0, r1
   11c86:	389c      	subs	r0, #156	; 0x9c
   11c88:	0840      	lsrs	r0, r0, #1
   11c8a:	4770      	bx	lr

00011c8c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
   11c8c:	b510      	push	{r4, lr}
   11c8e:	4604      	mov	r4, r0
   11c90:	2108      	movs	r1, #8
   11c92:	4620      	mov	r0, r4
   11c94:	f7f2 f9de 	bl	4054 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   11c98:	6820      	ldr	r0, [r4, #0]
   11c9a:	2800      	cmp	r0, #0
   11c9c:	bf04      	itt	eq
   11c9e:	6860      	ldreq	r0, [r4, #4]
   11ca0:	2800      	cmpeq	r0, #0
   11ca2:	d0f5      	beq.n	11c90 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
   11ca4:	bd10      	pop	{r4, pc}

00011ca6 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
   11ca6:	b510      	push	{r4, lr}
   11ca8:	4604      	mov	r4, r0
   11caa:	7c80      	ldrb	r0, [r0, #18]
   11cac:	2802      	cmp	r0, #2
   11cae:	bf18      	it	ne
   11cb0:	2803      	cmpne	r0, #3
   11cb2:	d109      	bne.n	11cc8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x22>
   11cb4:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
   11cb8:	f104 0164 	add.w	r1, r4, #100	; 0x64
   11cbc:	f7f4 f94e 	bl	5f5c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
   11cc0:	2808      	cmp	r0, #8
   11cc2:	bf1c      	itt	ne
   11cc4:	2001      	movne	r0, #1
   11cc6:	bd10      	popne	{r4, pc}
   11cc8:	7ca0      	ldrb	r0, [r4, #18]
   11cca:	2800      	cmp	r0, #0
   11ccc:	bf1e      	ittt	ne
   11cce:	2802      	cmpne	r0, #2
   11cd0:	7e60      	ldrbne	r0, [r4, #25]
   11cd2:	bd10      	popne	{r4, pc}
   11cd4:	f04f 0000 	mov.w	r0, #0
   11cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11cdc:	f7f3 b8e2 	b.w	4ea4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

00011ce0 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
   11ce0:	b508      	push	{r3, lr}
   11ce2:	f890 107a 	ldrb.w	r1, [r0, #122]	; 0x7a
   11ce6:	f88d 1000 	strb.w	r1, [sp]
   11cea:	f89d 1000 	ldrb.w	r1, [sp]
   11cee:	b959      	cbnz	r1, 11d08 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x28>
   11cf0:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
   11cf4:	f88d 0000 	strb.w	r0, [sp]
   11cf8:	f89d 0000 	ldrb.w	r0, [sp]
   11cfc:	b110      	cbz	r0, 11d04 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x24>
   11cfe:	f7fb ff3d 	bl	db7c <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   11d02:	b108      	cbz	r0, 11d08 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x28>
   11d04:	2000      	movs	r0, #0
   11d06:	bd08      	pop	{r3, pc}
   11d08:	2001      	movs	r0, #1
   11d0a:	bd08      	pop	{r3, pc}

00011d0c <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
   11d0c:	20ff      	movs	r0, #255	; 0xff
   11d0e:	7008      	strb	r0, [r1, #0]
   11d10:	6c08      	ldr	r0, [r1, #64]	; 0x40
   11d12:	f7ff b9b8 	b.w	11086 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

00011d16 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
   11d16:	b510      	push	{r4, lr}
   11d18:	b084      	sub	sp, #16
   11d1a:	4604      	mov	r4, r0
   11d1c:	f44f 7286 	mov.w	r2, #268	; 0x10c
   11d20:	2100      	movs	r1, #0
   11d22:	f7fe f8e1 	bl	fee8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   11d26:	20ff      	movs	r0, #255	; 0xff
   11d28:	7020      	strb	r0, [r4, #0]
   11d2a:	207f      	movs	r0, #127	; 0x7f
   11d2c:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
   11d30:	2013      	movs	r0, #19
   11d32:	8060      	strh	r0, [r4, #2]
   11d34:	f7f2 fe18 	bl	4968 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
   11d38:	4601      	mov	r1, r0
   11d3a:	6420      	str	r0, [r4, #64]	; 0x40
   11d3c:	2200      	movs	r2, #0
   11d3e:	a802      	add	r0, sp, #8
   11d40:	f7ff f908 	bl	10f54 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   11d44:	2200      	movs	r2, #0
   11d46:	2101      	movs	r1, #1
   11d48:	6c20      	ldr	r0, [r4, #64]	; 0x40
   11d4a:	f7ff f97b 	bl	11044 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   11d4e:	2204      	movs	r2, #4
   11d50:	a802      	add	r0, sp, #8
   11d52:	6c21      	ldr	r1, [r4, #64]	; 0x40
   11d54:	f7ff f8fe 	bl	10f54 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   11d58:	2200      	movs	r2, #0
   11d5a:	4611      	mov	r1, r2
   11d5c:	6c20      	ldr	r0, [r4, #64]	; 0x40
   11d5e:	f7ff f971 	bl	11044 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   11d62:	2000      	movs	r0, #0
   11d64:	7420      	strb	r0, [r4, #16]
   11d66:	f104 0024 	add.w	r0, r4, #36	; 0x24
   11d6a:	f000 fada 	bl	12322 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
   11d6e:	4668      	mov	r0, sp
   11d70:	f7f4 fe34 	bl	69dc <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
   11d74:	b130      	cbz	r0, 11d84 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ+0x6e>
   11d76:	4669      	mov	r1, sp
   11d78:	f104 002a 	add.w	r0, r4, #42	; 0x2a
   11d7c:	f7f4 ff14 	bl	6ba8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
   11d80:	b004      	add	sp, #16
   11d82:	bd10      	pop	{r4, pc}
   11d84:	f240 3146 	movw	r1, #838	; 0x346
   11d88:	202d      	movs	r0, #45	; 0x2d
   11d8a:	f7f2 f8d9 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00011d8e <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
   11d8e:	8840      	ldrh	r0, [r0, #2]
   11d90:	f3c0 1100 	ubfx	r1, r0, #4, #1
   11d94:	b131      	cbz	r1, 11da4 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x16>
   11d96:	f3c0 0080 	ubfx	r0, r0, #2, #1
   11d9a:	2800      	cmp	r0, #0
   11d9c:	bf04      	itt	eq
   11d9e:	201f      	moveq	r0, #31
   11da0:	4770      	bxeq	lr
   11da2:	e002      	b.n	11daa <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x1c>
   11da4:	f3c0 0140 	ubfx	r1, r0, #1, #1
   11da8:	b109      	cbz	r1, 11dae <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x20>
   11daa:	2000      	movs	r0, #0
   11dac:	4770      	bx	lr
   11dae:	f010 0f01 	tst.w	r0, #1
   11db2:	bf1c      	itt	ne
   11db4:	20ee      	movne	r0, #238	; 0xee
   11db6:	4770      	bxne	lr
   11db8:	f7f2 bdfc 	b.w	49b4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>

00011dbc <sym_UJWNE3E4RDATXEP7ML237UGTIH42KUYZYFD6XAQ>:
   11dbc:	2101      	movs	r1, #1
   11dbe:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
   11dc2:	4770      	bx	lr

00011dc4 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
   11dc4:	f7f6 bd3a 	b.w	883c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x83c>

00011dc8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
   11dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11dca:	4604      	mov	r4, r0
   11dcc:	f890 00aa 	ldrb.w	r0, [r0, #170]	; 0xaa
   11dd0:	460b      	mov	r3, r1
   11dd2:	f88d 0000 	strb.w	r0, [sp]
   11dd6:	f89d 0000 	ldrb.w	r0, [sp]
   11dda:	2500      	movs	r5, #0
   11ddc:	b178      	cbz	r0, 11dfe <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x36>
   11dde:	705d      	strb	r5, [r3, #1]
   11de0:	201e      	movs	r0, #30
   11de2:	7018      	strb	r0, [r3, #0]
   11de4:	f8d4 00ab 	ldr.w	r0, [r4, #171]	; 0xab
   11de8:	6058      	str	r0, [r3, #4]
   11dea:	f8d4 00af 	ldr.w	r0, [r4, #175]	; 0xaf
   11dee:	6098      	str	r0, [r3, #8]
   11df0:	f894 00b3 	ldrb.w	r0, [r4, #179]	; 0xb3
   11df4:	7318      	strb	r0, [r3, #12]
   11df6:	f884 50aa 	strb.w	r5, [r4, #170]	; 0xaa
   11dfa:	2001      	movs	r0, #1
   11dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11dfe:	f894 00a4 	ldrb.w	r0, [r4, #164]	; 0xa4
   11e02:	f88d 0000 	strb.w	r0, [sp]
   11e06:	f89d 0000 	ldrb.w	r0, [sp]
   11e0a:	b140      	cbz	r0, 11e1e <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x56>
   11e0c:	705d      	strb	r5, [r3, #1]
   11e0e:	2007      	movs	r0, #7
   11e10:	7018      	strb	r0, [r3, #0]
   11e12:	f8d4 00a6 	ldr.w	r0, [r4, #166]	; 0xa6
   11e16:	6048      	str	r0, [r1, #4]
   11e18:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
   11e1c:	e08b      	b.n	11f36 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x16e>
   11e1e:	f894 007a 	ldrb.w	r0, [r4, #122]	; 0x7a
   11e22:	f88d 0000 	strb.w	r0, [sp]
   11e26:	f89d 1000 	ldrb.w	r1, [sp]
   11e2a:	2014      	movs	r0, #20
   11e2c:	2601      	movs	r6, #1
   11e2e:	b361      	cbz	r1, 11e8a <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xc2>
   11e30:	705d      	strb	r5, [r3, #1]
   11e32:	347c      	adds	r4, #124	; 0x7c
   11e34:	f803 0b04 	strb.w	r0, [r3], #4
   11e38:	e8b4 1007 	ldmia.w	r4!, {r0, r1, r2, ip}
   11e3c:	e8a3 1007 	stmia.w	r3!, {r0, r1, r2, ip}
   11e40:	e894 1007 	ldmia.w	r4, {r0, r1, r2, ip}
   11e44:	e8a3 1007 	stmia.w	r3!, {r0, r1, r2, ip}
   11e48:	f803 6c1c 	strb.w	r6, [r3, #-28]
   11e4c:	3b24      	subs	r3, #36	; 0x24
   11e4e:	3c8c      	subs	r4, #140	; 0x8c
   11e50:	f884 507a 	strb.w	r5, [r4, #122]	; 0x7a
   11e54:	7918      	ldrb	r0, [r3, #4]
   11e56:	2800      	cmp	r0, #0
   11e58:	d16d      	bne.n	11f36 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x16e>
   11e5a:	88d8      	ldrh	r0, [r3, #6]
   11e5c:	f8a4 00a6 	strh.w	r0, [r4, #166]	; 0xa6
   11e60:	6a20      	ldr	r0, [r4, #32]
   11e62:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
   11e66:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
   11e6a:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
   11e6e:	f7fb fe85 	bl	db7c <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   11e72:	2800      	cmp	r0, #0
   11e74:	d05f      	beq.n	11f36 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x16e>
   11e76:	6a20      	ldr	r0, [r4, #32]
   11e78:	8800      	ldrh	r0, [r0, #0]
   11e7a:	f7f2 fcb1 	bl	47e0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   11e7e:	f7fe fe58 	bl	10b32 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
   11e82:	6a20      	ldr	r0, [r4, #32]
   11e84:	f880 6078 	strb.w	r6, [r0, #120]	; 0x78
   11e88:	e055      	b.n	11f36 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x16e>
   11e8a:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
   11e8e:	f88d 1000 	strb.w	r1, [sp]
   11e92:	f89d 1000 	ldrb.w	r1, [sp]
   11e96:	b3c9      	cbz	r1, 11f0c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x144>
   11e98:	f894 107a 	ldrb.w	r1, [r4, #122]	; 0x7a
   11e9c:	f88d 1000 	strb.w	r1, [sp]
   11ea0:	f89d 1000 	ldrb.w	r1, [sp]
   11ea4:	705d      	strb	r5, [r3, #1]
   11ea6:	b309      	cbz	r1, 11eec <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x124>
   11ea8:	347c      	adds	r4, #124	; 0x7c
   11eaa:	f803 0b04 	strb.w	r0, [r3], #4
   11eae:	e8b4 1007 	ldmia.w	r4!, {r0, r1, r2, ip}
   11eb2:	e8a3 1007 	stmia.w	r3!, {r0, r1, r2, ip}
   11eb6:	e894 1007 	ldmia.w	r4, {r0, r1, r2, ip}
   11eba:	e8a3 1007 	stmia.w	r3!, {r0, r1, r2, ip}
   11ebe:	f803 6c1c 	strb.w	r6, [r3, #-28]
   11ec2:	3b24      	subs	r3, #36	; 0x24
   11ec4:	3c8c      	subs	r4, #140	; 0x8c
   11ec6:	f884 507a 	strb.w	r5, [r4, #122]	; 0x7a
   11eca:	7918      	ldrb	r0, [r3, #4]
   11ecc:	bb98      	cbnz	r0, 11f36 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x16e>
   11ece:	88d8      	ldrh	r0, [r3, #6]
   11ed0:	f8a4 00a6 	strh.w	r0, [r4, #166]	; 0xa6
   11ed4:	6a20      	ldr	r0, [r4, #32]
   11ed6:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
   11eda:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
   11ede:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
   11ee2:	f7fb fe4b 	bl	db7c <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   11ee6:	2800      	cmp	r0, #0
   11ee8:	d1c5      	bne.n	11e76 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xae>
   11eea:	e024      	b.n	11f36 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x16e>
   11eec:	2017      	movs	r0, #23
   11eee:	7018      	strb	r0, [r3, #0]
   11ef0:	f8d4 009e 	ldr.w	r0, [r4, #158]	; 0x9e
   11ef4:	6058      	str	r0, [r3, #4]
   11ef6:	f8b4 00a2 	ldrh.w	r0, [r4, #162]	; 0xa2
   11efa:	8118      	strh	r0, [r3, #8]
   11efc:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
   11f00:	7918      	ldrb	r0, [r3, #4]
   11f02:	b9c0      	cbnz	r0, 11f36 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x16e>
   11f04:	f7fb fe3a 	bl	db7c <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   11f08:	b9a8      	cbnz	r0, 11f36 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x16e>
   11f0a:	e7b4      	b.n	11e76 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xae>
   11f0c:	e7ff      	b.n	11f0e <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x146>
   11f0e:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
   11f12:	f88d 0000 	strb.w	r0, [sp]
   11f16:	f89d 0000 	ldrb.w	r0, [sp]
   11f1a:	2800      	cmp	r0, #0
   11f1c:	bf08      	it	eq
   11f1e:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
   11f20:	705d      	strb	r5, [r3, #1]
   11f22:	2023      	movs	r0, #35	; 0x23
   11f24:	7018      	strb	r0, [r3, #0]
   11f26:	2222      	movs	r2, #34	; 0x22
   11f28:	f104 01b5 	add.w	r1, r4, #181	; 0xb5
   11f2c:	1d18      	adds	r0, r3, #4
   11f2e:	f7fd ff61 	bl	fdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   11f32:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
   11f36:	2001      	movs	r0, #1
   11f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011f3a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
   11f3a:	6880      	ldr	r0, [r0, #8]
   11f3c:	4770      	bx	lr

00011f3e <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
   11f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11f40:	8842      	ldrh	r2, [r0, #2]
   11f42:	f3c2 1300 	ubfx	r3, r2, #4, #1
   11f46:	2b00      	cmp	r3, #0
   11f48:	bf04      	itt	eq
   11f4a:	f3c2 02c0 	ubfxeq	r2, r2, #3, #1
   11f4e:	2a00      	cmpeq	r2, #0
   11f50:	d12b      	bne.n	11faa <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY+0x6c>
   11f52:	8843      	ldrh	r3, [r0, #2]
   11f54:	f100 0224 	add.w	r2, r0, #36	; 0x24
   11f58:	f890 c004 	ldrb.w	ip, [r0, #4]
   11f5c:	6886      	ldr	r6, [r0, #8]
   11f5e:	7940      	ldrb	r0, [r0, #5]
   11f60:	f36c 0407 	bfi	r4, ip, #0, #8
   11f64:	f363 050f 	bfi	r5, r3, #0, #16
   11f68:	f360 240f 	bfi	r4, r0, #8, #8
   11f6c:	f013 0f18 	tst.w	r3, #24
   11f70:	d11b      	bne.n	11faa <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY+0x6c>
   11f72:	460f      	mov	r7, r1
   11f74:	b1da      	cbz	r2, 11fae <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY+0x70>
   11f76:	4610      	mov	r0, r2
   11f78:	f000 f95b 	bl	12232 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   11f7c:	b2e1      	uxtb	r1, r4
   11f7e:	f3c4 2407 	ubfx	r4, r4, #8, #8
   11f82:	2904      	cmp	r1, #4
   11f84:	bf08      	it	eq
   11f86:	2108      	moveq	r1, #8
   11f88:	2c04      	cmp	r4, #4
   11f8a:	bf08      	it	eq
   11f8c:	2408      	moveq	r4, #8
   11f8e:	f000 f8fb 	bl	12188 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x16>
   11f92:	b2aa      	uxth	r2, r5
   11f94:	9200      	str	r2, [sp, #0]
   11f96:	4601      	mov	r1, r0
   11f98:	2300      	movs	r3, #0
   11f9a:	4622      	mov	r2, r4
   11f9c:	4638      	mov	r0, r7
   11f9e:	f7f6 fa65 	bl	846c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46c>
   11fa2:	4286      	cmp	r6, r0
   11fa4:	bf3c      	itt	cc
   11fa6:	2000      	movcc	r0, #0
   11fa8:	bdf8      	popcc	{r3, r4, r5, r6, r7, pc}
   11faa:	2001      	movs	r0, #1
   11fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11fae:	f240 4103 	movw	r1, #1027	; 0x403
   11fb2:	202d      	movs	r0, #45	; 0x2d
   11fb4:	f7f1 ffc4 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00011fb8 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
   11fb8:	b538      	push	{r3, r4, r5, lr}
   11fba:	4604      	mov	r4, r0
   11fbc:	3024      	adds	r0, #36	; 0x24
   11fbe:	f000 f938 	bl	12232 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   11fc2:	8861      	ldrh	r1, [r4, #2]
   11fc4:	f3c1 1200 	ubfx	r2, r1, #4, #1
   11fc8:	b122      	cbz	r2, 11fd4 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x1c>
   11fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11fce:	2228      	movs	r2, #40	; 0x28
   11fd0:	f7f6 bd50 	b.w	8a74 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
   11fd4:	f3c1 0140 	ubfx	r1, r1, #1, #1
   11fd8:	2900      	cmp	r1, #0
   11fda:	bf14      	ite	ne
   11fdc:	f8b4 5050 	ldrhne.w	r5, [r4, #80]	; 0x50
   11fe0:	f8b4 5048 	ldrheq.w	r5, [r4, #72]	; 0x48
   11fe4:	7921      	ldrb	r1, [r4, #4]
   11fe6:	f000 f8cf 	bl	12188 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x16>
   11fea:	8862      	ldrh	r2, [r4, #2]
   11fec:	9200      	str	r2, [sp, #0]
   11fee:	4601      	mov	r1, r0
   11ff0:	7962      	ldrb	r2, [r4, #5]
   11ff2:	2301      	movs	r3, #1
   11ff4:	4628      	mov	r0, r5
   11ff6:	f7f6 fa39 	bl	846c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46c>
   11ffa:	bd38      	pop	{r3, r4, r5, pc}

00011ffc <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
   11ffc:	2200      	movs	r2, #0
   11ffe:	63c2      	str	r2, [r0, #60]	; 0x3c
   12000:	8843      	ldrh	r3, [r0, #2]
   12002:	2b1d      	cmp	r3, #29
   12004:	bf0c      	ite	eq
   12006:	7342      	strbeq	r2, [r0, #13]
   12008:	7341      	strbne	r1, [r0, #13]
   1200a:	4770      	bx	lr

0001200c <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
   1200c:	b510      	push	{r4, lr}
   1200e:	8841      	ldrh	r1, [r0, #2]
   12010:	f3c1 1200 	ubfx	r2, r1, #4, #1
   12014:	b92a      	cbnz	r2, 12022 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x16>
   12016:	f3c1 0140 	ubfx	r1, r1, #1, #1
   1201a:	2900      	cmp	r1, #0
   1201c:	bf18      	it	ne
   1201e:	2401      	movne	r4, #1
   12020:	d100      	bne.n	12024 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x18>
   12022:	2400      	movs	r4, #0
   12024:	6c00      	ldr	r0, [r0, #64]	; 0x40
   12026:	f7fe fffb 	bl	11020 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
   1202a:	2800      	cmp	r0, #0
   1202c:	bf18      	it	ne
   1202e:	2001      	movne	r0, #1
   12030:	ea24 0000 	bic.w	r0, r4, r0
   12034:	f080 0001 	eor.w	r0, r0, #1
   12038:	bd10      	pop	{r4, pc}

0001203a <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA>:
   1203a:	b510      	push	{r4, lr}
   1203c:	8840      	ldrh	r0, [r0, #2]
   1203e:	f3c0 1100 	ubfx	r1, r0, #4, #1
   12042:	b119      	cbz	r1, 1204c <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x12>
   12044:	f3c0 0080 	ubfx	r0, r0, #2, #1
   12048:	b148      	cbz	r0, 1205e <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x24>
   1204a:	e00a      	b.n	12062 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x28>
   1204c:	f3c0 0140 	ubfx	r1, r0, #1, #1
   12050:	b939      	cbnz	r1, 12062 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x28>
   12052:	f010 0f01 	tst.w	r0, #1
   12056:	d102      	bne.n	1205e <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x24>
   12058:	f7f2 fcac 	bl	49b4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   1205c:	b108      	cbz	r0, 12062 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x28>
   1205e:	2001      	movs	r0, #1
   12060:	bd10      	pop	{r4, pc}
   12062:	2000      	movs	r0, #0
   12064:	bd10      	pop	{r4, pc}

00012066 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
   12066:	7880      	ldrb	r0, [r0, #2]
   12068:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1206c:	4770      	bx	lr

0001206e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
   1206e:	7880      	ldrb	r0, [r0, #2]
   12070:	f000 0001 	and.w	r0, r0, #1
   12074:	4770      	bx	lr

00012076 <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ>:
   12076:	8840      	ldrh	r0, [r0, #2]
   12078:	2809      	cmp	r0, #9
   1207a:	bf0c      	ite	eq
   1207c:	2001      	moveq	r0, #1
   1207e:	2000      	movne	r0, #0
   12080:	4770      	bx	lr

00012082 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
   12082:	7880      	ldrb	r0, [r0, #2]
   12084:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   12088:	4770      	bx	lr

0001208a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
   1208a:	7880      	ldrb	r0, [r0, #2]
   1208c:	f3c0 1000 	ubfx	r0, r0, #4, #1
   12090:	4770      	bx	lr

00012092 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
   12092:	7880      	ldrb	r0, [r0, #2]
   12094:	f3c0 0040 	ubfx	r0, r0, #1, #1
   12098:	4770      	bx	lr

0001209a <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
   1209a:	f990 0010 	ldrsb.w	r0, [r0, #16]
   1209e:	4770      	bx	lr

000120a0 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
   120a0:	7800      	ldrb	r0, [r0, #0]
   120a2:	28ff      	cmp	r0, #255	; 0xff
   120a4:	bf14      	ite	ne
   120a6:	2001      	movne	r0, #1
   120a8:	2000      	moveq	r0, #0
   120aa:	4770      	bx	lr

000120ac <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
   120ac:	680a      	ldr	r2, [r1, #0]
   120ae:	f8c0 2013 	str.w	r2, [r0, #19]
   120b2:	8889      	ldrh	r1, [r1, #4]
   120b4:	f8a0 1017 	strh.w	r1, [r0, #23]
   120b8:	2101      	movs	r1, #1
   120ba:	7641      	strb	r1, [r0, #25]
   120bc:	4770      	bx	lr

000120be <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
   120be:	7b00      	ldrb	r0, [r0, #12]
   120c0:	4770      	bx	lr

000120c2 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
   120c2:	7940      	ldrb	r0, [r0, #5]
   120c4:	4770      	bx	lr

000120c6 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
   120c6:	6201      	str	r1, [r0, #32]
   120c8:	4770      	bx	lr

000120ca <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
   120ca:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
   120ce:	4770      	bx	lr

000120d0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
   120d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   120d4:	4604      	mov	r4, r0
   120d6:	7880      	ldrb	r0, [r0, #2]
   120d8:	2501      	movs	r5, #1
   120da:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   120de:	b138      	cbz	r0, 120f0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x20>
   120e0:	233c      	movs	r3, #60	; 0x3c
   120e2:	22ff      	movs	r2, #255	; 0xff
   120e4:	4620      	mov	r0, r4
   120e6:	6a21      	ldr	r1, [r4, #32]
   120e8:	f7f6 fc18 	bl	891c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x91c>
   120ec:	f884 507a 	strb.w	r5, [r4, #122]	; 0x7a
   120f0:	78a0      	ldrb	r0, [r4, #2]
   120f2:	f04f 0600 	mov.w	r6, #0
   120f6:	f010 0f01 	tst.w	r0, #1
   120fa:	d01b      	beq.n	12134 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x64>
   120fc:	6a20      	ldr	r0, [r4, #32]
   120fe:	273c      	movs	r7, #60	; 0x3c
   12100:	f8b0 8000 	ldrh.w	r8, [r0]
   12104:	f7f5 f91a 	bl	733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   12108:	f7fb fd38 	bl	db7c <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   1210c:	b9d0      	cbnz	r0, 12144 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x74>
   1210e:	7821      	ldrb	r1, [r4, #0]
   12110:	f884 109f 	strb.w	r1, [r4, #159]	; 0x9f
   12114:	f8a4 80a0 	strh.w	r8, [r4, #160]	; 0xa0
   12118:	f884 709e 	strb.w	r7, [r4, #158]	; 0x9e
   1211c:	7b60      	ldrb	r0, [r4, #13]
   1211e:	2800      	cmp	r0, #0
   12120:	bf1a      	itte	ne
   12122:	f894 003c 	ldrbne.w	r0, [r4, #60]	; 0x3c
   12126:	f884 00a2 	strbne.w	r0, [r4, #162]	; 0xa2
   1212a:	f884 60a2 	strbeq.w	r6, [r4, #162]	; 0xa2
   1212e:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
   12132:	e007      	b.n	12144 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x74>
   12134:	f64f 78ff 	movw	r8, #65535	; 0xffff
   12138:	273c      	movs	r7, #60	; 0x3c
   1213a:	f7f5 f8ff 	bl	733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1213e:	f7fb fd1d 	bl	db7c <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   12142:	b118      	cbz	r0, 1214c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x7c>
   12144:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
   12148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1214c:	7821      	ldrb	r1, [r4, #0]
   1214e:	f884 109f 	strb.w	r1, [r4, #159]	; 0x9f
   12152:	f8a4 80a0 	strh.w	r8, [r4, #160]	; 0xa0
   12156:	f884 709e 	strb.w	r7, [r4, #158]	; 0x9e
   1215a:	7b60      	ldrb	r0, [r4, #13]
   1215c:	2800      	cmp	r0, #0
   1215e:	bf1a      	itte	ne
   12160:	f894 003c 	ldrbne.w	r0, [r4, #60]	; 0x3c
   12164:	f884 00a2 	strbne.w	r0, [r4, #162]	; 0xa2
   12168:	f884 60a2 	strbeq.w	r6, [r4, #162]	; 0xa2
   1216c:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
   12170:	e7e8      	b.n	12144 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x74>

00012172 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
   12172:	7c40      	ldrb	r0, [r0, #17]
   12174:	2800      	cmp	r0, #0
   12176:	bf18      	it	ne
   12178:	2001      	movne	r0, #1
   1217a:	4770      	bx	lr
   1217c:	2101      	movs	r1, #1
   1217e:	f7f5 bca5 	b.w	7acc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1c>
   12182:	2101      	movs	r1, #1
   12184:	f7f5 bca2 	b.w	7acc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1c>
   12188:	2902      	cmp	r1, #2
   1218a:	bf08      	it	eq
   1218c:	f44f 727a 	moveq.w	r2, #1000	; 0x3e8
   12190:	d005      	beq.n	1219e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
   12192:	2901      	cmp	r1, #1
   12194:	bf0c      	ite	eq
   12196:	f640 0234 	movweq	r2, #2100	; 0x834
   1219a:	f640 2228 	movwne	r2, #2600	; 0xa28
   1219e:	f24a 13df 	movw	r3, #41439	; 0xa1df
   121a2:	441a      	add	r2, r3
   121a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   121a8:	fbb2 fcf3 	udiv	ip, r2, r3
   121ac:	2908      	cmp	r1, #8
   121ae:	bf08      	it	eq
   121b0:	2340      	moveq	r3, #64	; 0x40
   121b2:	d00a      	beq.n	121ca <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x58>
   121b4:	2904      	cmp	r1, #4
   121b6:	bf08      	it	eq
   121b8:	2310      	moveq	r3, #16
   121ba:	d006      	beq.n	121ca <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x58>
   121bc:	2902      	cmp	r1, #2
   121be:	bf07      	ittee	eq
   121c0:	2304      	moveq	r3, #4
   121c2:	2212      	moveq	r2, #18
   121c4:	2308      	movne	r3, #8
   121c6:	2219      	movne	r2, #25
   121c8:	e000      	b.n	121cc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x5a>
   121ca:	2214      	movs	r2, #20
   121cc:	fb13 f202 	smulbb	r2, r3, r2
   121d0:	2908      	cmp	r1, #8
   121d2:	bf08      	it	eq
   121d4:	2340      	moveq	r3, #64	; 0x40
   121d6:	d012      	beq.n	121fe <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8c>
   121d8:	2904      	cmp	r1, #4
   121da:	bf08      	it	eq
   121dc:	232e      	moveq	r3, #46	; 0x2e
   121de:	d00e      	beq.n	121fe <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8c>
   121e0:	2300      	movs	r3, #0
   121e2:	2902      	cmp	r1, #2
   121e4:	bf0c      	ite	eq
   121e6:	2118      	moveq	r1, #24
   121e8:	2128      	movne	r1, #40	; 0x28
   121ea:	4419      	add	r1, r3
   121ec:	4411      	add	r1, r2
   121ee:	fb01 c100 	mla	r1, r1, r0, ip
   121f2:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   121f6:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   121fa:	4408      	add	r0, r1
   121fc:	4770      	bx	lr
   121fe:	f44f 71a8 	mov.w	r1, #336	; 0x150
   12202:	e7f2      	b.n	121ea <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x78>

00012204 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
   12204:	b510      	push	{r4, lr}
   12206:	7001      	strb	r1, [r0, #0]
   12208:	7042      	strb	r2, [r0, #1]
   1220a:	7880      	ldrb	r0, [r0, #2]
   1220c:	f3c0 0380 	ubfx	r3, r0, #2, #1
   12210:	f3c0 0c40 	ubfx	ip, r0, #1, #1
   12214:	4463      	add	r3, ip
   12216:	f000 0001 	and.w	r0, r0, #1
   1221a:	4418      	add	r0, r3
   1221c:	fb10 f001 	smulbb	r0, r0, r1
   12220:	fb10 f002 	smulbb	r0, r0, r2
   12224:	28ff      	cmp	r0, #255	; 0xff
   12226:	bf38      	it	cc
   12228:	bd10      	popcc	{r4, pc}
   1222a:	215c      	movs	r1, #92	; 0x5c
   1222c:	202e      	movs	r0, #46	; 0x2e
   1222e:	f7f1 fe87 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00012232 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
   12232:	7881      	ldrb	r1, [r0, #2]
   12234:	f3c1 0280 	ubfx	r2, r1, #2, #1
   12238:	f3c1 0340 	ubfx	r3, r1, #1, #1
   1223c:	441a      	add	r2, r3
   1223e:	f001 0101 	and.w	r1, r1, #1
   12242:	4411      	add	r1, r2
   12244:	7842      	ldrb	r2, [r0, #1]
   12246:	7800      	ldrb	r0, [r0, #0]
   12248:	fb12 f000 	smulbb	r0, r2, r0
   1224c:	4348      	muls	r0, r1
   1224e:	b2c0      	uxtb	r0, r0
   12250:	4770      	bx	lr

00012252 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
   12252:	7882      	ldrb	r2, [r0, #2]
   12254:	2100      	movs	r1, #0
   12256:	f012 0f01 	tst.w	r2, #1
   1225a:	d005      	beq.n	12268 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x16>
   1225c:	78c3      	ldrb	r3, [r0, #3]
   1225e:	f013 0f01 	tst.w	r3, #1
   12262:	bf08      	it	eq
   12264:	2101      	moveq	r1, #1
   12266:	d010      	beq.n	1228a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   12268:	f012 0f02 	tst.w	r2, #2
   1226c:	d005      	beq.n	1227a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x28>
   1226e:	78c3      	ldrb	r3, [r0, #3]
   12270:	f013 0f02 	tst.w	r3, #2
   12274:	bf08      	it	eq
   12276:	2102      	moveq	r1, #2
   12278:	d007      	beq.n	1228a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   1227a:	f012 0f04 	tst.w	r2, #4
   1227e:	d004      	beq.n	1228a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   12280:	78c3      	ldrb	r3, [r0, #3]
   12282:	f013 0f04 	tst.w	r3, #4
   12286:	bf08      	it	eq
   12288:	2104      	moveq	r1, #4
   1228a:	7943      	ldrb	r3, [r0, #5]
   1228c:	1c5b      	adds	r3, r3, #1
   1228e:	b2db      	uxtb	r3, r3
   12290:	7143      	strb	r3, [r0, #5]
   12292:	f890 c001 	ldrb.w	ip, [r0, #1]
   12296:	4563      	cmp	r3, ip
   12298:	d10d      	bne.n	122b6 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x64>
   1229a:	2300      	movs	r3, #0
   1229c:	7143      	strb	r3, [r0, #5]
   1229e:	f890 c003 	ldrb.w	ip, [r0, #3]
   122a2:	ea4c 0c01 	orr.w	ip, ip, r1
   122a6:	f880 c003 	strb.w	ip, [r0, #3]
   122aa:	4594      	cmp	ip, r2
   122ac:	d103      	bne.n	122b6 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x64>
   122ae:	70c3      	strb	r3, [r0, #3]
   122b0:	7902      	ldrb	r2, [r0, #4]
   122b2:	1c52      	adds	r2, r2, #1
   122b4:	7102      	strb	r2, [r0, #4]
   122b6:	2901      	cmp	r1, #1
   122b8:	bf04      	itt	eq
   122ba:	2025      	moveq	r0, #37	; 0x25
   122bc:	4770      	bxeq	lr
   122be:	2902      	cmp	r1, #2
   122c0:	bf04      	itt	eq
   122c2:	2026      	moveq	r0, #38	; 0x26
   122c4:	4770      	bxeq	lr
   122c6:	2904      	cmp	r1, #4
   122c8:	bf04      	itt	eq
   122ca:	2027      	moveq	r0, #39	; 0x27
   122cc:	4770      	bxeq	lr
   122ce:	b510      	push	{r4, lr}
   122d0:	2139      	movs	r1, #57	; 0x39
   122d2:	202e      	movs	r0, #46	; 0x2e
   122d4:	f7f1 fe34 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000122d8 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
   122d8:	7081      	strb	r1, [r0, #2]
   122da:	4770      	bx	lr

000122dc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
   122dc:	b410      	push	{r4}
   122de:	7881      	ldrb	r1, [r0, #2]
   122e0:	f3c1 0280 	ubfx	r2, r1, #2, #1
   122e4:	f3c1 0340 	ubfx	r3, r1, #1, #1
   122e8:	441a      	add	r2, r3
   122ea:	f001 0101 	and.w	r1, r1, #1
   122ee:	7843      	ldrb	r3, [r0, #1]
   122f0:	4411      	add	r1, r2
   122f2:	fb13 f201 	smulbb	r2, r3, r1
   122f6:	78c1      	ldrb	r1, [r0, #3]
   122f8:	f3c1 0c80 	ubfx	ip, r1, #2, #1
   122fc:	f3c1 0440 	ubfx	r4, r1, #1, #1
   12300:	44a4      	add	ip, r4
   12302:	f001 0101 	and.w	r1, r1, #1
   12306:	4461      	add	r1, ip
   12308:	f890 c005 	ldrb.w	ip, [r0, #5]
   1230c:	fb11 c103 	smlabb	r1, r1, r3, ip
   12310:	7803      	ldrb	r3, [r0, #0]
   12312:	7900      	ldrb	r0, [r0, #4]
   12314:	1a18      	subs	r0, r3, r0
   12316:	fb10 f002 	smulbb	r0, r0, r2
   1231a:	1a40      	subs	r0, r0, r1
   1231c:	bc10      	pop	{r4}
   1231e:	b2c0      	uxtb	r0, r0
   12320:	4770      	bx	lr

00012322 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
   12322:	b510      	push	{r4, lr}
   12324:	4604      	mov	r4, r0
   12326:	f001 fe11 	bl	13f4c <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
   1232a:	2001      	movs	r0, #1
   1232c:	7060      	strb	r0, [r4, #1]
   1232e:	7020      	strb	r0, [r4, #0]
   12330:	bd10      	pop	{r4, pc}

00012332 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
   12332:	2100      	movs	r1, #0
   12334:	70c1      	strb	r1, [r0, #3]
   12336:	7141      	strb	r1, [r0, #5]
   12338:	7101      	strb	r1, [r0, #4]
   1233a:	4770      	bx	lr

0001233c <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
   1233c:	f240 315a 	movw	r1, #858	; 0x35a
   12340:	4348      	muls	r0, r1
   12342:	4770      	bx	lr

00012344 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
   12344:	f240 20ef 	movw	r0, #751	; 0x2ef
   12348:	4770      	bx	lr
   1234a:	020e      	.short	0x020e
   1234c:	0630041c 	.word	0x0630041c
   12350:	035a0c60 	.word	0x035a0c60
   12354:	05c506b4 	.word	0x05c506b4
   12358:	12250bf5 	.word	0x12250bf5
   1235c:	03b101a3 	.word	0x03b101a3
   12360:	02ef05bf 	.word	0x02ef05bf
   12364:	09a30649 	.word	0x09a30649

00012368 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
   12368:	b510      	push	{r4, lr}
   1236a:	f890 1108 	ldrb.w	r1, [r0, #264]	; 0x108
   1236e:	2900      	cmp	r1, #0
   12370:	bf1c      	itt	ne
   12372:	2000      	movne	r0, #0
   12374:	bd10      	popne	{r4, pc}
   12376:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1237a:	b959      	cbnz	r1, 12394 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x2c>
   1237c:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
   12380:	2900      	cmp	r1, #0
   12382:	bf1c      	itt	ne
   12384:	e9d0 1239 	ldrdne	r1, r2, [r0, #228]	; 0xe4
   12388:	428a      	cmpne	r2, r1
   1238a:	d903      	bls.n	12394 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x2c>
   1238c:	f7ff fea0 	bl	120d0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
   12390:	2000      	movs	r0, #0
   12392:	bd10      	pop	{r4, pc}
   12394:	2001      	movs	r0, #1
   12396:	bd10      	pop	{r4, pc}

00012398 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
   12398:	b510      	push	{r4, lr}
   1239a:	4604      	mov	r4, r0
   1239c:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
   123a0:	2800      	cmp	r0, #0
   123a2:	bf08      	it	eq
   123a4:	bd10      	popeq	{r4, pc}
   123a6:	2001      	movs	r0, #1
   123a8:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   123ac:	4601      	mov	r1, r0
   123ae:	4620      	mov	r0, r4
   123b0:	f7ff fe8b 	bl	120ca <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
   123b4:	f894 00ec 	ldrb.w	r0, [r4, #236]	; 0xec
   123b8:	b188      	cbz	r0, 123de <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x46>
   123ba:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   123be:	f7ef fd81 	bl	1ec4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   123c2:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   123c6:	f7ef febb 	bl	2140 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
   123ca:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   123ce:	f7ef fe95 	bl	20fc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   123d2:	2800      	cmp	r0, #0
   123d4:	bf1c      	itt	ne
   123d6:	2000      	movne	r0, #0
   123d8:	f884 00ec 	strbne.w	r0, [r4, #236]	; 0xec
   123dc:	d001      	beq.n	123e2 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x4a>
   123de:	2000      	movs	r0, #0
   123e0:	bd10      	pop	{r4, pc}
   123e2:	f240 2103 	movw	r1, #515	; 0x203
   123e6:	2030      	movs	r0, #48	; 0x30
   123e8:	f7f1 fdaa 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000123ec <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
   123ec:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   123f0:	4770      	bx	lr

000123f2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
   123f2:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
   123f6:	4770      	bx	lr
   123f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   123fc:	0004      	movs	r4, r0
   123fe:	d00a      	beq.n	12416 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x24>
   12400:	2600      	movs	r6, #0
   12402:	2909      	cmp	r1, #9
   12404:	f080 80e2 	bcs.w	125cc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1da>
   12408:	e8df f001 	tbb	[pc, r1]
   1240c:	44441909 	.word	0x44441909
   12410:	c0d7e040 	.word	0xc0d7e040
   12414:	00dc      	.short	0x00dc
   12416:	21cd      	movs	r1, #205	; 0xcd
   12418:	2030      	movs	r0, #48	; 0x30
   1241a:	f7f1 fd91 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1241e:	4620      	mov	r0, r4
   12420:	f7f5 fb24 	bl	7a6c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
   12424:	b120      	cbz	r0, 12430 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x3e>
   12426:	f240 2175 	movw	r1, #629	; 0x275
   1242a:	2030      	movs	r0, #48	; 0x30
   1242c:	f7f1 fd88 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12430:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   12434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12438:	38f8      	subs	r0, #248	; 0xf8
   1243a:	f7f0 b897 	b.w	256c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   1243e:	4620      	mov	r0, r4
   12440:	f7ff fe1f 	bl	12082 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   12444:	b9b0      	cbnz	r0, 12474 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x82>
   12446:	4620      	mov	r0, r4
   12448:	f7ff fdb6 	bl	11fb8 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   1244c:	f200 1509 	addw	r5, r0, #265	; 0x109
   12450:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   12454:	42a8      	cmp	r0, r5
   12456:	d20b      	bcs.n	12470 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x7e>
   12458:	1a28      	subs	r0, r5, r0
   1245a:	2104      	movs	r1, #4
   1245c:	f7ee ff6c 	bl	1338 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   12460:	b130      	cbz	r0, 12470 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x7e>
   12462:	4620      	mov	r0, r4
   12464:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
   12468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1246c:	f7ff bcaa 	b.w	11dc4 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
   12470:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
   12474:	4620      	mov	r0, r4
   12476:	f7f5 fb1b 	bl	7ab0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
   1247a:	2800      	cmp	r0, #0
   1247c:	bf08      	it	eq
   1247e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   12482:	f44f 712a 	mov.w	r1, #680	; 0x2a8
   12486:	2030      	movs	r0, #48	; 0x30
   12488:	f7f1 fd5a 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1248c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12490:	f7fc bfde 	b.w	f450 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   12494:	2701      	movs	r7, #1
   12496:	4620      	mov	r0, r4
   12498:	f7ff fdf7 	bl	1208a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1249c:	2800      	cmp	r0, #0
   1249e:	bf08      	it	eq
   124a0:	256b      	moveq	r5, #107	; 0x6b
   124a2:	d017      	beq.n	124d4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xe2>
   124a4:	4620      	mov	r0, r4
   124a6:	f7ff fde2 	bl	1206e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   124aa:	b930      	cbnz	r0, 124ba <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xc8>
   124ac:	4620      	mov	r0, r4
   124ae:	f7ff fdf0 	bl	12092 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   124b2:	2800      	cmp	r0, #0
   124b4:	bf08      	it	eq
   124b6:	2542      	moveq	r5, #66	; 0x42
   124b8:	d000      	beq.n	124bc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xca>
   124ba:	2549      	movs	r5, #73	; 0x49
   124bc:	f001 fc6a 	bl	13d94 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
   124c0:	b910      	cbnz	r0, 124c8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xd6>
   124c2:	f001 fc5d 	bl	13d80 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
   124c6:	b100      	cbz	r0, 124ca <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xd8>
   124c8:	1ded      	adds	r5, r5, #7
   124ca:	f7f1 fb0d 	bl	3ae8 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
   124ce:	2800      	cmp	r0, #0
   124d0:	bf18      	it	ne
   124d2:	3518      	addne	r5, #24
   124d4:	f8a4 50f8 	strh.w	r5, [r4, #248]	; 0xf8
   124d8:	f884 60f0 	strb.w	r6, [r4, #240]	; 0xf0
   124dc:	f04f 0801 	mov.w	r8, #1
   124e0:	f884 80fb 	strb.w	r8, [r4, #251]	; 0xfb
   124e4:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   124e8:	b168      	cbz	r0, 12506 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x114>
   124ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   124ee:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
   124f2:	f7ef f83d 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   124f6:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
   124fa:	2100      	movs	r1, #0
   124fc:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   12500:	f7ff f828 	bl	11554 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   12504:	e010      	b.n	12528 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x136>
   12506:	4620      	mov	r0, r4
   12508:	f7ff fd17 	bl	11f3a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
   1250c:	4605      	mov	r5, r0
   1250e:	4629      	mov	r1, r5
   12510:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
   12514:	f7ef f82c 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   12518:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
   1251c:	4629      	mov	r1, r5
   1251e:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   12522:	f7ff f817 	bl	11554 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   12526:	1c47      	adds	r7, r0, #1
   12528:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
   1252c:	1c41      	adds	r1, r0, #1
   1252e:	290a      	cmp	r1, #10
   12530:	bf3c      	itt	cc
   12532:	4438      	addcc	r0, r7
   12534:	f8a4 0100 	strhcc.w	r0, [r4, #256]	; 0x100
   12538:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   1253c:	b130      	cbz	r0, 1254c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x15a>
   1253e:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
   12542:	1c40      	adds	r0, r0, #1
   12544:	280a      	cmp	r0, #10
   12546:	bf28      	it	cs
   12548:	2002      	movcs	r0, #2
   1254a:	d200      	bcs.n	1254e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x15c>
   1254c:	2003      	movs	r0, #3
   1254e:	f884 00fa 	strb.w	r0, [r4, #250]	; 0xfa
   12552:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
   12556:	b9c8      	cbnz	r0, 1258c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x19a>
   12558:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
   1255c:	b1f0      	cbz	r0, 1259c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1aa>
   1255e:	4620      	mov	r0, r4
   12560:	f7ff fceb 	bl	11f3a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
   12564:	4605      	mov	r5, r0
   12566:	4620      	mov	r0, r4
   12568:	f7ff fd26 	bl	11fb8 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   1256c:	f200 1009 	addw	r0, r0, #265	; 0x109
   12570:	1941      	adds	r1, r0, r5
   12572:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
   12576:	4288      	cmp	r0, r1
   12578:	bf24      	itt	cs
   1257a:	1b41      	subcs	r1, r0, r5
   1257c:	f8c4 1104 	strcs.w	r1, [r4, #260]	; 0x104
   12580:	d20c      	bcs.n	1259c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1aa>
   12582:	4620      	mov	r0, r4
   12584:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
   12588:	f7ff fda2 	bl	120d0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
   1258c:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   12590:	f7ef fdb4 	bl	20fc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   12594:	f884 60ec 	strb.w	r6, [r4, #236]	; 0xec
   12598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1259c:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   125a0:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
   125a4:	f7ef f95e 	bl	1864 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   125a8:	2800      	cmp	r0, #0
   125aa:	bf18      	it	ne
   125ac:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
   125b0:	f240 61a2 	movw	r1, #1698	; 0x6a2
   125b4:	2030      	movs	r0, #48	; 0x30
   125b6:	f7f1 fcc3 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   125ba:	4620      	mov	r0, r4
   125bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   125c0:	f7ff bc00 	b.w	11dc4 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
   125c4:	21ed      	movs	r1, #237	; 0xed
   125c6:	2030      	movs	r0, #48	; 0x30
   125c8:	f7f1 fcba 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   125cc:	21f1      	movs	r1, #241	; 0xf1
   125ce:	2030      	movs	r0, #48	; 0x30
   125d0:	f7f1 fcb6 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000125d4 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
   125d4:	f7f2 b8a4 	b.w	4720 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

000125d8 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
   125d8:	f7f7 be2e 	b.w	a238 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe04>
   125dc:	f240 21f2 	movw	r1, #754	; 0x2f2
   125e0:	2032      	movs	r0, #50	; 0x32
   125e2:	f7f1 fcad 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   125e6:	f7f7 be27 	b.w	a238 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe04>

000125ea <sym_5ATVDULIG6DGCAQSRDHXRO37ITSFNT7QVD7OMTQ>:
   125ea:	b500      	push	{lr}
   125ec:	b083      	sub	sp, #12
   125ee:	f7f2 f9f3 	bl	49d8 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
   125f2:	aa01      	add	r2, sp, #4
   125f4:	4669      	mov	r1, sp
   125f6:	f7fe fa37 	bl	10a68 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
   125fa:	9800      	ldr	r0, [sp, #0]
   125fc:	f7fe f9c3 	bl	10986 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
   12600:	7840      	ldrb	r0, [r0, #1]
   12602:	28ff      	cmp	r0, #255	; 0xff
   12604:	bf14      	ite	ne
   12606:	2001      	movne	r0, #1
   12608:	2000      	moveq	r0, #0
   1260a:	b003      	add	sp, #12
   1260c:	bd00      	pop	{pc}

0001260e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
   1260e:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12612:	b083      	sub	sp, #12
   12614:	461d      	mov	r5, r3
   12616:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   1261a:	460e      	mov	r6, r1
   1261c:	4607      	mov	r7, r0
   1261e:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   12622:	f7f2 f9d9 	bl	49d8 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
   12626:	4604      	mov	r4, r0
   12628:	f7fe f9af 	bl	1098a <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
   1262c:	2801      	cmp	r0, #1
   1262e:	bf04      	itt	eq
   12630:	b007      	addeq	sp, #28
   12632:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12636:	4620      	mov	r0, r4
   12638:	aa01      	add	r2, sp, #4
   1263a:	4669      	mov	r1, sp
   1263c:	f7fe fa14 	bl	10a68 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
   12640:	9800      	ldr	r0, [sp, #0]
   12642:	f7fe f9a0 	bl	10986 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
   12646:	4604      	mov	r4, r0
   12648:	221c      	movs	r2, #28
   1264a:	2100      	movs	r1, #0
   1264c:	f7fd fc4c 	bl	fee8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   12650:	f04f 0a01 	mov.w	sl, #1
   12654:	f884 a000 	strb.w	sl, [r4]
   12658:	b156      	cbz	r6, 12670 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x62>
   1265a:	2e01      	cmp	r6, #1
   1265c:	d00d      	beq.n	1267a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x6c>
   1265e:	2e02      	cmp	r6, #2
   12660:	d010      	beq.n	12684 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x76>
   12662:	2e06      	cmp	r6, #6
   12664:	d013      	beq.n	1268e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x80>
   12666:	f240 217d 	movw	r1, #637	; 0x27d
   1266a:	2033      	movs	r0, #51	; 0x33
   1266c:	f7f1 fc68 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12670:	7aa0      	ldrb	r0, [r4, #10]
   12672:	f040 0013 	orr.w	r0, r0, #19
   12676:	72a0      	strb	r0, [r4, #10]
   12678:	e00d      	b.n	12696 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x88>
   1267a:	7aa0      	ldrb	r0, [r4, #10]
   1267c:	f040 0015 	orr.w	r0, r0, #21
   12680:	72a0      	strb	r0, [r4, #10]
   12682:	e008      	b.n	12696 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x88>
   12684:	7aa0      	ldrb	r0, [r4, #10]
   12686:	f040 0010 	orr.w	r0, r0, #16
   1268a:	72a0      	strb	r0, [r4, #10]
   1268c:	e003      	b.n	12696 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x88>
   1268e:	7aa0      	ldrb	r0, [r4, #10]
   12690:	f040 0012 	orr.w	r0, r0, #18
   12694:	72a0      	strb	r0, [r4, #10]
   12696:	1ca2      	adds	r2, r4, #2
   12698:	1c66      	adds	r6, r4, #1
   1269a:	4648      	mov	r0, r9
   1269c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   126a0:	d00c      	beq.n	126bc <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xae>
   126a2:	4631      	mov	r1, r6
   126a4:	f7f3 fc2e 	bl	5f04 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
   126a8:	b120      	cbz	r0, 126b4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa6>
   126aa:	7830      	ldrb	r0, [r6, #0]
   126ac:	f040 0002 	orr.w	r0, r0, #2
   126b0:	7030      	strb	r0, [r6, #0]
   126b2:	e00a      	b.n	126ca <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xbc>
   126b4:	2150      	movs	r1, #80	; 0x50
   126b6:	2033      	movs	r0, #51	; 0x33
   126b8:	f7f1 fc42 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   126bc:	7c78      	ldrb	r0, [r7, #17]
   126be:	7030      	strb	r0, [r6, #0]
   126c0:	6878      	ldr	r0, [r7, #4]
   126c2:	6801      	ldr	r1, [r0, #0]
   126c4:	6011      	str	r1, [r2, #0]
   126c6:	8880      	ldrh	r0, [r0, #4]
   126c8:	8090      	strh	r0, [r2, #4]
   126ca:	f884 b009 	strb.w	fp, [r4, #9]
   126ce:	f884 a00c 	strb.w	sl, [r4, #12]
   126d2:	2000      	movs	r0, #0
   126d4:	7360      	strb	r0, [r4, #13]
   126d6:	20ff      	movs	r0, #255	; 0xff
   126d8:	73a0      	strb	r0, [r4, #14]
   126da:	7aa1      	ldrb	r1, [r4, #10]
   126dc:	f011 0f04 	tst.w	r1, #4
   126e0:	bf08      	it	eq
   126e2:	74e0      	strbeq	r0, [r4, #19]
   126e4:	d012      	beq.n	1270c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xfe>
   126e6:	f104 0014 	add.w	r0, r4, #20
   126ea:	1e41      	subs	r1, r0, #1
   126ec:	2d02      	cmp	r5, #2
   126ee:	bf18      	it	ne
   126f0:	2d03      	cmpne	r5, #3
   126f2:	d005      	beq.n	12700 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xf2>
   126f4:	68ba      	ldr	r2, [r7, #8]
   126f6:	6813      	ldr	r3, [r2, #0]
   126f8:	6003      	str	r3, [r0, #0]
   126fa:	8892      	ldrh	r2, [r2, #4]
   126fc:	8082      	strh	r2, [r0, #4]
   126fe:	e004      	b.n	1270a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xfc>
   12700:	9a05      	ldr	r2, [sp, #20]
   12702:	6813      	ldr	r3, [r2, #0]
   12704:	6003      	str	r3, [r0, #0]
   12706:	8892      	ldrh	r2, [r2, #4]
   12708:	8082      	strh	r2, [r0, #4]
   1270a:	700d      	strb	r5, [r1, #0]
   1270c:	f04f 007f 	mov.w	r0, #127	; 0x7f
   12710:	76a0      	strb	r0, [r4, #26]
   12712:	f884 801b 	strb.w	r8, [r4, #27]
   12716:	f7f2 f95f 	bl	49d8 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
   1271a:	4604      	mov	r4, r0
   1271c:	f7f2 f956 	bl	49cc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
   12720:	4601      	mov	r1, r0
   12722:	2201      	movs	r2, #1
   12724:	4620      	mov	r0, r4
   12726:	f7fe f8d6 	bl	108d6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
   1272a:	b128      	cbz	r0, 12738 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x12a>
   1272c:	b007      	add	sp, #28
   1272e:	2005      	movs	r0, #5
   12730:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12734:	f7f8 ba12 	b.w	ab5c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
   12738:	f240 219d 	movw	r1, #669	; 0x29d
   1273c:	2033      	movs	r0, #51	; 0x33
   1273e:	f7f1 fbff 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00012742 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
   12742:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12746:	b083      	sub	sp, #12
   12748:	461f      	mov	r7, r3
   1274a:	4690      	mov	r8, r2
   1274c:	460d      	mov	r5, r1
   1274e:	4606      	mov	r6, r0
   12750:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   12754:	f7f2 f940 	bl	49d8 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
   12758:	4604      	mov	r4, r0
   1275a:	f7fe f916 	bl	1098a <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
   1275e:	2801      	cmp	r0, #1
   12760:	bf04      	itt	eq
   12762:	b003      	addeq	sp, #12
   12764:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12768:	4620      	mov	r0, r4
   1276a:	aa01      	add	r2, sp, #4
   1276c:	4669      	mov	r1, sp
   1276e:	f7fe f97b 	bl	10a68 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
   12772:	9800      	ldr	r0, [sp, #0]
   12774:	f7fe f907 	bl	10986 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
   12778:	4604      	mov	r4, r0
   1277a:	221c      	movs	r2, #28
   1277c:	2100      	movs	r1, #0
   1277e:	f7fd fbb3 	bl	fee8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   12782:	f04f 0901 	mov.w	r9, #1
   12786:	1ca2      	adds	r2, r4, #2
   12788:	f884 9000 	strb.w	r9, [r4]
   1278c:	f104 0b01 	add.w	fp, r4, #1
   12790:	2dff      	cmp	r5, #255	; 0xff
   12792:	d00f      	beq.n	127b4 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x72>
   12794:	4659      	mov	r1, fp
   12796:	4628      	mov	r0, r5
   12798:	f7f3 fbb4 	bl	5f04 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
   1279c:	b130      	cbz	r0, 127ac <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x6a>
   1279e:	f89b 0000 	ldrb.w	r0, [fp]
   127a2:	f040 0002 	orr.w	r0, r0, #2
   127a6:	f88b 0000 	strb.w	r0, [fp]
   127aa:	e00b      	b.n	127c4 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x82>
   127ac:	2150      	movs	r1, #80	; 0x50
   127ae:	2033      	movs	r0, #51	; 0x33
   127b0:	f7f1 fbc6 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   127b4:	7c70      	ldrb	r0, [r6, #17]
   127b6:	f88b 0000 	strb.w	r0, [fp]
   127ba:	6870      	ldr	r0, [r6, #4]
   127bc:	6801      	ldr	r1, [r0, #0]
   127be:	6011      	str	r1, [r2, #0]
   127c0:	8880      	ldrh	r0, [r0, #4]
   127c2:	8090      	strh	r0, [r2, #4]
   127c4:	f884 a009 	strb.w	sl, [r4, #9]
   127c8:	7aa0      	ldrb	r0, [r4, #10]
   127ca:	f368 0000 	bfi	r0, r8, #0, #1
   127ce:	f040 001a 	orr.w	r0, r0, #26
   127d2:	72a0      	strb	r0, [r4, #10]
   127d4:	f884 900c 	strb.w	r9, [r4, #12]
   127d8:	2000      	movs	r0, #0
   127da:	7360      	strb	r0, [r4, #13]
   127dc:	20ff      	movs	r0, #255	; 0xff
   127de:	73a0      	strb	r0, [r4, #14]
   127e0:	74e0      	strb	r0, [r4, #19]
   127e2:	207f      	movs	r0, #127	; 0x7f
   127e4:	76a0      	strb	r0, [r4, #26]
   127e6:	76e7      	strb	r7, [r4, #27]
   127e8:	f7f2 f8f6 	bl	49d8 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
   127ec:	4604      	mov	r4, r0
   127ee:	f7f2 f8ed 	bl	49cc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
   127f2:	4601      	mov	r1, r0
   127f4:	2201      	movs	r2, #1
   127f6:	4620      	mov	r0, r4
   127f8:	f7fe f86d 	bl	108d6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
   127fc:	b128      	cbz	r0, 1280a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc8>
   127fe:	b003      	add	sp, #12
   12800:	2005      	movs	r0, #5
   12802:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12806:	f7f8 b9a9 	b.w	ab5c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
   1280a:	f240 21c9 	movw	r1, #713	; 0x2c9
   1280e:	2033      	movs	r0, #51	; 0x33
   12810:	f7f1 fb96 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00012814 <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY>:
   12814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12818:	4606      	mov	r6, r0
   1281a:	78c0      	ldrb	r0, [r0, #3]
   1281c:	2405      	movs	r4, #5
   1281e:	460d      	mov	r5, r1
   12820:	f010 0f3f 	tst.w	r0, #63	; 0x3f
   12824:	f04f 0800 	mov.w	r8, #0
   12828:	bf1c      	itt	ne
   1282a:	4630      	movne	r0, r6
   1282c:	f116 0704 	addsne.w	r7, r6, #4
   12830:	d062      	beq.n	128f8 <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0xe4>
   12832:	f7ff f82c 	bl	1188e <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>
   12836:	7468      	strb	r0, [r5, #17]
   12838:	4630      	mov	r0, r6
   1283a:	f7ff f81e 	bl	1187a <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>
   1283e:	74a8      	strb	r0, [r5, #18]
   12840:	7838      	ldrb	r0, [r7, #0]
   12842:	7068      	strb	r0, [r5, #1]
   12844:	78f0      	ldrb	r0, [r6, #3]
   12846:	0980      	lsrs	r0, r0, #6
   12848:	7028      	strb	r0, [r5, #0]
   1284a:	7838      	ldrb	r0, [r7, #0]
   1284c:	f010 0f01 	tst.w	r0, #1
   12850:	bf08      	it	eq
   12852:	f8c5 8004 	streq.w	r8, [r5, #4]
   12856:	d002      	beq.n	1285e <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0x4a>
   12858:	1d70      	adds	r0, r6, #5
   1285a:	240b      	movs	r4, #11
   1285c:	6068      	str	r0, [r5, #4]
   1285e:	7838      	ldrb	r0, [r7, #0]
   12860:	f010 0f02 	tst.w	r0, #2
   12864:	bf08      	it	eq
   12866:	f8c5 8008 	streq.w	r8, [r5, #8]
   1286a:	d002      	beq.n	12872 <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0x5e>
   1286c:	1930      	adds	r0, r6, r4
   1286e:	1da4      	adds	r4, r4, #6
   12870:	60a8      	str	r0, [r5, #8]
   12872:	7838      	ldrb	r0, [r7, #0]
   12874:	f010 0f04 	tst.w	r0, #4
   12878:	bf18      	it	ne
   1287a:	1c64      	addne	r4, r4, #1
   1287c:	f010 0f08 	tst.w	r0, #8
   12880:	bf08      	it	eq
   12882:	f8c5 8014 	streq.w	r8, [r5, #20]
   12886:	d002      	beq.n	1288e <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0x7a>
   12888:	1930      	adds	r0, r6, r4
   1288a:	1ca4      	adds	r4, r4, #2
   1288c:	6168      	str	r0, [r5, #20]
   1288e:	7838      	ldrb	r0, [r7, #0]
   12890:	f010 0f10 	tst.w	r0, #16
   12894:	bf08      	it	eq
   12896:	f8c5 8018 	streq.w	r8, [r5, #24]
   1289a:	d002      	beq.n	128a2 <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0x8e>
   1289c:	1930      	adds	r0, r6, r4
   1289e:	1ce4      	adds	r4, r4, #3
   128a0:	61a8      	str	r0, [r5, #24]
   128a2:	7838      	ldrb	r0, [r7, #0]
   128a4:	f010 0f20 	tst.w	r0, #32
   128a8:	bf08      	it	eq
   128aa:	f8c5 801c 	streq.w	r8, [r5, #28]
   128ae:	d004      	beq.n	128ba <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0xa6>
   128b0:	1930      	adds	r0, r6, r4
   128b2:	61e8      	str	r0, [r5, #28]
   128b4:	f104 0012 	add.w	r0, r4, #18
   128b8:	b2c4      	uxtb	r4, r0
   128ba:	7838      	ldrb	r0, [r7, #0]
   128bc:	f010 0f40 	tst.w	r0, #64	; 0x40
   128c0:	bf08      	it	eq
   128c2:	f8c5 8020 	streq.w	r8, [r5, #32]
   128c6:	d003      	beq.n	128d0 <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0xbc>
   128c8:	1930      	adds	r0, r6, r4
   128ca:	6228      	str	r0, [r5, #32]
   128cc:	1c60      	adds	r0, r4, #1
   128ce:	b2c4      	uxtb	r4, r0
   128d0:	4630      	mov	r0, r6
   128d2:	f7fe ff7e 	bl	117d2 <sym_D66UNDVZ3GOIW7NLNL4N37KLOXWCRBXVM75X56A>
   128d6:	1b00      	subs	r0, r0, r4
   128d8:	1d00      	adds	r0, r0, #4
   128da:	4420      	add	r0, r4
   128dc:	b2c4      	uxtb	r4, r0
   128de:	4630      	mov	r0, r6
   128e0:	f7fe ff4c 	bl	1177c <sym_FITQAUCWEWZALLHJ4Y4UNQWIKT43CPDMCVGNNFY>
   128e4:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   128e8:	7428      	strb	r0, [r5, #16]
   128ea:	bf1a      	itte	ne
   128ec:	1930      	addne	r0, r6, r4
   128ee:	60e8      	strne	r0, [r5, #12]
   128f0:	f8c5 800c 	streq.w	r8, [r5, #12]
   128f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   128f8:	f8c5 8000 	str.w	r8, [r5]
   128fc:	f8c5 8004 	str.w	r8, [r5, #4]
   12900:	f8c5 8008 	str.w	r8, [r5, #8]
   12904:	f8c5 800c 	str.w	r8, [r5, #12]
   12908:	f8c5 8010 	str.w	r8, [r5, #16]
   1290c:	f8c5 8014 	str.w	r8, [r5, #20]
   12910:	f8c5 8018 	str.w	r8, [r5, #24]
   12914:	f8c5 801c 	str.w	r8, [r5, #28]
   12918:	f8c1 8020 	str.w	r8, [r1, #32]
   1291c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012920 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
   12920:	7802      	ldrb	r2, [r0, #0]
   12922:	f002 020f 	and.w	r2, r2, #15
   12926:	2a07      	cmp	r2, #7
   12928:	d001      	beq.n	1292e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xe>
   1292a:	f7f7 bf75 	b.w	a818 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
   1292e:	f7ff bf71 	b.w	12814 <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY>

00012932 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
   12932:	f7f1 bef5 	b.w	4720 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

00012936 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
   12936:	b570      	push	{r4, r5, r6, lr}
   12938:	4604      	mov	r4, r0
   1293a:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
   1293e:	f894 1089 	ldrb.w	r1, [r4, #137]	; 0x89
   12942:	2900      	cmp	r1, #0
   12944:	bf08      	it	eq
   12946:	f1c0 0502 	rsbeq	r5, r0, #2
   1294a:	d003      	beq.n	12954 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x1e>
   1294c:	f8b4 10b0 	ldrh.w	r1, [r4, #176]	; 0xb0
   12950:	1a08      	subs	r0, r1, r0
   12952:	1f05      	subs	r5, r0, #4
   12954:	f894 00ac 	ldrb.w	r0, [r4, #172]	; 0xac
   12958:	b140      	cbz	r0, 1296c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x36>
   1295a:	f894 2085 	ldrb.w	r2, [r4, #133]	; 0x85
   1295e:	2300      	movs	r3, #0
   12960:	2109      	movs	r1, #9
   12962:	f104 0078 	add.w	r0, r4, #120	; 0x78
   12966:	f7fe fc9e 	bl	112a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1296a:	b190      	cbz	r0, 12992 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x5c>
   1296c:	f894 008b 	ldrb.w	r0, [r4, #139]	; 0x8b
   12970:	b958      	cbnz	r0, 1298a <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x54>
   12972:	f894 2085 	ldrb.w	r2, [r4, #133]	; 0x85
   12976:	2300      	movs	r3, #0
   12978:	2106      	movs	r1, #6
   1297a:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1297e:	f7fe fc92 	bl	112a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   12982:	2800      	cmp	r0, #0
   12984:	bf08      	it	eq
   12986:	4628      	moveq	r0, r5
   12988:	d003      	beq.n	12992 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x5c>
   1298a:	e9d4 1028 	ldrd	r1, r0, [r4, #160]	; 0xa0
   1298e:	1a40      	subs	r0, r0, r1
   12990:	1f00      	subs	r0, r0, #4
   12992:	42a8      	cmp	r0, r5
   12994:	bfc8      	it	gt
   12996:	4628      	movgt	r0, r5
   12998:	2800      	cmp	r0, #0
   1299a:	bfd4      	ite	le
   1299c:	2000      	movle	r0, #0
   1299e:	b280      	uxthgt	r0, r0
   129a0:	bd70      	pop	{r4, r5, r6, pc}

000129a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
   129a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   129a6:	4604      	mov	r4, r0
   129a8:	1e48      	subs	r0, r1, #1
   129aa:	b285      	uxth	r5, r0
   129ac:	bf38      	it	cc
   129ae:	e8bd 83f8 	ldmiacc.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   129b2:	f104 088e 	add.w	r8, r4, #142	; 0x8e
   129b6:	2600      	movs	r6, #0
   129b8:	2701      	movs	r7, #1
   129ba:	f8b4 0126 	ldrh.w	r0, [r4, #294]	; 0x126
   129be:	1c40      	adds	r0, r0, #1
   129c0:	f8a4 0126 	strh.w	r0, [r4, #294]	; 0x126
   129c4:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
   129c8:	1c40      	adds	r0, r0, #1
   129ca:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
   129ce:	f894 008b 	ldrb.w	r0, [r4, #139]	; 0x8b
   129d2:	b940      	cbnz	r0, 129e6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x44>
   129d4:	f894 2085 	ldrb.w	r2, [r4, #133]	; 0x85
   129d8:	2300      	movs	r3, #0
   129da:	2106      	movs	r1, #6
   129dc:	f104 0078 	add.w	r0, r4, #120	; 0x78
   129e0:	f7fe fc61 	bl	112a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   129e4:	b1c0      	cbz	r0, 12a18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x76>
   129e6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   129ea:	1c40      	adds	r0, r0, #1
   129ec:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
   129f0:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   129f4:	4281      	cmp	r1, r0
   129f6:	bf2c      	ite	cs
   129f8:	1a0a      	subcs	r2, r1, r0
   129fa:	2200      	movcc	r2, #0
   129fc:	8aa3      	ldrh	r3, [r4, #20]
   129fe:	1d5b      	adds	r3, r3, #5
   12a00:	4293      	cmp	r3, r2
   12a02:	bf28      	it	cs
   12a04:	f884 70ac 	strbcs.w	r7, [r4, #172]	; 0xac
   12a08:	4288      	cmp	r0, r1
   12a0a:	d305      	bcc.n	12a18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x76>
   12a0c:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
   12a10:	f884 7192 	strb.w	r7, [r4, #402]	; 0x192
   12a14:	f7f4 fc92 	bl	733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   12a18:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
   12a1c:	b120      	cbz	r0, 12a28 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x86>
   12a1e:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
   12a22:	1c40      	adds	r0, r0, #1
   12a24:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
   12a28:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
   12a2c:	b120      	cbz	r0, 12a38 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x96>
   12a2e:	f8b4 00ba 	ldrh.w	r0, [r4, #186]	; 0xba
   12a32:	1c40      	adds	r0, r0, #1
   12a34:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
   12a38:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
   12a3c:	f88d 0000 	strb.w	r0, [sp]
   12a40:	f89d 0000 	ldrb.w	r0, [sp]
   12a44:	b940      	cbnz	r0, 12a58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb6>
   12a46:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
   12a4a:	2300      	movs	r3, #0
   12a4c:	2101      	movs	r1, #1
   12a4e:	f104 0078 	add.w	r0, r4, #120	; 0x78
   12a52:	f7fe fc28 	bl	112a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   12a56:	b120      	cbz	r0, 12a62 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc0>
   12a58:	f8b4 00b2 	ldrh.w	r0, [r4, #178]	; 0xb2
   12a5c:	1c40      	adds	r0, r0, #1
   12a5e:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
   12a62:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
   12a66:	280c      	cmp	r0, #12
   12a68:	d002      	beq.n	12a70 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xce>
   12a6a:	280d      	cmp	r0, #13
   12a6c:	d024      	beq.n	12ab8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x116>
   12a6e:	e04d      	b.n	12b0c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16a>
   12a70:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
   12a74:	1c41      	adds	r1, r0, #1
   12a76:	f8b4 0134 	ldrh.w	r0, [r4, #308]	; 0x134
   12a7a:	4281      	cmp	r1, r0
   12a7c:	d146      	bne.n	12b0c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16a>
   12a7e:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   12a82:	1c41      	adds	r1, r0, #1
   12a84:	4640      	mov	r0, r8
   12a86:	f001 fa5c 	bl	13f42 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
   12a8a:	2103      	movs	r1, #3
   12a8c:	4620      	mov	r0, r4
   12a8e:	f7f3 fe5b 	bl	6748 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
   12a92:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   12a96:	7800      	ldrb	r0, [r0, #0]
   12a98:	b148      	cbz	r0, 12aae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10c>
   12a9a:	2101      	movs	r1, #1
   12a9c:	20fe      	movs	r0, #254	; 0xfe
   12a9e:	f7fa fc2d 	bl	d2fc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xd74>
   12aa2:	4620      	mov	r0, r4
   12aa4:	f884 6085 	strb.w	r6, [r4, #133]	; 0x85
   12aa8:	f880 70c8 	strb.w	r7, [r0, #200]	; 0xc8
   12aac:	e02e      	b.n	12b0c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16a>
   12aae:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
   12ab2:	2036      	movs	r0, #54	; 0x36
   12ab4:	f7f1 fa44 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12ab8:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
   12abc:	1c41      	adds	r1, r0, #1
   12abe:	f8b4 014a 	ldrh.w	r0, [r4, #330]	; 0x14a
   12ac2:	4281      	cmp	r1, r0
   12ac4:	d122      	bne.n	12b0c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16a>
   12ac6:	8821      	ldrh	r1, [r4, #0]
   12ac8:	f8a4 11ce 	strh.w	r1, [r4, #462]	; 0x1ce
   12acc:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
   12ad0:	f7fe fbc2 	bl	11258 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
   12ad4:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
   12ad8:	f8b4 1158 	ldrh.w	r1, [r4, #344]	; 0x158
   12adc:	f8a4 11d2 	strh.w	r1, [r4, #466]	; 0x1d2
   12ae0:	f8b4 115a 	ldrh.w	r1, [r4, #346]	; 0x15a
   12ae4:	f8a4 11d4 	strh.w	r1, [r4, #468]	; 0x1d4
   12ae8:	4620      	mov	r0, r4
   12aea:	f884 61cc 	strb.w	r6, [r4, #460]	; 0x1cc
   12aee:	f880 71ca 	strb.w	r7, [r0, #458]	; 0x1ca
   12af2:	f880 6148 	strb.w	r6, [r0, #328]	; 0x148
   12af6:	2102      	movs	r1, #2
   12af8:	f7f3 fe26 	bl	6748 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
   12afc:	f7f4 fc1e 	bl	733c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   12b00:	2103      	movs	r1, #3
   12b02:	4620      	mov	r0, r4
   12b04:	f7f7 fefa 	bl	a8fc <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
   12b08:	f884 6085 	strb.w	r6, [r4, #133]	; 0x85
   12b0c:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
   12b10:	1c40      	adds	r0, r0, #1
   12b12:	1e69      	subs	r1, r5, #1
   12b14:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
   12b18:	b28d      	uxth	r5, r1
   12b1a:	f4bf af4e 	bcs.w	129ba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x18>
   12b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00012b22 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
   12b22:	b510      	push	{r4, lr}
   12b24:	460c      	mov	r4, r1
   12b26:	4601      	mov	r1, r0
   12b28:	4610      	mov	r0, r2
   12b2a:	f7ee fd53 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   12b2e:	2800      	cmp	r0, #0
   12b30:	bfa2      	ittt	ge
   12b32:	fb90 f1f4 	sdivge	r1, r0, r4
   12b36:	fb01 0014 	mlsge	r0, r1, r4, r0
   12b3a:	bd10      	popge	{r4, pc}
   12b3c:	1a21      	subs	r1, r4, r0
   12b3e:	1e49      	subs	r1, r1, #1
   12b40:	fbb1 f1f4 	udiv	r1, r1, r4
   12b44:	fb01 0004 	mla	r0, r1, r4, r0
   12b48:	bd10      	pop	{r4, pc}
   12b4a:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   12b4e:	f001 0107 	and.w	r1, r1, #7
   12b52:	7800      	ldrb	r0, [r0, #0]
   12b54:	2201      	movs	r2, #1
   12b56:	408a      	lsls	r2, r1
   12b58:	4010      	ands	r0, r2
   12b5a:	40c8      	lsrs	r0, r1
   12b5c:	4770      	bx	lr
   12b5e:	b118      	cbz	r0, 12b68 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
   12b60:	2802      	cmp	r0, #2
   12b62:	d001      	beq.n	12b68 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
   12b64:	2001      	movs	r0, #1
   12b66:	4770      	bx	lr
   12b68:	2000      	movs	r0, #0
   12b6a:	4770      	bx	lr

00012b6c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
   12b6c:	b510      	push	{r4, lr}
   12b6e:	4604      	mov	r4, r0
   12b70:	7800      	ldrb	r0, [r0, #0]
   12b72:	b118      	cbz	r0, 12b7c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   12b74:	2801      	cmp	r0, #1
   12b76:	d001      	beq.n	12b7c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   12b78:	2012      	movs	r0, #18
   12b7a:	bd10      	pop	{r4, pc}
   12b7c:	f000 ff1f 	bl	139be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ea>
   12b80:	b120      	cbz	r0, 12b8c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   12b82:	f7f3 f999 	bl	5eb8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   12b86:	b108      	cbz	r0, 12b8c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   12b88:	200c      	movs	r0, #12
   12b8a:	bd10      	pop	{r4, pc}
   12b8c:	7820      	ldrb	r0, [r4, #0]
   12b8e:	f7ff ffe6 	bl	12b5e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
   12b92:	1de2      	adds	r2, r4, #7
   12b94:	f104 0317 	add.w	r3, r4, #23
   12b98:	1c61      	adds	r1, r4, #1
   12b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12b9e:	f7f3 b9fb 	b.w	5f98 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

00012ba2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
   12ba2:	b510      	push	{r4, lr}
   12ba4:	4604      	mov	r4, r0
   12ba6:	f001 f81a 	bl	13bde <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x70a>
   12baa:	b108      	cbz	r0, 12bb0 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
   12bac:	200c      	movs	r0, #12
   12bae:	bd10      	pop	{r4, pc}
   12bb0:	7820      	ldrb	r0, [r4, #0]
   12bb2:	b128      	cbz	r0, 12bc0 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
   12bb4:	2801      	cmp	r0, #1
   12bb6:	d003      	beq.n	12bc0 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
   12bb8:	28ff      	cmp	r0, #255	; 0xff
   12bba:	d00b      	beq.n	12bd4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x32>
   12bbc:	2012      	movs	r0, #18
   12bbe:	bd10      	pop	{r4, pc}
   12bc0:	f7ff ffcd 	bl	12b5e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
   12bc4:	1c61      	adds	r1, r4, #1
   12bc6:	f7f3 fb7f 	bl	62c8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
   12bca:	b108      	cbz	r0, 12bd0 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2e>
   12bcc:	2000      	movs	r0, #0
   12bce:	bd10      	pop	{r4, pc}
   12bd0:	2007      	movs	r0, #7
   12bd2:	bd10      	pop	{r4, pc}
   12bd4:	2001      	movs	r0, #1
   12bd6:	f7f3 fbb9 	bl	634c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
   12bda:	e7f7      	b.n	12bcc <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>

00012bdc <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
   12bdc:	b510      	push	{r4, lr}
   12bde:	f000 feee 	bl	139be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ea>
   12be2:	b120      	cbz	r0, 12bee <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   12be4:	f7f3 f968 	bl	5eb8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   12be8:	b108      	cbz	r0, 12bee <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   12bea:	200c      	movs	r0, #12
   12bec:	bd10      	pop	{r4, pc}
   12bee:	f7f3 fa39 	bl	6064 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
   12bf2:	2000      	movs	r0, #0
   12bf4:	bd10      	pop	{r4, pc}

00012bf6 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
   12bf6:	b510      	push	{r4, lr}
   12bf8:	f000 fff1 	bl	13bde <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x70a>
   12bfc:	b108      	cbz	r0, 12c02 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
   12bfe:	200c      	movs	r0, #12
   12c00:	bd10      	pop	{r4, pc}
   12c02:	f7f3 fba9 	bl	6358 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
   12c06:	2000      	movs	r0, #0
   12c08:	bd10      	pop	{r4, pc}

00012c0a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
   12c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12c0c:	4606      	mov	r6, r0
   12c0e:	f000 fc61 	bl	134d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
   12c12:	2800      	cmp	r0, #0
   12c14:	d112      	bne.n	12c3c <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x32>
   12c16:	8830      	ldrh	r0, [r6, #0]
   12c18:	2100      	movs	r1, #0
   12c1a:	f7fe f8ca 	bl	10db2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   12c1e:	0004      	movs	r4, r0
   12c20:	d00d      	beq.n	12c3e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
   12c22:	f000 fea1 	bl	13968 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x494>
   12c26:	b150      	cbz	r0, 12c3e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
   12c28:	f894 0148 	ldrb.w	r0, [r4, #328]	; 0x148
   12c2c:	f88d 0000 	strb.w	r0, [sp]
   12c30:	9800      	ldr	r0, [sp, #0]
   12c32:	9000      	str	r0, [sp, #0]
   12c34:	f89d 0000 	ldrb.w	r0, [sp]
   12c38:	b118      	cbz	r0, 12c42 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
   12c3a:	203a      	movs	r0, #58	; 0x3a
   12c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12c3e:	2002      	movs	r0, #2
   12c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12c42:	88b0      	ldrh	r0, [r6, #4]
   12c44:	f7fe fafc 	bl	11240 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   12c48:	4605      	mov	r5, r0
   12c4a:	4601      	mov	r1, r0
   12c4c:	2008      	movs	r0, #8
   12c4e:	f7fe fce9 	bl	11624 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   12c52:	4601      	mov	r1, r0
   12c54:	f8b4 014c 	ldrh.w	r0, [r4, #332]	; 0x14c
   12c58:	4281      	cmp	r1, r0
   12c5a:	d301      	bcc.n	12c60 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x56>
   12c5c:	42a8      	cmp	r0, r5
   12c5e:	d301      	bcc.n	12c64 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x5a>
   12c60:	2012      	movs	r0, #18
   12c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12c64:	f641 504c 	movw	r0, #7500	; 0x1d4c
   12c68:	4285      	cmp	r5, r0
   12c6a:	d209      	bcs.n	12c80 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x76>
   12c6c:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
   12c70:	2802      	cmp	r0, #2
   12c72:	d103      	bne.n	12c7c <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x72>
   12c74:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   12c78:	2802      	cmp	r0, #2
   12c7a:	d001      	beq.n	12c80 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x76>
   12c7c:	200c      	movs	r0, #12
   12c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12c80:	4629      	mov	r1, r5
   12c82:	2005      	movs	r0, #5
   12c84:	f7fe fcce 	bl	11624 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   12c88:	f8a4 014c 	strh.w	r0, [r4, #332]	; 0x14c
   12c8c:	2000      	movs	r0, #0
   12c8e:	e9c4 0554 	strd	r0, r5, [r4, #336]	; 0x150
   12c92:	88f0      	ldrh	r0, [r6, #6]
   12c94:	f8a4 0158 	strh.w	r0, [r4, #344]	; 0x158
   12c98:	8930      	ldrh	r0, [r6, #8]
   12c9a:	f8a4 015a 	strh.w	r0, [r4, #346]	; 0x15a
   12c9e:	f504 74a4 	add.w	r4, r4, #328	; 0x148
   12ca2:	2001      	movs	r0, #1
   12ca4:	7020      	strb	r0, [r4, #0]
   12ca6:	2000      	movs	r0, #0
   12ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012caa <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
   12caa:	b510      	push	{r4, lr}
   12cac:	460b      	mov	r3, r1
   12cae:	2201      	movs	r2, #1
   12cb0:	f100 0110 	add.w	r1, r0, #16
   12cb4:	f7f3 fd06 	bl	66c4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   12cb8:	2000      	movs	r0, #0
   12cba:	bd10      	pop	{r4, pc}

00012cbc <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
   12cbc:	b510      	push	{r4, lr}
   12cbe:	8800      	ldrh	r0, [r0, #0]
   12cc0:	2101      	movs	r1, #1
   12cc2:	f7fe f876 	bl	10db2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   12cc6:	b118      	cbz	r0, 12cd0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
   12cc8:	f890 118b 	ldrb.w	r1, [r0, #395]	; 0x18b
   12ccc:	b111      	cbz	r1, 12cd4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
   12cce:	e007      	b.n	12ce0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
   12cd0:	2002      	movs	r0, #2
   12cd2:	bd10      	pop	{r4, pc}
   12cd4:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   12cd8:	2914      	cmp	r1, #20
   12cda:	d003      	beq.n	12ce4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   12cdc:	2915      	cmp	r1, #21
   12cde:	d001      	beq.n	12ce4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   12ce0:	200c      	movs	r0, #12
   12ce2:	bd10      	pop	{r4, pc}
   12ce4:	2102      	movs	r1, #2
   12ce6:	f880 118b 	strb.w	r1, [r0, #395]	; 0x18b
   12cea:	2000      	movs	r0, #0
   12cec:	bd10      	pop	{r4, pc}

00012cee <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
   12cee:	b510      	push	{r4, lr}
   12cf0:	2108      	movs	r1, #8
   12cf2:	f7f1 f9af 	bl	4054 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   12cf6:	2000      	movs	r0, #0
   12cf8:	bd10      	pop	{r4, pc}

00012cfa <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
   12cfa:	b510      	push	{r4, lr}
   12cfc:	4604      	mov	r4, r0
   12cfe:	2001      	movs	r0, #1
   12d00:	f7fa ff42 	bl	db88 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   12d04:	f000 fe44 	bl	13990 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4bc>
   12d08:	f7ff f9c7 	bl	1209a <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   12d0c:	7020      	strb	r0, [r4, #0]
   12d0e:	2000      	movs	r0, #0
   12d10:	bd10      	pop	{r4, pc}

00012d12 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
   12d12:	2108      	movs	r1, #8
   12d14:	7001      	strb	r1, [r0, #0]
   12d16:	2000      	movs	r0, #0
   12d18:	4770      	bx	lr

00012d1a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
   12d1a:	b510      	push	{r4, lr}
   12d1c:	4604      	mov	r4, r0
   12d1e:	20d8      	movs	r0, #216	; 0xd8
   12d20:	7020      	strb	r0, [r4, #0]
   12d22:	f000 fdfc 	bl	1391e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44a>
   12d26:	7060      	strb	r0, [r4, #1]
   12d28:	2000      	movs	r0, #0
   12d2a:	bd10      	pop	{r4, pc}

00012d2c <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
   12d2c:	2108      	movs	r1, #8
   12d2e:	7001      	strb	r1, [r0, #0]
   12d30:	2000      	movs	r0, #0
   12d32:	4770      	bx	lr

00012d34 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
   12d34:	b510      	push	{r4, lr}
   12d36:	4604      	mov	r4, r0
   12d38:	7800      	ldrb	r0, [r0, #0]
   12d3a:	b108      	cbz	r0, 12d40 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
   12d3c:	2801      	cmp	r0, #1
   12d3e:	d110      	bne.n	12d62 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   12d40:	f000 fe3d 	bl	139be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ea>
   12d44:	b120      	cbz	r0, 12d50 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   12d46:	f7f3 f8b7 	bl	5eb8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   12d4a:	b108      	cbz	r0, 12d50 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   12d4c:	200c      	movs	r0, #12
   12d4e:	bd10      	pop	{r4, pc}
   12d50:	7820      	ldrb	r0, [r4, #0]
   12d52:	f7ff ff04 	bl	12b5e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
   12d56:	1c61      	adds	r1, r4, #1
   12d58:	f7f3 fa22 	bl	61a0 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
   12d5c:	b108      	cbz	r0, 12d62 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   12d5e:	2000      	movs	r0, #0
   12d60:	bd10      	pop	{r4, pc}
   12d62:	2012      	movs	r0, #18
   12d64:	bd10      	pop	{r4, pc}

00012d66 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
   12d66:	b510      	push	{r4, lr}
   12d68:	4604      	mov	r4, r0
   12d6a:	f000 ff38 	bl	13bde <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x70a>
   12d6e:	b108      	cbz	r0, 12d74 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
   12d70:	200c      	movs	r0, #12
   12d72:	bd10      	pop	{r4, pc}
   12d74:	7820      	ldrb	r0, [r4, #0]
   12d76:	b120      	cbz	r0, 12d82 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
   12d78:	2801      	cmp	r0, #1
   12d7a:	d002      	beq.n	12d82 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
   12d7c:	28ff      	cmp	r0, #255	; 0xff
   12d7e:	d108      	bne.n	12d92 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
   12d80:	e009      	b.n	12d96 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x30>
   12d82:	f7ff feec 	bl	12b5e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
   12d86:	1c61      	adds	r1, r4, #1
   12d88:	f7fe fa37 	bl	111fa <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
   12d8c:	b108      	cbz	r0, 12d92 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
   12d8e:	2000      	movs	r0, #0
   12d90:	bd10      	pop	{r4, pc}
   12d92:	2012      	movs	r0, #18
   12d94:	bd10      	pop	{r4, pc}
   12d96:	2000      	movs	r0, #0
   12d98:	f7f3 fad8 	bl	634c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
   12d9c:	e7f7      	b.n	12d8e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x28>

00012d9e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
   12d9e:	b510      	push	{r4, lr}
   12da0:	4604      	mov	r4, r0
   12da2:	f000 fe0c 	bl	139be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ea>
   12da6:	b108      	cbz	r0, 12dac <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
   12da8:	200c      	movs	r0, #12
   12daa:	bd10      	pop	{r4, pc}
   12dac:	7820      	ldrb	r0, [r4, #0]
   12dae:	f000 0001 	and.w	r0, r0, #1
   12db2:	f7f3 f87b 	bl	5eac <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
   12db6:	2000      	movs	r0, #0
   12db8:	bd10      	pop	{r4, pc}

00012dba <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
   12dba:	b51c      	push	{r2, r3, r4, lr}
   12dbc:	4604      	mov	r4, r0
   12dbe:	2001      	movs	r0, #1
   12dc0:	f7fa fee2 	bl	db88 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   12dc4:	f000 fde4 	bl	13990 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4bc>
   12dc8:	2000      	movs	r0, #0
   12dca:	f88d 0002 	strb.w	r0, [sp, #2]
   12dce:	2103      	movs	r1, #3
   12dd0:	f88d 1001 	strb.w	r1, [sp, #1]
   12dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
   12dd8:	f88d 1003 	strb.w	r1, [sp, #3]
   12ddc:	f88d 0000 	strb.w	r0, [sp]
   12de0:	4668      	mov	r0, sp
   12de2:	9401      	str	r4, [sp, #4]
   12de4:	f000 fa15 	bl	13212 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
   12de8:	bd1c      	pop	{r2, r3, r4, pc}

00012dea <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
   12dea:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12dec:	4605      	mov	r5, r0
   12dee:	2001      	movs	r0, #1
   12df0:	f7fa feca 	bl	db88 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   12df4:	f000 fdcc 	bl	13990 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4bc>
   12df8:	4606      	mov	r6, r0
   12dfa:	7828      	ldrb	r0, [r5, #0]
   12dfc:	2400      	movs	r4, #0
   12dfe:	b160      	cbz	r0, 12e1a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x30>
   12e00:	f88d 4000 	strb.w	r4, [sp]
   12e04:	2001      	movs	r0, #1
   12e06:	f10d 0101 	add.w	r1, sp, #1
   12e0a:	f7f2 f81d 	bl	4e48 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   12e0e:	b120      	cbz	r0, 12e1a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x30>
   12e10:	4668      	mov	r0, sp
   12e12:	f000 f89a 	bl	12f4a <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
   12e16:	2800      	cmp	r0, #0
   12e18:	d112      	bne.n	12e40 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x56>
   12e1a:	f88d 400c 	strb.w	r4, [sp, #12]
   12e1e:	4630      	mov	r0, r6
   12e20:	f7ff f92f 	bl	12082 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   12e24:	b118      	cbz	r0, 12e2e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x44>
   12e26:	2080      	movs	r0, #128	; 0x80
   12e28:	f8ad 000d 	strh.w	r0, [sp, #13]
   12e2c:	e001      	b.n	12e32 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x48>
   12e2e:	f8ad 400d 	strh.w	r4, [sp, #13]
   12e32:	f88d 400f 	strb.w	r4, [sp, #15]
   12e36:	7828      	ldrb	r0, [r5, #0]
   12e38:	2801      	cmp	r0, #1
   12e3a:	d003      	beq.n	12e44 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5a>
   12e3c:	b138      	cbz	r0, 12e4e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x64>
   12e3e:	2012      	movs	r0, #18
   12e40:	b004      	add	sp, #16
   12e42:	bd70      	pop	{r4, r5, r6, pc}
   12e44:	a903      	add	r1, sp, #12
   12e46:	4630      	mov	r0, r6
   12e48:	f7fa fda4 	bl	d994 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
   12e4c:	e7f8      	b.n	12e40 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x56>
   12e4e:	4630      	mov	r0, r6
   12e50:	f000 fdcd 	bl	139ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x51a>
   12e54:	e7f4      	b.n	12e40 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x56>

00012e56 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
   12e56:	b530      	push	{r4, r5, lr}
   12e58:	4604      	mov	r4, r0
   12e5a:	b08b      	sub	sp, #44	; 0x2c
   12e5c:	2001      	movs	r0, #1
   12e5e:	f7fa fe93 	bl	db88 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   12e62:	f000 fd95 	bl	13990 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4bc>
   12e66:	4602      	mov	r2, r0
   12e68:	7920      	ldrb	r0, [r4, #4]
   12e6a:	2804      	cmp	r0, #4
   12e6c:	d803      	bhi.n	12e76 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
   12e6e:	8860      	ldrh	r0, [r4, #2]
   12e70:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   12e74:	d902      	bls.n	12e7c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x26>
   12e76:	2012      	movs	r0, #18
   12e78:	b00b      	add	sp, #44	; 0x2c
   12e7a:	bd30      	pop	{r4, r5, pc}
   12e7c:	2500      	movs	r5, #0
   12e7e:	f88d 5004 	strb.w	r5, [sp, #4]
   12e82:	7921      	ldrb	r1, [r4, #4]
   12e84:	9500      	str	r5, [sp, #0]
   12e86:	f89d 0000 	ldrb.w	r0, [sp]
   12e8a:	2905      	cmp	r1, #5
   12e8c:	f040 0010 	orr.w	r0, r0, #16
   12e90:	f88d 0000 	strb.w	r0, [sp]
   12e94:	d254      	bcs.n	12f40 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xea>
   12e96:	e8df f001 	tbb	[pc, r1]
   12e9a:	0803      	.short	0x0803
   12e9c:	000b1105 	.word	0x000b1105
   12ea0:	f040 0001 	orr.w	r0, r0, #1
   12ea4:	f040 0002 	orr.w	r0, r0, #2
   12ea8:	e006      	b.n	12eb8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x62>
   12eaa:	f040 0009 	orr.w	r0, r0, #9
   12eae:	e001      	b.n	12eb4 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5e>
   12eb0:	f040 0001 	orr.w	r0, r0, #1
   12eb4:	f040 0004 	orr.w	r0, r0, #4
   12eb8:	f88d 0000 	strb.w	r0, [sp]
   12ebc:	f8bd 0000 	ldrh.w	r0, [sp]
   12ec0:	9000      	str	r0, [sp, #0]
   12ec2:	f8bd 0000 	ldrh.w	r0, [sp]
   12ec6:	f8ad 0005 	strh.w	r0, [sp, #5]
   12eca:	8821      	ldrh	r1, [r4, #0]
   12ecc:	f8dd 0006 	ldr.w	r0, [sp, #6]
   12ed0:	f361 201f 	bfi	r0, r1, #8, #24
   12ed4:	f8cd 0006 	str.w	r0, [sp, #6]
   12ed8:	8861      	ldrh	r1, [r4, #2]
   12eda:	f8dd 0009 	ldr.w	r0, [sp, #9]
   12ede:	f361 201f 	bfi	r0, r1, #8, #24
   12ee2:	f8cd 0009 	str.w	r0, [sp, #9]
   12ee6:	7b60      	ldrb	r0, [r4, #13]
   12ee8:	f88d 000d 	strb.w	r0, [sp, #13]
   12eec:	7960      	ldrb	r0, [r4, #5]
   12eee:	f88d 000e 	strb.w	r0, [sp, #14]
   12ef2:	79a0      	ldrb	r0, [r4, #6]
   12ef4:	f88d 000f 	strb.w	r0, [sp, #15]
   12ef8:	f8d4 0007 	ldr.w	r0, [r4, #7]
   12efc:	9004      	str	r0, [sp, #16]
   12efe:	f8b4 000b 	ldrh.w	r0, [r4, #11]
   12f02:	f8ad 0014 	strh.w	r0, [sp, #20]
   12f06:	7ba0      	ldrb	r0, [r4, #14]
   12f08:	f88d 0016 	strb.w	r0, [sp, #22]
   12f0c:	207f      	movs	r0, #127	; 0x7f
   12f0e:	f88d 0017 	strb.w	r0, [sp, #23]
   12f12:	2001      	movs	r0, #1
   12f14:	f88d 0018 	strb.w	r0, [sp, #24]
   12f18:	f88d 5019 	strb.w	r5, [sp, #25]
   12f1c:	f88d 001a 	strb.w	r0, [sp, #26]
   12f20:	f88d 501b 	strb.w	r5, [sp, #27]
   12f24:	4610      	mov	r0, r2
   12f26:	f7ff f8ca 	bl	120be <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
   12f2a:	f88d 001c 	strb.w	r0, [sp, #28]
   12f2e:	f88d 501d 	strb.w	r5, [sp, #29]
   12f32:	f88d 501e 	strb.w	r5, [sp, #30]
   12f36:	a909      	add	r1, sp, #36	; 0x24
   12f38:	a801      	add	r0, sp, #4
   12f3a:	f000 f8d3 	bl	130e4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
   12f3e:	e79b      	b.n	12e78 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x22>
   12f40:	f44f 5185 	mov.w	r1, #4256	; 0x10a0
   12f44:	2039      	movs	r0, #57	; 0x39
   12f46:	f7f0 fffb 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00012f4a <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
   12f4a:	b570      	push	{r4, r5, r6, lr}
   12f4c:	4604      	mov	r4, r0
   12f4e:	7800      	ldrb	r0, [r0, #0]
   12f50:	2102      	movs	r1, #2
   12f52:	f7fd ff2e 	bl	10db2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   12f56:	0005      	movs	r5, r0
   12f58:	d007      	beq.n	12f6a <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
   12f5a:	f7ff fa4a 	bl	123f2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   12f5e:	b160      	cbz	r0, 12f7a <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   12f60:	4628      	mov	r0, r5
   12f62:	f7ff f896 	bl	12092 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   12f66:	b110      	cbz	r0, 12f6e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
   12f68:	e005      	b.n	12f76 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
   12f6a:	2042      	movs	r0, #66	; 0x42
   12f6c:	bd70      	pop	{r4, r5, r6, pc}
   12f6e:	4628      	mov	r0, r5
   12f70:	f7ff f87d 	bl	1206e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   12f74:	b108      	cbz	r0, 12f7a <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   12f76:	200c      	movs	r0, #12
   12f78:	bd70      	pop	{r4, r5, r6, pc}
   12f7a:	1c61      	adds	r1, r4, #1
   12f7c:	4628      	mov	r0, r5
   12f7e:	f7ff f895 	bl	120ac <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
   12f82:	2000      	movs	r0, #0
   12f84:	bd70      	pop	{r4, r5, r6, pc}

00012f86 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
   12f86:	b510      	push	{r4, lr}
   12f88:	4604      	mov	r4, r0
   12f8a:	f000 fd18 	bl	139be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ea>
   12f8e:	b120      	cbz	r0, 12f9a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   12f90:	f7f2 ff92 	bl	5eb8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   12f94:	b108      	cbz	r0, 12f9a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   12f96:	200c      	movs	r0, #12
   12f98:	bd10      	pop	{r4, pc}
   12f9a:	7820      	ldrb	r0, [r4, #0]
   12f9c:	f7ff fddf 	bl	12b5e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
   12fa0:	79e2      	ldrb	r2, [r4, #7]
   12fa2:	1c61      	adds	r1, r4, #1
   12fa4:	f7f2 ff04 	bl	5db0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
   12fa8:	b108      	cbz	r0, 12fae <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
   12faa:	2000      	movs	r0, #0
   12fac:	bd10      	pop	{r4, pc}
   12fae:	2002      	movs	r0, #2
   12fb0:	bd10      	pop	{r4, pc}

00012fb2 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   12fb2:	b510      	push	{r4, lr}
   12fb4:	4604      	mov	r4, r0
   12fb6:	2001      	movs	r0, #1
   12fb8:	f000 faf2 	bl	135a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xcc>
   12fbc:	b128      	cbz	r0, 12fca <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   12fbe:	4621      	mov	r1, r4
   12fc0:	2001      	movs	r0, #1
   12fc2:	f7f1 ff59 	bl	4e78 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   12fc6:	2000      	movs	r0, #0
   12fc8:	bd10      	pop	{r4, pc}
   12fca:	200c      	movs	r0, #12
   12fcc:	bd10      	pop	{r4, pc}

00012fce <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
   12fce:	b510      	push	{r4, lr}
   12fd0:	8800      	ldrh	r0, [r0, #0]
   12fd2:	f7f3 f91b 	bl	620c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
   12fd6:	b108      	cbz	r0, 12fdc <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
   12fd8:	2000      	movs	r0, #0
   12fda:	bd10      	pop	{r4, pc}
   12fdc:	2030      	movs	r0, #48	; 0x30
   12fde:	bd10      	pop	{r4, pc}

00012fe0 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
   12fe0:	b51c      	push	{r2, r3, r4, lr}
   12fe2:	4604      	mov	r4, r0
   12fe4:	2001      	movs	r0, #1
   12fe6:	f7fa fdcf 	bl	db88 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   12fea:	7820      	ldrb	r0, [r4, #0]
   12fec:	f88d 0000 	strb.w	r0, [sp]
   12ff0:	7860      	ldrb	r0, [r4, #1]
   12ff2:	f88d 0001 	strb.w	r0, [sp, #1]
   12ff6:	2000      	movs	r0, #0
   12ff8:	f8ad 0002 	strh.w	r0, [sp, #2]
   12ffc:	f8ad 0004 	strh.w	r0, [sp, #4]
   13000:	4601      	mov	r1, r0
   13002:	4668      	mov	r0, sp
   13004:	f000 fbe7 	bl	137d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x302>
   13008:	2800      	cmp	r0, #0
   1300a:	d102      	bne.n	13012 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x32>
   1300c:	4668      	mov	r0, sp
   1300e:	f000 fbc2 	bl	13796 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c2>
   13012:	bd1c      	pop	{r2, r3, r4, pc}

00013014 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
   13014:	b510      	push	{r4, lr}
   13016:	4604      	mov	r4, r0
   13018:	b088      	sub	sp, #32
   1301a:	2001      	movs	r0, #1
   1301c:	f7fa fdb4 	bl	db88 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   13020:	7960      	ldrb	r0, [r4, #5]
   13022:	f88d 0000 	strb.w	r0, [sp]
   13026:	79a0      	ldrb	r0, [r4, #6]
   13028:	f88d 0001 	strb.w	r0, [sp, #1]
   1302c:	2001      	movs	r0, #1
   1302e:	f88d 0002 	strb.w	r0, [sp, #2]
   13032:	7820      	ldrb	r0, [r4, #0]
   13034:	f88d 0003 	strb.w	r0, [sp, #3]
   13038:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   1303c:	f240 2171 	movw	r1, #625	; 0x271
   13040:	4348      	muls	r0, r1
   13042:	9002      	str	r0, [sp, #8]
   13044:	f8b4 0003 	ldrh.w	r0, [r4, #3]
   13048:	4348      	muls	r0, r1
   1304a:	9004      	str	r0, [sp, #16]
   1304c:	2007      	movs	r0, #7
   1304e:	f88d 0018 	strb.w	r0, [sp, #24]
   13052:	2000      	movs	r0, #0
   13054:	f88d 0019 	strb.w	r0, [sp, #25]
   13058:	9804      	ldr	r0, [sp, #16]
   1305a:	f7fa fc4d 	bl	d8f8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x27c>
   1305e:	b140      	cbz	r0, 13072 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x5e>
   13060:	9802      	ldr	r0, [sp, #8]
   13062:	f7fa fc3d 	bl	d8e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x264>
   13066:	b120      	cbz	r0, 13072 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x5e>
   13068:	4668      	mov	r0, sp
   1306a:	f000 f960 	bl	1332e <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
   1306e:	b008      	add	sp, #32
   13070:	bd10      	pop	{r4, pc}
   13072:	2030      	movs	r0, #48	; 0x30
   13074:	e7fb      	b.n	1306e <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x5a>

00013076 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
   13076:	b51c      	push	{r2, r3, r4, lr}
   13078:	4604      	mov	r4, r0
   1307a:	2001      	movs	r0, #1
   1307c:	f7fa fd84 	bl	db88 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   13080:	f000 fc86 	bl	13990 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4bc>
   13084:	2000      	movs	r0, #0
   13086:	f88d 0000 	strb.w	r0, [sp]
   1308a:	f88d 0002 	strb.w	r0, [sp, #2]
   1308e:	2003      	movs	r0, #3
   13090:	f88d 0001 	strb.w	r0, [sp, #1]
   13094:	f814 0b01 	ldrb.w	r0, [r4], #1
   13098:	f88d 0003 	strb.w	r0, [sp, #3]
   1309c:	4668      	mov	r0, sp
   1309e:	9401      	str	r4, [sp, #4]
   130a0:	f000 f9a3 	bl	133ea <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
   130a4:	bd1c      	pop	{r2, r3, r4, pc}

000130a6 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   130a6:	b510      	push	{r4, lr}
   130a8:	f7f1 ff0c 	bl	4ec4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   130ac:	2000      	movs	r0, #0
   130ae:	bd10      	pop	{r4, pc}

000130b0 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   130b0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   130b2:	460c      	mov	r4, r1
   130b4:	4605      	mov	r5, r0
   130b6:	f000 fc51 	bl	1395c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x488>
   130ba:	b178      	cbz	r0, 130dc <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x2c>
   130bc:	4669      	mov	r1, sp
   130be:	4628      	mov	r0, r5
   130c0:	f7fe f8a6 	bl	11210 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   130c4:	2800      	cmp	r0, #0
   130c6:	d108      	bne.n	130da <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x2a>
   130c8:	f89d 0000 	ldrb.w	r0, [sp]
   130cc:	b140      	cbz	r0, 130e0 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x30>
   130ce:	2100      	movs	r1, #0
   130d0:	4622      	mov	r2, r4
   130d2:	9801      	ldr	r0, [sp, #4]
   130d4:	f000 fbc9 	bl	1386a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x396>
   130d8:	2000      	movs	r0, #0
   130da:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   130dc:	2001      	movs	r0, #1
   130de:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   130e0:	2101      	movs	r1, #1
   130e2:	e7f5      	b.n	130d0 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x20>

000130e4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
   130e4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   130e8:	460e      	mov	r6, r1
   130ea:	4605      	mov	r5, r0
   130ec:	7807      	ldrb	r7, [r0, #0]
   130ee:	f000 fad5 	bl	1369c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1c8>
   130f2:	2800      	cmp	r0, #0
   130f4:	d10a      	bne.n	1310c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   130f6:	4628      	mov	r0, r5
   130f8:	f000 fa96 	bl	13628 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x154>
   130fc:	2800      	cmp	r0, #0
   130fe:	d105      	bne.n	1310c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   13100:	2002      	movs	r0, #2
   13102:	f7f1 f8fb 	bl	42fc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   13106:	4287      	cmp	r7, r0
   13108:	d302      	bcc.n	13110 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
   1310a:	2007      	movs	r0, #7
   1310c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   13110:	2102      	movs	r1, #2
   13112:	4638      	mov	r0, r7
   13114:	f7fd fe4d 	bl	10db2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   13118:	0004      	movs	r4, r0
   1311a:	d003      	beq.n	13124 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x40>
   1311c:	f7ff f969 	bl	123f2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   13120:	bb50      	cbnz	r0, 13178 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x94>
   13122:	e008      	b.n	13136 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x52>
   13124:	2200      	movs	r2, #0
   13126:	2102      	movs	r1, #2
   13128:	4638      	mov	r0, r7
   1312a:	f7fd fe38 	bl	10d9e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
   1312e:	0004      	movs	r4, r0
   13130:	d00d      	beq.n	1314e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x6a>
   13132:	f7fe fdf0 	bl	11d16 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
   13136:	7828      	ldrb	r0, [r5, #0]
   13138:	2103      	movs	r1, #3
   1313a:	f7fd fe3a 	bl	10db2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1313e:	b1e8      	cbz	r0, 1317c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x98>
   13140:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
   13144:	b1d0      	cbz	r0, 1317c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x98>
   13146:	7868      	ldrb	r0, [r5, #1]
   13148:	07c1      	lsls	r1, r0, #31
   1314a:	d10b      	bne.n	13164 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x80>
   1314c:	e004      	b.n	13158 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x74>
   1314e:	f241 212d 	movw	r1, #4653	; 0x122d
   13152:	2039      	movs	r0, #57	; 0x39
   13154:	f7f0 fef4 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13158:	0781      	lsls	r1, r0, #30
   1315a:	d403      	bmi.n	13164 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x80>
   1315c:	06c1      	lsls	r1, r0, #27
   1315e:	d401      	bmi.n	13164 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x80>
   13160:	0680      	lsls	r0, r0, #26
   13162:	d501      	bpl.n	13168 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x84>
   13164:	2012      	movs	r0, #18
   13166:	e7d1      	b.n	1310c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   13168:	4620      	mov	r0, r4
   1316a:	f7fe ffaa 	bl	120c2 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
   1316e:	f000 f9ea 	bl	13546 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x72>
   13172:	7da9      	ldrb	r1, [r5, #22]
   13174:	4288      	cmp	r0, r1
   13176:	d001      	beq.n	1317c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x98>
   13178:	200c      	movs	r0, #12
   1317a:	e7c7      	b.n	1310c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   1317c:	4620      	mov	r0, r4
   1317e:	f7fe ff8c 	bl	1209a <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   13182:	7030      	strb	r0, [r6, #0]
   13184:	74e8      	strb	r0, [r5, #19]
   13186:	4629      	mov	r1, r5
   13188:	4620      	mov	r0, r4
   1318a:	f7f4 fb11 	bl	77b0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
   1318e:	4606      	mov	r6, r0
   13190:	7e68      	ldrb	r0, [r5, #25]
   13192:	b1a0      	cbz	r0, 131be <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xda>
   13194:	b99e      	cbnz	r6, 131be <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xda>
   13196:	2200      	movs	r2, #0
   13198:	4668      	mov	r0, sp
   1319a:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1319c:	f7fd feda 	bl	10f54 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   131a0:	2200      	movs	r2, #0
   131a2:	2101      	movs	r1, #1
   131a4:	6c20      	ldr	r0, [r4, #64]	; 0x40
   131a6:	f7fd ff4d 	bl	11044 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   131aa:	2204      	movs	r2, #4
   131ac:	4668      	mov	r0, sp
   131ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
   131b0:	f7fd fed0 	bl	10f54 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   131b4:	2200      	movs	r2, #0
   131b6:	4611      	mov	r1, r2
   131b8:	6c20      	ldr	r0, [r4, #64]	; 0x40
   131ba:	f7fd ff43 	bl	11044 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   131be:	4630      	mov	r0, r6
   131c0:	e7a4      	b.n	1310c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>

000131c2 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   131c2:	b510      	push	{r4, lr}
   131c4:	4604      	mov	r4, r0
   131c6:	2000      	movs	r0, #0
   131c8:	f000 f9ea 	bl	135a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xcc>
   131cc:	b128      	cbz	r0, 131da <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   131ce:	4621      	mov	r1, r4
   131d0:	2000      	movs	r0, #0
   131d2:	f7f1 fe51 	bl	4e78 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   131d6:	2000      	movs	r0, #0
   131d8:	bd10      	pop	{r4, pc}
   131da:	200c      	movs	r0, #12
   131dc:	bd10      	pop	{r4, pc}

000131de <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   131de:	b510      	push	{r4, lr}
   131e0:	4604      	mov	r4, r0
   131e2:	7800      	ldrb	r0, [r0, #0]
   131e4:	f000 0001 	and.w	r0, r0, #1
   131e8:	f7f7 ff14 	bl	b014 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
   131ec:	7820      	ldrb	r0, [r4, #0]
   131ee:	f000 0001 	and.w	r0, r0, #1
   131f2:	f7f5 fea1 	bl	8f38 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
   131f6:	2000      	movs	r0, #0
   131f8:	bd10      	pop	{r4, pc}

000131fa <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   131fa:	b510      	push	{r4, lr}
   131fc:	4604      	mov	r4, r0
   131fe:	f000 fbad 	bl	1395c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x488>
   13202:	b120      	cbz	r0, 1320e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
   13204:	4620      	mov	r0, r4
   13206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1320a:	f000 bc16 	b.w	13a3a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x566>
   1320e:	2001      	movs	r0, #1
   13210:	bd10      	pop	{r4, pc}

00013212 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
   13212:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   13216:	4606      	mov	r6, r0
   13218:	7847      	ldrb	r7, [r0, #1]
   1321a:	7800      	ldrb	r0, [r0, #0]
   1321c:	2102      	movs	r1, #2
   1321e:	f7fd fdc8 	bl	10db2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   13222:	0005      	movs	r5, r0
   13224:	d00b      	beq.n	1323e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2c>
   13226:	f7fa fca9 	bl	db7c <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   1322a:	b158      	cbz	r0, 13244 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x32>
   1322c:	4628      	mov	r0, r5
   1322e:	f7fe fdae 	bl	11d8e <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   13232:	4604      	mov	r4, r0
   13234:	78f0      	ldrb	r0, [r6, #3]
   13236:	42a0      	cmp	r0, r4
   13238:	d805      	bhi.n	13246 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x34>
   1323a:	4604      	mov	r4, r0
   1323c:	e003      	b.n	13246 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x34>
   1323e:	2042      	movs	r0, #66	; 0x42
   13240:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
   13244:	78f4      	ldrb	r4, [r6, #3]
   13246:	2f04      	cmp	r7, #4
   13248:	d031      	beq.n	132ae <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x9c>
   1324a:	6c28      	ldr	r0, [r5, #64]	; 0x40
   1324c:	f7fd ff1e 	bl	1108c <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   13250:	4420      	add	r0, r4
   13252:	fa1f f880 	uxth.w	r8, r0
   13256:	f7fa fc91 	bl	db7c <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   1325a:	b9a0      	cbnz	r0, 13286 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x74>
   1325c:	78f0      	ldrb	r0, [r6, #3]
   1325e:	f04f 0912 	mov.w	r9, #18
   13262:	b118      	cbz	r0, 1326c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5a>
   13264:	4628      	mov	r0, r5
   13266:	f7fe fee8 	bl	1203a <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA>
   1326a:	b140      	cbz	r0, 1327e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x6c>
   1326c:	4628      	mov	r0, r5
   1326e:	f7fe fd8e 	bl	11d8e <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   13272:	4540      	cmp	r0, r8
   13274:	d207      	bcs.n	13286 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x74>
   13276:	4628      	mov	r0, r5
   13278:	f7fe ff07 	bl	1208a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1327c:	b108      	cbz	r0, 13282 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   1327e:	4648      	mov	r0, r9
   13280:	e7de      	b.n	13240 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>
   13282:	2007      	movs	r0, #7
   13284:	e7dc      	b.n	13240 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>
   13286:	f7fa fc79 	bl	db7c <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   1328a:	4602      	mov	r2, r0
   1328c:	4641      	mov	r1, r8
   1328e:	4628      	mov	r0, r5
   13290:	f000 f9a6 	bl	135e0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x10c>
   13294:	2800      	cmp	r0, #0
   13296:	d1d3      	bne.n	13240 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>
   13298:	2f03      	cmp	r7, #3
   1329a:	d000      	beq.n	1329e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8c>
   1329c:	b1c4      	cbz	r4, 132d0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   1329e:	4628      	mov	r0, r5
   132a0:	f7fe fef3 	bl	1208a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   132a4:	7871      	ldrb	r1, [r6, #1]
   132a6:	2903      	cmp	r1, #3
   132a8:	d00d      	beq.n	132c6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb4>
   132aa:	b988      	cbnz	r0, 132d0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   132ac:	e001      	b.n	132b2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xa0>
   132ae:	b97c      	cbnz	r4, 132d0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   132b0:	e7f5      	b.n	1329e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8c>
   132b2:	2904      	cmp	r1, #4
   132b4:	d107      	bne.n	132c6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb4>
   132b6:	4628      	mov	r0, r5
   132b8:	f7ff f89b 	bl	123f2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   132bc:	b140      	cbz	r0, 132d0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   132be:	6c28      	ldr	r0, [r5, #64]	; 0x40
   132c0:	f7fd feb2 	bl	11028 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   132c4:	b120      	cbz	r0, 132d0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   132c6:	2f01      	cmp	r7, #1
   132c8:	d004      	beq.n	132d4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xc2>
   132ca:	2f03      	cmp	r7, #3
   132cc:	d002      	beq.n	132d4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xc2>
   132ce:	e00e      	b.n	132ee <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xdc>
   132d0:	2012      	movs	r0, #18
   132d2:	e7b5      	b.n	13240 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>
   132d4:	4628      	mov	r0, r5
   132d6:	f7fe fed8 	bl	1208a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   132da:	b108      	cbz	r0, 132e0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   132dc:	2200      	movs	r2, #0
   132de:	e002      	b.n	132e6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xd4>
   132e0:	2f01      	cmp	r7, #1
   132e2:	d014      	beq.n	1330e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xfc>
   132e4:	2201      	movs	r2, #1
   132e6:	4668      	mov	r0, sp
   132e8:	6c29      	ldr	r1, [r5, #64]	; 0x40
   132ea:	f7fd fe33 	bl	10f54 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   132ee:	2f04      	cmp	r7, #4
   132f0:	d018      	beq.n	13324 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x112>
   132f2:	6872      	ldr	r2, [r6, #4]
   132f4:	4623      	mov	r3, r4
   132f6:	2101      	movs	r1, #1
   132f8:	6c28      	ldr	r0, [r5, #64]	; 0x40
   132fa:	f7fd fe62 	bl	10fc2 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   132fe:	2800      	cmp	r0, #0
   13300:	d0bf      	beq.n	13282 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   13302:	7870      	ldrb	r0, [r6, #1]
   13304:	2802      	cmp	r0, #2
   13306:	d004      	beq.n	13312 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x100>
   13308:	2803      	cmp	r0, #3
   1330a:	d002      	beq.n	13312 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x100>
   1330c:	e00d      	b.n	1332a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x118>
   1330e:	2202      	movs	r2, #2
   13310:	e7e9      	b.n	132e6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xd4>
   13312:	6c28      	ldr	r0, [r5, #64]	; 0x40
   13314:	f7fd feba 	bl	1108c <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   13318:	4602      	mov	r2, r0
   1331a:	2101      	movs	r1, #1
   1331c:	6c28      	ldr	r0, [r5, #64]	; 0x40
   1331e:	f7fd fe91 	bl	11044 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   13322:	e002      	b.n	1332a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x118>
   13324:	4628      	mov	r0, r5
   13326:	f7fe fd49 	bl	11dbc <sym_UJWNE3E4RDATXEP7ML237UGTIH42KUYZYFD6XAQ>
   1332a:	2000      	movs	r0, #0
   1332c:	e788      	b.n	13240 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>

0001332e <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
   1332e:	b510      	push	{r4, lr}
   13330:	b08a      	sub	sp, #40	; 0x28
   13332:	4604      	mov	r4, r0
   13334:	f7fa f9d8 	bl	d6e8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6c>
   13338:	2800      	cmp	r0, #0
   1333a:	d103      	bne.n	13344 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
   1333c:	f000 fb4c 	bl	139d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x504>
   13340:	b110      	cbz	r0, 13348 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
   13342:	200c      	movs	r0, #12
   13344:	b00a      	add	sp, #40	; 0x28
   13346:	bd10      	pop	{r4, pc}
   13348:	2102      	movs	r1, #2
   1334a:	f104 0010 	add.w	r0, r4, #16
   1334e:	f7fa fadf 	bl	d910 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x294>
   13352:	78a0      	ldrb	r0, [r4, #2]
   13354:	f88d 0000 	strb.w	r0, [sp]
   13358:	78a0      	ldrb	r0, [r4, #2]
   1335a:	f88d 001c 	strb.w	r0, [sp, #28]
   1335e:	7860      	ldrb	r0, [r4, #1]
   13360:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
   13364:	7820      	ldrb	r0, [r4, #0]
   13366:	f88d 0020 	strb.w	r0, [sp, #32]
   1336a:	7e20      	ldrb	r0, [r4, #24]
   1336c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   13370:	7e60      	ldrb	r0, [r4, #25]
   13372:	b100      	cbz	r0, 13376 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x48>
   13374:	2001      	movs	r0, #1
   13376:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   1337a:	78a0      	ldrb	r0, [r4, #2]
   1337c:	07c1      	lsls	r1, r0, #31
   1337e:	d014      	beq.n	133aa <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x7c>
   13380:	78e0      	ldrb	r0, [r4, #3]
   13382:	f000 fa69 	bl	13858 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x384>
   13386:	f88d 001d 	strb.w	r0, [sp, #29]
   1338a:	68a0      	ldr	r0, [r4, #8]
   1338c:	9001      	str	r0, [sp, #4]
   1338e:	6920      	ldr	r0, [r4, #16]
   13390:	9002      	str	r0, [sp, #8]
   13392:	78a0      	ldrb	r0, [r4, #2]
   13394:	0740      	lsls	r0, r0, #29
   13396:	d515      	bpl.n	133c4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x96>
   13398:	7920      	ldrb	r0, [r4, #4]
   1339a:	f000 fa5d 	bl	13858 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x384>
   1339e:	f88d 001f 	strb.w	r0, [sp, #31]
   133a2:	68e0      	ldr	r0, [r4, #12]
   133a4:	9005      	str	r0, [sp, #20]
   133a6:	6960      	ldr	r0, [r4, #20]
   133a8:	e00b      	b.n	133c2 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x94>
   133aa:	2802      	cmp	r0, #2
   133ac:	d013      	beq.n	133d6 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0xa8>
   133ae:	0740      	lsls	r0, r0, #29
   133b0:	d508      	bpl.n	133c4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x96>
   133b2:	78e0      	ldrb	r0, [r4, #3]
   133b4:	f000 fa50 	bl	13858 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x384>
   133b8:	f88d 001f 	strb.w	r0, [sp, #31]
   133bc:	68a0      	ldr	r0, [r4, #8]
   133be:	9005      	str	r0, [sp, #20]
   133c0:	6920      	ldr	r0, [r4, #16]
   133c2:	9006      	str	r0, [sp, #24]
   133c4:	4668      	mov	r0, sp
   133c6:	f7f7 ff47 	bl	b258 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
   133ca:	2800      	cmp	r0, #0
   133cc:	d1ba      	bne.n	13344 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
   133ce:	a807      	add	r0, sp, #28
   133d0:	f7f5 ff86 	bl	92e0 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
   133d4:	e7b6      	b.n	13344 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
   133d6:	78e0      	ldrb	r0, [r4, #3]
   133d8:	f000 fa3e 	bl	13858 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x384>
   133dc:	f88d 001e 	strb.w	r0, [sp, #30]
   133e0:	68a0      	ldr	r0, [r4, #8]
   133e2:	9003      	str	r0, [sp, #12]
   133e4:	6920      	ldr	r0, [r4, #16]
   133e6:	9004      	str	r0, [sp, #16]
   133e8:	e7ec      	b.n	133c4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x96>

000133ea <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   133ea:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   133ee:	4606      	mov	r6, r0
   133f0:	7845      	ldrb	r5, [r0, #1]
   133f2:	78c7      	ldrb	r7, [r0, #3]
   133f4:	7800      	ldrb	r0, [r0, #0]
   133f6:	2102      	movs	r1, #2
   133f8:	f7fd fcdb 	bl	10db2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   133fc:	0004      	movs	r4, r0
   133fe:	d007      	beq.n	13410 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   13400:	f7fa fbbc 	bl	db7c <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   13404:	b140      	cbz	r0, 13418 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2e>
   13406:	4620      	mov	r0, r4
   13408:	f7fe fe43 	bl	12092 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1340c:	b118      	cbz	r0, 13416 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2c>
   1340e:	e003      	b.n	13418 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2e>
   13410:	2042      	movs	r0, #66	; 0x42
   13412:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   13416:	2700      	movs	r7, #0
   13418:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1341a:	f7fd fe3b 	bl	11094 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   1341e:	4438      	add	r0, r7
   13420:	fa1f f880 	uxth.w	r8, r0
   13424:	f7fa fbaa 	bl	db7c <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   13428:	b928      	cbnz	r0, 13436 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x4c>
   1342a:	78f0      	ldrb	r0, [r6, #3]
   1342c:	b118      	cbz	r0, 13436 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x4c>
   1342e:	4620      	mov	r0, r4
   13430:	f7fe fe2f 	bl	12092 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   13434:	b198      	cbz	r0, 1345e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x74>
   13436:	f7fa fba1 	bl	db7c <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   1343a:	4602      	mov	r2, r0
   1343c:	4641      	mov	r1, r8
   1343e:	4620      	mov	r0, r4
   13440:	f000 f8ce 	bl	135e0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x10c>
   13444:	2800      	cmp	r0, #0
   13446:	d1e4      	bne.n	13412 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
   13448:	2d04      	cmp	r5, #4
   1344a:	d008      	beq.n	1345e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x74>
   1344c:	2d03      	cmp	r5, #3
   1344e:	d00a      	beq.n	13466 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x7c>
   13450:	b12f      	cbz	r7, 1345e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x74>
   13452:	4620      	mov	r0, r4
   13454:	f7fe ffcd 	bl	123f2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   13458:	b118      	cbz	r0, 13462 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x78>
   1345a:	200c      	movs	r0, #12
   1345c:	e7d9      	b.n	13412 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
   1345e:	2012      	movs	r0, #18
   13460:	e7d7      	b.n	13412 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
   13462:	2d01      	cmp	r5, #1
   13464:	d10c      	bne.n	13480 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   13466:	4620      	mov	r0, r4
   13468:	f7fe fe0f 	bl	1208a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1346c:	b108      	cbz	r0, 13472 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x88>
   1346e:	2204      	movs	r2, #4
   13470:	e002      	b.n	13478 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   13472:	2d01      	cmp	r5, #1
   13474:	d010      	beq.n	13498 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xae>
   13476:	2205      	movs	r2, #5
   13478:	4668      	mov	r0, sp
   1347a:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1347c:	f7fd fd6a 	bl	10f54 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   13480:	6872      	ldr	r2, [r6, #4]
   13482:	463b      	mov	r3, r7
   13484:	2100      	movs	r1, #0
   13486:	6c20      	ldr	r0, [r4, #64]	; 0x40
   13488:	f7fd fd9b 	bl	10fc2 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   1348c:	b130      	cbz	r0, 1349c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xb2>
   1348e:	2d02      	cmp	r5, #2
   13490:	d006      	beq.n	134a0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xb6>
   13492:	2d03      	cmp	r5, #3
   13494:	d004      	beq.n	134a0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xb6>
   13496:	e008      	b.n	134aa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xc0>
   13498:	2206      	movs	r2, #6
   1349a:	e7ed      	b.n	13478 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   1349c:	2007      	movs	r0, #7
   1349e:	e7b8      	b.n	13412 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
   134a0:	4642      	mov	r2, r8
   134a2:	2100      	movs	r1, #0
   134a4:	6c20      	ldr	r0, [r4, #64]	; 0x40
   134a6:	f7fd fdcd 	bl	11044 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   134aa:	2000      	movs	r0, #0
   134ac:	e7b1      	b.n	13412 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>

000134ae <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   134ae:	b510      	push	{r4, lr}
   134b0:	4604      	mov	r4, r0
   134b2:	4601      	mov	r1, r0
   134b4:	2000      	movs	r0, #0
   134b6:	f7f1 fcc7 	bl	4e48 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   134ba:	b910      	cbnz	r0, 134c2 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   134bc:	2000      	movs	r0, #0
   134be:	6020      	str	r0, [r4, #0]
   134c0:	80a0      	strh	r0, [r4, #4]
   134c2:	2000      	movs	r0, #0
   134c4:	bd10      	pop	{r4, pc}

000134c6 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   134c6:	b510      	push	{r4, lr}
   134c8:	f7fa fb64 	bl	db94 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   134cc:	2000      	movs	r0, #0
   134ce:	bd10      	pop	{r4, pc}

000134d0 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   134d0:	f7fa b8d4 	b.w	d67c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

000134d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
   134d4:	b510      	push	{r4, lr}
   134d6:	4604      	mov	r4, r0
   134d8:	2000      	movs	r0, #0
   134da:	8822      	ldrh	r2, [r4, #0]
   134dc:	b086      	sub	sp, #24
   134de:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
   134e2:	39ff      	subs	r1, #255	; 0xff
   134e4:	d008      	beq.n	134f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
   134e6:	a903      	add	r1, sp, #12
   134e8:	4610      	mov	r0, r2
   134ea:	f7fd fe91 	bl	11210 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   134ee:	b110      	cbz	r0, 134f6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
   134f0:	2002      	movs	r0, #2
   134f2:	b006      	add	sp, #24
   134f4:	bd10      	pop	{r4, pc}
   134f6:	9804      	ldr	r0, [sp, #16]
   134f8:	8921      	ldrh	r1, [r4, #8]
   134fa:	89a3      	ldrh	r3, [r4, #12]
   134fc:	8962      	ldrh	r2, [r4, #10]
   134fe:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   13502:	88e3      	ldrh	r3, [r4, #6]
   13504:	88a2      	ldrh	r2, [r4, #4]
   13506:	8861      	ldrh	r1, [r4, #2]
   13508:	f7fa f968 	bl	d7dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x160>
   1350c:	b108      	cbz	r0, 13512 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
   1350e:	2000      	movs	r0, #0
   13510:	e7ef      	b.n	134f2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   13512:	2030      	movs	r0, #48	; 0x30
   13514:	e7ed      	b.n	134f2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   13516:	f44f 71a4 	mov.w	r1, #328	; 0x148
   1351a:	4288      	cmp	r0, r1
   1351c:	d303      	bcc.n	13526 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x52>
   1351e:	f44f 6129 	mov.w	r1, #2704	; 0xa90
   13522:	4288      	cmp	r0, r1
   13524:	d300      	bcc.n	13528 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54>
   13526:	4608      	mov	r0, r1
   13528:	4770      	bx	lr
   1352a:	0741      	lsls	r1, r0, #29
   1352c:	d501      	bpl.n	13532 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5e>
   1352e:	2008      	movs	r0, #8
   13530:	4770      	bx	lr
   13532:	07c1      	lsls	r1, r0, #31
   13534:	d001      	beq.n	1353a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x66>
   13536:	2001      	movs	r0, #1
   13538:	4770      	bx	lr
   1353a:	0780      	lsls	r0, r0, #30
   1353c:	d501      	bpl.n	13542 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6e>
   1353e:	2002      	movs	r0, #2
   13540:	4770      	bx	lr
   13542:	2000      	movs	r0, #0
   13544:	4770      	bx	lr
   13546:	b510      	push	{r4, lr}
   13548:	2801      	cmp	r0, #1
   1354a:	d00b      	beq.n	13564 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x90>
   1354c:	2802      	cmp	r0, #2
   1354e:	d009      	beq.n	13564 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x90>
   13550:	2804      	cmp	r0, #4
   13552:	d006      	beq.n	13562 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x8e>
   13554:	2808      	cmp	r0, #8
   13556:	d004      	beq.n	13562 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x8e>
   13558:	f240 2163 	movw	r1, #611	; 0x263
   1355c:	2006      	movs	r0, #6
   1355e:	f7f0 fcef 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13562:	2003      	movs	r0, #3
   13564:	bd10      	pop	{r4, pc}
   13566:	b108      	cbz	r0, 1356c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
   13568:	2000      	movs	r0, #0
   1356a:	4770      	bx	lr
   1356c:	2001      	movs	r0, #1
   1356e:	4770      	bx	lr
   13570:	b50e      	push	{r1, r2, r3, lr}
   13572:	4669      	mov	r1, sp
   13574:	2002      	movs	r0, #2
   13576:	f7fd fc26 	bl	10dc6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   1357a:	b150      	cbz	r0, 13592 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xbe>
   1357c:	f240 114f 	movw	r1, #335	; 0x14f
   13580:	2039      	movs	r0, #57	; 0x39
   13582:	f7f0 fcdd 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13586:	9802      	ldr	r0, [sp, #8]
   13588:	f7fe ff33 	bl	123f2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1358c:	b108      	cbz	r0, 13592 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xbe>
   1358e:	2001      	movs	r0, #1
   13590:	bd0e      	pop	{r1, r2, r3, pc}
   13592:	4668      	mov	r0, sp
   13594:	f7f0 ff1a 	bl	43cc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   13598:	2800      	cmp	r0, #0
   1359a:	d0f4      	beq.n	13586 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xb2>
   1359c:	2000      	movs	r0, #0
   1359e:	bd0e      	pop	{r1, r2, r3, pc}
   135a0:	b570      	push	{r4, r5, r6, lr}
   135a2:	4604      	mov	r4, r0
   135a4:	f7fa faea 	bl	db7c <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   135a8:	4605      	mov	r5, r0
   135aa:	f7ff ffe1 	bl	13570 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x9c>
   135ae:	b160      	cbz	r0, 135ca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xf6>
   135b0:	b155      	cbz	r5, 135c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xf4>
   135b2:	f000 f9ed 	bl	13990 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4bc>
   135b6:	4604      	mov	r4, r0
   135b8:	f7fe fd6b 	bl	12092 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   135bc:	b960      	cbnz	r0, 135d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x104>
   135be:	4620      	mov	r0, r4
   135c0:	f7fe fd55 	bl	1206e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   135c4:	b108      	cbz	r0, 135ca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xf6>
   135c6:	e007      	b.n	135d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x104>
   135c8:	b134      	cbz	r4, 135d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x104>
   135ca:	f000 fa05 	bl	139d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x504>
   135ce:	b128      	cbz	r0, 135dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x108>
   135d0:	f7f5 ff28 	bl	9424 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
   135d4:	2801      	cmp	r0, #1
   135d6:	d001      	beq.n	135dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x108>
   135d8:	2000      	movs	r0, #0
   135da:	bd70      	pop	{r4, r5, r6, pc}
   135dc:	2001      	movs	r0, #1
   135de:	bd70      	pop	{r4, r5, r6, pc}
   135e0:	b570      	push	{r4, r5, r6, lr}
   135e2:	460c      	mov	r4, r1
   135e4:	4605      	mov	r5, r0
   135e6:	b112      	cbz	r2, 135ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x11a>
   135e8:	291f      	cmp	r1, #31
   135ea:	d80c      	bhi.n	13606 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x132>
   135ec:	e016      	b.n	1361c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x148>
   135ee:	f7f1 f9e1 	bl	49b4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   135f2:	42a0      	cmp	r0, r4
   135f4:	d201      	bcs.n	135fa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x126>
   135f6:	2007      	movs	r0, #7
   135f8:	bd70      	pop	{r4, r5, r6, pc}
   135fa:	4628      	mov	r0, r5
   135fc:	f7fe fd45 	bl	1208a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   13600:	b118      	cbz	r0, 1360a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x136>
   13602:	2c1f      	cmp	r4, #31
   13604:	d901      	bls.n	1360a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x136>
   13606:	2012      	movs	r0, #18
   13608:	bd70      	pop	{r4, r5, r6, pc}
   1360a:	4628      	mov	r0, r5
   1360c:	f7fe fd48 	bl	120a0 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   13610:	b130      	cbz	r0, 13620 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14c>
   13612:	4621      	mov	r1, r4
   13614:	4628      	mov	r0, r5
   13616:	f7fe fc92 	bl	11f3e <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   1361a:	b118      	cbz	r0, 13624 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x150>
   1361c:	2000      	movs	r0, #0
   1361e:	bd70      	pop	{r4, r5, r6, pc}
   13620:	2042      	movs	r0, #66	; 0x42
   13622:	bd70      	pop	{r4, r5, r6, pc}
   13624:	2045      	movs	r0, #69	; 0x45
   13626:	bd70      	pop	{r4, r5, r6, pc}
   13628:	b510      	push	{r4, lr}
   1362a:	4604      	mov	r4, r0
   1362c:	7840      	ldrb	r0, [r0, #1]
   1362e:	06c0      	lsls	r0, r0, #27
   13630:	d413      	bmi.n	1365a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x186>
   13632:	f7fa fb0b 	bl	dc4c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   13636:	0780      	lsls	r0, r0, #30
   13638:	d405      	bmi.n	13646 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x172>
   1363a:	7d20      	ldrb	r0, [r4, #20]
   1363c:	2802      	cmp	r0, #2
   1363e:	d029      	beq.n	13694 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1c0>
   13640:	7da0      	ldrb	r0, [r4, #22]
   13642:	2802      	cmp	r0, #2
   13644:	d026      	beq.n	13694 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1c0>
   13646:	f7fa fb01 	bl	dc4c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1364a:	0740      	lsls	r0, r0, #29
   1364c:	d405      	bmi.n	1365a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x186>
   1364e:	7d20      	ldrb	r0, [r4, #20]
   13650:	2803      	cmp	r0, #3
   13652:	d01f      	beq.n	13694 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1c0>
   13654:	7da0      	ldrb	r0, [r4, #22]
   13656:	2803      	cmp	r0, #3
   13658:	d01c      	beq.n	13694 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1c0>
   1365a:	7860      	ldrb	r0, [r4, #1]
   1365c:	07c0      	lsls	r0, r0, #31
   1365e:	d002      	beq.n	13666 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x192>
   13660:	f7fa face 	bl	dc00 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   13664:	b1b0      	cbz	r0, 13694 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1c0>
   13666:	7860      	ldrb	r0, [r4, #1]
   13668:	06c1      	lsls	r1, r0, #27
   1366a:	d405      	bmi.n	13678 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1a4>
   1366c:	0701      	lsls	r1, r0, #28
   1366e:	d503      	bpl.n	13678 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1a4>
   13670:	7d20      	ldrb	r0, [r4, #20]
   13672:	2802      	cmp	r0, #2
   13674:	d10e      	bne.n	13694 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1c0>
   13676:	e00f      	b.n	13698 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1c4>
   13678:	7d21      	ldrb	r1, [r4, #20]
   1367a:	2902      	cmp	r1, #2
   1367c:	d001      	beq.n	13682 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1ae>
   1367e:	7ea1      	ldrb	r1, [r4, #26]
   13680:	b941      	cbnz	r1, 13694 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1c0>
   13682:	0700      	lsls	r0, r0, #28
   13684:	d408      	bmi.n	13698 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1c4>
   13686:	f8d4 0005 	ldr.w	r0, [r4, #5]
   1368a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   1368e:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   13692:	d201      	bcs.n	13698 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1c4>
   13694:	2011      	movs	r0, #17
   13696:	bd10      	pop	{r4, pc}
   13698:	2000      	movs	r0, #0
   1369a:	bd10      	pop	{r4, pc}
   1369c:	b538      	push	{r3, r4, r5, lr}
   1369e:	4604      	mov	r4, r0
   136a0:	7800      	ldrb	r0, [r0, #0]
   136a2:	28ef      	cmp	r0, #239	; 0xef
   136a4:	d85c      	bhi.n	13760 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x28c>
   136a6:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   136aa:	f8ad 0000 	strh.w	r0, [sp]
   136ae:	9800      	ldr	r0, [sp, #0]
   136b0:	f000 fa66 	bl	13b80 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6ac>
   136b4:	b3a0      	cbz	r0, 13720 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24c>
   136b6:	7860      	ldrb	r0, [r4, #1]
   136b8:	0701      	lsls	r1, r0, #28
   136ba:	d40b      	bmi.n	136d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x200>
   136bc:	f8d4 1002 	ldr.w	r1, [r4, #2]
   136c0:	f8d4 3005 	ldr.w	r3, [r4, #5]
   136c4:	0a0a      	lsrs	r2, r1, #8
   136c6:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   136ca:	d849      	bhi.n	13760 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x28c>
   136cc:	2220      	movs	r2, #32
   136ce:	ebb2 2f11 	cmp.w	r2, r1, lsr #8
   136d2:	d845      	bhi.n	13760 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x28c>
   136d4:	7a61      	ldrb	r1, [r4, #9]
   136d6:	b319      	cbz	r1, 13720 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24c>
   136d8:	2907      	cmp	r1, #7
   136da:	d841      	bhi.n	13760 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x28c>
   136dc:	7aa1      	ldrb	r1, [r4, #10]
   136de:	b129      	cbz	r1, 136ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x218>
   136e0:	2901      	cmp	r1, #1
   136e2:	d003      	beq.n	136ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x218>
   136e4:	2902      	cmp	r1, #2
   136e6:	d001      	beq.n	136ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x218>
   136e8:	2903      	cmp	r1, #3
   136ea:	d139      	bne.n	13760 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x28c>
   136ec:	0742      	lsls	r2, r0, #29
   136ee:	d403      	bmi.n	136f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x224>
   136f0:	2902      	cmp	r1, #2
   136f2:	d001      	beq.n	136f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x224>
   136f4:	2903      	cmp	r1, #3
   136f6:	d105      	bne.n	13704 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   136f8:	7ae1      	ldrb	r1, [r4, #11]
   136fa:	b109      	cbz	r1, 13700 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22c>
   136fc:	2901      	cmp	r1, #1
   136fe:	d12f      	bne.n	13760 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x28c>
   13700:	0741      	lsls	r1, r0, #29
   13702:	d407      	bmi.n	13714 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x240>
   13704:	7ca1      	ldrb	r1, [r4, #18]
   13706:	b129      	cbz	r1, 13714 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x240>
   13708:	2901      	cmp	r1, #1
   1370a:	d003      	beq.n	13714 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x240>
   1370c:	2902      	cmp	r1, #2
   1370e:	d001      	beq.n	13714 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x240>
   13710:	2903      	cmp	r1, #3
   13712:	d125      	bne.n	13760 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x28c>
   13714:	06c1      	lsls	r1, r0, #27
   13716:	d504      	bpl.n	13722 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24e>
   13718:	7d20      	ldrb	r0, [r4, #20]
   1371a:	2801      	cmp	r0, #1
   1371c:	d120      	bne.n	13760 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x28c>
   1371e:	e01b      	b.n	13758 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x284>
   13720:	e01e      	b.n	13760 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x28c>
   13722:	7d21      	ldrb	r1, [r4, #20]
   13724:	2902      	cmp	r1, #2
   13726:	d10b      	bne.n	13740 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26c>
   13728:	07c1      	lsls	r1, r0, #31
   1372a:	d019      	beq.n	13760 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x28c>
   1372c:	0741      	lsls	r1, r0, #29
   1372e:	d417      	bmi.n	13760 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x28c>
   13730:	0701      	lsls	r1, r0, #28
   13732:	d515      	bpl.n	13760 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x28c>
   13734:	0641      	lsls	r1, r0, #25
   13736:	d413      	bmi.n	13760 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x28c>
   13738:	0681      	lsls	r1, r0, #26
   1373a:	d411      	bmi.n	13760 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x28c>
   1373c:	0781      	lsls	r1, r0, #30
   1373e:	d40f      	bmi.n	13760 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x28c>
   13740:	06c0      	lsls	r0, r0, #27
   13742:	d409      	bmi.n	13758 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x284>
   13744:	7da0      	ldrb	r0, [r4, #22]
   13746:	2801      	cmp	r0, #1
   13748:	d003      	beq.n	13752 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x27e>
   1374a:	2802      	cmp	r0, #2
   1374c:	d001      	beq.n	13752 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x27e>
   1374e:	2803      	cmp	r0, #3
   13750:	d106      	bne.n	13760 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x28c>
   13752:	7de0      	ldrb	r0, [r4, #23]
   13754:	280f      	cmp	r0, #15
   13756:	d803      	bhi.n	13760 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x28c>
   13758:	7e20      	ldrb	r0, [r4, #24]
   1375a:	b118      	cbz	r0, 13764 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x290>
   1375c:	2801      	cmp	r0, #1
   1375e:	d001      	beq.n	13764 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x290>
   13760:	2012      	movs	r0, #18
   13762:	bd38      	pop	{r3, r4, r5, pc}
   13764:	2000      	movs	r0, #0
   13766:	bd38      	pop	{r3, r4, r5, pc}
   13768:	28fb      	cmp	r0, #251	; 0xfb
   1376a:	d802      	bhi.n	13772 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x29e>
   1376c:	f5b1 6f29 	cmp.w	r1, #2704	; 0xa90
   13770:	d901      	bls.n	13776 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2a2>
   13772:	2011      	movs	r0, #17
   13774:	4770      	bx	lr
   13776:	2000      	movs	r0, #0
   13778:	4770      	bx	lr
   1377a:	381b      	subs	r0, #27
   1377c:	28e1      	cmp	r0, #225	; 0xe1
   1377e:	d206      	bcs.n	1378e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ba>
   13780:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   13784:	d303      	bcc.n	1378e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ba>
   13786:	f244 2090 	movw	r0, #17040	; 0x4290
   1378a:	4281      	cmp	r1, r0
   1378c:	d901      	bls.n	13792 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2be>
   1378e:	2012      	movs	r0, #18
   13790:	4770      	bx	lr
   13792:	2000      	movs	r0, #0
   13794:	4770      	bx	lr
   13796:	b510      	push	{r4, lr}
   13798:	4604      	mov	r4, r0
   1379a:	7800      	ldrb	r0, [r0, #0]
   1379c:	2801      	cmp	r0, #1
   1379e:	d009      	beq.n	137b4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e0>
   137a0:	f7f7 fd54 	bl	b24c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   137a4:	2805      	cmp	r0, #5
   137a6:	d003      	beq.n	137b0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2dc>
   137a8:	f7f7 fcca 	bl	b140 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
   137ac:	2800      	cmp	r0, #0
   137ae:	d000      	beq.n	137b2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2de>
   137b0:	200c      	movs	r0, #12
   137b2:	bd10      	pop	{r4, pc}
   137b4:	f7f5 fd86 	bl	92c4 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
   137b8:	b158      	cbz	r0, 137d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fe>
   137ba:	f7f5 fbfd 	bl	8fb8 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
   137be:	f7f5 fc67 	bl	9090 <sym_E357R5GSET4BZKCOLPRJE7KKKMWMTNVTPX35LJQ>
   137c2:	2800      	cmp	r0, #0
   137c4:	d1f5      	bne.n	137b2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2de>
   137c6:	88a1      	ldrh	r1, [r4, #4]
   137c8:	8860      	ldrh	r0, [r4, #2]
   137ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   137ce:	f7f7 bc47 	b.w	b060 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
   137d2:	2012      	movs	r0, #18
   137d4:	bd10      	pop	{r4, pc}
   137d6:	7802      	ldrb	r2, [r0, #0]
   137d8:	2a01      	cmp	r2, #1
   137da:	d001      	beq.n	137e0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x30c>
   137dc:	b1ba      	cbz	r2, 1380e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x33a>
   137de:	e018      	b.n	13812 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x33e>
   137e0:	7842      	ldrb	r2, [r0, #1]
   137e2:	b13a      	cbz	r2, 137f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x320>
   137e4:	2a01      	cmp	r2, #1
   137e6:	d005      	beq.n	137f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x320>
   137e8:	2a02      	cmp	r2, #2
   137ea:	d112      	bne.n	13812 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x33e>
   137ec:	b189      	cbz	r1, 13812 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x33e>
   137ee:	8881      	ldrh	r1, [r0, #4]
   137f0:	b179      	cbz	r1, 13812 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x33e>
   137f2:	e000      	b.n	137f6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x322>
   137f4:	b159      	cbz	r1, 1380e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x33a>
   137f6:	8841      	ldrh	r1, [r0, #2]
   137f8:	b149      	cbz	r1, 1380e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x33a>
   137fa:	8880      	ldrh	r0, [r0, #4]
   137fc:	b138      	cbz	r0, 1380e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x33a>
   137fe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   13802:	0049      	lsls	r1, r1, #1
   13804:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   13808:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
   1380c:	d201      	bcs.n	13812 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x33e>
   1380e:	2000      	movs	r0, #0
   13810:	4770      	bx	lr
   13812:	2012      	movs	r0, #18
   13814:	4770      	bx	lr
   13816:	b570      	push	{r4, r5, r6, lr}
   13818:	4614      	mov	r4, r2
   1381a:	460d      	mov	r5, r1
   1381c:	b108      	cbz	r0, 13822 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x34e>
   1381e:	2801      	cmp	r0, #1
   13820:	d10c      	bne.n	1383c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x368>
   13822:	2b02      	cmp	r3, #2
   13824:	d00c      	beq.n	13840 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x36c>
   13826:	4619      	mov	r1, r3
   13828:	4610      	mov	r0, r2
   1382a:	f7fa f89d 	bl	d968 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ec>
   1382e:	b178      	cbz	r0, 13850 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37c>
   13830:	4628      	mov	r0, r5
   13832:	f7fa f849 	bl	d8c8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24c>
   13836:	b158      	cbz	r0, 13850 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37c>
   13838:	42ac      	cmp	r4, r5
   1383a:	d90b      	bls.n	13854 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x380>
   1383c:	2012      	movs	r0, #18
   1383e:	bd70      	pop	{r4, r5, r6, pc}
   13840:	4610      	mov	r0, r2
   13842:	f7fa f885 	bl	d950 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2d4>
   13846:	b118      	cbz	r0, 13850 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37c>
   13848:	4628      	mov	r0, r5
   1384a:	f7fa f875 	bl	d938 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2bc>
   1384e:	e7f2      	b.n	13836 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x362>
   13850:	2030      	movs	r0, #48	; 0x30
   13852:	bd70      	pop	{r4, r5, r6, pc}
   13854:	2000      	movs	r0, #0
   13856:	bd70      	pop	{r4, r5, r6, pc}
   13858:	2801      	cmp	r0, #1
   1385a:	d002      	beq.n	13862 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38e>
   1385c:	b118      	cbz	r0, 13866 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x392>
   1385e:	2000      	movs	r0, #0
   13860:	4770      	bx	lr
   13862:	2002      	movs	r0, #2
   13864:	4770      	bx	lr
   13866:	2001      	movs	r0, #1
   13868:	4770      	bx	lr
   1386a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1386e:	4605      	mov	r5, r0
   13870:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   13874:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   13878:	4616      	mov	r6, r2
   1387a:	302c      	adds	r0, #44	; 0x2c
   1387c:	b111      	cbz	r1, 13884 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3b0>
   1387e:	f7f7 fbcf 	bl	b020 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>
   13882:	e001      	b.n	13888 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3b4>
   13884:	f7f5 fb5e 	bl	8f44 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   13888:	4680      	mov	r8, r0
   1388a:	2102      	movs	r1, #2
   1388c:	f7fd fd8f 	bl	113ae <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   13890:	4287      	cmp	r7, r0
   13892:	d200      	bcs.n	13896 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c2>
   13894:	4638      	mov	r0, r7
   13896:	4607      	mov	r7, r0
   13898:	2102      	movs	r1, #2
   1389a:	4640      	mov	r0, r8
   1389c:	f7fd fd87 	bl	113ae <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   138a0:	4284      	cmp	r4, r0
   138a2:	d200      	bcs.n	138a6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d2>
   138a4:	4620      	mov	r0, r4
   138a6:	8829      	ldrh	r1, [r5, #0]
   138a8:	8031      	strh	r1, [r6, #0]
   138aa:	2f1b      	cmp	r7, #27
   138ac:	d913      	bls.n	138d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
   138ae:	2ffb      	cmp	r7, #251	; 0xfb
   138b0:	d300      	bcc.n	138b4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e0>
   138b2:	27fb      	movs	r7, #251	; 0xfb
   138b4:	8077      	strh	r7, [r6, #2]
   138b6:	281b      	cmp	r0, #27
   138b8:	d90f      	bls.n	138da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x406>
   138ba:	28fb      	cmp	r0, #251	; 0xfb
   138bc:	d300      	bcc.n	138c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3ec>
   138be:	20fb      	movs	r0, #251	; 0xfb
   138c0:	80f0      	strh	r0, [r6, #6]
   138c2:	4640      	mov	r0, r8
   138c4:	f7ff fe27 	bl	13516 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
   138c8:	80b0      	strh	r0, [r6, #4]
   138ca:	4640      	mov	r0, r8
   138cc:	f7ff fe23 	bl	13516 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
   138d0:	8130      	strh	r0, [r6, #8]
   138d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   138d6:	271b      	movs	r7, #27
   138d8:	e7ec      	b.n	138b4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e0>
   138da:	201b      	movs	r0, #27
   138dc:	e7f0      	b.n	138c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3ec>
   138de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   138e2:	7890      	ldrb	r0, [r2, #2]
   138e4:	9e06      	ldr	r6, [sp, #24]
   138e6:	461d      	mov	r5, r3
   138e8:	4614      	mov	r4, r2
   138ea:	b908      	cbnz	r0, 138f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41c>
   138ec:	f7fa f9ae 	bl	dc4c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   138f0:	78e4      	ldrb	r4, [r4, #3]
   138f2:	4607      	mov	r7, r0
   138f4:	b914      	cbnz	r4, 138fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x428>
   138f6:	f7fa f9a9 	bl	dc4c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   138fa:	4604      	mov	r4, r0
   138fc:	b16f      	cbz	r7, 1391a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x446>
   138fe:	b164      	cbz	r4, 1391a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x446>
   13900:	4638      	mov	r0, r7
   13902:	f7ff fe12 	bl	1352a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
   13906:	4620      	mov	r0, r4
   13908:	f7ff fe0f 	bl	1352a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
   1390c:	b12f      	cbz	r7, 1391a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x446>
   1390e:	b124      	cbz	r4, 1391a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x446>
   13910:	702f      	strb	r7, [r5, #0]
   13912:	7034      	strb	r4, [r6, #0]
   13914:	2000      	movs	r0, #0
   13916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1391a:	2009      	movs	r0, #9
   1391c:	e7fb      	b.n	13916 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x442>
   1391e:	b510      	push	{r4, lr}
   13920:	f7fc fa0c 	bl	fd3c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
   13924:	b928      	cbnz	r0, 13932 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x45e>
   13926:	f7fc fa3f 	bl	fda8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
   1392a:	b910      	cbnz	r0, 13932 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x45e>
   1392c:	f7fc fa46 	bl	fdbc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   13930:	b108      	cbz	r0, 13936 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x462>
   13932:	2008      	movs	r0, #8
   13934:	bd10      	pop	{r4, pc}
   13936:	f7fc f9d6 	bl	fce6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   1393a:	b940      	cbnz	r0, 1394e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47a>
   1393c:	f7fc f9dd 	bl	fcfa <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   13940:	b928      	cbnz	r0, 1394e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47a>
   13942:	f7fc f9f1 	bl	fd28 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   13946:	b910      	cbnz	r0, 1394e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47a>
   13948:	f7fc fa02 	bl	fd50 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   1394c:	b108      	cbz	r0, 13952 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
   1394e:	2004      	movs	r0, #4
   13950:	bd10      	pop	{r4, pc}
   13952:	f240 519c 	movw	r1, #1436	; 0x59c
   13956:	2039      	movs	r0, #57	; 0x39
   13958:	f7f0 faf2 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1395c:	b510      	push	{r4, lr}
   1395e:	f7fa f96f 	bl	dc40 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   13962:	f3c0 1040 	ubfx	r0, r0, #5, #1
   13966:	bd10      	pop	{r4, pc}
   13968:	b508      	push	{r3, lr}
   1396a:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
   1396e:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
   13972:	f88d 0000 	strb.w	r0, [sp]
   13976:	9800      	ldr	r0, [sp, #0]
   13978:	9000      	str	r0, [sp, #0]
   1397a:	f89d 0000 	ldrb.w	r0, [sp]
   1397e:	1e40      	subs	r0, r0, #1
   13980:	4208      	tst	r0, r1
   13982:	d003      	beq.n	1398c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4b8>
   13984:	2904      	cmp	r1, #4
   13986:	d001      	beq.n	1398c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4b8>
   13988:	2001      	movs	r0, #1
   1398a:	bd08      	pop	{r3, pc}
   1398c:	2000      	movs	r0, #0
   1398e:	bd08      	pop	{r3, pc}
   13990:	b510      	push	{r4, lr}
   13992:	2102      	movs	r1, #2
   13994:	2000      	movs	r0, #0
   13996:	f7fd fa0c 	bl	10db2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1399a:	0004      	movs	r4, r0
   1399c:	d108      	bne.n	139b0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4dc>
   1399e:	2200      	movs	r2, #0
   139a0:	2102      	movs	r1, #2
   139a2:	4610      	mov	r0, r2
   139a4:	f7fd f9fb 	bl	10d9e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
   139a8:	0004      	movs	r4, r0
   139aa:	d003      	beq.n	139b4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4e0>
   139ac:	f7fe f9b3 	bl	11d16 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
   139b0:	4620      	mov	r0, r4
   139b2:	bd10      	pop	{r4, pc}
   139b4:	f240 2135 	movw	r1, #565	; 0x235
   139b8:	2039      	movs	r0, #57	; 0x39
   139ba:	f7f0 fac1 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   139be:	b510      	push	{r4, lr}
   139c0:	f000 f80a 	bl	139d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x504>
   139c4:	b930      	cbnz	r0, 139d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x500>
   139c6:	f7ff fdd3 	bl	13570 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x9c>
   139ca:	b918      	cbnz	r0, 139d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x500>
   139cc:	f7f5 fd08 	bl	93e0 <sym_YAXRHPGUPFCJO4WSKQPZEO436Y5T46SXRHLZXQQ>
   139d0:	2800      	cmp	r0, #0
   139d2:	d000      	beq.n	139d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x502>
   139d4:	2001      	movs	r0, #1
   139d6:	bd10      	pop	{r4, pc}
   139d8:	b510      	push	{r4, lr}
   139da:	f7f7 fc37 	bl	b24c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   139de:	2804      	cmp	r0, #4
   139e0:	d003      	beq.n	139ea <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x516>
   139e2:	2805      	cmp	r0, #5
   139e4:	d001      	beq.n	139ea <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x516>
   139e6:	2000      	movs	r0, #0
   139e8:	bd10      	pop	{r4, pc}
   139ea:	2001      	movs	r0, #1
   139ec:	bd10      	pop	{r4, pc}
   139ee:	b570      	push	{r4, r5, r6, lr}
   139f0:	4605      	mov	r5, r0
   139f2:	f7fe fb55 	bl	120a0 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   139f6:	b170      	cbz	r0, 13a16 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x542>
   139f8:	4628      	mov	r0, r5
   139fa:	f7fe fcfa 	bl	123f2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   139fe:	2800      	cmp	r0, #0
   13a00:	d008      	beq.n	13a14 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x540>
   13a02:	4628      	mov	r0, r5
   13a04:	f7fe fcf2 	bl	123ec <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   13a08:	4604      	mov	r4, r0
   13a0a:	4628      	mov	r0, r5
   13a0c:	f7fe fcc4 	bl	12398 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   13a10:	b118      	cbz	r0, 13a1a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x546>
   13a12:	200c      	movs	r0, #12
   13a14:	bd70      	pop	{r4, r5, r6, pc}
   13a16:	2042      	movs	r0, #66	; 0x42
   13a18:	bd70      	pop	{r4, r5, r6, pc}
   13a1a:	b164      	cbz	r4, 13a36 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x562>
   13a1c:	8820      	ldrh	r0, [r4, #0]
   13a1e:	f7f1 f993 	bl	4d48 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   13a22:	8820      	ldrh	r0, [r4, #0]
   13a24:	2101      	movs	r1, #1
   13a26:	f7f0 fd43 	bl	44b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   13a2a:	b120      	cbz	r0, 13a36 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x562>
   13a2c:	f241 41ca 	movw	r1, #5322	; 0x14ca
   13a30:	2039      	movs	r0, #57	; 0x39
   13a32:	f7f0 fa85 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13a36:	2000      	movs	r0, #0
   13a38:	bd70      	pop	{r4, r5, r6, pc}
   13a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13a3e:	b086      	sub	sp, #24
   13a40:	4604      	mov	r4, r0
   13a42:	8800      	ldrh	r0, [r0, #0]
   13a44:	4669      	mov	r1, sp
   13a46:	f7fd fbe3 	bl	11210 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   13a4a:	2800      	cmp	r0, #0
   13a4c:	d15d      	bne.n	13b0a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x636>
   13a4e:	9801      	ldr	r0, [sp, #4]
   13a50:	f89d 1000 	ldrb.w	r1, [sp]
   13a54:	3078      	adds	r0, #120	; 0x78
   13a56:	2900      	cmp	r1, #0
   13a58:	9901      	ldr	r1, [sp, #4]
   13a5a:	d00d      	beq.n	13a78 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5a4>
   13a5c:	f891 11f8 	ldrb.w	r1, [r1, #504]	; 0x1f8
   13a60:	f88d 1010 	strb.w	r1, [sp, #16]
   13a64:	9904      	ldr	r1, [sp, #16]
   13a66:	9104      	str	r1, [sp, #16]
   13a68:	f89d 1010 	ldrb.w	r1, [sp, #16]
   13a6c:	f88d 1008 	strb.w	r1, [sp, #8]
   13a70:	7bc1      	ldrb	r1, [r0, #15]
   13a72:	0689      	lsls	r1, r1, #26
   13a74:	d419      	bmi.n	13aaa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5d6>
   13a76:	e00f      	b.n	13a98 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c4>
   13a78:	f891 11a2 	ldrb.w	r1, [r1, #418]	; 0x1a2
   13a7c:	f88d 1010 	strb.w	r1, [sp, #16]
   13a80:	9904      	ldr	r1, [sp, #16]
   13a82:	9104      	str	r1, [sp, #16]
   13a84:	f89d 1010 	ldrb.w	r1, [sp, #16]
   13a88:	f88d 1008 	strb.w	r1, [sp, #8]
   13a8c:	7b81      	ldrb	r1, [r0, #14]
   13a8e:	291d      	cmp	r1, #29
   13a90:	d00b      	beq.n	13aaa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5d6>
   13a92:	e001      	b.n	13a98 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c4>
   13a94:	2101      	movs	r1, #1
   13a96:	e000      	b.n	13a9a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c6>
   13a98:	2100      	movs	r1, #0
   13a9a:	f88d 100c 	strb.w	r1, [sp, #12]
   13a9e:	2105      	movs	r1, #5
   13aa0:	304e      	adds	r0, #78	; 0x4e
   13aa2:	f7ff f852 	bl	12b4a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
   13aa6:	b128      	cbz	r0, 13ab4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5e0>
   13aa8:	e007      	b.n	13aba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5e6>
   13aaa:	f89d 1008 	ldrb.w	r1, [sp, #8]
   13aae:	2900      	cmp	r1, #0
   13ab0:	d1f2      	bne.n	13a98 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c4>
   13ab2:	e7ef      	b.n	13a94 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c0>
   13ab4:	f89d 000c 	ldrb.w	r0, [sp, #12]
   13ab8:	b330      	cbz	r0, 13b08 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x634>
   13aba:	8921      	ldrh	r1, [r4, #8]
   13abc:	88e0      	ldrh	r0, [r4, #6]
   13abe:	f7ff fe5c 	bl	1377a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2a6>
   13ac2:	2800      	cmp	r0, #0
   13ac4:	d121      	bne.n	13b0a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x636>
   13ac6:	88a1      	ldrh	r1, [r4, #4]
   13ac8:	8860      	ldrh	r0, [r4, #2]
   13aca:	f7ff fe56 	bl	1377a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2a6>
   13ace:	2800      	cmp	r0, #0
   13ad0:	d11b      	bne.n	13b0a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x636>
   13ad2:	8921      	ldrh	r1, [r4, #8]
   13ad4:	88e0      	ldrh	r0, [r4, #6]
   13ad6:	f7ff fe47 	bl	13768 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x294>
   13ada:	2800      	cmp	r0, #0
   13adc:	d115      	bne.n	13b0a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x636>
   13ade:	88a1      	ldrh	r1, [r4, #4]
   13ae0:	8860      	ldrh	r0, [r4, #2]
   13ae2:	f7ff fe41 	bl	13768 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x294>
   13ae6:	0006      	movs	r6, r0
   13ae8:	d10f      	bne.n	13b0a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x636>
   13aea:	f89d 0000 	ldrb.w	r0, [sp]
   13aee:	9f01      	ldr	r7, [sp, #4]
   13af0:	b170      	cbz	r0, 13b10 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x63c>
   13af2:	f507 75da 	add.w	r5, r7, #436	; 0x1b4
   13af6:	f04f 0801 	mov.w	r8, #1
   13afa:	f885 8001 	strb.w	r8, [r5, #1]
   13afe:	f89d 0008 	ldrb.w	r0, [sp, #8]
   13b02:	b140      	cbz	r0, 13b16 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x642>
   13b04:	263a      	movs	r6, #58	; 0x3a
   13b06:	e037      	b.n	13b78 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a4>
   13b08:	201a      	movs	r0, #26
   13b0a:	b006      	add	sp, #24
   13b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13b10:	f507 759b 	add.w	r5, r7, #310	; 0x136
   13b14:	e7ef      	b.n	13af6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x622>
   13b16:	f89d 0000 	ldrb.w	r0, [sp]
   13b1a:	f7ff fd24 	bl	13566 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x92>
   13b1e:	4601      	mov	r1, r0
   13b20:	aa02      	add	r2, sp, #8
   13b22:	4638      	mov	r0, r7
   13b24:	f7ff fea1 	bl	1386a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x396>
   13b28:	8861      	ldrh	r1, [r4, #2]
   13b2a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   13b2e:	4281      	cmp	r1, r0
   13b30:	d200      	bcs.n	13b34 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x660>
   13b32:	4608      	mov	r0, r1
   13b34:	80e8      	strh	r0, [r5, #6]
   13b36:	88a1      	ldrh	r1, [r4, #4]
   13b38:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   13b3c:	4281      	cmp	r1, r0
   13b3e:	d200      	bcs.n	13b42 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x66e>
   13b40:	4608      	mov	r0, r1
   13b42:	8128      	strh	r0, [r5, #8]
   13b44:	88e2      	ldrh	r2, [r4, #6]
   13b46:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   13b4a:	428a      	cmp	r2, r1
   13b4c:	d200      	bcs.n	13b50 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x67c>
   13b4e:	4611      	mov	r1, r2
   13b50:	8069      	strh	r1, [r5, #2]
   13b52:	8922      	ldrh	r2, [r4, #8]
   13b54:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   13b58:	428a      	cmp	r2, r1
   13b5a:	d200      	bcs.n	13b5e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x68a>
   13b5c:	4611      	mov	r1, r2
   13b5e:	f640 0248 	movw	r2, #2120	; 0x848
   13b62:	80a9      	strh	r1, [r5, #4]
   13b64:	4291      	cmp	r1, r2
   13b66:	d300      	bcc.n	13b6a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x696>
   13b68:	4611      	mov	r1, r2
   13b6a:	80a9      	strh	r1, [r5, #4]
   13b6c:	4290      	cmp	r0, r2
   13b6e:	d200      	bcs.n	13b72 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x69e>
   13b70:	4602      	mov	r2, r0
   13b72:	812a      	strh	r2, [r5, #8]
   13b74:	f885 8000 	strb.w	r8, [r5]
   13b78:	2000      	movs	r0, #0
   13b7a:	7068      	strb	r0, [r5, #1]
   13b7c:	4630      	mov	r0, r6
   13b7e:	e7c4      	b.n	13b0a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x636>
   13b80:	b2c0      	uxtb	r0, r0
   13b82:	06c1      	lsls	r1, r0, #27
   13b84:	d415      	bmi.n	13bb2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6de>
   13b86:	0681      	lsls	r1, r0, #26
   13b88:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   13b8c:	d503      	bpl.n	13b96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6c2>
   13b8e:	bb21      	cbnz	r1, 13bda <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x706>
   13b90:	0781      	lsls	r1, r0, #30
   13b92:	d422      	bmi.n	13bda <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x706>
   13b94:	e001      	b.n	13b9a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6c6>
   13b96:	2900      	cmp	r1, #0
   13b98:	d1fa      	bne.n	13b90 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6bc>
   13b9a:	0701      	lsls	r1, r0, #28
   13b9c:	d51b      	bpl.n	13bd6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x702>
   13b9e:	07c1      	lsls	r1, r0, #31
   13ba0:	d01b      	beq.n	13bda <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x706>
   13ba2:	0781      	lsls	r1, r0, #30
   13ba4:	d419      	bmi.n	13bda <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x706>
   13ba6:	0641      	lsls	r1, r0, #25
   13ba8:	d417      	bmi.n	13bda <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x706>
   13baa:	0741      	lsls	r1, r0, #29
   13bac:	d415      	bmi.n	13bda <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x706>
   13bae:	0680      	lsls	r0, r0, #26
   13bb0:	e00f      	b.n	13bd2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6fe>
   13bb2:	0641      	lsls	r1, r0, #25
   13bb4:	d411      	bmi.n	13bda <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x706>
   13bb6:	0681      	lsls	r1, r0, #26
   13bb8:	d40f      	bmi.n	13bda <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x706>
   13bba:	07c1      	lsls	r1, r0, #31
   13bbc:	ea4f 7180 	mov.w	r1, r0, lsl #30
   13bc0:	d004      	beq.n	13bcc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6f8>
   13bc2:	2900      	cmp	r1, #0
   13bc4:	db02      	blt.n	13bcc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6f8>
   13bc6:	0740      	lsls	r0, r0, #29
   13bc8:	d405      	bmi.n	13bd6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x702>
   13bca:	e006      	b.n	13bda <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x706>
   13bcc:	0701      	lsls	r1, r0, #28
   13bce:	d404      	bmi.n	13bda <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x706>
   13bd0:	0740      	lsls	r0, r0, #29
   13bd2:	2800      	cmp	r0, #0
   13bd4:	db01      	blt.n	13bda <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x706>
   13bd6:	2001      	movs	r0, #1
   13bd8:	4770      	bx	lr
   13bda:	2000      	movs	r0, #0
   13bdc:	4770      	bx	lr
   13bde:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   13be0:	f7ff fefa 	bl	139d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x504>
   13be4:	b110      	cbz	r0, 13bec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x718>
   13be6:	f7f5 fc25 	bl	9434 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   13bea:	b990      	cbnz	r0, 13c12 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x73e>
   13bec:	4669      	mov	r1, sp
   13bee:	2002      	movs	r0, #2
   13bf0:	f7fd f8e9 	bl	10dc6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   13bf4:	b178      	cbz	r0, 13c16 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x742>
   13bf6:	f240 116d 	movw	r1, #365	; 0x16d
   13bfa:	2039      	movs	r0, #57	; 0x39
   13bfc:	f7f0 f9a0 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13c00:	9c02      	ldr	r4, [sp, #8]
   13c02:	4620      	mov	r0, r4
   13c04:	f7fe fbf5 	bl	123f2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   13c08:	b128      	cbz	r0, 13c16 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x742>
   13c0a:	4620      	mov	r0, r4
   13c0c:	f7fe fab1 	bl	12172 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   13c10:	b108      	cbz	r0, 13c16 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x742>
   13c12:	2001      	movs	r0, #1
   13c14:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   13c16:	4668      	mov	r0, sp
   13c18:	f7f0 fbd8 	bl	43cc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   13c1c:	2800      	cmp	r0, #0
   13c1e:	d0ef      	beq.n	13c00 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x72c>
   13c20:	2000      	movs	r0, #0
   13c22:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00013c24 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
   13c24:	6802      	ldr	r2, [r0, #0]
   13c26:	b912      	cbnz	r2, 13c2e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
   13c28:	6001      	str	r1, [r0, #0]
   13c2a:	4770      	bx	lr
   13c2c:	4602      	mov	r2, r0
   13c2e:	6850      	ldr	r0, [r2, #4]
   13c30:	b108      	cbz	r0, 13c36 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
   13c32:	428a      	cmp	r2, r1
   13c34:	d1fa      	bne.n	13c2c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
   13c36:	428a      	cmp	r2, r1
   13c38:	d0f7      	beq.n	13c2a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
   13c3a:	6051      	str	r1, [r2, #4]
   13c3c:	4770      	bx	lr
   13c3e:	b510      	push	{r4, lr}
   13c40:	f7f3 ff0c 	bl	7a5c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
   13c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13c48:	f7f9 bfe0 	b.w	dc0c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xc>
   13c4c:	b510      	push	{r4, lr}
   13c4e:	f7f5 f8e1 	bl	8e14 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   13c52:	b108      	cbz	r0, 13c58 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x34>
   13c54:	21d9      	movs	r1, #217	; 0xd9
   13c56:	e003      	b.n	13c60 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3c>
   13c58:	f7f3 ff10 	bl	7a7c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   13c5c:	b118      	cbz	r0, 13c66 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x42>
   13c5e:	21de      	movs	r1, #222	; 0xde
   13c60:	2001      	movs	r0, #1
   13c62:	f7f0 f96d 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13c6a:	2002      	movs	r0, #2
   13c6c:	f7fd b87d 	b.w	10d6a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   13c70:	b510      	push	{r4, lr}
   13c72:	4604      	mov	r4, r0
   13c74:	e002      	b.n	13c7c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x58>
   13c76:	6820      	ldr	r0, [r4, #0]
   13c78:	4780      	blx	r0
   13c7a:	6864      	ldr	r4, [r4, #4]
   13c7c:	2c00      	cmp	r4, #0
   13c7e:	d1fa      	bne.n	13c76 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x52>
   13c80:	bd10      	pop	{r4, pc}
   13c82:	b510      	push	{r4, lr}
   13c84:	f7f5 fab4 	bl	91f0 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>
   13c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13c8c:	f7f9 bfca 	b.w	dc24 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>
   13c90:	b510      	push	{r4, lr}
   13c92:	f7f7 f94d 	bl	af30 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
   13c96:	b120      	cbz	r0, 13ca2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x7e>
   13c98:	f240 111d 	movw	r1, #285	; 0x11d
   13c9c:	2001      	movs	r0, #1
   13c9e:	f7f0 f94f 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13ca2:	f7f5 fac9 	bl	9238 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
   13ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13caa:	f7f9 bc0d 	b.w	d4c8 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>

00013cae <sym_YF4J4DGFDTHAWVS7CGH7Q6ZE54T3BMAUQX7A5ZA>:
   13cae:	b510      	push	{r4, lr}
   13cb0:	2101      	movs	r1, #1
   13cb2:	71c1      	strb	r1, [r0, #7]
   13cb4:	7181      	strb	r1, [r0, #6]
   13cb6:	8081      	strh	r1, [r0, #4]
   13cb8:	4604      	mov	r4, r0
   13cba:	2104      	movs	r1, #4
   13cbc:	f7f0 f9bc 	bl	4038 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
   13cc0:	2800      	cmp	r0, #0
   13cc2:	d102      	bne.n	13cca <sym_YF4J4DGFDTHAWVS7CGH7Q6ZE54T3BMAUQX7A5ZA+0x1c>
   13cc4:	6820      	ldr	r0, [r4, #0]
   13cc6:	1c40      	adds	r0, r0, #1
   13cc8:	6020      	str	r0, [r4, #0]
   13cca:	bd10      	pop	{r4, pc}

00013ccc <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   13ccc:	f7ef bca8 	b.w	3620 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   13cd0:	000b0001 	.word	0x000b0001
   13cd4:	000a0002 	.word	0x000a0002
   13cd8:	00090005 	.word	0x00090005
   13cdc:	0008000a 	.word	0x0008000a
   13ce0:	00070014 	.word	0x00070014
   13ce4:	0006001e 	.word	0x0006001e
   13ce8:	00050032 	.word	0x00050032
   13cec:	0004004b 	.word	0x0004004b
   13cf0:	00030064 	.word	0x00030064
   13cf4:	00020096 	.word	0x00020096
   13cf8:	000100fa 	.word	0x000100fa
   13cfc:	000001f4 	.word	0x000001f4

00013d00 <sym_HDXV6XMLHCLB5RJEPHSKKLJJM3TFLHYSQSNRE7Y>:
   13d00:	68c8      	ldr	r0, [r1, #12]
   13d02:	f7fd b9c0 	b.w	11086 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

00013d06 <sym_W7HPZT4ZZWPRGP66GDZI4KM3L4VPFAYQTFZ7HRI>:
   13d06:	4770      	bx	lr

00013d08 <sym_CHKVBDUTUU4O3LETUIMPAGLWTVUWNF36L7OTJNI>:
   13d08:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
   13d0c:	b108      	cbz	r0, 13d12 <sym_CHKVBDUTUU4O3LETUIMPAGLWTVUWNF36L7OTJNI+0xa>
   13d0e:	2000      	movs	r0, #0
   13d10:	4770      	bx	lr
   13d12:	2001      	movs	r0, #1
   13d14:	4770      	bx	lr

00013d16 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   13d16:	b510      	push	{r4, lr}
   13d18:	f7fa fea8 	bl	ea6c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   13d1c:	f7fa fa7c 	bl	e218 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   13d20:	f7fa f878 	bl	de14 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   13d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13d28:	f7fa b992 	b.w	e050 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00013d2c <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
   13d2c:	b510      	push	{r4, lr}
   13d2e:	f7ef ff65 	bl	3bfc <mpsl_fem_lna_configuration_clear>
   13d32:	2800      	cmp	r0, #0
   13d34:	bf14      	ite	ne
   13d36:	f1b0 3fff 	cmpne.w	r0, #4294967295	; 0xffffffff
   13d3a:	bd10      	popeq	{r4, pc}
   13d3c:	f04f 0150 	mov.w	r1, #80	; 0x50
   13d40:	f04f 0040 	mov.w	r0, #64	; 0x40
   13d44:	f7f0 f8fc 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00013d48 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
   13d48:	b510      	push	{r4, lr}
   13d4a:	f7ef ff63 	bl	3c14 <mpsl_fem_pa_configuration_clear>
   13d4e:	2800      	cmp	r0, #0
   13d50:	bf14      	ite	ne
   13d52:	f1b0 3fff 	cmpne.w	r0, #4294967295	; 0xffffffff
   13d56:	bd10      	popeq	{r4, pc}
   13d58:	f04f 0149 	mov.w	r1, #73	; 0x49
   13d5c:	f04f 0040 	mov.w	r0, #64	; 0x40
   13d60:	f7f0 f8ee 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00013d64 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
   13d64:	b510      	push	{r4, lr}
   13d66:	f7ef ff43 	bl	3bf0 <mpsl_fem_disable>
   13d6a:	2800      	cmp	r0, #0
   13d6c:	bf14      	ite	ne
   13d6e:	f1b0 3fff 	cmpne.w	r0, #4294967295	; 0xffffffff
   13d72:	bd10      	popeq	{r4, pc}
   13d74:	f04f 0157 	mov.w	r1, #87	; 0x57
   13d78:	f04f 0040 	mov.w	r0, #64	; 0x40
   13d7c:	f7f0 f8e0 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00013d80 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
   13d80:	b510      	push	{r4, lr}
   13d82:	2100      	movs	r1, #0
   13d84:	4608      	mov	r0, r1
   13d86:	f7ef ff3f 	bl	3c08 <mpsl_fem_lna_configuration_set>
   13d8a:	2800      	cmp	r0, #0
   13d8c:	bf0c      	ite	eq
   13d8e:	2001      	moveq	r0, #1
   13d90:	2000      	movne	r0, #0
   13d92:	bd10      	pop	{r4, pc}

00013d94 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
   13d94:	b508      	push	{r3, lr}
   13d96:	4668      	mov	r0, sp
   13d98:	f7ef ff48 	bl	3c2c <mpsl_fem_pa_is_configured>
   13d9c:	f89d 0000 	ldrb.w	r0, [sp]
   13da0:	2800      	cmp	r0, #0
   13da2:	bf18      	it	ne
   13da4:	2001      	movne	r0, #1
   13da6:	bd08      	pop	{r3, pc}

00013da8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
   13da8:	2801      	cmp	r0, #1
   13daa:	bf04      	itt	eq
   13dac:	2028      	moveq	r0, #40	; 0x28
   13dae:	4770      	bxeq	lr
   13db0:	2802      	cmp	r0, #2
   13db2:	bf04      	itt	eq
   13db4:	2018      	moveq	r0, #24
   13db6:	4770      	bxeq	lr
   13db8:	2804      	cmp	r0, #4
   13dba:	bf12      	itee	ne
   13dbc:	2808      	cmpne	r0, #8
   13dbe:	f44f 70a8 	moveq.w	r0, #336	; 0x150
   13dc2:	4770      	bxeq	lr
   13dc4:	b510      	push	{r4, lr}
   13dc6:	f640 3141 	movw	r1, #2881	; 0xb41
   13dca:	203e      	movs	r0, #62	; 0x3e
   13dcc:	f7f0 f8b8 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00013dd0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
   13dd0:	2801      	cmp	r0, #1
   13dd2:	bf04      	itt	eq
   13dd4:	f641 6014 	movweq	r0, #7700	; 0x1e14
   13dd8:	4770      	bxeq	lr
   13dda:	2802      	cmp	r0, #2
   13ddc:	bf04      	itt	eq
   13dde:	f241 1030 	movweq	r0, #4400	; 0x1130
   13de2:	4770      	bxeq	lr
   13de4:	2804      	cmp	r0, #4
   13de6:	bf04      	itt	eq
   13de8:	f645 70b4 	movweq	r0, #24500	; 0x5fb4
   13dec:	4770      	bxeq	lr
   13dee:	2808      	cmp	r0, #8
   13df0:	bf04      	itt	eq
   13df2:	f247 303c 	movweq	r0, #29500	; 0x733c
   13df6:	4770      	bxeq	lr
   13df8:	b510      	push	{r4, lr}
   13dfa:	f640 3155 	movw	r1, #2901	; 0xb55
   13dfe:	203e      	movs	r0, #62	; 0x3e
   13e00:	f7f0 f89e 	bl	3f40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00013e04 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
   13e04:	b570      	push	{r4, r5, r6, lr}
   13e06:	4605      	mov	r5, r0
   13e08:	4614      	mov	r4, r2
   13e0a:	4608      	mov	r0, r1
   13e0c:	f7ff ffe0 	bl	13dd0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   13e10:	eb05 0145 	add.w	r1, r5, r5, lsl #1
   13e14:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
   13e18:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
   13e1c:	4620      	mov	r0, r4
   13e1e:	2c01      	cmp	r4, #1
   13e20:	bf1a      	itte	ne
   13e22:	2802      	cmpne	r0, #2
   13e24:	f64e 2060 	movwne	r0, #60000	; 0xea60
   13e28:	f7ff ffd2 	bleq	13dd0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   13e2c:	4428      	add	r0, r5
   13e2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   13e32:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   13e36:	fbb0 f5f1 	udiv	r5, r0, r1
   13e3a:	4620      	mov	r0, r4
   13e3c:	f7ff ffb4 	bl	13da8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   13e40:	4428      	add	r0, r5
   13e42:	1d40      	adds	r0, r0, #5
   13e44:	bd70      	pop	{r4, r5, r6, pc}

00013e46 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
   13e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13e4a:	4607      	mov	r7, r0
   13e4c:	461e      	mov	r6, r3
   13e4e:	460d      	mov	r5, r1
   13e50:	4614      	mov	r4, r2
   13e52:	4610      	mov	r0, r2
   13e54:	2a01      	cmp	r2, #1
   13e56:	bf1a      	itte	ne
   13e58:	2802      	cmpne	r0, #2
   13e5a:	f64e 2060 	movwne	r0, #60000	; 0xea60
   13e5e:	f7ff ffb7 	bleq	13dd0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   13e62:	eb07 0147 	add.w	r1, r7, r7, lsl #1
   13e66:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
   13e6a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   13e6e:	2d02      	cmp	r5, #2
   13e70:	bf08      	it	eq
   13e72:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
   13e76:	d009      	beq.n	13e8c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x46>
   13e78:	2d01      	cmp	r5, #1
   13e7a:	bf08      	it	eq
   13e7c:	f240 51dc 	movweq	r1, #1500	; 0x5dc
   13e80:	d004      	beq.n	13e8c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x46>
   13e82:	2d04      	cmp	r5, #4
   13e84:	bf0c      	ite	eq
   13e86:	2100      	moveq	r1, #0
   13e88:	f241 71d4 	movwne	r1, #6100	; 0x17d4
   13e8c:	4408      	add	r0, r1
   13e8e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   13e92:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   13e96:	fbb0 f5f1 	udiv	r5, r0, r1
   13e9a:	4620      	mov	r0, r4
   13e9c:	f7ff ff84 	bl	13da8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   13ea0:	4428      	add	r0, r5
   13ea2:	4430      	add	r0, r6
   13ea4:	1d40      	adds	r0, r0, #5
   13ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013eaa <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   13eaa:	b510      	push	{r4, lr}
   13eac:	4604      	mov	r4, r0
   13eae:	4608      	mov	r0, r1
   13eb0:	f7ff ff8e 	bl	13dd0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   13eb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   13eb8:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   13ebc:	fbb0 f0f1 	udiv	r0, r0, r1
   13ec0:	1a20      	subs	r0, r4, r0
   13ec2:	1e80      	subs	r0, r0, #2
   13ec4:	bd10      	pop	{r4, pc}

00013ec6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   13ec6:	b510      	push	{r4, lr}
   13ec8:	4604      	mov	r4, r0
   13eca:	4608      	mov	r0, r1
   13ecc:	f7ff ff80 	bl	13dd0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   13ed0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   13ed4:	fbb0 f0f1 	udiv	r0, r0, r1
   13ed8:	1a20      	subs	r0, r4, r0
   13eda:	bd10      	pop	{r4, pc}

00013edc <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   13edc:	2902      	cmp	r1, #2
   13ede:	bf08      	it	eq
   13ee0:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
   13ee4:	d009      	beq.n	13efa <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1e>
   13ee6:	2901      	cmp	r1, #1
   13ee8:	bf08      	it	eq
   13eea:	f240 51dc 	movweq	r1, #1500	; 0x5dc
   13eee:	d004      	beq.n	13efa <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1e>
   13ef0:	2904      	cmp	r1, #4
   13ef2:	bf0c      	ite	eq
   13ef4:	2100      	moveq	r1, #0
   13ef6:	f241 71d4 	movwne	r1, #6100	; 0x17d4
   13efa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13efe:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   13f02:	fbb1 f1f2 	udiv	r1, r1, r2
   13f06:	4408      	add	r0, r1
   13f08:	1e80      	subs	r0, r0, #2
   13f0a:	4770      	bx	lr

00013f0c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   13f0c:	2902      	cmp	r1, #2
   13f0e:	bf08      	it	eq
   13f10:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
   13f14:	d009      	beq.n	13f2a <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x1e>
   13f16:	2901      	cmp	r1, #1
   13f18:	bf08      	it	eq
   13f1a:	f240 51dc 	movweq	r1, #1500	; 0x5dc
   13f1e:	d004      	beq.n	13f2a <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x1e>
   13f20:	2904      	cmp	r1, #4
   13f22:	bf0c      	ite	eq
   13f24:	2100      	moveq	r1, #0
   13f26:	f241 71d4 	movwne	r1, #6100	; 0x17d4
   13f2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13f2e:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   13f32:	fbb1 f1f2 	udiv	r1, r1, r2
   13f36:	4408      	add	r0, r1
   13f38:	4770      	bx	lr

00013f3a <sym_EYCTNYR4EGC7WLNGYDH3RDAKCGFJGNKW3YTY5LI>:
   13f3a:	2100      	movs	r1, #0
   13f3c:	6001      	str	r1, [r0, #0]
   13f3e:	6041      	str	r1, [r0, #4]
   13f40:	4770      	bx	lr

00013f42 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>:
   13f42:	680a      	ldr	r2, [r1, #0]
   13f44:	6002      	str	r2, [r0, #0]
   13f46:	790b      	ldrb	r3, [r1, #4]
   13f48:	7103      	strb	r3, [r0, #4]
   13f4a:	4770      	bx	lr

00013f4c <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>:
   13f4c:	2100      	movs	r1, #0
   13f4e:	6001      	str	r1, [r0, #0]
   13f50:	8081      	strh	r1, [r0, #4]
   13f52:	4770      	bx	lr
   13f54:	1702080c 	.word	0x1702080c
   13f58:	0201010d 	.word	0x0201010d
   13f5c:	01010909 	.word	0x01010909
   13f60:	18090206 	.word	0x18090206
   13f64:	01010318 	.word	0x01010318
   13f68:	03030909 	.word	0x03030909
   13f6c:	05          	.byte	0x05
   13f6d:	55          	.byte	0x55
   13f6e:	5555      	.short	0x5555
   13f70:	2625      	.short	0x2625
   13f72:	27          	.byte	0x27
   13f73:	01          	.byte	0x01
   13f74:	00010103 	.word	0x00010103

00013f78 <scan_cb>:
static void scan_cb(const bt_addr_le_t *addr, int8_t rssi, uint8_t adv_type,
		    struct net_buf_simple *buf)
{
	

	if (buf->len < 2) {
   13f78:	889a      	ldrh	r2, [r3, #4]
   13f7a:	2a01      	cmp	r2, #1
   13f7c:	d90c      	bls.n	13f98 <scan_cb+0x20>
		return;
	}
	
	if (buf->data[0] == 0x70 ||  buf->data[1] == 0x70 || buf->data[2] == 0x70) {
   13f7e:	681b      	ldr	r3, [r3, #0]
   13f80:	7819      	ldrb	r1, [r3, #0]
   13f82:	785a      	ldrb	r2, [r3, #1]
   13f84:	789b      	ldrb	r3, [r3, #2]
   13f86:	2970      	cmp	r1, #112	; 0x70
   13f88:	d003      	beq.n	13f92 <scan_cb+0x1a>
   13f8a:	2a70      	cmp	r2, #112	; 0x70
   13f8c:	d001      	beq.n	13f92 <scan_cb+0x1a>
   13f8e:	2b70      	cmp	r3, #112	; 0x70
   13f90:	d102      	bne.n	13f98 <scan_cb+0x20>
		// printk("Found device with matching data\n");
		printk("Scan Callback; Data: %d, %d, %d\n", buf->data[0], buf->data[1], buf->data[2]);
   13f92:	4802      	ldr	r0, [pc, #8]	; (13f9c <scan_cb+0x24>)
   13f94:	f00a bd39 	b.w	1ea0a <printk>
	// k_sleep(K_MSEC(1000));
	//print out net_buf_simple
	// printk("%p\n", buf);
	
	
}
   13f98:	4770      	bx	lr
   13f9a:	bf00      	nop
   13f9c:	00021310 	.word	0x00021310

00013fa0 <main>:

void main(void)
{
   13fa0:	b570      	push	{r4, r5, r6, lr}
   13fa2:	b08c      	sub	sp, #48	; 0x30
	struct bt_le_scan_param scan_param = {
   13fa4:	2100      	movs	r1, #0
   13fa6:	2214      	movs	r2, #20
   13fa8:	a802      	add	r0, sp, #8
   13faa:	f00b fc32 	bl	1f812 <memset>
   13fae:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
		.interval   = 0x0010,
		.window     = 0x0010,
	};
	int err;

	printk("Starting Scanner/Advertiser Demo\n");
   13fb2:	481e      	ldr	r0, [pc, #120]	; (1402c <main+0x8c>)
	struct bt_le_scan_param scan_param = {
   13fb4:	9304      	str	r3, [sp, #16]
	printk("Starting Scanner/Advertiser Demo\n");
   13fb6:	f00a fd28 	bl	1ea0a <printk>

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(NULL);
   13fba:	2000      	movs	r0, #0
   13fbc:	f003 f98a 	bl	172d4 <bt_enable>
	if (err) {
   13fc0:	4601      	mov	r1, r0
   13fc2:	b120      	cbz	r0, 13fce <main+0x2e>
		printk("Bluetooth init failed (err %d)\n", err);
   13fc4:	481a      	ldr	r0, [pc, #104]	; (14030 <main+0x90>)

		k_sleep(K_MSEC(400));

		err = bt_le_adv_stop();
		if (err) {
			printk("Advertising failed to stop (err %d)\n", err);
   13fc6:	f00a fd20 	bl	1ea0a <printk>
			return;
		}
	} while (1);
}
   13fca:	b00c      	add	sp, #48	; 0x30
   13fcc:	bd70      	pop	{r4, r5, r6, pc}
	printk("Bluetooth initialized\n");
   13fce:	4819      	ldr	r0, [pc, #100]	; (14034 <main+0x94>)
   13fd0:	f00a fd1b 	bl	1ea0a <printk>
	err = bt_le_scan_start(&scan_param, scan_cb);
   13fd4:	4918      	ldr	r1, [pc, #96]	; (14038 <main+0x98>)
   13fd6:	a802      	add	r0, sp, #8
   13fd8:	f004 f802 	bl	17fe0 <bt_le_scan_start>
	if (err) {
   13fdc:	4601      	mov	r1, r0
   13fde:	b9b0      	cbnz	r0, 1400e <main+0x6e>
		err = bt_le_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad),
   13fe0:	4e16      	ldr	r6, [pc, #88]	; (1403c <main+0x9c>)
   13fe2:	4d17      	ldr	r5, [pc, #92]	; (14040 <main+0xa0>)
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   13fe4:	2100      	movs	r1, #0
   13fe6:	f243 3034 	movw	r0, #13108	; 0x3334
   13fea:	f007 fcdb 	bl	1b9a4 <z_impl_k_sleep>
   13fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   13ff0:	ac07      	add	r4, sp, #28
   13ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   13ff4:	682b      	ldr	r3, [r5, #0]
   13ff6:	6023      	str	r3, [r4, #0]
   13ff8:	2300      	movs	r3, #0
   13ffa:	4631      	mov	r1, r6
   13ffc:	9300      	str	r3, [sp, #0]
   13ffe:	2201      	movs	r2, #1
   14000:	a807      	add	r0, sp, #28
   14002:	f003 fe59 	bl	17cb8 <bt_le_adv_start>
		if (err) {
   14006:	4601      	mov	r1, r0
   14008:	b118      	cbz	r0, 14012 <main+0x72>
			printk("Advertising failed to start (err %d)\n", err);
   1400a:	480e      	ldr	r0, [pc, #56]	; (14044 <main+0xa4>)
   1400c:	e7db      	b.n	13fc6 <main+0x26>
		printk("Starting scanning failed (err %d)\n", err);
   1400e:	480e      	ldr	r0, [pc, #56]	; (14048 <main+0xa8>)
   14010:	e7d9      	b.n	13fc6 <main+0x26>
   14012:	2100      	movs	r1, #0
   14014:	f243 3034 	movw	r0, #13108	; 0x3334
   14018:	f007 fcc4 	bl	1b9a4 <z_impl_k_sleep>
		err = bt_le_adv_stop();
   1401c:	f003 fe7e 	bl	17d1c <bt_le_adv_stop>
		if (err) {
   14020:	4601      	mov	r1, r0
   14022:	2800      	cmp	r0, #0
   14024:	d0dd      	beq.n	13fe2 <main+0x42>
			printk("Advertising failed to stop (err %d)\n", err);
   14026:	4809      	ldr	r0, [pc, #36]	; (1404c <main+0xac>)
   14028:	e7cd      	b.n	13fc6 <main+0x26>
   1402a:	bf00      	nop
   1402c:	00021331 	.word	0x00021331
   14030:	00021353 	.word	0x00021353
   14034:	00021373 	.word	0x00021373
   14038:	00013f79 	.word	0x00013f79
   1403c:	00020ee8 	.word	0x00020ee8
   14040:	00020e80 	.word	0x00020e80
   14044:	000213ad 	.word	0x000213ad
   14048:	0002138a 	.word	0x0002138a
   1404c:	000213d3 	.word	0x000213d3

00014050 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   14050:	680b      	ldr	r3, [r1, #0]
   14052:	3301      	adds	r3, #1
   14054:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   14056:	4b01      	ldr	r3, [pc, #4]	; (1405c <char_out+0xc>)
   14058:	681b      	ldr	r3, [r3, #0]
   1405a:	4718      	bx	r3
   1405c:	20000460 	.word	0x20000460

00014060 <__printk_hook_install>:
	_char_out = fn;
   14060:	4b01      	ldr	r3, [pc, #4]	; (14068 <__printk_hook_install+0x8>)
   14062:	6018      	str	r0, [r3, #0]
}
   14064:	4770      	bx	lr
   14066:	bf00      	nop
   14068:	20000460 	.word	0x20000460

0001406c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   1406c:	b507      	push	{r0, r1, r2, lr}
   1406e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   14070:	2100      	movs	r1, #0
{
   14072:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   14074:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   14076:	4803      	ldr	r0, [pc, #12]	; (14084 <vprintk+0x18>)
   14078:	a901      	add	r1, sp, #4
   1407a:	f000 f8ff 	bl	1427c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   1407e:	b003      	add	sp, #12
   14080:	f85d fb04 	ldr.w	pc, [sp], #4
   14084:	00014051 	.word	0x00014051

00014088 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   14088:	b530      	push	{r4, r5, lr}
   1408a:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   1408c:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   14090:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   14092:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   14094:	a901      	add	r1, sp, #4
   14096:	4805      	ldr	r0, [pc, #20]	; (140ac <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   14098:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   1409a:	f000 f8ef 	bl	1427c <cbvprintf>

	if (ctx.count < ctx.max) {
   1409e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   140a2:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   140a4:	bfb8      	it	lt
   140a6:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   140a8:	b005      	add	sp, #20
   140aa:	bd30      	pop	{r4, r5, pc}
   140ac:	0001e9e5 	.word	0x0001e9e5

000140b0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   140b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   140b4:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   140b8:	f019 0808 	ands.w	r8, r9, #8
{
   140bc:	4604      	mov	r4, r0
   140be:	4693      	mov	fp, r2
	if (processing) {
   140c0:	d00d      	beq.n	140de <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   140c2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   140c4:	bf0c      	ite	eq
   140c6:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   140ca:	f049 0920 	orrne.w	r9, r9, #32
   140ce:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   140d2:	f38b 8811 	msr	BASEPRI, fp
   140d6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   140da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   140de:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   140e2:	2902      	cmp	r1, #2
   140e4:	d107      	bne.n	140f6 <process_event+0x46>
			evt = process_recheck(mgr);
   140e6:	4620      	mov	r0, r4
   140e8:	f00a fca9 	bl	1ea3e <process_recheck>
		if (evt == EVT_NOP) {
   140ec:	2800      	cmp	r0, #0
   140ee:	d0f0      	beq.n	140d2 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   140f0:	2801      	cmp	r0, #1
   140f2:	8b23      	ldrh	r3, [r4, #24]
   140f4:	d150      	bne.n	14198 <process_event+0xe8>
			res = mgr->last_res;
   140f6:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   140f8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   140fa:	2f00      	cmp	r7, #0
   140fc:	da15      	bge.n	1412a <process_event+0x7a>
		*clients = mgr->clients;
   140fe:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   14100:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   14104:	e9c4 8800 	strd	r8, r8, [r4]
   14108:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   1410c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   1410e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   14110:	8b21      	ldrh	r1, [r4, #24]
   14112:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   14116:	45ca      	cmp	sl, r9
   14118:	d002      	beq.n	14120 <process_event+0x70>
		if (do_monitors
   1411a:	68a3      	ldr	r3, [r4, #8]
   1411c:	2b00      	cmp	r3, #0
   1411e:	d15c      	bne.n	141da <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
   14120:	b90d      	cbnz	r5, 14126 <process_event+0x76>
		    || (transit != NULL)) {
   14122:	2e00      	cmp	r6, #0
   14124:	d074      	beq.n	14210 <process_event+0x160>
   14126:	2300      	movs	r3, #0
   14128:	e058      	b.n	141dc <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1412a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1412e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   14130:	2a01      	cmp	r2, #1
   14132:	d820      	bhi.n	14176 <process_event+0xc6>
		*clients = mgr->clients;
   14134:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   14138:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   1413a:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   1413c:	b289      	uxth	r1, r1
	list->tail = NULL;
   1413e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   14142:	d10c      	bne.n	1415e <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   14144:	2d00      	cmp	r5, #0
   14146:	462b      	mov	r3, r5
   14148:	bf38      	it	cc
   1414a:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1414c:	b12b      	cbz	r3, 1415a <process_event+0xaa>
				mgr->refs += 1U;
   1414e:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14150:	681b      	ldr	r3, [r3, #0]
   14152:	3201      	adds	r2, #1
   14154:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   14156:	2b00      	cmp	r3, #0
   14158:	d1f8      	bne.n	1414c <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1415a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   1415e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   14160:	4620      	mov	r0, r4
   14162:	f00a fc6c 	bl	1ea3e <process_recheck>
   14166:	4606      	mov	r6, r0
   14168:	2800      	cmp	r0, #0
   1416a:	d0d1      	beq.n	14110 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1416c:	8b23      	ldrh	r3, [r4, #24]
   1416e:	f043 0320 	orr.w	r3, r3, #32
   14172:	8323      	strh	r3, [r4, #24]
   14174:	e7cb      	b.n	1410e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   14176:	2b04      	cmp	r3, #4
   14178:	d10c      	bne.n	14194 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1417a:	f021 0107 	bic.w	r1, r1, #7
   1417e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   14180:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   14182:	4620      	mov	r0, r4
   14184:	f00a fc5b 	bl	1ea3e <process_recheck>
   14188:	4605      	mov	r5, r0
   1418a:	2800      	cmp	r0, #0
   1418c:	d0bf      	beq.n	1410e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1418e:	f041 0120 	orr.w	r1, r1, #32
   14192:	8321      	strh	r1, [r4, #24]
   14194:	2500      	movs	r5, #0
   14196:	e7ba      	b.n	1410e <process_event+0x5e>
		} else if (evt == EVT_START) {
   14198:	2803      	cmp	r0, #3
   1419a:	d109      	bne.n	141b0 <process_event+0x100>
			transit = mgr->transitions->start;
   1419c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1419e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   141a2:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   141a4:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   141a8:	8323      	strh	r3, [r4, #24]
}
   141aa:	2500      	movs	r5, #0
		res = 0;
   141ac:	462f      	mov	r7, r5
   141ae:	e7af      	b.n	14110 <process_event+0x60>
		} else if (evt == EVT_STOP) {
   141b0:	2804      	cmp	r0, #4
   141b2:	d106      	bne.n	141c2 <process_event+0x112>
			transit = mgr->transitions->stop;
   141b4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   141b6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   141ba:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   141bc:	f043 0304 	orr.w	r3, r3, #4
   141c0:	e7f2      	b.n	141a8 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
   141c2:	2805      	cmp	r0, #5
   141c4:	d106      	bne.n	141d4 <process_event+0x124>
			transit = mgr->transitions->reset;
   141c6:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   141c8:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   141cc:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   141ce:	f043 0305 	orr.w	r3, r3, #5
   141d2:	e7e9      	b.n	141a8 <process_event+0xf8>
   141d4:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   141d6:	462e      	mov	r6, r5
   141d8:	e7e8      	b.n	141ac <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   141da:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   141dc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   141e0:	8321      	strh	r1, [r4, #24]
   141e2:	f38b 8811 	msr	BASEPRI, fp
   141e6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   141ea:	bb03      	cbnz	r3, 1422e <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
   141ec:	2d00      	cmp	r5, #0
   141ee:	d133      	bne.n	14258 <process_event+0x1a8>
			if (transit != NULL) {
   141f0:	b116      	cbz	r6, 141f8 <process_event+0x148>
				transit(mgr, transition_complete);
   141f2:	4921      	ldr	r1, [pc, #132]	; (14278 <process_event+0x1c8>)
   141f4:	4620      	mov	r0, r4
   141f6:	47b0      	blx	r6
	__asm__ volatile(
   141f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   141fc:	f3ef 8b11 	mrs	fp, BASEPRI
   14200:	f383 8812 	msr	BASEPRI_MAX, r3
   14204:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   14208:	8b23      	ldrh	r3, [r4, #24]
   1420a:	f023 0308 	bic.w	r3, r3, #8
   1420e:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   14210:	8b23      	ldrh	r3, [r4, #24]
   14212:	06da      	lsls	r2, r3, #27
   14214:	d528      	bpl.n	14268 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   14216:	f023 0310 	bic.w	r3, r3, #16
   1421a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   1421c:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   1421e:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   14222:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   14226:	2900      	cmp	r1, #0
   14228:	f47f af5b 	bne.w	140e2 <process_event+0x32>
out:
   1422c:	e751      	b.n	140d2 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1422e:	68a1      	ldr	r1, [r4, #8]
   14230:	2900      	cmp	r1, #0
   14232:	d0db      	beq.n	141ec <process_event+0x13c>
	return node->next;
   14234:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
   14236:	f8d1 b004 	ldr.w	fp, [r1, #4]
   1423a:	2b00      	cmp	r3, #0
   1423c:	bf38      	it	cc
   1423e:	2300      	movcc	r3, #0
   14240:	4699      	mov	r9, r3
   14242:	4652      	mov	r2, sl
   14244:	463b      	mov	r3, r7
   14246:	4620      	mov	r0, r4
   14248:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1424a:	f1b9 0f00 	cmp.w	r9, #0
   1424e:	d0cd      	beq.n	141ec <process_event+0x13c>
   14250:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14254:	4649      	mov	r1, r9
   14256:	e7ee      	b.n	14236 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14258:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   1425a:	463b      	mov	r3, r7
   1425c:	4652      	mov	r2, sl
   1425e:	4620      	mov	r0, r4
   14260:	682d      	ldr	r5, [r5, #0]
   14262:	f00a fc08 	bl	1ea76 <notify_one>
   14266:	e7c1      	b.n	141ec <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   14268:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1426c:	bf1e      	ittt	ne
   1426e:	f023 0320 	bicne.w	r3, r3, #32
   14272:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   14274:	2102      	movne	r1, #2
   14276:	e7d2      	b.n	1421e <process_event+0x16e>
   14278:	0001eaa3 	.word	0x0001eaa3

0001427c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   1427c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14280:	b091      	sub	sp, #68	; 0x44
   14282:	468b      	mov	fp, r1
   14284:	9002      	str	r0, [sp, #8]
   14286:	4692      	mov	sl, r2
   14288:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1428a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1428c:	f89a 0000 	ldrb.w	r0, [sl]
   14290:	b908      	cbnz	r0, 14296 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   14292:	4628      	mov	r0, r5
   14294:	e35e      	b.n	14954 <cbvprintf+0x6d8>
		if (*fp != '%') {
   14296:	2825      	cmp	r0, #37	; 0x25
   14298:	f10a 0701 	add.w	r7, sl, #1
   1429c:	d007      	beq.n	142ae <cbvprintf+0x32>
			OUTC('%');
   1429e:	9b02      	ldr	r3, [sp, #8]
   142a0:	4659      	mov	r1, fp
   142a2:	4798      	blx	r3
   142a4:	2800      	cmp	r0, #0
   142a6:	f2c0 8355 	blt.w	14954 <cbvprintf+0x6d8>
   142aa:	3501      	adds	r5, #1
			break;
   142ac:	e210      	b.n	146d0 <cbvprintf+0x454>
		} state = {
   142ae:	2218      	movs	r2, #24
   142b0:	2100      	movs	r1, #0
   142b2:	a80a      	add	r0, sp, #40	; 0x28
   142b4:	f00b faad 	bl	1f812 <memset>
	if (*sp == '%') {
   142b8:	f89a 3001 	ldrb.w	r3, [sl, #1]
   142bc:	2b25      	cmp	r3, #37	; 0x25
   142be:	d078      	beq.n	143b2 <cbvprintf+0x136>
   142c0:	2200      	movs	r2, #0
   142c2:	4694      	mov	ip, r2
   142c4:	4616      	mov	r6, r2
   142c6:	4696      	mov	lr, r2
   142c8:	4610      	mov	r0, r2
   142ca:	4639      	mov	r1, r7
		switch (*sp) {
   142cc:	f817 3b01 	ldrb.w	r3, [r7], #1
   142d0:	2b2b      	cmp	r3, #43	; 0x2b
   142d2:	f000 809d 	beq.w	14410 <cbvprintf+0x194>
   142d6:	f200 8094 	bhi.w	14402 <cbvprintf+0x186>
   142da:	2b20      	cmp	r3, #32
   142dc:	f000 809b 	beq.w	14416 <cbvprintf+0x19a>
   142e0:	2b23      	cmp	r3, #35	; 0x23
   142e2:	f000 809a 	beq.w	1441a <cbvprintf+0x19e>
   142e6:	b128      	cbz	r0, 142f4 <cbvprintf+0x78>
   142e8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   142ec:	f040 0004 	orr.w	r0, r0, #4
   142f0:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   142f4:	f1be 0f00 	cmp.w	lr, #0
   142f8:	d005      	beq.n	14306 <cbvprintf+0x8a>
   142fa:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   142fe:	f040 0008 	orr.w	r0, r0, #8
   14302:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   14306:	b12e      	cbz	r6, 14314 <cbvprintf+0x98>
   14308:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   1430c:	f040 0010 	orr.w	r0, r0, #16
   14310:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   14314:	f1bc 0f00 	cmp.w	ip, #0
   14318:	d005      	beq.n	14326 <cbvprintf+0xaa>
   1431a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   1431e:	f040 0020 	orr.w	r0, r0, #32
   14322:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   14326:	b12a      	cbz	r2, 14334 <cbvprintf+0xb8>
   14328:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   1432c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14330:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   14334:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   14338:	f002 0044 	and.w	r0, r2, #68	; 0x44
   1433c:	2844      	cmp	r0, #68	; 0x44
   1433e:	d103      	bne.n	14348 <cbvprintf+0xcc>
		conv->flag_zero = false;
   14340:	f36f 1286 	bfc	r2, #6, #1
   14344:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   14348:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   1434c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   1434e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   14352:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   14356:	d17b      	bne.n	14450 <cbvprintf+0x1d4>
		conv->width_star = true;
   14358:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1435c:	f042 0201 	orr.w	r2, r2, #1
   14360:	1c4b      	adds	r3, r1, #1
   14362:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   14366:	781a      	ldrb	r2, [r3, #0]
   14368:	2a2e      	cmp	r2, #46	; 0x2e
   1436a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1436e:	bf0c      	ite	eq
   14370:	2101      	moveq	r1, #1
   14372:	2100      	movne	r1, #0
   14374:	f361 0241 	bfi	r2, r1, #1, #1
   14378:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   1437c:	d174      	bne.n	14468 <cbvprintf+0x1ec>
	if (*sp == '*') {
   1437e:	785a      	ldrb	r2, [r3, #1]
   14380:	2a2a      	cmp	r2, #42	; 0x2a
   14382:	d06a      	beq.n	1445a <cbvprintf+0x1de>
   14384:	3301      	adds	r3, #1
	size_t val = 0;
   14386:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   14388:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1438a:	4618      	mov	r0, r3
   1438c:	f810 2b01 	ldrb.w	r2, [r0], #1
   14390:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   14394:	2f09      	cmp	r7, #9
   14396:	f240 808e 	bls.w	144b6 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   1439a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   1439e:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   143a0:	f3c2 0040 	ubfx	r0, r2, #1, #1
   143a4:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   143a8:	f361 0241 	bfi	r2, r1, #1, #1
   143ac:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   143b0:	e05a      	b.n	14468 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
   143b2:	f10a 0702 	add.w	r7, sl, #2
   143b6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   143ba:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   143be:	07d9      	lsls	r1, r3, #31
   143c0:	f140 8149 	bpl.w	14656 <cbvprintf+0x3da>
			width = va_arg(ap, int);
   143c4:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   143c8:	f1b9 0f00 	cmp.w	r9, #0
   143cc:	da07      	bge.n	143de <cbvprintf+0x162>
				conv->flag_dash = true;
   143ce:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   143d2:	f042 0204 	orr.w	r2, r2, #4
   143d6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
   143da:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
   143de:	075a      	lsls	r2, r3, #29
   143e0:	f140 8142 	bpl.w	14668 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
   143e4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   143e8:	f1b8 0f00 	cmp.w	r8, #0
   143ec:	f280 8141 	bge.w	14672 <cbvprintf+0x3f6>
				conv->prec_present = false;
   143f0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   143f4:	f36f 0341 	bfc	r3, #1, #1
   143f8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   143fc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   14400:	e137      	b.n	14672 <cbvprintf+0x3f6>
		switch (*sp) {
   14402:	2b2d      	cmp	r3, #45	; 0x2d
   14404:	d00c      	beq.n	14420 <cbvprintf+0x1a4>
   14406:	2b30      	cmp	r3, #48	; 0x30
   14408:	f47f af6d 	bne.w	142e6 <cbvprintf+0x6a>
			conv->flag_zero = true;
   1440c:	2201      	movs	r2, #1
	} while (loop);
   1440e:	e75c      	b.n	142ca <cbvprintf+0x4e>
			conv->flag_plus = true;
   14410:	f04f 0e01 	mov.w	lr, #1
   14414:	e759      	b.n	142ca <cbvprintf+0x4e>
			conv->flag_space = true;
   14416:	2601      	movs	r6, #1
   14418:	e757      	b.n	142ca <cbvprintf+0x4e>
			conv->flag_hash = true;
   1441a:	f04f 0c01 	mov.w	ip, #1
   1441e:	e754      	b.n	142ca <cbvprintf+0x4e>
		switch (*sp) {
   14420:	2001      	movs	r0, #1
   14422:	e752      	b.n	142ca <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
   14424:	fb0c 0202 	mla	r2, ip, r2, r0
   14428:	3a30      	subs	r2, #48	; 0x30
   1442a:	4633      	mov	r3, r6
   1442c:	461e      	mov	r6, r3
   1442e:	f816 0b01 	ldrb.w	r0, [r6], #1
   14432:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   14436:	2f09      	cmp	r7, #9
   14438:	d9f4      	bls.n	14424 <cbvprintf+0x1a8>
	if (sp != wp) {
   1443a:	4299      	cmp	r1, r3
   1443c:	d093      	beq.n	14366 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   1443e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   14442:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   14444:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   14446:	f362 0141 	bfi	r1, r2, #1, #1
   1444a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   1444e:	e78a      	b.n	14366 <cbvprintf+0xea>
   14450:	460b      	mov	r3, r1
	size_t val = 0;
   14452:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   14454:	f04f 0c0a 	mov.w	ip, #10
   14458:	e7e8      	b.n	1442c <cbvprintf+0x1b0>
		conv->prec_star = true;
   1445a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1445e:	f042 0204 	orr.w	r2, r2, #4
   14462:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   14466:	3302      	adds	r3, #2
	switch (*sp) {
   14468:	461f      	mov	r7, r3
   1446a:	f817 2b01 	ldrb.w	r2, [r7], #1
   1446e:	2a6c      	cmp	r2, #108	; 0x6c
   14470:	d041      	beq.n	144f6 <cbvprintf+0x27a>
   14472:	d825      	bhi.n	144c0 <cbvprintf+0x244>
   14474:	2a68      	cmp	r2, #104	; 0x68
   14476:	d02b      	beq.n	144d0 <cbvprintf+0x254>
   14478:	2a6a      	cmp	r2, #106	; 0x6a
   1447a:	d046      	beq.n	1450a <cbvprintf+0x28e>
   1447c:	2a4c      	cmp	r2, #76	; 0x4c
   1447e:	d04c      	beq.n	1451a <cbvprintf+0x29e>
   14480:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   14482:	f817 2b01 	ldrb.w	r2, [r7], #1
   14486:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1448a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   1448e:	2a78      	cmp	r2, #120	; 0x78
   14490:	f200 80d9 	bhi.w	14646 <cbvprintf+0x3ca>
   14494:	2a57      	cmp	r2, #87	; 0x57
   14496:	d84d      	bhi.n	14534 <cbvprintf+0x2b8>
   14498:	2a41      	cmp	r2, #65	; 0x41
   1449a:	d003      	beq.n	144a4 <cbvprintf+0x228>
   1449c:	3a45      	subs	r2, #69	; 0x45
   1449e:	2a02      	cmp	r2, #2
   144a0:	f200 80d1 	bhi.w	14646 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   144a4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   144a8:	2204      	movs	r2, #4
   144aa:	f362 0302 	bfi	r3, r2, #0, #3
   144ae:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   144b2:	2301      	movs	r3, #1
			break;
   144b4:	e09e      	b.n	145f4 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
   144b6:	fb06 2101 	mla	r1, r6, r1, r2
   144ba:	3930      	subs	r1, #48	; 0x30
   144bc:	4603      	mov	r3, r0
   144be:	e764      	b.n	1438a <cbvprintf+0x10e>
	switch (*sp) {
   144c0:	2a74      	cmp	r2, #116	; 0x74
   144c2:	d026      	beq.n	14512 <cbvprintf+0x296>
   144c4:	2a7a      	cmp	r2, #122	; 0x7a
   144c6:	d1db      	bne.n	14480 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
   144c8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   144cc:	2206      	movs	r2, #6
   144ce:	e00d      	b.n	144ec <cbvprintf+0x270>
		if (*++sp == 'h') {
   144d0:	785a      	ldrb	r2, [r3, #1]
   144d2:	2a68      	cmp	r2, #104	; 0x68
   144d4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   144d8:	d106      	bne.n	144e8 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
   144da:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   144dc:	f361 02c6 	bfi	r2, r1, #3, #4
   144e0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   144e4:	1c9f      	adds	r7, r3, #2
   144e6:	e7cc      	b.n	14482 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
   144e8:	4613      	mov	r3, r2
   144ea:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   144ec:	f362 03c6 	bfi	r3, r2, #3, #4
   144f0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   144f4:	e7c5      	b.n	14482 <cbvprintf+0x206>
		if (*++sp == 'l') {
   144f6:	785a      	ldrb	r2, [r3, #1]
   144f8:	2a6c      	cmp	r2, #108	; 0x6c
   144fa:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   144fe:	d101      	bne.n	14504 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
   14500:	2104      	movs	r1, #4
   14502:	e7eb      	b.n	144dc <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
   14504:	4613      	mov	r3, r2
   14506:	2203      	movs	r2, #3
   14508:	e7f0      	b.n	144ec <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
   1450a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1450e:	2205      	movs	r2, #5
   14510:	e7ec      	b.n	144ec <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
   14512:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   14516:	2207      	movs	r2, #7
   14518:	e7e8      	b.n	144ec <cbvprintf+0x270>
		conv->unsupported = true;
   1451a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1451e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   14522:	f023 0302 	bic.w	r3, r3, #2
   14526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1452a:	f043 0302 	orr.w	r3, r3, #2
   1452e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   14532:	e7a6      	b.n	14482 <cbvprintf+0x206>
   14534:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   14538:	2920      	cmp	r1, #32
   1453a:	f200 8084 	bhi.w	14646 <cbvprintf+0x3ca>
   1453e:	a001      	add	r0, pc, #4	; (adr r0, 14544 <cbvprintf+0x2c8>)
   14540:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   14544:	00014609 	.word	0x00014609
   14548:	00014647 	.word	0x00014647
   1454c:	00014647 	.word	0x00014647
   14550:	00014647 	.word	0x00014647
   14554:	00014647 	.word	0x00014647
   14558:	00014647 	.word	0x00014647
   1455c:	00014647 	.word	0x00014647
   14560:	00014647 	.word	0x00014647
   14564:	00014647 	.word	0x00014647
   14568:	000144a5 	.word	0x000144a5
   1456c:	00014647 	.word	0x00014647
   14570:	00014609 	.word	0x00014609
   14574:	000145c9 	.word	0x000145c9
   14578:	000144a5 	.word	0x000144a5
   1457c:	000144a5 	.word	0x000144a5
   14580:	000144a5 	.word	0x000144a5
   14584:	00014647 	.word	0x00014647
   14588:	000145c9 	.word	0x000145c9
   1458c:	00014647 	.word	0x00014647
   14590:	00014647 	.word	0x00014647
   14594:	00014647 	.word	0x00014647
   14598:	00014647 	.word	0x00014647
   1459c:	00014611 	.word	0x00014611
   145a0:	00014609 	.word	0x00014609
   145a4:	0001462d 	.word	0x0001462d
   145a8:	00014647 	.word	0x00014647
   145ac:	00014647 	.word	0x00014647
   145b0:	0001462d 	.word	0x0001462d
   145b4:	00014647 	.word	0x00014647
   145b8:	00014609 	.word	0x00014609
   145bc:	00014647 	.word	0x00014647
   145c0:	00014647 	.word	0x00014647
   145c4:	00014609 	.word	0x00014609
		conv->specifier_cat = SPECIFIER_SINT;
   145c8:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   145cc:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   145ce:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   145d2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   145d6:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   145d8:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   145dc:	bf02      	ittt	eq
   145de:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   145e2:	f041 0101 	orreq.w	r1, r1, #1
   145e6:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   145ea:	2a63      	cmp	r2, #99	; 0x63
   145ec:	d131      	bne.n	14652 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   145ee:	3b00      	subs	r3, #0
   145f0:	bf18      	it	ne
   145f2:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   145f4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   145f8:	f3c2 0140 	ubfx	r1, r2, #1, #1
   145fc:	430b      	orrs	r3, r1
   145fe:	f363 0241 	bfi	r2, r3, #1, #1
   14602:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   14606:	e6d8      	b.n	143ba <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   14608:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   1460c:	2002      	movs	r0, #2
   1460e:	e7de      	b.n	145ce <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   14610:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   14614:	f003 0378 	and.w	r3, r3, #120	; 0x78
   14618:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   1461c:	2103      	movs	r1, #3
   1461e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   14622:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   14624:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   14628:	4143      	adcs	r3, r0
   1462a:	e7e3      	b.n	145f4 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   1462c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   14630:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   14632:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   14636:	f361 0202 	bfi	r2, r1, #0, #3
   1463a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   1463e:	bf14      	ite	ne
   14640:	2301      	movne	r3, #1
   14642:	2300      	moveq	r3, #0
   14644:	e7d6      	b.n	145f4 <cbvprintf+0x378>
		conv->invalid = true;
   14646:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1464a:	f043 0301 	orr.w	r3, r3, #1
   1464e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   14652:	2300      	movs	r3, #0
   14654:	e7ce      	b.n	145f4 <cbvprintf+0x378>
		} else if (conv->width_present) {
   14656:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   1465a:	2a00      	cmp	r2, #0
			width = conv->width_value;
   1465c:	bfb4      	ite	lt
   1465e:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
   14662:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
   14666:	e6ba      	b.n	143de <cbvprintf+0x162>
		} else if (conv->prec_present) {
   14668:	079b      	lsls	r3, r3, #30
   1466a:	f57f aec7 	bpl.w	143fc <cbvprintf+0x180>
			precision = conv->prec_value;
   1466e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
   14672:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
   14676:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   14678:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   1467c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
   14680:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   14684:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   14686:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1468a:	d136      	bne.n	146fa <cbvprintf+0x47e>
			switch (length_mod) {
   1468c:	1ed3      	subs	r3, r2, #3
   1468e:	2b04      	cmp	r3, #4
   14690:	d820      	bhi.n	146d4 <cbvprintf+0x458>
   14692:	e8df f003 	tbb	[pc, r3]
   14696:	0703      	.short	0x0703
   14698:	1f07      	.short	0x1f07
   1469a:	1f          	.byte	0x1f
   1469b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   1469c:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
   146a0:	17c1      	asrs	r1, r0, #31
   146a2:	e004      	b.n	146ae <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
   146a4:	3407      	adds	r4, #7
   146a6:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   146aa:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
   146ae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   146b2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   146b6:	f013 0603 	ands.w	r6, r3, #3
   146ba:	d054      	beq.n	14766 <cbvprintf+0x4ea>
			OUTS(sp, fp);
   146bc:	9802      	ldr	r0, [sp, #8]
   146be:	463b      	mov	r3, r7
   146c0:	4652      	mov	r2, sl
   146c2:	4659      	mov	r1, fp
   146c4:	f00a fc80 	bl	1efc8 <outs>
   146c8:	2800      	cmp	r0, #0
   146ca:	f2c0 8143 	blt.w	14954 <cbvprintf+0x6d8>
   146ce:	4405      	add	r5, r0
			continue;
   146d0:	46ba      	mov	sl, r7
   146d2:	e5db      	b.n	1428c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   146d4:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
   146d8:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   146da:	ea4f 71e0 	mov.w	r1, r0, asr #31
   146de:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   146e2:	d105      	bne.n	146f0 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
   146e4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   146e8:	930a      	str	r3, [sp, #40]	; 0x28
   146ea:	2300      	movs	r3, #0
   146ec:	930b      	str	r3, [sp, #44]	; 0x2c
   146ee:	e7e0      	b.n	146b2 <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
   146f0:	2a02      	cmp	r2, #2
   146f2:	d1de      	bne.n	146b2 <cbvprintf+0x436>
				value->sint = (short)value->sint;
   146f4:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
   146f8:	e7d2      	b.n	146a0 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   146fa:	2b02      	cmp	r3, #2
   146fc:	d123      	bne.n	14746 <cbvprintf+0x4ca>
			switch (length_mod) {
   146fe:	1ed3      	subs	r3, r2, #3
   14700:	2b04      	cmp	r3, #4
   14702:	d813      	bhi.n	1472c <cbvprintf+0x4b0>
   14704:	e8df f003 	tbb	[pc, r3]
   14708:	120a0a03 	.word	0x120a0a03
   1470c:	12          	.byte	0x12
   1470d:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   1470e:	6820      	ldr	r0, [r4, #0]
   14710:	900a      	str	r0, [sp, #40]	; 0x28
   14712:	2100      	movs	r1, #0
   14714:	1d23      	adds	r3, r4, #4
   14716:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   14718:	461c      	mov	r4, r3
   1471a:	e7ca      	b.n	146b2 <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
   1471c:	3407      	adds	r4, #7
   1471e:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
   14722:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   14726:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
   1472a:	e7f5      	b.n	14718 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
   1472c:	f854 3b04 	ldr.w	r3, [r4], #4
   14730:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   14732:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
   14734:	f04f 0300 	mov.w	r3, #0
   14738:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   1473a:	d0d3      	beq.n	146e4 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
   1473c:	2a02      	cmp	r2, #2
   1473e:	d1b8      	bne.n	146b2 <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
   14740:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   14744:	e7d0      	b.n	146e8 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
   14746:	2b04      	cmp	r3, #4
   14748:	d107      	bne.n	1475a <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
   1474a:	3407      	adds	r4, #7
   1474c:	f024 0407 	bic.w	r4, r4, #7
   14750:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
   14754:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   14758:	e7ab      	b.n	146b2 <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1475a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   1475c:	bf04      	itt	eq
   1475e:	f854 3b04 	ldreq.w	r3, [r4], #4
   14762:	930a      	streq	r3, [sp, #40]	; 0x28
   14764:	e7a5      	b.n	146b2 <cbvprintf+0x436>
		switch (conv->specifier) {
   14766:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   1476a:	2878      	cmp	r0, #120	; 0x78
   1476c:	d8b0      	bhi.n	146d0 <cbvprintf+0x454>
   1476e:	2862      	cmp	r0, #98	; 0x62
   14770:	d822      	bhi.n	147b8 <cbvprintf+0x53c>
   14772:	2825      	cmp	r0, #37	; 0x25
   14774:	f43f ad93 	beq.w	1429e <cbvprintf+0x22>
   14778:	2858      	cmp	r0, #88	; 0x58
   1477a:	d1a9      	bne.n	146d0 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
   1477c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   14780:	9300      	str	r3, [sp, #0]
   14782:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   14786:	ab04      	add	r3, sp, #16
   14788:	aa0c      	add	r2, sp, #48	; 0x30
   1478a:	f00a fbd2 	bl	1ef32 <encode_uint>
   1478e:	4682      	mov	sl, r0
			if (precision >= 0) {
   14790:	f1b8 0f00 	cmp.w	r8, #0
   14794:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   14798:	db0c      	blt.n	147b4 <cbvprintf+0x538>
				conv->flag_zero = false;
   1479a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   1479e:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   147a2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   147a6:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   147a8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   147ac:	d902      	bls.n	147b4 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
   147ae:	eba8 0303 	sub.w	r3, r8, r3
   147b2:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   147b4:	4680      	mov	r8, r0
   147b6:	e03d      	b.n	14834 <cbvprintf+0x5b8>
   147b8:	3863      	subs	r0, #99	; 0x63
   147ba:	2815      	cmp	r0, #21
   147bc:	d888      	bhi.n	146d0 <cbvprintf+0x454>
   147be:	a101      	add	r1, pc, #4	; (adr r1, 147c4 <cbvprintf+0x548>)
   147c0:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
   147c4:	00014845 	.word	0x00014845
   147c8:	000148a9 	.word	0x000148a9
   147cc:	000146d1 	.word	0x000146d1
   147d0:	000146d1 	.word	0x000146d1
   147d4:	000146d1 	.word	0x000146d1
   147d8:	000146d1 	.word	0x000146d1
   147dc:	000148a9 	.word	0x000148a9
   147e0:	000146d1 	.word	0x000146d1
   147e4:	000146d1 	.word	0x000146d1
   147e8:	000146d1 	.word	0x000146d1
   147ec:	000146d1 	.word	0x000146d1
   147f0:	00014907 	.word	0x00014907
   147f4:	000148d5 	.word	0x000148d5
   147f8:	000148d9 	.word	0x000148d9
   147fc:	000146d1 	.word	0x000146d1
   14800:	000146d1 	.word	0x000146d1
   14804:	0001481d 	.word	0x0001481d
   14808:	000146d1 	.word	0x000146d1
   1480c:	000148d5 	.word	0x000148d5
   14810:	000146d1 	.word	0x000146d1
   14814:	000146d1 	.word	0x000146d1
   14818:	000148d5 	.word	0x000148d5
			if (precision >= 0) {
   1481c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   14820:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   14824:	db0a      	blt.n	1483c <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
   14826:	4641      	mov	r1, r8
   14828:	4650      	mov	r0, sl
   1482a:	f00a ffab 	bl	1f784 <strnlen>
			bpe = bps + len;
   1482e:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
   14832:	2600      	movs	r6, #0
		if (bps == NULL) {
   14834:	f1ba 0f00 	cmp.w	sl, #0
   14838:	d10c      	bne.n	14854 <cbvprintf+0x5d8>
   1483a:	e749      	b.n	146d0 <cbvprintf+0x454>
				len = strlen(bps);
   1483c:	4650      	mov	r0, sl
   1483e:	f00a ff9a 	bl	1f776 <strlen>
   14842:	e7f4      	b.n	1482e <cbvprintf+0x5b2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   14844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14846:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
   1484a:	2600      	movs	r6, #0
			bpe = buf + 1;
   1484c:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
   14850:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
   14854:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   14858:	b106      	cbz	r6, 1485c <cbvprintf+0x5e0>
			nj_len += 1U;
   1485a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   1485c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   14860:	06d0      	lsls	r0, r2, #27
   14862:	d56b      	bpl.n	1493c <cbvprintf+0x6c0>
			nj_len += 2U;
   14864:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   14866:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   14868:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   1486a:	bf48      	it	mi
   1486c:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   1486e:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   14870:	bf48      	it	mi
   14872:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   14874:	f1b9 0f00 	cmp.w	r9, #0
   14878:	dd79      	ble.n	1496e <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
   1487a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   1487e:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   14882:	f3c2 0380 	ubfx	r3, r2, #2, #1
   14886:	9303      	str	r3, [sp, #12]
   14888:	0753      	lsls	r3, r2, #29
   1488a:	d470      	bmi.n	1496e <cbvprintf+0x6f2>
				if (conv->flag_zero) {
   1488c:	0650      	lsls	r0, r2, #25
   1488e:	d564      	bpl.n	1495a <cbvprintf+0x6de>
					if (sign != 0) {
   14890:	b146      	cbz	r6, 148a4 <cbvprintf+0x628>
						OUTC(sign);
   14892:	9b02      	ldr	r3, [sp, #8]
   14894:	4659      	mov	r1, fp
   14896:	4630      	mov	r0, r6
   14898:	4798      	blx	r3
   1489a:	2800      	cmp	r0, #0
   1489c:	db5a      	blt.n	14954 <cbvprintf+0x6d8>
						sign = 0;
   1489e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   148a0:	3501      	adds	r5, #1
						sign = 0;
   148a2:	461e      	mov	r6, r3
					pad = '0';
   148a4:	2330      	movs	r3, #48	; 0x30
   148a6:	e059      	b.n	1495c <cbvprintf+0x6e0>
			if (conv->flag_plus) {
   148a8:	071e      	lsls	r6, r3, #28
   148aa:	d411      	bmi.n	148d0 <cbvprintf+0x654>
				sign = ' ';
   148ac:	f013 0610 	ands.w	r6, r3, #16
   148b0:	bf18      	it	ne
   148b2:	2620      	movne	r6, #32
			sint = value->sint;
   148b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   148b8:	2a00      	cmp	r2, #0
   148ba:	f173 0100 	sbcs.w	r1, r3, #0
   148be:	f6bf af5d 	bge.w	1477c <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
   148c2:	4252      	negs	r2, r2
   148c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   148c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
   148cc:	262d      	movs	r6, #45	; 0x2d
   148ce:	e755      	b.n	1477c <cbvprintf+0x500>
				sign = '+';
   148d0:	262b      	movs	r6, #43	; 0x2b
   148d2:	e7ef      	b.n	148b4 <cbvprintf+0x638>
		switch (conv->specifier) {
   148d4:	2600      	movs	r6, #0
   148d6:	e751      	b.n	1477c <cbvprintf+0x500>
			if (value->ptr != NULL) {
   148d8:	980a      	ldr	r0, [sp, #40]	; 0x28
   148da:	b348      	cbz	r0, 14930 <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   148dc:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   148e0:	9300      	str	r3, [sp, #0]
   148e2:	aa0c      	add	r2, sp, #48	; 0x30
   148e4:	ab04      	add	r3, sp, #16
   148e6:	2100      	movs	r1, #0
   148e8:	f00a fb23 	bl	1ef32 <encode_uint>
				conv->altform_0c = true;
   148ec:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   148f0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   148f4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   148f8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   148fc:	4682      	mov	sl, r0
				conv->altform_0c = true;
   148fe:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
   14902:	2600      	movs	r6, #0
				goto prec_int_pad0;
   14904:	e744      	b.n	14790 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
   14906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   14908:	2a07      	cmp	r2, #7
   1490a:	f63f aee1 	bhi.w	146d0 <cbvprintf+0x454>
   1490e:	e8df f002 	tbb	[pc, r2]
   14912:	040d      	.short	0x040d
   14914:	08080d06 	.word	0x08080d06
   14918:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   1491a:	701d      	strb	r5, [r3, #0]
		break;
   1491c:	e6d8      	b.n	146d0 <cbvprintf+0x454>
		*(short *)dp = (short)count;
   1491e:	801d      	strh	r5, [r3, #0]
		break;
   14920:	e6d6      	b.n	146d0 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
   14922:	4628      	mov	r0, r5
   14924:	17e9      	asrs	r1, r5, #31
   14926:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   1492a:	e6d1      	b.n	146d0 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1492c:	601d      	str	r5, [r3, #0]
		break;
   1492e:	e6cf      	b.n	146d0 <cbvprintf+0x454>
			bpe = bps + 5;
   14930:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 149f8 <cbvprintf+0x77c>
   14934:	4606      	mov	r6, r0
			bps = "(nil)";
   14936:	f1a8 0a05 	sub.w	sl, r8, #5
   1493a:	e78b      	b.n	14854 <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
   1493c:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   1493e:	bf48      	it	mi
   14940:	3301      	addmi	r3, #1
   14942:	e790      	b.n	14866 <cbvprintf+0x5ea>
					OUTC(pad);
   14944:	4618      	mov	r0, r3
   14946:	9303      	str	r3, [sp, #12]
   14948:	4659      	mov	r1, fp
   1494a:	9b02      	ldr	r3, [sp, #8]
   1494c:	4798      	blx	r3
   1494e:	2800      	cmp	r0, #0
   14950:	9b03      	ldr	r3, [sp, #12]
   14952:	da04      	bge.n	1495e <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
   14954:	b011      	add	sp, #68	; 0x44
   14956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   1495a:	2320      	movs	r3, #32
   1495c:	444d      	add	r5, r9
   1495e:	464a      	mov	r2, r9
				while (width-- > 0) {
   14960:	2a00      	cmp	r2, #0
   14962:	eba5 0109 	sub.w	r1, r5, r9
   14966:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1496a:	dceb      	bgt.n	14944 <cbvprintf+0x6c8>
   1496c:	460d      	mov	r5, r1
		if (sign != 0) {
   1496e:	b136      	cbz	r6, 1497e <cbvprintf+0x702>
			OUTC(sign);
   14970:	9b02      	ldr	r3, [sp, #8]
   14972:	4659      	mov	r1, fp
   14974:	4630      	mov	r0, r6
   14976:	4798      	blx	r3
   14978:	2800      	cmp	r0, #0
   1497a:	dbeb      	blt.n	14954 <cbvprintf+0x6d8>
   1497c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   1497e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   14982:	06d9      	lsls	r1, r3, #27
   14984:	d401      	bmi.n	1498a <cbvprintf+0x70e>
   14986:	071a      	lsls	r2, r3, #28
   14988:	d506      	bpl.n	14998 <cbvprintf+0x71c>
				OUTC('0');
   1498a:	9b02      	ldr	r3, [sp, #8]
   1498c:	4659      	mov	r1, fp
   1498e:	2030      	movs	r0, #48	; 0x30
   14990:	4798      	blx	r3
   14992:	2800      	cmp	r0, #0
   14994:	dbde      	blt.n	14954 <cbvprintf+0x6d8>
   14996:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   14998:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1499c:	06db      	lsls	r3, r3, #27
   1499e:	d507      	bpl.n	149b0 <cbvprintf+0x734>
				OUTC(conv->specifier);
   149a0:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   149a4:	9b02      	ldr	r3, [sp, #8]
   149a6:	4659      	mov	r1, fp
   149a8:	4798      	blx	r3
   149aa:	2800      	cmp	r0, #0
   149ac:	dbd2      	blt.n	14954 <cbvprintf+0x6d8>
   149ae:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   149b0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   149b2:	442e      	add	r6, r5
   149b4:	1b73      	subs	r3, r6, r5
   149b6:	2b00      	cmp	r3, #0
   149b8:	dc16      	bgt.n	149e8 <cbvprintf+0x76c>
			OUTS(bps, bpe);
   149ba:	9802      	ldr	r0, [sp, #8]
   149bc:	4643      	mov	r3, r8
   149be:	4652      	mov	r2, sl
   149c0:	4659      	mov	r1, fp
   149c2:	f00a fb01 	bl	1efc8 <outs>
   149c6:	2800      	cmp	r0, #0
   149c8:	dbc4      	blt.n	14954 <cbvprintf+0x6d8>
   149ca:	4405      	add	r5, r0
		while (width > 0) {
   149cc:	44a9      	add	r9, r5
   149ce:	eba9 0305 	sub.w	r3, r9, r5
   149d2:	2b00      	cmp	r3, #0
   149d4:	f77f ae7c 	ble.w	146d0 <cbvprintf+0x454>
			OUTC(' ');
   149d8:	9b02      	ldr	r3, [sp, #8]
   149da:	4659      	mov	r1, fp
   149dc:	2020      	movs	r0, #32
   149de:	4798      	blx	r3
   149e0:	2800      	cmp	r0, #0
   149e2:	dbb7      	blt.n	14954 <cbvprintf+0x6d8>
   149e4:	3501      	adds	r5, #1
			--width;
   149e6:	e7f2      	b.n	149ce <cbvprintf+0x752>
				OUTC('0');
   149e8:	9b02      	ldr	r3, [sp, #8]
   149ea:	4659      	mov	r1, fp
   149ec:	2030      	movs	r0, #48	; 0x30
   149ee:	4798      	blx	r3
   149f0:	2800      	cmp	r0, #0
   149f2:	dbaf      	blt.n	14954 <cbvprintf+0x6d8>
   149f4:	3501      	adds	r5, #1
   149f6:	e7dd      	b.n	149b4 <cbvprintf+0x738>
   149f8:	000213fd 	.word	0x000213fd

000149fc <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   149fc:	b508      	push	{r3, lr}
   149fe:	f04f 0240 	mov.w	r2, #64	; 0x40
   14a02:	f3ef 8311 	mrs	r3, BASEPRI
   14a06:	f382 8812 	msr	BASEPRI_MAX, r2
   14a0a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   14a0e:	f001 fd59 	bl	164c4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   14a12:	4803      	ldr	r0, [pc, #12]	; (14a20 <sys_reboot+0x24>)
   14a14:	f009 fff9 	bl	1ea0a <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   14a18:	f000 ffd8 	bl	159cc <arch_cpu_idle>
   14a1c:	e7fc      	b.n	14a18 <sys_reboot+0x1c>
   14a1e:	bf00      	nop
   14a20:	000213fe 	.word	0x000213fe

00014a24 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   14a24:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   14a26:	4910      	ldr	r1, [pc, #64]	; (14a68 <enable_logger+0x44>)
   14a28:	4810      	ldr	r0, [pc, #64]	; (14a6c <enable_logger+0x48>)
{
   14a2a:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   14a2c:	2200      	movs	r2, #0
   14a2e:	f00b fecd 	bl	207cc <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14a32:	4d0f      	ldr	r5, [pc, #60]	; (14a70 <enable_logger+0x4c>)
   14a34:	490f      	ldr	r1, [pc, #60]	; (14a74 <enable_logger+0x50>)
   14a36:	2200      	movs	r2, #0
   14a38:	2300      	movs	r3, #0
   14a3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14a3e:	2400      	movs	r4, #0
   14a40:	230e      	movs	r3, #14
   14a42:	e9cd 3403 	strd	r3, r4, [sp, #12]
   14a46:	e9cd 4401 	strd	r4, r4, [sp, #4]
   14a4a:	4b0b      	ldr	r3, [pc, #44]	; (14a78 <enable_logger+0x54>)
   14a4c:	9400      	str	r4, [sp, #0]
   14a4e:	f44f 7240 	mov.w	r2, #768	; 0x300
   14a52:	4628      	mov	r0, r5
   14a54:	f006 f974 	bl	1ad40 <z_impl_k_thread_create>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread, *(uintptr_t *)&str, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
   14a58:	4908      	ldr	r1, [pc, #32]	; (14a7c <enable_logger+0x58>)
   14a5a:	4628      	mov	r0, r5
   14a5c:	f00b fbae 	bl	201bc <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   14a60:	4620      	mov	r0, r4
   14a62:	b009      	add	sp, #36	; 0x24
   14a64:	bd30      	pop	{r4, r5, pc}
   14a66:	bf00      	nop
   14a68:	00014a81 	.word	0x00014a81
   14a6c:	200014d8 	.word	0x200014d8
   14a70:	20001510 	.word	0x20001510
   14a74:	20003500 	.word	0x20003500
   14a78:	00014e9d 	.word	0x00014e9d
   14a7c:	00021427 	.word	0x00021427

00014a80 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   14a80:	4801      	ldr	r0, [pc, #4]	; (14a88 <log_process_thread_timer_expiry_fn+0x8>)
   14a82:	f006 baf5 	b.w	1b070 <z_impl_k_sem_give>
   14a86:	bf00      	nop
   14a88:	20000664 	.word	0x20000664

00014a8c <log_core_init>:
	panic_mode = false;
   14a8c:	4a0c      	ldr	r2, [pc, #48]	; (14ac0 <log_core_init+0x34>)
   14a8e:	2300      	movs	r3, #0
{
   14a90:	b510      	push	{r4, lr}
	panic_mode = false;
   14a92:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   14a94:	4a0b      	ldr	r2, [pc, #44]	; (14ac4 <log_core_init+0x38>)
   14a96:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
   14a98:	4b0b      	ldr	r3, [pc, #44]	; (14ac8 <log_core_init+0x3c>)
   14a9a:	4a0c      	ldr	r2, [pc, #48]	; (14acc <log_core_init+0x40>)
   14a9c:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   14a9e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   14aa2:	f000 fcd5 	bl	15450 <log_output_timestamp_freq_set>
		log_msg_pool_init();
   14aa6:	f000 fa77 	bl	14f98 <log_msg_pool_init>
		log_list_init(&list);
   14aaa:	4809      	ldr	r0, [pc, #36]	; (14ad0 <log_core_init+0x44>)
   14aac:	f00a faa3 	bl	1eff6 <log_list_init>
}
   14ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   14ab4:	4907      	ldr	r1, [pc, #28]	; (14ad4 <log_core_init+0x48>)
   14ab6:	4808      	ldr	r0, [pc, #32]	; (14ad8 <log_core_init+0x4c>)
   14ab8:	2308      	movs	r3, #8
   14aba:	2248      	movs	r2, #72	; 0x48
   14abc:	f00b bb34 	b.w	20128 <k_mem_slab_init>
   14ac0:	20002af9 	.word	0x20002af9
   14ac4:	2000195c 	.word	0x2000195c
   14ac8:	20000464 	.word	0x20000464
   14acc:	0001f035 	.word	0x0001f035
   14ad0:	20001964 	.word	0x20001964
   14ad4:	20006460 	.word	0x20006460
   14ad8:	2000196c 	.word	0x2000196c

00014adc <log_init>:
{
   14adc:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   14ade:	4b12      	ldr	r3, [pc, #72]	; (14b28 <log_init+0x4c>)
   14ae0:	f3bf 8f5b 	dmb	ish
   14ae4:	e853 5f00 	ldrex	r5, [r3]
   14ae8:	1c6a      	adds	r2, r5, #1
   14aea:	e843 2100 	strex	r1, r2, [r3]
   14aee:	2900      	cmp	r1, #0
   14af0:	d1f8      	bne.n	14ae4 <log_init+0x8>
   14af2:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   14af6:	b92d      	cbnz	r5, 14b04 <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   14af8:	4c0c      	ldr	r4, [pc, #48]	; (14b2c <log_init+0x50>)
   14afa:	4e0d      	ldr	r6, [pc, #52]	; (14b30 <log_init+0x54>)
   14afc:	1b36      	subs	r6, r6, r4
   14afe:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   14b00:	42b5      	cmp	r5, r6
   14b02:	db00      	blt.n	14b06 <log_init+0x2a>
}
   14b04:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   14b06:	7b23      	ldrb	r3, [r4, #12]
   14b08:	b153      	cbz	r3, 14b20 <log_init+0x44>
			if (backend->api->init != NULL) {
   14b0a:	6823      	ldr	r3, [r4, #0]
   14b0c:	699b      	ldr	r3, [r3, #24]
   14b0e:	b10b      	cbz	r3, 14b14 <log_init+0x38>
				backend->api->init(backend);
   14b10:	4620      	mov	r0, r4
   14b12:	4798      	blx	r3
			log_backend_enable(backend,
   14b14:	6863      	ldr	r3, [r4, #4]
   14b16:	2204      	movs	r2, #4
   14b18:	6819      	ldr	r1, [r3, #0]
   14b1a:	4620      	mov	r0, r4
   14b1c:	f000 fa2e 	bl	14f7c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   14b20:	3501      	adds	r5, #1
   14b22:	3410      	adds	r4, #16
   14b24:	e7ec      	b.n	14b00 <log_init+0x24>
   14b26:	bf00      	nop
   14b28:	20001960 	.word	0x20001960
   14b2c:	00020e28 	.word	0x00020e28
   14b30:	00020e48 	.word	0x00020e48

00014b34 <get_msg>:
{
   14b34:	b510      	push	{r4, lr}
   14b36:	f04f 0340 	mov.w	r3, #64	; 0x40
   14b3a:	f3ef 8411 	mrs	r4, BASEPRI
   14b3e:	f383 8812 	msr	BASEPRI_MAX, r3
   14b42:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   14b46:	4804      	ldr	r0, [pc, #16]	; (14b58 <get_msg+0x24>)
   14b48:	f00a fa65 	bl	1f016 <log_list_head_get>
	__asm__ volatile(
   14b4c:	f384 8811 	msr	BASEPRI, r4
   14b50:	f3bf 8f6f 	isb	sy
}
   14b54:	bd10      	pop	{r4, pc}
   14b56:	bf00      	nop
   14b58:	20001964 	.word	0x20001964

00014b5c <z_log_notify_backend_enabled>:
{
   14b5c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   14b5e:	4c04      	ldr	r4, [pc, #16]	; (14b70 <z_log_notify_backend_enabled+0x14>)
   14b60:	7822      	ldrb	r2, [r4, #0]
   14b62:	b912      	cbnz	r2, 14b6a <z_log_notify_backend_enabled+0xe>
   14b64:	4803      	ldr	r0, [pc, #12]	; (14b74 <z_log_notify_backend_enabled+0x18>)
   14b66:	f006 fa83 	bl	1b070 <z_impl_k_sem_give>
	backend_attached = true;
   14b6a:	2301      	movs	r3, #1
   14b6c:	7023      	strb	r3, [r4, #0]
}
   14b6e:	bd10      	pop	{r4, pc}
   14b70:	20002af8 	.word	0x20002af8
   14b74:	20000664 	.word	0x20000664

00014b78 <z_log_dropped>:
   14b78:	4b0c      	ldr	r3, [pc, #48]	; (14bac <z_log_dropped+0x34>)
   14b7a:	f3bf 8f5b 	dmb	ish
   14b7e:	e853 2f00 	ldrex	r2, [r3]
   14b82:	3201      	adds	r2, #1
   14b84:	e843 2100 	strex	r1, r2, [r3]
   14b88:	2900      	cmp	r1, #0
   14b8a:	d1f8      	bne.n	14b7e <z_log_dropped+0x6>
   14b8c:	f3bf 8f5b 	dmb	ish
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   14b90:	f3bf 8f5b 	dmb	ish
   14b94:	4b06      	ldr	r3, [pc, #24]	; (14bb0 <z_log_dropped+0x38>)
   14b96:	e853 2f00 	ldrex	r2, [r3]
   14b9a:	3a01      	subs	r2, #1
   14b9c:	e843 2100 	strex	r1, r2, [r3]
   14ba0:	2900      	cmp	r1, #0
   14ba2:	d1f8      	bne.n	14b96 <z_log_dropped+0x1e>
   14ba4:	f3bf 8f5b 	dmb	ish
}
   14ba8:	4770      	bx	lr
   14baa:	bf00      	nop
   14bac:	2000195c 	.word	0x2000195c
   14bb0:	20001958 	.word	0x20001958

00014bb4 <z_log_dropped_read_and_clear>:
}
   14bb4:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14bb6:	4b06      	ldr	r3, [pc, #24]	; (14bd0 <z_log_dropped_read_and_clear+0x1c>)
   14bb8:	f3bf 8f5b 	dmb	ish
   14bbc:	4602      	mov	r2, r0
   14bbe:	e853 0f00 	ldrex	r0, [r3]
   14bc2:	e843 2100 	strex	r1, r2, [r3]
   14bc6:	2900      	cmp	r1, #0
   14bc8:	d1f9      	bne.n	14bbe <z_log_dropped_read_and_clear+0xa>
   14bca:	f3bf 8f5b 	dmb	ish
   14bce:	4770      	bx	lr
   14bd0:	2000195c 	.word	0x2000195c

00014bd4 <dropped_notify>:
{
   14bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   14bd6:	f7ff ffed 	bl	14bb4 <z_log_dropped_read_and_clear>
   14bda:	4c0a      	ldr	r4, [pc, #40]	; (14c04 <dropped_notify+0x30>)
   14bdc:	4d0a      	ldr	r5, [pc, #40]	; (14c08 <dropped_notify+0x34>)
   14bde:	1b2d      	subs	r5, r5, r4
   14be0:	4607      	mov	r7, r0
   14be2:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   14be4:	2600      	movs	r6, #0
   14be6:	42ae      	cmp	r6, r5
   14be8:	db00      	blt.n	14bec <dropped_notify+0x18>
}
   14bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   14bec:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   14bee:	795b      	ldrb	r3, [r3, #5]
   14bf0:	b12b      	cbz	r3, 14bfe <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
   14bf2:	6823      	ldr	r3, [r4, #0]
   14bf4:	691b      	ldr	r3, [r3, #16]
   14bf6:	b113      	cbz	r3, 14bfe <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
   14bf8:	4639      	mov	r1, r7
   14bfa:	4620      	mov	r0, r4
   14bfc:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   14bfe:	3601      	adds	r6, #1
   14c00:	3410      	adds	r4, #16
   14c02:	e7f0      	b.n	14be6 <dropped_notify+0x12>
   14c04:	00020e28 	.word	0x00020e28
   14c08:	00020e48 	.word	0x00020e48

00014c0c <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   14c0c:	4b16      	ldr	r3, [pc, #88]	; (14c68 <z_log_strdup+0x5c>)
   14c0e:	4298      	cmp	r0, r3
{
   14c10:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14c12:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   14c14:	d302      	bcc.n	14c1c <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   14c16:	4b15      	ldr	r3, [pc, #84]	; (14c6c <z_log_strdup+0x60>)
   14c18:	4298      	cmp	r0, r3
   14c1a:	d320      	bcc.n	14c5e <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   14c1c:	4814      	ldr	r0, [pc, #80]	; (14c70 <z_log_strdup+0x64>)
   14c1e:	2200      	movs	r2, #0
   14c20:	2300      	movs	r3, #0
   14c22:	a901      	add	r1, sp, #4
   14c24:	f006 f82a 	bl	1ac7c <k_mem_slab_alloc>
	if (err != 0) {
   14c28:	4605      	mov	r5, r0
   14c2a:	b9d8      	cbnz	r0, 14c64 <z_log_strdup+0x58>
   14c2c:	2201      	movs	r2, #1
   14c2e:	9b01      	ldr	r3, [sp, #4]
   14c30:	f3bf 8f5b 	dmb	ish
   14c34:	e853 1f00 	ldrex	r1, [r3]
   14c38:	e843 2000 	strex	r0, r2, [r3]
   14c3c:	2800      	cmp	r0, #0
   14c3e:	d1f9      	bne.n	14c34 <z_log_strdup+0x28>
   14c40:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   14c44:	9801      	ldr	r0, [sp, #4]
   14c46:	4621      	mov	r1, r4
   14c48:	2241      	movs	r2, #65	; 0x41
   14c4a:	3004      	adds	r0, #4
   14c4c:	f00a fd80 	bl	1f750 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   14c50:	9c01      	ldr	r4, [sp, #4]
   14c52:	237e      	movs	r3, #126	; 0x7e
   14c54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   14c58:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	return dup->buf;
   14c5c:	3404      	adds	r4, #4
}
   14c5e:	4620      	mov	r0, r4
   14c60:	b003      	add	sp, #12
   14c62:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
   14c64:	4c03      	ldr	r4, [pc, #12]	; (14c74 <z_log_strdup+0x68>)
   14c66:	e7fa      	b.n	14c5e <z_log_strdup+0x52>
   14c68:	00020ac0 	.word	0x00020ac0
   14c6c:	0002242c 	.word	0x0002242c
   14c70:	2000196c 	.word	0x2000196c
   14c74:	0002142f 	.word	0x0002142f

00014c78 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   14c78:	b150      	cbz	r0, 14c90 <log_is_strdup+0x18>
   14c7a:	4b06      	ldr	r3, [pc, #24]	; (14c94 <log_is_strdup+0x1c>)
   14c7c:	4298      	cmp	r0, r3
   14c7e:	d306      	bcc.n	14c8e <log_is_strdup+0x16>
   14c80:	f503 7310 	add.w	r3, r3, #576	; 0x240
   14c84:	4298      	cmp	r0, r3
   14c86:	bf2c      	ite	cs
   14c88:	2000      	movcs	r0, #0
   14c8a:	2001      	movcc	r0, #1
   14c8c:	4770      	bx	lr
   14c8e:	2000      	movs	r0, #0
}
   14c90:	4770      	bx	lr
   14c92:	bf00      	nop
   14c94:	20006460 	.word	0x20006460

00014c98 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
   14c98:	4b43      	ldr	r3, [pc, #268]	; (14da8 <z_impl_log_process+0x110>)
   14c9a:	781b      	ldrb	r3, [r3, #0]
{
   14c9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ca0:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   14ca2:	b903      	cbnz	r3, 14ca6 <z_impl_log_process+0xe>
   14ca4:	b1a0      	cbz	r0, 14cd0 <z_impl_log_process+0x38>
	msg = get_msg();
   14ca6:	f7ff ff45 	bl	14b34 <get_msg>
	if (msg.msg) {
   14caa:	4605      	mov	r5, r0
   14cac:	b118      	cbz	r0, 14cb6 <z_impl_log_process+0x1e>
		if (!bypass) {
   14cae:	b19c      	cbz	r4, 14cd8 <z_impl_log_process+0x40>
			log_msg_put(msg.msg);
   14cb0:	4628      	mov	r0, r5
   14cb2:	f00a fad6 	bl	1f262 <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
   14cb6:	b92c      	cbnz	r4, 14cc4 <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
   14cb8:	4b3c      	ldr	r3, [pc, #240]	; (14dac <z_impl_log_process+0x114>)
	if (!bypass && z_log_dropped_pending()) {
   14cba:	681b      	ldr	r3, [r3, #0]
   14cbc:	2b00      	cmp	r3, #0
   14cbe:	dd01      	ble.n	14cc4 <z_impl_log_process+0x2c>
		dropped_notify();
   14cc0:	f7ff ff88 	bl	14bd4 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   14cc4:	483a      	ldr	r0, [pc, #232]	; (14db0 <z_impl_log_process+0x118>)
   14cc6:	f00a f9a4 	bl	1f012 <log_list_head_peek>
   14cca:	1e04      	subs	r4, r0, #0
   14ccc:	bf18      	it	ne
   14cce:	2401      	movne	r4, #1
}
   14cd0:	4620      	mov	r0, r4
   14cd2:	b003      	add	sp, #12
   14cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   14cd8:	4b36      	ldr	r3, [pc, #216]	; (14db4 <z_impl_log_process+0x11c>)
   14cda:	f3bf 8f5b 	dmb	ish
   14cde:	e853 2f00 	ldrex	r2, [r3]
   14ce2:	3a01      	subs	r2, #1
   14ce4:	e843 2100 	strex	r1, r2, [r3]
   14ce8:	2900      	cmp	r1, #0
   14cea:	d1f8      	bne.n	14cde <z_impl_log_process+0x46>
   14cec:	f3bf 8f5b 	dmb	ish
		    !panic_mode) {
   14cf0:	4b31      	ldr	r3, [pc, #196]	; (14db8 <z_impl_log_process+0x120>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
   14cf2:	781b      	ldrb	r3, [r3, #0]
   14cf4:	b9bb      	cbnz	r3, 14d26 <z_impl_log_process+0x8e>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   14cf6:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   14cf8:	07db      	lsls	r3, r3, #31
   14cfa:	d414      	bmi.n	14d26 <z_impl_log_process+0x8e>
	msg_str = log_msg_str_get(msg);
   14cfc:	f00a fac4 	bl	1f288 <log_msg_str_get>
   14d00:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   14d02:	4628      	mov	r0, r5
   14d04:	f00a fa8b 	bl	1f21e <log_msg_nargs_get>
   14d08:	4601      	mov	r1, r0
   14d0a:	4640      	mov	r0, r8
   14d0c:	f00a f996 	bl	1f03c <z_log_get_s_mask>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   14d10:	4b2a      	ldr	r3, [pc, #168]	; (14dbc <z_impl_log_process+0x124>)
   14d12:	4a2b      	ldr	r2, [pc, #172]	; (14dc0 <z_impl_log_process+0x128>)
		if (!is_rodata(str) && !log_is_strdup(str) &&
   14d14:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 14dd4 <z_impl_log_process+0x13c>
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   14d18:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 14dd8 <z_impl_log_process+0x140>
   14d1c:	1a9b      	subs	r3, r3, r2
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   14d1e:	4606      	mov	r6, r0
   14d20:	ea4f 09d3 	mov.w	r9, r3, lsr #3
	while (mask) {
   14d24:	b936      	cbnz	r6, 14d34 <z_impl_log_process+0x9c>
	return __log_backends_end - __log_backends_start;
   14d26:	4e27      	ldr	r6, [pc, #156]	; (14dc4 <z_impl_log_process+0x12c>)
   14d28:	4f27      	ldr	r7, [pc, #156]	; (14dc8 <z_impl_log_process+0x130>)
   14d2a:	1bbf      	subs	r7, r7, r6
   14d2c:	113f      	asrs	r7, r7, #4
   14d2e:	f04f 0800 	mov.w	r8, #0
   14d32:	e036      	b.n	14da2 <z_impl_log_process+0x10a>
		idx = 31 - __builtin_clz(mask);
   14d34:	fab6 f786 	clz	r7, r6
   14d38:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   14d3c:	4639      	mov	r1, r7
   14d3e:	4628      	mov	r0, r5
   14d40:	f00a fa70 	bl	1f224 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   14d44:	4b21      	ldr	r3, [pc, #132]	; (14dcc <z_impl_log_process+0x134>)
   14d46:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
   14d48:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   14d4a:	d302      	bcc.n	14d52 <z_impl_log_process+0xba>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   14d4c:	4b20      	ldr	r3, [pc, #128]	; (14dd0 <z_impl_log_process+0x138>)
   14d4e:	4298      	cmp	r0, r3
   14d50:	d316      	bcc.n	14d80 <z_impl_log_process+0xe8>
   14d52:	4610      	mov	r0, r2
   14d54:	f7ff ff90 	bl	14c78 <log_is_strdup>
   14d58:	b990      	cbnz	r0, 14d80 <z_impl_log_process+0xe8>
   14d5a:	4552      	cmp	r2, sl
   14d5c:	d010      	beq.n	14d80 <z_impl_log_process+0xe8>
	return msg->hdr.ids.source_id;
   14d5e:	8969      	ldrh	r1, [r5, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   14d60:	f3c1 1189 	ubfx	r1, r1, #6, #10
   14d64:	f000 f8fc 	bl	14f60 <log_source_name_get>
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   14d68:	ea4f 1389 	mov.w	r3, r9, lsl #6
   14d6c:	f043 0301 	orr.w	r3, r3, #1
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   14d70:	4602      	mov	r2, r0
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   14d72:	f8ad 3000 	strh.w	r3, [sp]
   14d76:	4639      	mov	r1, r7
   14d78:	4643      	mov	r3, r8
   14d7a:	4658      	mov	r0, fp
   14d7c:	f00a f9b8 	bl	1f0f0 <log_3>
		mask &= ~BIT(idx);
   14d80:	2301      	movs	r3, #1
   14d82:	fa03 f707 	lsl.w	r7, r3, r7
   14d86:	ea26 0607 	bic.w	r6, r6, r7
   14d8a:	e7cb      	b.n	14d24 <z_impl_log_process+0x8c>
	return backend->cb->active;
   14d8c:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
   14d8e:	795b      	ldrb	r3, [r3, #5]
   14d90:	b123      	cbz	r3, 14d9c <z_impl_log_process+0x104>
	backend->api->put(backend, msg);
   14d92:	6833      	ldr	r3, [r6, #0]
   14d94:	4629      	mov	r1, r5
   14d96:	685b      	ldr	r3, [r3, #4]
   14d98:	4630      	mov	r0, r6
   14d9a:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   14d9c:	f108 0801 	add.w	r8, r8, #1
   14da0:	3610      	adds	r6, #16
   14da2:	45b8      	cmp	r8, r7
   14da4:	dbf2      	blt.n	14d8c <z_impl_log_process+0xf4>
   14da6:	e783      	b.n	14cb0 <z_impl_log_process+0x18>
   14da8:	20002af8 	.word	0x20002af8
   14dac:	2000195c 	.word	0x2000195c
   14db0:	20001964 	.word	0x20001964
   14db4:	20001958 	.word	0x20001958
   14db8:	20002af9 	.word	0x20002af9
   14dbc:	00020dc8 	.word	0x00020dc8
   14dc0:	00020d88 	.word	0x00020d88
   14dc4:	00020e28 	.word	0x00020e28
   14dc8:	00020e48 	.word	0x00020e48
   14dcc:	00020ac0 	.word	0x00020ac0
   14dd0:	0002242c 	.word	0x0002242c
   14dd4:	0002142f 	.word	0x0002142f
   14dd8:	00021449 	.word	0x00021449

00014ddc <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   14ddc:	4b28      	ldr	r3, [pc, #160]	; (14e80 <msg_finalize+0xa4>)
{
   14dde:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
   14de0:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   14de2:	8141      	strh	r1, [r0, #10]
{
   14de4:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   14de6:	4798      	blx	r3
   14de8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   14dea:	f04f 0340 	mov.w	r3, #64	; 0x40
   14dee:	f3ef 8511 	mrs	r5, BASEPRI
   14df2:	f383 8812 	msr	BASEPRI_MAX, r3
   14df6:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   14dfa:	4822      	ldr	r0, [pc, #136]	; (14e84 <msg_finalize+0xa8>)
   14dfc:	4621      	mov	r1, r4
   14dfe:	f00a f8fe 	bl	1effe <log_list_add_tail>
	__asm__ volatile(
   14e02:	f385 8811 	msr	BASEPRI, r5
   14e06:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   14e0a:	f3bf 8f5b 	dmb	ish
   14e0e:	4b1e      	ldr	r3, [pc, #120]	; (14e88 <msg_finalize+0xac>)
   14e10:	e853 2f00 	ldrex	r2, [r3]
   14e14:	1c51      	adds	r1, r2, #1
   14e16:	e843 1000 	strex	r0, r1, [r3]
   14e1a:	2800      	cmp	r0, #0
   14e1c:	d1f8      	bne.n	14e10 <msg_finalize+0x34>
   14e1e:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   14e22:	4b1a      	ldr	r3, [pc, #104]	; (14e8c <msg_finalize+0xb0>)
   14e24:	781b      	ldrb	r3, [r3, #0]
   14e26:	b183      	cbz	r3, 14e4a <msg_finalize+0x6e>
	__asm__ volatile(
   14e28:	f04f 0340 	mov.w	r3, #64	; 0x40
   14e2c:	f3ef 8411 	mrs	r4, BASEPRI
   14e30:	f383 8812 	msr	BASEPRI_MAX, r3
   14e34:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   14e38:	2000      	movs	r0, #0
   14e3a:	f7ff ff2d 	bl	14c98 <z_impl_log_process>
	__asm__ volatile(
   14e3e:	f384 8811 	msr	BASEPRI, r4
   14e42:	f3bf 8f6f 	isb	sy
}
   14e46:	b003      	add	sp, #12
   14e48:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && cnt == 0) {
   14e4a:	4b11      	ldr	r3, [pc, #68]	; (14e90 <msg_finalize+0xb4>)
   14e4c:	681b      	ldr	r3, [r3, #0]
   14e4e:	2b00      	cmp	r3, #0
   14e50:	d0f9      	beq.n	14e46 <msg_finalize+0x6a>
   14e52:	b952      	cbnz	r2, 14e6a <msg_finalize+0x8e>
	z_impl_k_timer_start(timer, duration, period);
   14e54:	2200      	movs	r2, #0
   14e56:	2300      	movs	r3, #0
   14e58:	e9cd 2300 	strd	r2, r3, [sp]
   14e5c:	480d      	ldr	r0, [pc, #52]	; (14e94 <msg_finalize+0xb8>)
   14e5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   14e62:	2300      	movs	r3, #0
   14e64:	f006 ffee 	bl	1be44 <z_impl_k_timer_start>
   14e68:	e7ed      	b.n	14e46 <msg_finalize+0x6a>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   14e6a:	2a0a      	cmp	r2, #10
   14e6c:	d1eb      	bne.n	14e46 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
   14e6e:	4809      	ldr	r0, [pc, #36]	; (14e94 <msg_finalize+0xb8>)
   14e70:	f00b fcb8 	bl	207e4 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   14e74:	4808      	ldr	r0, [pc, #32]	; (14e98 <msg_finalize+0xbc>)
}
   14e76:	b003      	add	sp, #12
   14e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   14e7c:	f006 b8f8 	b.w	1b070 <z_impl_k_sem_give>
   14e80:	20000464 	.word	0x20000464
   14e84:	20001964 	.word	0x20001964
   14e88:	20001958 	.word	0x20001958
   14e8c:	20002af9 	.word	0x20002af9
   14e90:	20001988 	.word	0x20001988
   14e94:	200014d8 	.word	0x200014d8
   14e98:	20000664 	.word	0x20000664

00014e9c <log_process_thread_func>:
{
   14e9c:	b510      	push	{r4, lr}
	log_init();
   14e9e:	f7ff fe1d 	bl	14adc <log_init>
	return z_impl_z_current_get();
   14ea2:	f006 fd99 	bl	1b9d8 <z_impl_z_current_get>
	proc_tid = process_tid;
   14ea6:	4b0c      	ldr	r3, [pc, #48]	; (14ed8 <log_process_thread_func+0x3c>)
   14ea8:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   14eaa:	b130      	cbz	r0, 14eba <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   14eac:	4b0b      	ldr	r3, [pc, #44]	; (14edc <log_process_thread_func+0x40>)
	    process_tid &&
   14eae:	681b      	ldr	r3, [r3, #0]
   14eb0:	2b09      	cmp	r3, #9
   14eb2:	dd02      	ble.n	14eba <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
   14eb4:	480a      	ldr	r0, [pc, #40]	; (14ee0 <log_process_thread_func+0x44>)
   14eb6:	f006 f8db 	bl	1b070 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   14eba:	4c09      	ldr	r4, [pc, #36]	; (14ee0 <log_process_thread_func+0x44>)
   14ebc:	2000      	movs	r0, #0
   14ebe:	f7ff feeb 	bl	14c98 <z_impl_log_process>
		if (log_process(false) == false) {
   14ec2:	2800      	cmp	r0, #0
   14ec4:	d1fa      	bne.n	14ebc <log_process_thread_func+0x20>
   14ec6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14eca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14ece:	4620      	mov	r0, r4
   14ed0:	f006 f8f4 	bl	1b0bc <z_impl_k_sem_take>
   14ed4:	e7f2      	b.n	14ebc <log_process_thread_func+0x20>
   14ed6:	bf00      	nop
   14ed8:	20001988 	.word	0x20001988
   14edc:	20001958 	.word	0x20001958
   14ee0:	20000664 	.word	0x20000664

00014ee4 <z_impl_log_panic>:
{
   14ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   14ee6:	4f0e      	ldr	r7, [pc, #56]	; (14f20 <z_impl_log_panic+0x3c>)
   14ee8:	783d      	ldrb	r5, [r7, #0]
   14eea:	b975      	cbnz	r5, 14f0a <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
   14eec:	4c0d      	ldr	r4, [pc, #52]	; (14f24 <z_impl_log_panic+0x40>)
   14eee:	4e0e      	ldr	r6, [pc, #56]	; (14f28 <z_impl_log_panic+0x44>)
	log_init();
   14ef0:	f7ff fdf4 	bl	14adc <log_init>
   14ef4:	1b36      	subs	r6, r6, r4
   14ef6:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   14ef8:	42b5      	cmp	r5, r6
   14efa:	db07      	blt.n	14f0c <z_impl_log_panic+0x28>
   14efc:	2000      	movs	r0, #0
   14efe:	f7ff fecb 	bl	14c98 <z_impl_log_process>
		while (log_process(false) == true) {
   14f02:	2800      	cmp	r0, #0
   14f04:	d1fa      	bne.n	14efc <z_impl_log_panic+0x18>
	panic_mode = true;
   14f06:	2301      	movs	r3, #1
   14f08:	703b      	strb	r3, [r7, #0]
}
   14f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   14f0c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   14f0e:	795b      	ldrb	r3, [r3, #5]
   14f10:	b11b      	cbz	r3, 14f1a <z_impl_log_panic+0x36>
	backend->api->panic(backend);
   14f12:	6823      	ldr	r3, [r4, #0]
   14f14:	4620      	mov	r0, r4
   14f16:	695b      	ldr	r3, [r3, #20]
   14f18:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   14f1a:	3501      	adds	r5, #1
   14f1c:	3410      	adds	r4, #16
   14f1e:	e7eb      	b.n	14ef8 <z_impl_log_panic+0x14>
   14f20:	20002af9 	.word	0x20002af9
   14f24:	00020e28 	.word	0x00020e28
   14f28:	00020e48 	.word	0x00020e48

00014f2c <z_log_free>:
{
   14f2c:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   14f2e:	3804      	subs	r0, #4
   14f30:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   14f32:	f3bf 8f5b 	dmb	ish
   14f36:	e850 3f00 	ldrex	r3, [r0]
   14f3a:	1e5a      	subs	r2, r3, #1
   14f3c:	e840 2100 	strex	r1, r2, [r0]
   14f40:	2900      	cmp	r1, #0
   14f42:	d1f8      	bne.n	14f36 <z_log_free+0xa>
   14f44:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
   14f48:	2b01      	cmp	r3, #1
   14f4a:	d103      	bne.n	14f54 <z_log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   14f4c:	4803      	ldr	r0, [pc, #12]	; (14f5c <z_log_free+0x30>)
   14f4e:	a901      	add	r1, sp, #4
   14f50:	f00b f905 	bl	2015e <k_mem_slab_free>
}
   14f54:	b003      	add	sp, #12
   14f56:	f85d fb04 	ldr.w	pc, [sp], #4
   14f5a:	bf00      	nop
   14f5c:	2000196c 	.word	0x2000196c

00014f60 <log_source_name_get>:
   14f60:	4a04      	ldr	r2, [pc, #16]	; (14f74 <log_source_name_get+0x14>)
   14f62:	4b05      	ldr	r3, [pc, #20]	; (14f78 <log_source_name_get+0x18>)
   14f64:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   14f66:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   14f6a:	bf34      	ite	cc
   14f6c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   14f70:	2000      	movcs	r0, #0
}
   14f72:	4770      	bx	lr
   14f74:	00020d88 	.word	0x00020d88
   14f78:	00020e28 	.word	0x00020e28

00014f7c <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   14f7c:	4b05      	ldr	r3, [pc, #20]	; (14f94 <log_backend_enable+0x18>)

	log_backend_id_set(backend, id);
   14f7e:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
   14f80:	1ac3      	subs	r3, r0, r3
   14f82:	111b      	asrs	r3, r3, #4
   14f84:	3301      	adds	r3, #1
	log_backend_id_set(backend, id);
   14f86:	7113      	strb	r3, [r2, #4]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);
   14f88:	6843      	ldr	r3, [r0, #4]
	backend->cb->active = true;
   14f8a:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
   14f8c:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   14f8e:	715a      	strb	r2, [r3, #5]

	z_log_notify_backend_enabled();
   14f90:	f7ff bde4 	b.w	14b5c <z_log_notify_backend_enabled>
   14f94:	00020e28 	.word	0x00020e28

00014f98 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   14f98:	2320      	movs	r3, #32
   14f9a:	4902      	ldr	r1, [pc, #8]	; (14fa4 <log_msg_pool_init+0xc>)
   14f9c:	4802      	ldr	r0, [pc, #8]	; (14fa8 <log_msg_pool_init+0x10>)
   14f9e:	461a      	mov	r2, r3
   14fa0:	f00b b8c2 	b.w	20128 <k_mem_slab_init>
   14fa4:	200066a0 	.word	0x200066a0
   14fa8:	2000198c 	.word	0x2000198c

00014fac <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   14fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
   14fae:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   14fb0:	4d09      	ldr	r5, [pc, #36]	; (14fd8 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   14fb2:	9301      	str	r3, [sp, #4]
   14fb4:	2001      	movs	r0, #1
   14fb6:	f7ff fe6f 	bl	14c98 <z_impl_log_process>
   14fba:	4604      	mov	r4, r0
			z_log_dropped();
   14fbc:	f7ff fddc 	bl	14b78 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   14fc0:	2200      	movs	r2, #0
   14fc2:	2300      	movs	r3, #0
   14fc4:	a901      	add	r1, sp, #4
   14fc6:	4628      	mov	r0, r5
   14fc8:	f005 fe58 	bl	1ac7c <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   14fcc:	b108      	cbz	r0, 14fd2 <log_msg_no_space_handle+0x26>
   14fce:	2c00      	cmp	r4, #0
   14fd0:	d1f0      	bne.n	14fb4 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   14fd2:	9801      	ldr	r0, [sp, #4]
   14fd4:	b003      	add	sp, #12
   14fd6:	bd30      	pop	{r4, r5, pc}
   14fd8:	2000198c 	.word	0x2000198c

00014fdc <log_msg_chunk_alloc>:
{
   14fdc:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
   14fde:	2300      	movs	r3, #0
   14fe0:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   14fe2:	4807      	ldr	r0, [pc, #28]	; (15000 <log_msg_chunk_alloc+0x24>)
   14fe4:	2200      	movs	r2, #0
   14fe6:	2300      	movs	r3, #0
   14fe8:	a901      	add	r1, sp, #4
   14fea:	f005 fe47 	bl	1ac7c <k_mem_slab_alloc>
	if (err != 0) {
   14fee:	b110      	cbz	r0, 14ff6 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   14ff0:	f7ff ffdc 	bl	14fac <log_msg_no_space_handle>
   14ff4:	9001      	str	r0, [sp, #4]
}
   14ff6:	9801      	ldr	r0, [sp, #4]
   14ff8:	b003      	add	sp, #12
   14ffa:	f85d fb04 	ldr.w	pc, [sp], #4
   14ffe:	bf00      	nop
   15000:	2000198c 	.word	0x2000198c

00015004 <msg_free>:
{
   15004:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   15006:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   15008:	7a45      	ldrb	r5, [r0, #9]
{
   1500a:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
   1500c:	092d      	lsrs	r5, r5, #4
{
   1500e:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   15010:	07d8      	lsls	r0, r3, #31
   15012:	d41c      	bmi.n	1504e <msg_free+0x4a>
   15014:	b1dd      	cbz	r5, 1504e <msg_free+0x4a>
		uint32_t smask = 0U;
   15016:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
   15018:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   1501a:	9801      	ldr	r0, [sp, #4]
   1501c:	4631      	mov	r1, r6
   1501e:	f00a f901 	bl	1f224 <log_msg_arg_get>
   15022:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   15024:	f7ff fe28 	bl	14c78 <log_is_strdup>
   15028:	b170      	cbz	r0, 15048 <msg_free+0x44>
				if (smask == 0U) {
   1502a:	b934      	cbnz	r4, 1503a <msg_free+0x36>
					smask = z_log_get_s_mask(
   1502c:	9b01      	ldr	r3, [sp, #4]
   1502e:	4629      	mov	r1, r5
   15030:	6918      	ldr	r0, [r3, #16]
   15032:	f00a f803 	bl	1f03c <z_log_get_s_mask>
					if (smask == 0U) {
   15036:	4604      	mov	r4, r0
   15038:	b148      	cbz	r0, 1504e <msg_free+0x4a>
				if (smask & BIT(i)) {
   1503a:	fa24 f306 	lsr.w	r3, r4, r6
   1503e:	07d9      	lsls	r1, r3, #31
   15040:	d502      	bpl.n	15048 <msg_free+0x44>
					z_log_free(buf);
   15042:	4638      	mov	r0, r7
   15044:	f7ff ff72 	bl	14f2c <z_log_free>
		for (i = 0U; i < nargs; i++) {
   15048:	3601      	adds	r6, #1
   1504a:	42ae      	cmp	r6, r5
   1504c:	d3e5      	bcc.n	1501a <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
   1504e:	9b01      	ldr	r3, [sp, #4]
   15050:	7a1a      	ldrb	r2, [r3, #8]
   15052:	0792      	lsls	r2, r2, #30
   15054:	d504      	bpl.n	15060 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
   15056:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   15058:	4c08      	ldr	r4, [pc, #32]	; (1507c <msg_free+0x78>)
   1505a:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   1505c:	9b03      	ldr	r3, [sp, #12]
   1505e:	b92b      	cbnz	r3, 1506c <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   15060:	4806      	ldr	r0, [pc, #24]	; (1507c <msg_free+0x78>)
   15062:	a901      	add	r1, sp, #4
   15064:	f00b f87b 	bl	2015e <k_mem_slab_free>
}
   15068:	b005      	add	sp, #20
   1506a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   1506c:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   1506e:	a903      	add	r1, sp, #12
   15070:	4620      	mov	r0, r4
   15072:	f00b f874 	bl	2015e <k_mem_slab_free>
		cont = next;
   15076:	9503      	str	r5, [sp, #12]
   15078:	e7f0      	b.n	1505c <msg_free+0x58>
   1507a:	bf00      	nop
   1507c:	2000198c 	.word	0x2000198c

00015080 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   15080:	b40e      	push	{r1, r2, r3}
   15082:	b503      	push	{r0, r1, lr}
   15084:	ab03      	add	r3, sp, #12
   15086:	4601      	mov	r1, r0
   15088:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   1508c:	4804      	ldr	r0, [pc, #16]	; (150a0 <print_formatted+0x20>)
	va_start(args, fmt);
   1508e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   15090:	f7ff f8f4 	bl	1427c <cbvprintf>
	va_end(args);

	return length;
}
   15094:	b002      	add	sp, #8
   15096:	f85d eb04 	ldr.w	lr, [sp], #4
   1509a:	b003      	add	sp, #12
   1509c:	4770      	bx	lr
   1509e:	bf00      	nop
   150a0:	0001f6d7 	.word	0x0001f6d7

000150a4 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   150a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150a8:	b087      	sub	sp, #28
   150aa:	461f      	mov	r7, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   150ac:	f001 0301 	and.w	r3, r1, #1
{
   150b0:	9205      	str	r2, [sp, #20]
   150b2:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
   150b6:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   150ba:	9304      	str	r3, [sp, #16]
{
   150bc:	4606      	mov	r6, r0
   150be:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   150c0:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   150c4:	f001 0508 	and.w	r5, r1, #8
	const char *tag = z_log_get_tag();
   150c8:	f00a f844 	bl	1f154 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   150cc:	4602      	mov	r2, r0
   150ce:	2800      	cmp	r0, #0
   150d0:	d044      	beq.n	1515c <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
   150d2:	4939      	ldr	r1, [pc, #228]	; (151b8 <prefix_print+0x114>)
   150d4:	4630      	mov	r0, r6
   150d6:	f7ff ffd3 	bl	15080 <print_formatted>
   150da:	4604      	mov	r4, r0
	}

	if (stamp) {
   150dc:	f1bb 0f00 	cmp.w	fp, #0
   150e0:	d008      	beq.n	150f4 <prefix_print+0x50>
	if (!format) {
   150e2:	f018 0f44 	tst.w	r8, #68	; 0x44
   150e6:	d13b      	bne.n	15160 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
   150e8:	4934      	ldr	r1, [pc, #208]	; (151bc <prefix_print+0x118>)
   150ea:	463a      	mov	r2, r7
   150ec:	4630      	mov	r0, r6
   150ee:	f7ff ffc7 	bl	15080 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   150f2:	4404      	add	r4, r0
	if (color) {
   150f4:	9b04      	ldr	r3, [sp, #16]
   150f6:	b153      	cbz	r3, 1510e <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
   150f8:	4b31      	ldr	r3, [pc, #196]	; (151c0 <prefix_print+0x11c>)
		print_formatted(output, "%s", log_color);
   150fa:	4932      	ldr	r1, [pc, #200]	; (151c4 <prefix_print+0x120>)
		const char *log_color = start && (colors[level] != NULL) ?
   150fc:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
   15100:	4b31      	ldr	r3, [pc, #196]	; (151c8 <prefix_print+0x124>)
   15102:	4630      	mov	r0, r6
   15104:	2a00      	cmp	r2, #0
   15106:	bf08      	it	eq
   15108:	461a      	moveq	r2, r3
   1510a:	f7ff ffb9 	bl	15080 <print_formatted>
	if (level_on) {
   1510e:	b13d      	cbz	r5, 15120 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
   15110:	4b2e      	ldr	r3, [pc, #184]	; (151cc <prefix_print+0x128>)
   15112:	492f      	ldr	r1, [pc, #188]	; (151d0 <prefix_print+0x12c>)
   15114:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
   15118:	4630      	mov	r0, r6
   1511a:	f7ff ffb1 	bl	15080 <print_formatted>
   1511e:	4605      	mov	r5, r0
	if (source_id >= 0) {
   15120:	f1ba 0f00 	cmp.w	sl, #0
   15124:	db16      	blt.n	15154 <prefix_print+0xb0>
		total += print_formatted(output,
   15126:	9b05      	ldr	r3, [sp, #20]
   15128:	2b00      	cmp	r3, #0
   1512a:	d043      	beq.n	151b4 <prefix_print+0x110>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   1512c:	2301      	movs	r3, #1
   1512e:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
   15132:	4b28      	ldr	r3, [pc, #160]	; (151d4 <prefix_print+0x130>)
   15134:	4f28      	ldr	r7, [pc, #160]	; (151d8 <prefix_print+0x134>)
   15136:	f019 0f10 	tst.w	r9, #16
   1513a:	bf18      	it	ne
   1513c:	461f      	movne	r7, r3
   1513e:	4651      	mov	r1, sl
   15140:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   15144:	f7ff ff0c 	bl	14f60 <log_source_name_get>
   15148:	4639      	mov	r1, r7
   1514a:	4602      	mov	r2, r0
   1514c:	4630      	mov	r0, r6
   1514e:	f7ff ff97 	bl	15080 <print_formatted>
   15152:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
   15154:	1928      	adds	r0, r5, r4
   15156:	b007      	add	sp, #28
   15158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   1515c:	4604      	mov	r4, r0
   1515e:	e7bd      	b.n	150dc <prefix_print+0x38>
	} else if (freq != 0U) {
   15160:	4b1e      	ldr	r3, [pc, #120]	; (151dc <prefix_print+0x138>)
   15162:	6818      	ldr	r0, [r3, #0]
   15164:	2800      	cmp	r0, #0
   15166:	d0c4      	beq.n	150f2 <prefix_print+0x4e>
		timestamp /= timestamp_div;
   15168:	4b1d      	ldr	r3, [pc, #116]	; (151e0 <prefix_print+0x13c>)
   1516a:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
   1516e:	6819      	ldr	r1, [r3, #0]
   15170:	fbb7 f7f1 	udiv	r7, r7, r1
		total_seconds = timestamp / freq;
   15174:	fbb7 f1f0 	udiv	r1, r7, r0
		remainder = timestamp % freq;
   15178:	fb00 7711 	mls	r7, r0, r1, r7
   1517c:	fbb1 f2fc 	udiv	r2, r1, ip
   15180:	fb0c 1c12 	mls	ip, ip, r2, r1
		ms = (remainder * 1000U) / freq;
   15184:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   15188:	434f      	muls	r7, r1
		mins = seconds / 60U;
   1518a:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1518e:	fbb7 f8f0 	udiv	r8, r7, r0
   15192:	fb00 7718 	mls	r7, r0, r8, r7
   15196:	434f      	muls	r7, r1
		mins = seconds / 60U;
   15198:	fbbc f3fe 	udiv	r3, ip, lr
			length = print_formatted(output,
   1519c:	fb0e c113 	mls	r1, lr, r3, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   151a0:	fbb7 f0f0 	udiv	r0, r7, r0
			length = print_formatted(output,
   151a4:	9100      	str	r1, [sp, #0]
   151a6:	e9cd 8001 	strd	r8, r0, [sp, #4]
   151aa:	490e      	ldr	r1, [pc, #56]	; (151e4 <prefix_print+0x140>)
   151ac:	4630      	mov	r0, r6
   151ae:	f7ff ff67 	bl	15080 <print_formatted>
   151b2:	e79e      	b.n	150f2 <prefix_print+0x4e>
		total += print_formatted(output,
   151b4:	4f08      	ldr	r7, [pc, #32]	; (151d8 <prefix_print+0x134>)
   151b6:	e7c2      	b.n	1513e <prefix_print+0x9a>
   151b8:	0002149b 	.word	0x0002149b
   151bc:	0002149f 	.word	0x0002149f
   151c0:	00020ef0 	.word	0x00020ef0
   151c4:	00021ec7 	.word	0x00021ec7
   151c8:	0002148d 	.word	0x0002148d
   151cc:	00020f04 	.word	0x00020f04
   151d0:	000214c4 	.word	0x000214c4
   151d4:	00021497 	.word	0x00021497
   151d8:	00021492 	.word	0x00021492
   151dc:	200019a8 	.word	0x200019a8
   151e0:	200019ac 	.word	0x200019ac
   151e4:	000214a8 	.word	0x000214a8

000151e8 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
   151e8:	b538      	push	{r3, r4, r5, lr}
   151ea:	460c      	mov	r4, r1
	if (color) {
   151ec:	07e1      	lsls	r1, r4, #31
{
   151ee:	4605      	mov	r5, r0
	if (color) {
   151f0:	d503      	bpl.n	151fa <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
   151f2:	4a08      	ldr	r2, [pc, #32]	; (15214 <postfix_print+0x2c>)
   151f4:	4908      	ldr	r1, [pc, #32]	; (15218 <postfix_print+0x30>)
   151f6:	f7ff ff43 	bl	15080 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   151fa:	06e2      	lsls	r2, r4, #27
   151fc:	d408      	bmi.n	15210 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   151fe:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   15200:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
   15202:	bf4c      	ite	mi
   15204:	4905      	ldrmi	r1, [pc, #20]	; (1521c <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   15206:	4906      	ldrpl	r1, [pc, #24]	; (15220 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
   15208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
   1520c:	f7ff bf38 	b.w	15080 <print_formatted>
}
   15210:	bd38      	pop	{r3, r4, r5, pc}
   15212:	bf00      	nop
   15214:	0002148d 	.word	0x0002148d
   15218:	00021ec7 	.word	0x00021ec7
   1521c:	000214cb 	.word	0x000214cb
   15220:	000214ca 	.word	0x000214ca

00015224 <hexdump_line_print>:
{
   15224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15228:	461d      	mov	r5, r3
   1522a:	9b08      	ldr	r3, [sp, #32]
   1522c:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1522e:	06da      	lsls	r2, r3, #27
{
   15230:	4604      	mov	r4, r0
   15232:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   15234:	d405      	bmi.n	15242 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   15236:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   15238:	bf4c      	ite	mi
   1523a:	492a      	ldrmi	r1, [pc, #168]	; (152e4 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
   1523c:	492a      	ldrpl	r1, [pc, #168]	; (152e8 <hexdump_line_print+0xc4>)
   1523e:	f7ff ff1f 	bl	15080 <print_formatted>
		print_formatted(output, " ");
   15242:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 152f0 <hexdump_line_print+0xcc>
{
   15246:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
   1524a:	45a8      	cmp	r8, r5
   1524c:	db2a      	blt.n	152a4 <hexdump_line_print+0x80>
			print_formatted(output, "   ");
   1524e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 152f4 <hexdump_line_print+0xd0>
			print_formatted(output, "%02x ", data[i]);
   15252:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 152f8 <hexdump_line_print+0xd4>
			print_formatted(output, " ");
   15256:	f8df a098 	ldr.w	sl, [pc, #152]	; 152f0 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1525a:	2500      	movs	r5, #0
		if (i < length) {
   1525c:	42bd      	cmp	r5, r7
   1525e:	d22f      	bcs.n	152c0 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
   15260:	5d72      	ldrb	r2, [r6, r5]
   15262:	4649      	mov	r1, r9
   15264:	4620      	mov	r0, r4
   15266:	f7ff ff0b 	bl	15080 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1526a:	3501      	adds	r5, #1
   1526c:	2d10      	cmp	r5, #16
   1526e:	d120      	bne.n	152b2 <hexdump_line_print+0x8e>
	print_formatted(output, "|");
   15270:	491e      	ldr	r1, [pc, #120]	; (152ec <hexdump_line_print+0xc8>)
			print_formatted(output, " ");
   15272:	f8df 807c 	ldr.w	r8, [pc, #124]	; 152f0 <hexdump_line_print+0xcc>
			print_formatted(output, "%c",
   15276:	f8df 9084 	ldr.w	r9, [pc, #132]	; 152fc <hexdump_line_print+0xd8>
	print_formatted(output, "|");
   1527a:	4620      	mov	r0, r4
   1527c:	f7ff ff00 	bl	15080 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   15280:	2500      	movs	r5, #0
		if (i < length) {
   15282:	42af      	cmp	r7, r5
   15284:	d928      	bls.n	152d8 <hexdump_line_print+0xb4>
			char c = (char)data[i];
   15286:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
   15288:	f1a2 0320 	sub.w	r3, r2, #32
   1528c:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
   1528e:	bf28      	it	cs
   15290:	222e      	movcs	r2, #46	; 0x2e
   15292:	4649      	mov	r1, r9
   15294:	4620      	mov	r0, r4
   15296:	f7ff fef3 	bl	15080 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1529a:	3501      	adds	r5, #1
   1529c:	2d10      	cmp	r5, #16
   1529e:	d114      	bne.n	152ca <hexdump_line_print+0xa6>
}
   152a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
   152a4:	4649      	mov	r1, r9
   152a6:	4620      	mov	r0, r4
   152a8:	f7ff feea 	bl	15080 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   152ac:	f108 0801 	add.w	r8, r8, #1
   152b0:	e7cb      	b.n	1524a <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   152b2:	076a      	lsls	r2, r5, #29
   152b4:	d1d2      	bne.n	1525c <hexdump_line_print+0x38>
			print_formatted(output, " ");
   152b6:	4651      	mov	r1, sl
   152b8:	4620      	mov	r0, r4
   152ba:	f7ff fee1 	bl	15080 <print_formatted>
   152be:	e7cd      	b.n	1525c <hexdump_line_print+0x38>
			print_formatted(output, "   ");
   152c0:	4641      	mov	r1, r8
   152c2:	4620      	mov	r0, r4
   152c4:	f7ff fedc 	bl	15080 <print_formatted>
   152c8:	e7cf      	b.n	1526a <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   152ca:	076b      	lsls	r3, r5, #29
   152cc:	d1d9      	bne.n	15282 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
   152ce:	4641      	mov	r1, r8
   152d0:	4620      	mov	r0, r4
   152d2:	f7ff fed5 	bl	15080 <print_formatted>
   152d6:	e7d4      	b.n	15282 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
   152d8:	4641      	mov	r1, r8
   152da:	4620      	mov	r0, r4
   152dc:	f7ff fed0 	bl	15080 <print_formatted>
   152e0:	e7db      	b.n	1529a <hexdump_line_print+0x76>
   152e2:	bf00      	nop
   152e4:	000214cb 	.word	0x000214cb
   152e8:	000214ca 	.word	0x000214ca
   152ec:	000214d7 	.word	0x000214d7
   152f0:	000214d5 	.word	0x000214d5
   152f4:	000214d3 	.word	0x000214d3
   152f8:	000214cd 	.word	0x000214cd
   152fc:	000214d9 	.word	0x000214d9

00015300 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   15300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   15304:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
   15306:	f013 0807 	ands.w	r8, r3, #7
{
   1530a:	4617      	mov	r7, r2
   1530c:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1530e:	7a0a      	ldrb	r2, [r1, #8]
   15310:	4605      	mov	r5, r0
   15312:	460e      	mov	r6, r1
			0 : prefix_print(output, flags, std_msg, timestamp,
   15314:	d021      	beq.n	1535a <log_output_msg_process+0x5a>
	return msg->hdr.ids.source_id;
   15316:	8949      	ldrh	r1, [r1, #10]
   15318:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1531c:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   15320:	43d2      	mvns	r2, r2
   15322:	e9cd 8300 	strd	r8, r3, [sp]
   15326:	9102      	str	r1, [sp, #8]
   15328:	68f3      	ldr	r3, [r6, #12]
   1532a:	f002 0201 	and.w	r2, r2, #1
   1532e:	4639      	mov	r1, r7
   15330:	f7ff feb8 	bl	150a4 <prefix_print>
   15334:	4681      	mov	r9, r0
   15336:	7a34      	ldrb	r4, [r6, #8]
   15338:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   1533a:	f014 0401 	ands.w	r4, r4, #1
   1533e:	d00e      	beq.n	1535e <log_output_msg_process+0x5e>
		std_print(msg, output);
   15340:	4629      	mov	r1, r5
   15342:	4630      	mov	r0, r6
   15344:	f00a f85d 	bl	1f402 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
   15348:	f1b8 0f00 	cmp.w	r8, #0
   1534c:	d02b      	beq.n	153a6 <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
   1534e:	4642      	mov	r2, r8
   15350:	4639      	mov	r1, r7
   15352:	4628      	mov	r0, r5
   15354:	f7ff ff48 	bl	151e8 <postfix_print>
   15358:	e025      	b.n	153a6 <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
   1535a:	46c1      	mov	r9, r8
   1535c:	e7eb      	b.n	15336 <log_output_msg_process+0x36>
	} else if (raw_string) {
   1535e:	f1b8 0f00 	cmp.w	r8, #0
   15362:	d126      	bne.n	153b2 <log_output_msg_process+0xb2>
	size_t offset = 0;
   15364:	4627      	mov	r7, r4
		length = output->size;
   15366:	68eb      	ldr	r3, [r5, #12]
   15368:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   1536a:	aa06      	add	r2, sp, #24
   1536c:	463b      	mov	r3, r7
   1536e:	68a9      	ldr	r1, [r5, #8]
   15370:	4630      	mov	r0, r6
   15372:	f00a f832 	bl	1f3da <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   15376:	9a06      	ldr	r2, [sp, #24]
   15378:	686b      	ldr	r3, [r5, #4]
   1537a:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   1537c:	b13a      	cbz	r2, 1538e <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
   1537e:	68ab      	ldr	r3, [r5, #8]
   15380:	4413      	add	r3, r2
   15382:	f813 4c01 	ldrb.w	r4, [r3, #-1]
   15386:	f1a4 030a 	sub.w	r3, r4, #10
   1538a:	425c      	negs	r4, r3
   1538c:	415c      	adcs	r4, r3
		log_output_flush(output);
   1538e:	4628      	mov	r0, r5
   15390:	f00a f994 	bl	1f6bc <log_output_flush>
		offset += length;
   15394:	9b06      	ldr	r3, [sp, #24]
   15396:	441f      	add	r7, r3
	} while (length > 0);
   15398:	2b00      	cmp	r3, #0
   1539a:	d1e4      	bne.n	15366 <log_output_msg_process+0x66>
	if (eol) {
   1539c:	b11c      	cbz	r4, 153a6 <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
   1539e:	4914      	ldr	r1, [pc, #80]	; (153f0 <log_output_msg_process+0xf0>)
   153a0:	4628      	mov	r0, r5
   153a2:	f7ff fe6d 	bl	15080 <print_formatted>
	}

	log_output_flush(output);
   153a6:	4628      	mov	r0, r5
   153a8:	f00a f988 	bl	1f6bc <log_output_flush>
}
   153ac:	b00a      	add	sp, #40	; 0x28
   153ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
   153b2:	4630      	mov	r0, r6
   153b4:	f009 ff68 	bl	1f288 <log_msg_str_get>
   153b8:	490e      	ldr	r1, [pc, #56]	; (153f4 <log_output_msg_process+0xf4>)
   153ba:	4602      	mov	r2, r0
   153bc:	4628      	mov	r0, r5
   153be:	f7ff fe5f 	bl	15080 <print_formatted>
		length = sizeof(buf);
   153c2:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   153c6:	aa05      	add	r2, sp, #20
   153c8:	4623      	mov	r3, r4
   153ca:	a906      	add	r1, sp, #24
   153cc:	4630      	mov	r0, r6
		length = sizeof(buf);
   153ce:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   153d2:	f00a f802 	bl	1f3da <log_msg_hexdump_data_get>
		if (length) {
   153d6:	9a05      	ldr	r2, [sp, #20]
   153d8:	2a00      	cmp	r2, #0
   153da:	d0b8      	beq.n	1534e <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
   153dc:	464b      	mov	r3, r9
   153de:	9700      	str	r7, [sp, #0]
   153e0:	a906      	add	r1, sp, #24
   153e2:	4628      	mov	r0, r5
   153e4:	f7ff ff1e 	bl	15224 <hexdump_line_print>
			offset += length;
   153e8:	9b05      	ldr	r3, [sp, #20]
   153ea:	441c      	add	r4, r3
		length = sizeof(buf);
   153ec:	e7eb      	b.n	153c6 <log_output_msg_process+0xc6>
   153ee:	bf00      	nop
   153f0:	000214dc 	.word	0x000214dc
   153f4:	00021ec7 	.word	0x00021ec7

000153f8 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   153f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   153fa:	f242 730f 	movw	r3, #9999	; 0x270f
   153fe:	428b      	cmp	r3, r1
   15400:	bf28      	it	cs
   15402:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   15404:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   15406:	4a0f      	ldr	r2, [pc, #60]	; (15444 <log_output_dropped_process+0x4c>)
{
   15408:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1540a:	2105      	movs	r1, #5
   1540c:	4668      	mov	r0, sp
   1540e:	f009 fb09 	bl	1ea24 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   15412:	6863      	ldr	r3, [r4, #4]
   15414:	490c      	ldr	r1, [pc, #48]	; (15448 <log_output_dropped_process+0x50>)
   15416:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   15418:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1541a:	220b      	movs	r2, #11
   1541c:	4628      	mov	r0, r5
   1541e:	f009 ffe3 	bl	1f3e8 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   15422:	6863      	ldr	r3, [r4, #4]
   15424:	4632      	mov	r2, r6
   15426:	4669      	mov	r1, sp
   15428:	4628      	mov	r0, r5
   1542a:	685b      	ldr	r3, [r3, #4]
   1542c:	f009 ffdc 	bl	1f3e8 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   15430:	6863      	ldr	r3, [r4, #4]
   15432:	4906      	ldr	r1, [pc, #24]	; (1544c <log_output_dropped_process+0x54>)
   15434:	685b      	ldr	r3, [r3, #4]
   15436:	221b      	movs	r2, #27
   15438:	4628      	mov	r0, r5
   1543a:	f009 ffd5 	bl	1f3e8 <buffer_write>
		     output->control_block->ctx);
}
   1543e:	b002      	add	sp, #8
   15440:	bd70      	pop	{r4, r5, r6, pc}
   15442:	bf00      	nop
   15444:	000222f2 	.word	0x000222f2
   15448:	0002151a 	.word	0x0002151a
   1544c:	000214fe 	.word	0x000214fe

00015450 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   15450:	4a08      	ldr	r2, [pc, #32]	; (15474 <log_output_timestamp_freq_set+0x24>)
{
   15452:	b510      	push	{r4, lr}
	timestamp_div = 1U;
   15454:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   15456:	4c08      	ldr	r4, [pc, #32]	; (15478 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   15458:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   1545a:	2100      	movs	r1, #0
   1545c:	42a0      	cmp	r0, r4
   1545e:	d804      	bhi.n	1546a <log_output_timestamp_freq_set+0x1a>
   15460:	b101      	cbz	r1, 15464 <log_output_timestamp_freq_set+0x14>
   15462:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   15464:	4b05      	ldr	r3, [pc, #20]	; (1547c <log_output_timestamp_freq_set+0x2c>)
   15466:	6018      	str	r0, [r3, #0]
}
   15468:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   1546a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1546c:	005b      	lsls	r3, r3, #1
   1546e:	2101      	movs	r1, #1
   15470:	e7f4      	b.n	1545c <log_output_timestamp_freq_set+0xc>
   15472:	bf00      	nop
   15474:	200019ac 	.word	0x200019ac
   15478:	000f4240 	.word	0x000f4240
   1547c:	200019a8 	.word	0x200019a8

00015480 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   15480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
   15482:	4f07      	ldr	r7, [pc, #28]	; (154a0 <char_out+0x20>)
{
   15484:	460d      	mov	r5, r1
   15486:	4604      	mov	r4, r0
   15488:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   1548a:	42b4      	cmp	r4, r6
   1548c:	d101      	bne.n	15492 <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
   1548e:	4628      	mov	r0, r5
   15490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   15492:	6838      	ldr	r0, [r7, #0]
   15494:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   15498:	6883      	ldr	r3, [r0, #8]
   1549a:	685b      	ldr	r3, [r3, #4]
   1549c:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   1549e:	e7f4      	b.n	1548a <char_out+0xa>
   154a0:	200019c4 	.word	0x200019c4

000154a4 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   154a4:	4b01      	ldr	r3, [pc, #4]	; (154ac <log_backend_uart_init+0x8>)
   154a6:	4a02      	ldr	r2, [pc, #8]	; (154b0 <log_backend_uart_init+0xc>)
   154a8:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
   154aa:	4770      	bx	lr
   154ac:	200019c4 	.word	0x200019c4
   154b0:	00020bf0 	.word	0x00020bf0

000154b4 <panic>:

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
   154b4:	4b02      	ldr	r3, [pc, #8]	; (154c0 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   154b6:	4803      	ldr	r0, [pc, #12]	; (154c4 <panic+0x10>)
   154b8:	2201      	movs	r2, #1
   154ba:	701a      	strb	r2, [r3, #0]
   154bc:	f00a b8fe 	b.w	1f6bc <log_output_flush>
   154c0:	20002afa 	.word	0x20002afa
   154c4:	00020f34 	.word	0x00020f34

000154c8 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   154c8:	4801      	ldr	r0, [pc, #4]	; (154d0 <dropped+0x8>)
   154ca:	f7ff bf95 	b.w	153f8 <log_output_dropped_process>
   154ce:	bf00      	nop
   154d0:	00020f34 	.word	0x00020f34

000154d4 <put>:
{
   154d4:	b510      	push	{r4, lr}
	log_msg_get(msg);
   154d6:	4608      	mov	r0, r1
   154d8:	460c      	mov	r4, r1
   154da:	f009 fe93 	bl	1f204 <log_msg_get>
	log_output_msg_process(output, msg, flags);
   154de:	4805      	ldr	r0, [pc, #20]	; (154f4 <put+0x20>)
   154e0:	4621      	mov	r1, r4
   154e2:	220f      	movs	r2, #15
   154e4:	f7ff ff0c 	bl	15300 <log_output_msg_process>
	log_msg_put(msg);
   154e8:	4620      	mov	r0, r4
}
   154ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   154ee:	f009 beb8 	b.w	1f262 <log_msg_put>
   154f2:	bf00      	nop
   154f4:	00020f34 	.word	0x00020f34

000154f8 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   154f8:	4b01      	ldr	r3, [pc, #4]	; (15500 <log_backend_rtt_init+0x8>)
   154fa:	2201      	movs	r2, #1
   154fc:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   154fe:	4770      	bx	lr
   15500:	20002b0c 	.word	0x20002b0c

00015504 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
   15504:	4b02      	ldr	r3, [pc, #8]	; (15510 <panic+0xc>)
	log_output_flush(output);
   15506:	4803      	ldr	r0, [pc, #12]	; (15514 <panic+0x10>)
   15508:	2201      	movs	r2, #1
   1550a:	701a      	strb	r2, [r3, #0]
   1550c:	f00a b8d6 	b.w	1f6bc <log_output_flush>
   15510:	20002b0d 	.word	0x20002b0d
   15514:	00020f60 	.word	0x00020f60

00015518 <dropped>:
	log_output_dropped_process(output, cnt);
   15518:	4801      	ldr	r0, [pc, #4]	; (15520 <dropped+0x8>)
   1551a:	f7ff bf6d 	b.w	153f8 <log_output_dropped_process>
   1551e:	bf00      	nop
   15520:	00020f60 	.word	0x00020f60

00015524 <put>:
{
   15524:	b510      	push	{r4, lr}
	log_msg_get(msg);
   15526:	4608      	mov	r0, r1
   15528:	460c      	mov	r4, r1
   1552a:	f009 fe6b 	bl	1f204 <log_msg_get>
	log_output_msg_process(output, msg, flags);
   1552e:	4805      	ldr	r0, [pc, #20]	; (15544 <put+0x20>)
   15530:	4621      	mov	r1, r4
   15532:	220f      	movs	r2, #15
   15534:	f7ff fee4 	bl	15300 <log_output_msg_process>
	log_msg_put(msg);
   15538:	4620      	mov	r0, r4
}
   1553a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1553e:	f009 be90 	b.w	1f262 <log_msg_put>
   15542:	bf00      	nop
   15544:	00020f60 	.word	0x00020f60

00015548 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   15548:	4b05      	ldr	r3, [pc, #20]	; (15560 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
   1554a:	781b      	ldrb	r3, [r3, #0]
   1554c:	b11b      	cbz	r3, 15556 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
   1554e:	f241 3088 	movw	r0, #5000	; 0x1388
   15552:	f00b b90e 	b.w	20772 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   15556:	20a4      	movs	r0, #164	; 0xa4
   15558:	2100      	movs	r1, #0
   1555a:	f006 ba23 	b.w	1b9a4 <z_impl_k_sleep>
   1555e:	bf00      	nop
   15560:	20002b0d 	.word	0x20002b0d

00015564 <data_out_block_mode>:
{
   15564:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   15568:	f8df 9094 	ldr.w	r9, [pc, #148]	; 15600 <data_out_block_mode+0x9c>
	return z_impl_k_mutex_lock(mutex, timeout);
   1556c:	f8df a094 	ldr.w	sl, [pc, #148]	; 15604 <data_out_block_mode+0xa0>
{
   15570:	4680      	mov	r8, r0
   15572:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   15574:	2404      	movs	r4, #4
   15576:	46cb      	mov	fp, r9
		if (!is_sync_mode()) {
   15578:	f899 5000 	ldrb.w	r5, [r9]
   1557c:	b9cd      	cbnz	r5, 155b2 <data_out_block_mode+0x4e>
   1557e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15582:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15586:	4650      	mov	r0, sl
   15588:	f005 fc7a 	bl	1ae80 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   1558c:	463a      	mov	r2, r7
   1558e:	4641      	mov	r1, r8
   15590:	4628      	mov	r0, r5
   15592:	f005 f979 	bl	1a888 <SEGGER_RTT_WriteSkipNoLock>
   15596:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
   15598:	4650      	mov	r0, sl
   1559a:	f005 fcef 	bl	1af7c <z_impl_k_mutex_unlock>
		if (ret) {
   1559e:	4d17      	ldr	r5, [pc, #92]	; (155fc <data_out_block_mode+0x98>)
   155a0:	b1fe      	cbz	r6, 155e2 <data_out_block_mode+0x7e>
	host_present = true;
   155a2:	2301      	movs	r3, #1
   155a4:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
   155a6:	f89b 3000 	ldrb.w	r3, [fp]
   155aa:	b96b      	cbnz	r3, 155c8 <data_out_block_mode+0x64>
}
   155ac:	4638      	mov	r0, r7
   155ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   155b2:	463a      	mov	r2, r7
   155b4:	4641      	mov	r1, r8
   155b6:	2000      	movs	r0, #0
   155b8:	f005 f966 	bl	1a888 <SEGGER_RTT_WriteSkipNoLock>
   155bc:	4606      	mov	r6, r0
   155be:	e7ee      	b.n	1559e <data_out_block_mode+0x3a>
	if (retry_cnt == 0) {
   155c0:	b95c      	cbnz	r4, 155da <data_out_block_mode+0x76>
		host_present = false;
   155c2:	702c      	strb	r4, [r5, #0]
   155c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   155c8:	2000      	movs	r0, #0
   155ca:	f005 f9a9 	bl	1a920 <SEGGER_RTT_HasDataUp>
   155ce:	2800      	cmp	r0, #0
   155d0:	d0ec      	beq.n	155ac <data_out_block_mode+0x48>
   155d2:	782b      	ldrb	r3, [r5, #0]
   155d4:	2b00      	cmp	r3, #0
   155d6:	d1f3      	bne.n	155c0 <data_out_block_mode+0x5c>
   155d8:	e7e8      	b.n	155ac <data_out_block_mode+0x48>
			on_failed_write(retry_cnt--);
   155da:	3c01      	subs	r4, #1
   155dc:	f7ff ffb4 	bl	15548 <on_failed_write.part.0>
   155e0:	e7f2      	b.n	155c8 <data_out_block_mode+0x64>
		} else if (host_present) {
   155e2:	782b      	ldrb	r3, [r5, #0]
   155e4:	b113      	cbz	r3, 155ec <data_out_block_mode+0x88>
	if (retry_cnt == 0) {
   155e6:	3c01      	subs	r4, #1
   155e8:	d104      	bne.n	155f4 <data_out_block_mode+0x90>
		host_present = false;
   155ea:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   155ec:	782b      	ldrb	r3, [r5, #0]
   155ee:	2b00      	cmp	r3, #0
   155f0:	d1c2      	bne.n	15578 <data_out_block_mode+0x14>
   155f2:	e7db      	b.n	155ac <data_out_block_mode+0x48>
   155f4:	f7ff ffa8 	bl	15548 <on_failed_write.part.0>
   155f8:	e7f8      	b.n	155ec <data_out_block_mode+0x88>
   155fa:	bf00      	nop
   155fc:	20002b0c 	.word	0x20002b0c
   15600:	20002b0d 	.word	0x20002b0d
   15604:	2000063c 	.word	0x2000063c

00015608 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   15608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1560c:	4605      	mov	r5, r0
	__asm__ volatile(
   1560e:	f04f 0340 	mov.w	r3, #64	; 0x40
   15612:	f3ef 8611 	mrs	r6, BASEPRI
   15616:	f383 8812 	msr	BASEPRI_MAX, r3
   1561a:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1561e:	4b10      	ldr	r3, [pc, #64]	; (15660 <pm_state_notify+0x58>)
   15620:	681c      	ldr	r4, [r3, #0]
   15622:	2c00      	cmp	r4, #0
   15624:	bf38      	it	cc
   15626:	2400      	movcc	r4, #0
   15628:	b19c      	cbz	r4, 15652 <pm_state_notify+0x4a>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
   1562a:	4f0e      	ldr	r7, [pc, #56]	; (15664 <pm_state_notify+0x5c>)
   1562c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 15668 <pm_state_notify+0x60>
   15630:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   15634:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   15638:	2d00      	cmp	r5, #0
   1563a:	bf08      	it	eq
   1563c:	4613      	moveq	r3, r2
		if (callback) {
   1563e:	b12b      	cbz	r3, 1564c <pm_state_notify+0x44>
			callback(z_power_states[_current_cpu->id].state);
   15640:	f898 2014 	ldrb.w	r2, [r8, #20]
   15644:	fb09 f202 	mul.w	r2, r9, r2
   15648:	5cb8      	ldrb	r0, [r7, r2]
   1564a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1564c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1564e:	2c00      	cmp	r4, #0
   15650:	d1f0      	bne.n	15634 <pm_state_notify+0x2c>
	__asm__ volatile(
   15652:	f386 8811 	msr	BASEPRI, r6
   15656:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   1565a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1565e:	bf00      	nop
   15660:	200019dc 	.word	0x200019dc
   15664:	200019e8 	.word	0x200019e8
   15668:	200020e0 	.word	0x200020e0

0001566c <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1566c:	f000 031f 	and.w	r3, r0, #31
   15670:	2201      	movs	r2, #1
   15672:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15674:	4b0a      	ldr	r3, [pc, #40]	; (156a0 <atomic_test_and_set_bit.constprop.0+0x34>)
   15676:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1567a:	0940      	lsrs	r0, r0, #5
   1567c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   15680:	e850 3f00 	ldrex	r3, [r0]
   15684:	ea43 0102 	orr.w	r1, r3, r2
   15688:	e840 1c00 	strex	ip, r1, [r0]
   1568c:	f1bc 0f00 	cmp.w	ip, #0
   15690:	d1f6      	bne.n	15680 <atomic_test_and_set_bit.constprop.0+0x14>
   15692:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
   15696:	421a      	tst	r2, r3
}
   15698:	bf14      	ite	ne
   1569a:	2001      	movne	r0, #1
   1569c:	2000      	moveq	r0, #0
   1569e:	4770      	bx	lr
   156a0:	200019f4 	.word	0x200019f4

000156a4 <pm_system_resume>:

void pm_system_resume(void)
{
   156a4:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
   156a6:	4b1d      	ldr	r3, [pc, #116]	; (1571c <pm_system_resume+0x78>)
   156a8:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   156aa:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   156ae:	f005 031f 	and.w	r3, r5, #31
   156b2:	2201      	movs	r2, #1
   156b4:	409a      	lsls	r2, r3
   156b6:	4b1a      	ldr	r3, [pc, #104]	; (15720 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   156b8:	0969      	lsrs	r1, r5, #5
{
   156ba:	b085      	sub	sp, #20
   156bc:	43d0      	mvns	r0, r2
   156be:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   156c2:	e853 1f00 	ldrex	r1, [r3]
   156c6:	ea01 0400 	and.w	r4, r1, r0
   156ca:	e843 4c00 	strex	ip, r4, [r3]
   156ce:	f1bc 0f00 	cmp.w	ip, #0
   156d2:	d1f6      	bne.n	156c2 <pm_system_resume+0x1e>
   156d4:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   156d8:	4211      	tst	r1, r2
   156da:	d017      	beq.n	1570c <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
   156dc:	4c11      	ldr	r4, [pc, #68]	; (15724 <pm_system_resume+0x80>)
   156de:	220c      	movs	r2, #12
   156e0:	fb02 4205 	mla	r2, r2, r5, r4
   156e4:	ca07      	ldmia	r2, {r0, r1, r2}
   156e6:	ab01      	add	r3, sp, #4
   156e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   156ec:	4a0e      	ldr	r2, [pc, #56]	; (15728 <pm_system_resume+0x84>)
   156ee:	b17a      	cbz	r2, 15710 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
   156f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   156f4:	f00a f8ac 	bl	1f850 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   156f8:	2000      	movs	r0, #0
   156fa:	f7ff ff85 	bl	15608 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   156fe:	230c      	movs	r3, #12
   15700:	436b      	muls	r3, r5
   15702:	2200      	movs	r2, #0
   15704:	18e1      	adds	r1, r4, r3
   15706:	50e2      	str	r2, [r4, r3]
   15708:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
   1570c:	b005      	add	sp, #20
   1570e:	bd30      	pop	{r4, r5, pc}
   15710:	f382 8811 	msr	BASEPRI, r2
   15714:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   15718:	e7ee      	b.n	156f8 <pm_system_resume+0x54>
   1571a:	bf00      	nop
   1571c:	200020e0 	.word	0x200020e0
   15720:	200019e4 	.word	0x200019e4
   15724:	200019e8 	.word	0x200019e8
   15728:	0001f851 	.word	0x0001f851

0001572c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   1572c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   15730:	4b37      	ldr	r3, [pc, #220]	; (15810 <pm_system_suspend+0xe4>)
   15732:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 15828 <pm_system_suspend+0xfc>
   15736:	7d1c      	ldrb	r4, [r3, #20]
{
   15738:	b088      	sub	sp, #32
   1573a:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   1573c:	4620      	mov	r0, r4
   1573e:	f7ff ff95 	bl	1566c <atomic_test_and_set_bit.constprop.0>
   15742:	b960      	cbnz	r0, 1575e <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   15744:	466e      	mov	r6, sp
   15746:	463a      	mov	r2, r7
   15748:	4621      	mov	r1, r4
   1574a:	4630      	mov	r0, r6
   1574c:	f009 ffde 	bl	1f70c <pm_policy_next_state>
   15750:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   15754:	250c      	movs	r5, #12
   15756:	fb05 8504 	mla	r5, r5, r4, r8
   1575a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   1575e:	230c      	movs	r3, #12
   15760:	4363      	muls	r3, r4
   15762:	eb08 0203 	add.w	r2, r8, r3
   15766:	f818 0003 	ldrb.w	r0, [r8, r3]
   1576a:	0965      	lsrs	r5, r4, #5
   1576c:	f004 061f 	and.w	r6, r4, #31
   15770:	b3c8      	cbz	r0, 157e6 <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   15772:	1c7b      	adds	r3, r7, #1
   15774:	d00f      	beq.n	15796 <pm_system_suspend+0x6a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   15776:	f8d2 e008 	ldr.w	lr, [r2, #8]
   1577a:	4826      	ldr	r0, [pc, #152]	; (15814 <pm_system_suspend+0xe8>)
   1577c:	4a26      	ldr	r2, [pc, #152]	; (15818 <pm_system_suspend+0xec>)
   1577e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   15782:	2100      	movs	r1, #0
   15784:	2300      	movs	r3, #0
   15786:	fbec 010e 	umlal	r0, r1, ip, lr
   1578a:	f7ea fcb9 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   1578e:	2101      	movs	r1, #1
   15790:	1a38      	subs	r0, r7, r0
   15792:	f00a ffd0 	bl	20736 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   15796:	f005 fe75 	bl	1b484 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   1579a:	2001      	movs	r0, #1
   1579c:	f7ff ff34 	bl	15608 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   157a0:	f3bf 8f5b 	dmb	ish
   157a4:	4b1d      	ldr	r3, [pc, #116]	; (1581c <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   157a6:	2201      	movs	r2, #1
   157a8:	40b2      	lsls	r2, r6
   157aa:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   157ae:	e853 1f00 	ldrex	r1, [r3]
   157b2:	4311      	orrs	r1, r2
   157b4:	e843 1000 	strex	r0, r1, [r3]
   157b8:	2800      	cmp	r0, #0
   157ba:	d1f8      	bne.n	157ae <pm_system_suspend+0x82>
   157bc:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   157c0:	230c      	movs	r3, #12
   157c2:	fb03 8404 	mla	r4, r3, r4, r8
   157c6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   157ca:	ab05      	add	r3, sp, #20
   157cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   157d0:	4a13      	ldr	r2, [pc, #76]	; (15820 <pm_system_suspend+0xf4>)
   157d2:	b11a      	cbz	r2, 157dc <pm_system_suspend+0xb0>
		pm_power_state_set(info);
   157d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   157d8:	f00a f827 	bl	1f82a <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   157dc:	f7ff ff62 	bl	156a4 <pm_system_resume>
	k_sched_unlock();
   157e0:	f006 f82a 	bl	1b838 <k_sched_unlock>
	bool ret = true;
   157e4:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   157e6:	4a0f      	ldr	r2, [pc, #60]	; (15824 <pm_system_suspend+0xf8>)
   157e8:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   157ec:	2301      	movs	r3, #1
   157ee:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   157f0:	43db      	mvns	r3, r3
   157f2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   157f6:	e855 2f00 	ldrex	r2, [r5]
   157fa:	401a      	ands	r2, r3
   157fc:	e845 2100 	strex	r1, r2, [r5]
   15800:	2900      	cmp	r1, #0
   15802:	d1f8      	bne.n	157f6 <pm_system_suspend+0xca>
   15804:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   15808:	b008      	add	sp, #32
   1580a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1580e:	bf00      	nop
   15810:	200020e0 	.word	0x200020e0
   15814:	000f423f 	.word	0x000f423f
   15818:	000f4240 	.word	0x000f4240
   1581c:	200019e4 	.word	0x200019e4
   15820:	0001f82b 	.word	0x0001f82b
   15824:	200019f4 	.word	0x200019f4
   15828:	200019e8 	.word	0x200019e8

0001582c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   1582c:	4801      	ldr	r0, [pc, #4]	; (15834 <nrf_cc3xx_platform_abort_init+0x8>)
   1582e:	f006 bc87 	b.w	1c140 <nrf_cc3xx_platform_set_abort>
   15832:	bf00      	nop
   15834:	00020f70 	.word	0x00020f70

00015838 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   15838:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   1583a:	b1d0      	cbz	r0, 15872 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   1583c:	6843      	ldr	r3, [r0, #4]
   1583e:	2b04      	cmp	r3, #4
   15840:	d111      	bne.n	15866 <mutex_unlock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   15842:	2200      	movs	r2, #0
   15844:	6803      	ldr	r3, [r0, #0]
   15846:	f3bf 8f5b 	dmb	ish
   1584a:	e853 1f00 	ldrex	r1, [r3]
   1584e:	2901      	cmp	r1, #1
   15850:	d103      	bne.n	1585a <mutex_unlock_platform+0x22>
   15852:	e843 2000 	strex	r0, r2, [r3]
   15856:	2800      	cmp	r0, #0
   15858:	d1f7      	bne.n	1584a <mutex_unlock_platform+0x12>
   1585a:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1585e:	4807      	ldr	r0, [pc, #28]	; (1587c <mutex_unlock_platform+0x44>)
   15860:	bf08      	it	eq
   15862:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
   15864:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   15866:	b13b      	cbz	r3, 15878 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
   15868:	6800      	ldr	r0, [r0, #0]
   1586a:	f005 fb87 	bl	1af7c <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
   1586e:	2000      	movs	r0, #0
   15870:	e7f8      	b.n	15864 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   15872:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   15876:	e7f5      	b.n	15864 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   15878:	4801      	ldr	r0, [pc, #4]	; (15880 <mutex_unlock_platform+0x48>)
   1587a:	e7f3      	b.n	15864 <mutex_unlock_platform+0x2c>
   1587c:	ffff8fe9 	.word	0xffff8fe9
   15880:	ffff8fea 	.word	0xffff8fea

00015884 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   15884:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   15886:	4604      	mov	r4, r0
   15888:	b918      	cbnz	r0, 15892 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   1588a:	4b0d      	ldr	r3, [pc, #52]	; (158c0 <mutex_free_platform+0x3c>)
   1588c:	480d      	ldr	r0, [pc, #52]	; (158c4 <mutex_free_platform+0x40>)
   1588e:	685b      	ldr	r3, [r3, #4]
   15890:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   15892:	6861      	ldr	r1, [r4, #4]
   15894:	2908      	cmp	r1, #8
   15896:	d00d      	beq.n	158b4 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   15898:	f031 0304 	bics.w	r3, r1, #4
   1589c:	d00a      	beq.n	158b4 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   1589e:	f011 0102 	ands.w	r1, r1, #2
   158a2:	d008      	beq.n	158b6 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   158a4:	4808      	ldr	r0, [pc, #32]	; (158c8 <mutex_free_platform+0x44>)
   158a6:	4621      	mov	r1, r4
   158a8:	f00a fc59 	bl	2015e <k_mem_slab_free>
        mutex->mutex = NULL;
   158ac:	2300      	movs	r3, #0
   158ae:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   158b0:	2300      	movs	r3, #0
   158b2:	6063      	str	r3, [r4, #4]
}
   158b4:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   158b6:	6820      	ldr	r0, [r4, #0]
   158b8:	2214      	movs	r2, #20
   158ba:	f009 ffaa 	bl	1f812 <memset>
   158be:	e7f7      	b.n	158b0 <mutex_free_platform+0x2c>
   158c0:	2000055c 	.word	0x2000055c
   158c4:	00021553 	.word	0x00021553
   158c8:	200019f8 	.word	0x200019f8

000158cc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   158cc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   158ce:	4604      	mov	r4, r0
   158d0:	b918      	cbnz	r0, 158da <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   158d2:	4b16      	ldr	r3, [pc, #88]	; (1592c <mutex_init_platform+0x60>)
   158d4:	4816      	ldr	r0, [pc, #88]	; (15930 <mutex_init_platform+0x64>)
   158d6:	685b      	ldr	r3, [r3, #4]
   158d8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   158da:	6863      	ldr	r3, [r4, #4]
   158dc:	2b04      	cmp	r3, #4
   158de:	d023      	beq.n	15928 <mutex_init_platform+0x5c>
   158e0:	2b08      	cmp	r3, #8
   158e2:	d021      	beq.n	15928 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   158e4:	b9cb      	cbnz	r3, 1591a <mutex_init_platform+0x4e>
   158e6:	6823      	ldr	r3, [r4, #0]
   158e8:	b9bb      	cbnz	r3, 1591a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   158ea:	4812      	ldr	r0, [pc, #72]	; (15934 <mutex_init_platform+0x68>)
   158ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   158f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   158f4:	4621      	mov	r1, r4
   158f6:	f005 f9c1 	bl	1ac7c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   158fa:	b908      	cbnz	r0, 15900 <mutex_init_platform+0x34>
   158fc:	6823      	ldr	r3, [r4, #0]
   158fe:	b91b      	cbnz	r3, 15908 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   15900:	4b0a      	ldr	r3, [pc, #40]	; (1592c <mutex_init_platform+0x60>)
   15902:	480d      	ldr	r0, [pc, #52]	; (15938 <mutex_init_platform+0x6c>)
   15904:	685b      	ldr	r3, [r3, #4]
   15906:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   15908:	6820      	ldr	r0, [r4, #0]
   1590a:	2214      	movs	r2, #20
   1590c:	2100      	movs	r1, #0
   1590e:	f009 ff80 	bl	1f812 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   15912:	6863      	ldr	r3, [r4, #4]
   15914:	f043 0302 	orr.w	r3, r3, #2
   15918:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   1591a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   1591c:	f00a fc5c 	bl	201d8 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   15920:	6863      	ldr	r3, [r4, #4]
   15922:	f043 0301 	orr.w	r3, r3, #1
   15926:	6063      	str	r3, [r4, #4]
}
   15928:	bd10      	pop	{r4, pc}
   1592a:	bf00      	nop
   1592c:	2000055c 	.word	0x2000055c
   15930:	00021553 	.word	0x00021553
   15934:	200019f8 	.word	0x200019f8
   15938:	00021579 	.word	0x00021579

0001593c <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1593c:	b508      	push	{r3, lr}
    if(mutex == NULL) {
   1593e:	b308      	cbz	r0, 15984 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
   15940:	6843      	ldr	r3, [r0, #4]
   15942:	2b04      	cmp	r3, #4
   15944:	d110      	bne.n	15968 <mutex_lock_platform+0x2c>
   15946:	2201      	movs	r2, #1
   15948:	6803      	ldr	r3, [r0, #0]
   1594a:	f3bf 8f5b 	dmb	ish
   1594e:	e853 1f00 	ldrex	r1, [r3]
   15952:	2900      	cmp	r1, #0
   15954:	d103      	bne.n	1595e <mutex_lock_platform+0x22>
   15956:	e843 2000 	strex	r0, r2, [r3]
   1595a:	2800      	cmp	r0, #0
   1595c:	d1f7      	bne.n	1594e <mutex_lock_platform+0x12>
   1595e:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   15962:	d10b      	bne.n	1597c <mutex_lock_platform+0x40>
   15964:	2000      	movs	r0, #0
}
   15966:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   15968:	b153      	cbz	r3, 15980 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
   1596a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   1596c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15974:	f005 fa84 	bl	1ae80 <z_impl_k_mutex_lock>
        if (ret == 0) {
   15978:	2800      	cmp	r0, #0
   1597a:	d0f3      	beq.n	15964 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1597c:	4803      	ldr	r0, [pc, #12]	; (1598c <mutex_lock_platform+0x50>)
   1597e:	e7f2      	b.n	15966 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   15980:	4803      	ldr	r0, [pc, #12]	; (15990 <mutex_lock_platform+0x54>)
   15982:	e7f0      	b.n	15966 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   15984:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   15988:	e7ed      	b.n	15966 <mutex_lock_platform+0x2a>
   1598a:	bf00      	nop
   1598c:	ffff8fe9 	.word	0xffff8fe9
   15990:	ffff8fea 	.word	0xffff8fea

00015994 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   15994:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   15996:	4906      	ldr	r1, [pc, #24]	; (159b0 <nrf_cc3xx_platform_mutex_init+0x1c>)
   15998:	4806      	ldr	r0, [pc, #24]	; (159b4 <nrf_cc3xx_platform_mutex_init+0x20>)
   1599a:	2340      	movs	r3, #64	; 0x40
   1599c:	2214      	movs	r2, #20
   1599e:	f00a fbc3 	bl	20128 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   159a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   159a6:	4904      	ldr	r1, [pc, #16]	; (159b8 <nrf_cc3xx_platform_mutex_init+0x24>)
   159a8:	4804      	ldr	r0, [pc, #16]	; (159bc <nrf_cc3xx_platform_mutex_init+0x28>)
   159aa:	f006 bc81 	b.w	1c2b0 <nrf_cc3xx_platform_set_mutexes>
   159ae:	bf00      	nop
   159b0:	20001a14 	.word	0x20001a14
   159b4:	200019f8 	.word	0x200019f8
   159b8:	00020f88 	.word	0x00020f88
   159bc:	00020f78 	.word	0x00020f78

000159c0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   159c0:	4901      	ldr	r1, [pc, #4]	; (159c8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   159c2:	2210      	movs	r2, #16
	str	r2, [r1]
   159c4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   159c6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   159c8:	e000ed10 	.word	0xe000ed10

000159cc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   159cc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   159ce:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   159d0:	f380 8811 	msr	BASEPRI, r0
	isb
   159d4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   159d8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   159dc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   159de:	b662      	cpsie	i
	isb
   159e0:	f3bf 8f6f 	isb	sy

	bx	lr
   159e4:	4770      	bx	lr
   159e6:	bf00      	nop

000159e8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   159e8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   159ea:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   159ec:	f381 8811 	msr	BASEPRI, r1

	wfe
   159f0:	bf20      	wfe

	msr	BASEPRI, r0
   159f2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   159f6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   159f8:	4770      	bx	lr
   159fa:	bf00      	nop

000159fc <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   159fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   159fe:	4606      	mov	r6, r0

	if (esf != NULL) {
   15a00:	460c      	mov	r4, r1
   15a02:	b301      	cbz	r1, 15a46 <z_arm_fatal_error+0x4a>
   15a04:	4b13      	ldr	r3, [pc, #76]	; (15a54 <z_arm_fatal_error+0x58>)
   15a06:	4d14      	ldr	r5, [pc, #80]	; (15a58 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   15a08:	4814      	ldr	r0, [pc, #80]	; (15a5c <z_arm_fatal_error+0x60>)
   15a0a:	1aed      	subs	r5, r5, r3
   15a0c:	08ed      	lsrs	r5, r5, #3
   15a0e:	01ad      	lsls	r5, r5, #6
   15a10:	f045 0501 	orr.w	r5, r5, #1
   15a14:	f8ad 5000 	strh.w	r5, [sp]
   15a18:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   15a1c:	6809      	ldr	r1, [r1, #0]
   15a1e:	f009 fb67 	bl	1f0f0 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   15a22:	f8ad 5000 	strh.w	r5, [sp]
   15a26:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   15a2a:	68e1      	ldr	r1, [r4, #12]
   15a2c:	480c      	ldr	r0, [pc, #48]	; (15a60 <z_arm_fatal_error+0x64>)
   15a2e:	f009 fb5f 	bl	1f0f0 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   15a32:	69e1      	ldr	r1, [r4, #28]
   15a34:	480b      	ldr	r0, [pc, #44]	; (15a64 <z_arm_fatal_error+0x68>)
   15a36:	462a      	mov	r2, r5
   15a38:	f009 fb2d 	bl	1f096 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   15a3c:	69a1      	ldr	r1, [r4, #24]
   15a3e:	480a      	ldr	r0, [pc, #40]	; (15a68 <z_arm_fatal_error+0x6c>)
   15a40:	462a      	mov	r2, r5
   15a42:	f009 fb28 	bl	1f096 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   15a46:	4621      	mov	r1, r4
   15a48:	4630      	mov	r0, r6
}
   15a4a:	b002      	add	sp, #8
   15a4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   15a50:	f004 bfbc 	b.w	1a9cc <z_fatal_error>
   15a54:	00020d88 	.word	0x00020d88
   15a58:	00020df0 	.word	0x00020df0
   15a5c:	000215a6 	.word	0x000215a6
   15a60:	000215d5 	.word	0x000215d5
   15a64:	00021604 	.word	0x00021604
   15a68:	00021613 	.word	0x00021613

00015a6c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   15a6c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   15a6e:	2b00      	cmp	r3, #0
   15a70:	db08      	blt.n	15a84 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15a72:	2201      	movs	r2, #1
   15a74:	f000 001f 	and.w	r0, r0, #31
   15a78:	fa02 f000 	lsl.w	r0, r2, r0
   15a7c:	095b      	lsrs	r3, r3, #5
   15a7e:	4a02      	ldr	r2, [pc, #8]	; (15a88 <arch_irq_enable+0x1c>)
   15a80:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   15a84:	4770      	bx	lr
   15a86:	bf00      	nop
   15a88:	e000e100 	.word	0xe000e100

00015a8c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   15a8c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   15a8e:	2b00      	cmp	r3, #0
   15a90:	db0d      	blt.n	15aae <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15a92:	2201      	movs	r2, #1
   15a94:	095b      	lsrs	r3, r3, #5
   15a96:	f000 001f 	and.w	r0, r0, #31
   15a9a:	fa02 f000 	lsl.w	r0, r2, r0
   15a9e:	3320      	adds	r3, #32
   15aa0:	4a03      	ldr	r2, [pc, #12]	; (15ab0 <arch_irq_disable+0x24>)
   15aa2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   15aa6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15aaa:	f3bf 8f6f 	isb	sy
}
   15aae:	4770      	bx	lr
   15ab0:	e000e100 	.word	0xe000e100

00015ab4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   15ab4:	4b05      	ldr	r3, [pc, #20]	; (15acc <arch_irq_is_enabled+0x18>)
   15ab6:	0942      	lsrs	r2, r0, #5
   15ab8:	f000 001f 	and.w	r0, r0, #31
   15abc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   15ac0:	2301      	movs	r3, #1
   15ac2:	fa03 f000 	lsl.w	r0, r3, r0
}
   15ac6:	4010      	ands	r0, r2
   15ac8:	4770      	bx	lr
   15aca:	bf00      	nop
   15acc:	e000e100 	.word	0xe000e100

00015ad0 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   15ad0:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   15ad2:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   15ad4:	bf54      	ite	pl
   15ad6:	3102      	addpl	r1, #2
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   15ad8:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   15ada:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15adc:	bfac      	ite	ge
   15ade:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15ae2:	4a07      	ldrlt	r2, [pc, #28]	; (15b00 <z_arm_irq_priority_set+0x30>)
   15ae4:	ea4f 1341 	mov.w	r3, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15ae8:	bfac      	ite	ge
   15aea:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15aee:	f000 000f 	andlt.w	r0, r0, #15
   15af2:	b2db      	uxtb	r3, r3
   15af4:	bfb4      	ite	lt
   15af6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15af8:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   15afc:	4770      	bx	lr
   15afe:	bf00      	nop
   15b00:	e000ed14 	.word	0xe000ed14

00015b04 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   15b04:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   15b06:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   15b08:	4b04      	ldr	r3, [pc, #16]	; (15b1c <_arch_isr_direct_pm+0x18>)
   15b0a:	699a      	ldr	r2, [r3, #24]
   15b0c:	b11a      	cbz	r2, 15b16 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   15b0e:	2200      	movs	r2, #0
   15b10:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   15b12:	f00a fb5a 	bl	201ca <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   15b16:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   15b18:	bd08      	pop	{r3, pc}
   15b1a:	bf00      	nop
   15b1c:	200020e0 	.word	0x200020e0

00015b20 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   15b20:	bf30      	wfi
    b z_SysNmiOnReset
   15b22:	f7ff bffd 	b.w	15b20 <z_SysNmiOnReset>
   15b26:	bf00      	nop

00015b28 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   15b28:	4a0b      	ldr	r2, [pc, #44]	; (15b58 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   15b2a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   15b2c:	4b0b      	ldr	r3, [pc, #44]	; (15b5c <z_arm_prep_c+0x34>)
   15b2e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   15b32:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   15b34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15b38:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   15b3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   15b40:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   15b44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   15b48:	f004 ffe4 	bl	1ab14 <z_bss_zero>
	z_data_copy();
   15b4c:	f005 ffbe 	bl	1bacc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   15b50:	f000 fb1e 	bl	16190 <z_arm_interrupt_init>
	z_cstart();
   15b54:	f004 ffe8 	bl	1ab28 <z_cstart>
   15b58:	00000000 	.word	0x00000000
   15b5c:	e000ed00 	.word	0xe000ed00

00015b60 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   15b60:	4a09      	ldr	r2, [pc, #36]	; (15b88 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   15b62:	490a      	ldr	r1, [pc, #40]	; (15b8c <arch_swap+0x2c>)
	_current->arch.basepri = key;
   15b64:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   15b66:	6809      	ldr	r1, [r1, #0]
   15b68:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   15b6a:	4909      	ldr	r1, [pc, #36]	; (15b90 <arch_swap+0x30>)
	_current->arch.basepri = key;
   15b6c:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   15b6e:	684b      	ldr	r3, [r1, #4]
   15b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   15b74:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   15b76:	2300      	movs	r3, #0
   15b78:	f383 8811 	msr	BASEPRI, r3
   15b7c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   15b80:	6893      	ldr	r3, [r2, #8]
}
   15b82:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   15b84:	4770      	bx	lr
   15b86:	bf00      	nop
   15b88:	200020e0 	.word	0x200020e0
   15b8c:	00021170 	.word	0x00021170
   15b90:	e000ed00 	.word	0xe000ed00

00015b94 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   15b94:	4912      	ldr	r1, [pc, #72]	; (15be0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   15b96:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   15b98:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   15b9c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   15b9e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   15ba2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   15ba6:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   15ba8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   15bac:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   15bb0:	4f0c      	ldr	r7, [pc, #48]	; (15be4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   15bb2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   15bb6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   15bb8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   15bba:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   15bbc:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   15bbe:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   15bc0:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   15bc2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   15bc6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   15bc8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   15bca:	f000 fb77 	bl	162bc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   15bce:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   15bd2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   15bd6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   15bda:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   15bde:	4770      	bx	lr
    ldr r1, =_kernel
   15be0:	200020e0 	.word	0x200020e0
    ldr v4, =_SCS_ICSR
   15be4:	e000ed04 	.word	0xe000ed04

00015be8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   15be8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   15bec:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   15bee:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   15bf2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   15bf6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   15bf8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   15bfc:	2902      	cmp	r1, #2
    beq _oops
   15bfe:	d0ff      	beq.n	15c00 <_oops>

00015c00 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   15c00:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   15c02:	f009 fd8c 	bl	1f71e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   15c06:	bd01      	pop	{r0, pc}

00015c08 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   15c08:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   15c0c:	9b00      	ldr	r3, [sp, #0]
   15c0e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   15c12:	490a      	ldr	r1, [pc, #40]	; (15c3c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   15c14:	9b01      	ldr	r3, [sp, #4]
   15c16:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   15c1a:	9b02      	ldr	r3, [sp, #8]
   15c1c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   15c20:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   15c24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   15c28:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   15c2c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   15c30:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   15c32:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   15c34:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   15c36:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   15c38:	4770      	bx	lr
   15c3a:	bf00      	nop
   15c3c:	0001eb95 	.word	0x0001eb95

00015c40 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   15c40:	4a0b      	ldr	r2, [pc, #44]	; (15c70 <z_check_thread_stack_fail+0x30>)
{
   15c42:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   15c44:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   15c46:	b190      	cbz	r0, 15c6e <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   15c48:	f113 0f16 	cmn.w	r3, #22
   15c4c:	6e80      	ldr	r0, [r0, #104]	; 0x68
   15c4e:	d005      	beq.n	15c5c <z_check_thread_stack_fail+0x1c>
   15c50:	f1a0 0220 	sub.w	r2, r0, #32
   15c54:	429a      	cmp	r2, r3
   15c56:	d806      	bhi.n	15c66 <z_check_thread_stack_fail+0x26>
   15c58:	4283      	cmp	r3, r0
   15c5a:	d204      	bcs.n	15c66 <z_check_thread_stack_fail+0x26>
   15c5c:	4281      	cmp	r1, r0
   15c5e:	bf2c      	ite	cs
   15c60:	2100      	movcs	r1, #0
   15c62:	2101      	movcc	r1, #1
   15c64:	e000      	b.n	15c68 <z_check_thread_stack_fail+0x28>
   15c66:	2100      	movs	r1, #0
   15c68:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   15c6a:	bf08      	it	eq
   15c6c:	2000      	moveq	r0, #0
}
   15c6e:	4770      	bx	lr
   15c70:	200020e0 	.word	0x200020e0

00015c74 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   15c74:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   15c76:	4b09      	ldr	r3, [pc, #36]	; (15c9c <arch_switch_to_main_thread+0x28>)
   15c78:	6098      	str	r0, [r3, #8]
{
   15c7a:	460d      	mov	r5, r1
   15c7c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   15c7e:	f000 fb1d 	bl	162bc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   15c82:	4620      	mov	r0, r4
   15c84:	f385 8809 	msr	PSP, r5
   15c88:	2100      	movs	r1, #0
   15c8a:	b663      	cpsie	if
   15c8c:	f381 8811 	msr	BASEPRI, r1
   15c90:	f3bf 8f6f 	isb	sy
   15c94:	2200      	movs	r2, #0
   15c96:	2300      	movs	r3, #0
   15c98:	f008 ff7c 	bl	1eb94 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   15c9c:	200020e0 	.word	0x200020e0

00015ca0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   15ca0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   15ca2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   15ca4:	4a0b      	ldr	r2, [pc, #44]	; (15cd4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   15ca6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   15ca8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   15caa:	bf1e      	ittt	ne
	movne	r1, #0
   15cac:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   15cae:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   15cb0:	f00a fa8b 	blne	201ca <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   15cb4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   15cb6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   15cba:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   15cbe:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   15cc2:	4905      	ldr	r1, [pc, #20]	; (15cd8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   15cc4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   15cc6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   15cc8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   15cca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   15cce:	4903      	ldr	r1, [pc, #12]	; (15cdc <_isr_wrapper+0x3c>)
	bx r1
   15cd0:	4708      	bx	r1
   15cd2:	0000      	.short	0x0000
	ldr r2, =_kernel
   15cd4:	200020e0 	.word	0x200020e0
	ldr r1, =_sw_isr_table
   15cd8:	00020c08 	.word	0x00020c08
	ldr r1, =z_arm_int_exit
   15cdc:	00015ce1 	.word	0x00015ce1

00015ce0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   15ce0:	4b04      	ldr	r3, [pc, #16]	; (15cf4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   15ce2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   15ce4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   15ce6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   15ce8:	d003      	beq.n	15cf2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   15cea:	4903      	ldr	r1, [pc, #12]	; (15cf8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   15cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   15cf0:	600a      	str	r2, [r1, #0]

00015cf2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   15cf2:	4770      	bx	lr
	ldr r3, =_kernel
   15cf4:	200020e0 	.word	0x200020e0
	ldr r1, =_SCS_ICSR
   15cf8:	e000ed04 	.word	0xe000ed04

00015cfc <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   15cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15d00:	4b35      	ldr	r3, [pc, #212]	; (15dd8 <mem_manage_fault+0xdc>)
   15d02:	4c36      	ldr	r4, [pc, #216]	; (15ddc <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   15d04:	4d36      	ldr	r5, [pc, #216]	; (15de0 <mem_manage_fault+0xe4>)
   15d06:	1ae4      	subs	r4, r4, r3
   15d08:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   15d0a:	01a4      	lsls	r4, r4, #6
   15d0c:	f044 0901 	orr.w	r9, r4, #1
{
   15d10:	4607      	mov	r7, r0
   15d12:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   15d14:	4833      	ldr	r0, [pc, #204]	; (15de4 <mem_manage_fault+0xe8>)
   15d16:	4649      	mov	r1, r9
{
   15d18:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   15d1a:	f009 f9af 	bl	1f07c <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   15d1e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   15d20:	06d3      	lsls	r3, r2, #27
   15d22:	d503      	bpl.n	15d2c <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
   15d24:	4830      	ldr	r0, [pc, #192]	; (15de8 <mem_manage_fault+0xec>)
   15d26:	4649      	mov	r1, r9
   15d28:	f009 f9a8 	bl	1f07c <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   15d2c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15d2e:	0718      	lsls	r0, r3, #28
   15d30:	d504      	bpl.n	15d3c <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
   15d32:	482e      	ldr	r0, [pc, #184]	; (15dec <mem_manage_fault+0xf0>)
   15d34:	f044 0101 	orr.w	r1, r4, #1
   15d38:	f009 f9a0 	bl	1f07c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   15d3c:	4d28      	ldr	r5, [pc, #160]	; (15de0 <mem_manage_fault+0xe4>)
   15d3e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15d40:	0799      	lsls	r1, r3, #30
   15d42:	d423      	bmi.n	15d8c <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
   15d44:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   15d48:	4d25      	ldr	r5, [pc, #148]	; (15de0 <mem_manage_fault+0xe4>)
   15d4a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   15d4c:	07d3      	lsls	r3, r2, #31
   15d4e:	d504      	bpl.n	15d5a <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
   15d50:	4827      	ldr	r0, [pc, #156]	; (15df0 <mem_manage_fault+0xf4>)
   15d52:	f044 0101 	orr.w	r1, r4, #1
   15d56:	f009 f991 	bl	1f07c <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   15d5a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15d5c:	0698      	lsls	r0, r3, #26
   15d5e:	d504      	bpl.n	15d6a <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
   15d60:	4824      	ldr	r0, [pc, #144]	; (15df4 <mem_manage_fault+0xf8>)
   15d62:	f044 0101 	orr.w	r1, r4, #1
   15d66:	f009 f989 	bl	1f07c <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   15d6a:	4b1d      	ldr	r3, [pc, #116]	; (15de0 <mem_manage_fault+0xe4>)
   15d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   15d6e:	06d1      	lsls	r1, r2, #27
   15d70:	d424      	bmi.n	15dbc <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   15d72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   15d74:	0792      	lsls	r2, r2, #30
   15d76:	d421      	bmi.n	15dbc <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   15d78:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   15d7a:	4a19      	ldr	r2, [pc, #100]	; (15de0 <mem_manage_fault+0xe4>)
   15d7c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15d7e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   15d82:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   15d84:	2300      	movs	r3, #0
   15d86:	7033      	strb	r3, [r6, #0]

	return reason;
}
   15d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
   15d8c:	f044 0a01 	orr.w	sl, r4, #1
   15d90:	4819      	ldr	r0, [pc, #100]	; (15df8 <mem_manage_fault+0xfc>)
   15d92:	4651      	mov	r1, sl
   15d94:	f009 f972 	bl	1f07c <log_0>
		uint32_t temp = SCB->MMFAR;
   15d98:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   15d9c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15d9e:	061a      	lsls	r2, r3, #24
   15da0:	d5d0      	bpl.n	15d44 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   15da2:	4816      	ldr	r0, [pc, #88]	; (15dfc <mem_manage_fault+0x100>)
   15da4:	4652      	mov	r2, sl
   15da6:	4649      	mov	r1, r9
   15da8:	f009 f975 	bl	1f096 <log_1>
			if (from_hard_fault != 0) {
   15dac:	f1b8 0f00 	cmp.w	r8, #0
   15db0:	d0ca      	beq.n	15d48 <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   15db2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15db4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   15db8:	62ab      	str	r3, [r5, #40]	; 0x28
   15dba:	e7c5      	b.n	15d48 <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   15dbc:	685b      	ldr	r3, [r3, #4]
   15dbe:	051b      	lsls	r3, r3, #20
   15dc0:	d5da      	bpl.n	15d78 <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   15dc2:	4639      	mov	r1, r7
   15dc4:	4648      	mov	r0, r9
   15dc6:	f7ff ff3b 	bl	15c40 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   15dca:	2800      	cmp	r0, #0
   15dcc:	d0d4      	beq.n	15d78 <mem_manage_fault+0x7c>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   15dce:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   15dd2:	2002      	movs	r0, #2
   15dd4:	e7d1      	b.n	15d7a <mem_manage_fault+0x7e>
   15dd6:	bf00      	nop
   15dd8:	00020d88 	.word	0x00020d88
   15ddc:	00020df0 	.word	0x00020df0
   15de0:	e000ed00 	.word	0xe000ed00
   15de4:	00021641 	.word	0x00021641
   15de8:	00021657 	.word	0x00021657
   15dec:	0002168a 	.word	0x0002168a
   15df0:	000216cb 	.word	0x000216cb
   15df4:	000216ea 	.word	0x000216ea
   15df8:	0002169d 	.word	0x0002169d
   15dfc:	000216b5 	.word	0x000216b5

00015e00 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   15e00:	b570      	push	{r4, r5, r6, lr}
   15e02:	4b23      	ldr	r3, [pc, #140]	; (15e90 <usage_fault.isra.0+0x90>)
   15e04:	4c23      	ldr	r4, [pc, #140]	; (15e94 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   15e06:	4d24      	ldr	r5, [pc, #144]	; (15e98 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   15e08:	4824      	ldr	r0, [pc, #144]	; (15e9c <usage_fault.isra.0+0x9c>)
   15e0a:	1ae4      	subs	r4, r4, r3
   15e0c:	08e4      	lsrs	r4, r4, #3
   15e0e:	01a4      	lsls	r4, r4, #6
   15e10:	f044 0601 	orr.w	r6, r4, #1
   15e14:	4631      	mov	r1, r6
   15e16:	f009 f931 	bl	1f07c <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   15e1a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   15e1c:	0193      	lsls	r3, r2, #6
   15e1e:	d503      	bpl.n	15e28 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   15e20:	481f      	ldr	r0, [pc, #124]	; (15ea0 <usage_fault.isra.0+0xa0>)
   15e22:	4631      	mov	r1, r6
   15e24:	f009 f92a 	bl	1f07c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   15e28:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15e2a:	01dd      	lsls	r5, r3, #7
   15e2c:	d504      	bpl.n	15e38 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   15e2e:	481d      	ldr	r0, [pc, #116]	; (15ea4 <usage_fault.isra.0+0xa4>)
   15e30:	f044 0101 	orr.w	r1, r4, #1
   15e34:	f009 f922 	bl	1f07c <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   15e38:	4d17      	ldr	r5, [pc, #92]	; (15e98 <usage_fault.isra.0+0x98>)
   15e3a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   15e3c:	0310      	lsls	r0, r2, #12
   15e3e:	d504      	bpl.n	15e4a <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
   15e40:	4819      	ldr	r0, [pc, #100]	; (15ea8 <usage_fault.isra.0+0xa8>)
   15e42:	f044 0101 	orr.w	r1, r4, #1
   15e46:	f009 f919 	bl	1f07c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   15e4a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15e4c:	0359      	lsls	r1, r3, #13
   15e4e:	d504      	bpl.n	15e5a <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   15e50:	4816      	ldr	r0, [pc, #88]	; (15eac <usage_fault.isra.0+0xac>)
   15e52:	f044 0101 	orr.w	r1, r4, #1
   15e56:	f009 f911 	bl	1f07c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   15e5a:	4d0f      	ldr	r5, [pc, #60]	; (15e98 <usage_fault.isra.0+0x98>)
   15e5c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   15e5e:	0392      	lsls	r2, r2, #14
   15e60:	d504      	bpl.n	15e6c <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   15e62:	4813      	ldr	r0, [pc, #76]	; (15eb0 <usage_fault.isra.0+0xb0>)
   15e64:	f044 0101 	orr.w	r1, r4, #1
   15e68:	f009 f908 	bl	1f07c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   15e6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15e6e:	03db      	lsls	r3, r3, #15
   15e70:	d504      	bpl.n	15e7c <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   15e72:	4810      	ldr	r0, [pc, #64]	; (15eb4 <usage_fault.isra.0+0xb4>)
   15e74:	f044 0101 	orr.w	r1, r4, #1
   15e78:	f009 f900 	bl	1f07c <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   15e7c:	4a06      	ldr	r2, [pc, #24]	; (15e98 <usage_fault.isra.0+0x98>)
   15e7e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15e80:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   15e84:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   15e88:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   15e8a:	2000      	movs	r0, #0
   15e8c:	bd70      	pop	{r4, r5, r6, pc}
   15e8e:	bf00      	nop
   15e90:	00020d88 	.word	0x00020d88
   15e94:	00020df0 	.word	0x00020df0
   15e98:	e000ed00 	.word	0xe000ed00
   15e9c:	00021719 	.word	0x00021719
   15ea0:	00021731 	.word	0x00021731
   15ea4:	00021744 	.word	0x00021744
   15ea8:	0002175e 	.word	0x0002175e
   15eac:	0002177c 	.word	0x0002177c
   15eb0:	000217a1 	.word	0x000217a1
   15eb4:	000217bb 	.word	0x000217bb

00015eb8 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   15eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ebc:	4b2a      	ldr	r3, [pc, #168]	; (15f68 <bus_fault.isra.0+0xb0>)
   15ebe:	4c2b      	ldr	r4, [pc, #172]	; (15f6c <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   15ec0:	4d2b      	ldr	r5, [pc, #172]	; (15f70 <bus_fault.isra.0+0xb8>)
   15ec2:	1ae4      	subs	r4, r4, r3
   15ec4:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   15ec6:	01a4      	lsls	r4, r4, #6
   15ec8:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   15ecc:	4607      	mov	r7, r0
   15ece:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   15ed0:	4828      	ldr	r0, [pc, #160]	; (15f74 <bus_fault.isra.0+0xbc>)
   15ed2:	4641      	mov	r1, r8
   15ed4:	f009 f8d2 	bl	1f07c <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   15ed8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   15eda:	04d1      	lsls	r1, r2, #19
   15edc:	d503      	bpl.n	15ee6 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   15ede:	4826      	ldr	r0, [pc, #152]	; (15f78 <bus_fault.isra.0+0xc0>)
   15ee0:	4641      	mov	r1, r8
   15ee2:	f009 f8cb 	bl	1f07c <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   15ee6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15ee8:	051a      	lsls	r2, r3, #20
   15eea:	d504      	bpl.n	15ef6 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   15eec:	4823      	ldr	r0, [pc, #140]	; (15f7c <bus_fault.isra.0+0xc4>)
   15eee:	f044 0101 	orr.w	r1, r4, #1
   15ef2:	f009 f8c3 	bl	1f07c <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   15ef6:	4d1e      	ldr	r5, [pc, #120]	; (15f70 <bus_fault.isra.0+0xb8>)
   15ef8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15efa:	059b      	lsls	r3, r3, #22
   15efc:	d512      	bpl.n	15f24 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   15efe:	f044 0801 	orr.w	r8, r4, #1
   15f02:	481f      	ldr	r0, [pc, #124]	; (15f80 <bus_fault.isra.0+0xc8>)
   15f04:	4641      	mov	r1, r8
   15f06:	f009 f8b9 	bl	1f07c <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   15f0a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   15f0c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15f0e:	0418      	lsls	r0, r3, #16
   15f10:	d508      	bpl.n	15f24 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   15f12:	481c      	ldr	r0, [pc, #112]	; (15f84 <bus_fault.isra.0+0xcc>)
   15f14:	4642      	mov	r2, r8
   15f16:	f009 f8be 	bl	1f096 <log_1>
			if (from_hard_fault != 0) {
   15f1a:	b11f      	cbz	r7, 15f24 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   15f1c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15f1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   15f22:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   15f24:	4d12      	ldr	r5, [pc, #72]	; (15f70 <bus_fault.isra.0+0xb8>)
   15f26:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15f28:	0559      	lsls	r1, r3, #21
   15f2a:	d504      	bpl.n	15f36 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   15f2c:	4816      	ldr	r0, [pc, #88]	; (15f88 <bus_fault.isra.0+0xd0>)
   15f2e:	f044 0101 	orr.w	r1, r4, #1
   15f32:	f009 f8a3 	bl	1f07c <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   15f36:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15f38:	05da      	lsls	r2, r3, #23
   15f3a:	d50d      	bpl.n	15f58 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   15f3c:	4813      	ldr	r0, [pc, #76]	; (15f8c <bus_fault.isra.0+0xd4>)
   15f3e:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   15f42:	f009 f89b 	bl	1f07c <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   15f46:	4a0a      	ldr	r2, [pc, #40]	; (15f70 <bus_fault.isra.0+0xb8>)
   15f48:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   15f4a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   15f4c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   15f50:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   15f52:	7030      	strb	r0, [r6, #0]
}
   15f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   15f58:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15f5a:	049b      	lsls	r3, r3, #18
   15f5c:	d5f3      	bpl.n	15f46 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   15f5e:	480c      	ldr	r0, [pc, #48]	; (15f90 <bus_fault.isra.0+0xd8>)
   15f60:	f044 0101 	orr.w	r1, r4, #1
   15f64:	e7ed      	b.n	15f42 <bus_fault.isra.0+0x8a>
   15f66:	bf00      	nop
   15f68:	00020d88 	.word	0x00020d88
   15f6c:	00020df0 	.word	0x00020df0
   15f70:	e000ed00 	.word	0xe000ed00
   15f74:	000217e6 	.word	0x000217e6
   15f78:	000217fc 	.word	0x000217fc
   15f7c:	0002168a 	.word	0x0002168a
   15f80:	0002180d 	.word	0x0002180d
   15f84:	00021826 	.word	0x00021826
   15f88:	0002183b 	.word	0x0002183b
   15f8c:	00021856 	.word	0x00021856
   15f90:	000216ea 	.word	0x000216ea

00015f94 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   15f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   15f98:	4b65      	ldr	r3, [pc, #404]	; (16130 <z_arm_fault+0x19c>)
   15f9a:	685e      	ldr	r6, [r3, #4]
{
   15f9c:	b08a      	sub	sp, #40	; 0x28
   15f9e:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   15fa0:	f3c6 0408 	ubfx	r4, r6, #0, #9
   15fa4:	2700      	movs	r7, #0
   15fa6:	f387 8811 	msr	BASEPRI, r7
   15faa:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   15fae:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   15fb2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   15fb6:	d10d      	bne.n	15fd4 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   15fb8:	f002 030c 	and.w	r3, r2, #12
   15fbc:	2b08      	cmp	r3, #8
   15fbe:	d10b      	bne.n	15fd8 <z_arm_fault+0x44>
   15fc0:	495c      	ldr	r1, [pc, #368]	; (16134 <z_arm_fault+0x1a0>)
   15fc2:	4b5d      	ldr	r3, [pc, #372]	; (16138 <z_arm_fault+0x1a4>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   15fc4:	485d      	ldr	r0, [pc, #372]	; (1613c <z_arm_fault+0x1a8>)
   15fc6:	1ac9      	subs	r1, r1, r3
   15fc8:	08c9      	lsrs	r1, r1, #3
   15fca:	0189      	lsls	r1, r1, #6
   15fcc:	f041 0101 	orr.w	r1, r1, #1
   15fd0:	f009 f854 	bl	1f07c <log_0>
		return NULL;
   15fd4:	463d      	mov	r5, r7
   15fd6:	e003      	b.n	15fe0 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   15fd8:	0712      	lsls	r2, r2, #28
   15fda:	d401      	bmi.n	15fe0 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
   15fdc:	4605      	mov	r5, r0
			*nested_exc = true;
   15fde:	2701      	movs	r7, #1
	*recoverable = false;
   15fe0:	2300      	movs	r3, #0
   15fe2:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   15fe6:	1ee3      	subs	r3, r4, #3
   15fe8:	2b09      	cmp	r3, #9
   15fea:	f200 8087 	bhi.w	160fc <z_arm_fault+0x168>
   15fee:	e8df f003 	tbb	[pc, r3]
   15ff2:	7405      	.short	0x7405
   15ff4:	85857178 	.word	0x85857178
   15ff8:	7c858585 	.word	0x7c858585
   15ffc:	4a4e      	ldr	r2, [pc, #312]	; (16138 <z_arm_fault+0x1a4>)
   15ffe:	4e4d      	ldr	r6, [pc, #308]	; (16134 <z_arm_fault+0x1a0>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   16000:	484f      	ldr	r0, [pc, #316]	; (16140 <z_arm_fault+0x1ac>)
   16002:	1ab6      	subs	r6, r6, r2
   16004:	08f6      	lsrs	r6, r6, #3
   16006:	01b6      	lsls	r6, r6, #6
   16008:	f046 0601 	orr.w	r6, r6, #1
   1600c:	4631      	mov	r1, r6
   1600e:	f009 f835 	bl	1f07c <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   16012:	4b47      	ldr	r3, [pc, #284]	; (16130 <z_arm_fault+0x19c>)
   16014:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
   16016:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1601a:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
   1601e:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   16022:	d005      	beq.n	16030 <z_arm_fault+0x9c>
		PR_EXC("  Bus fault on vector table read");
   16024:	4847      	ldr	r0, [pc, #284]	; (16144 <z_arm_fault+0x1b0>)
   16026:	4631      	mov	r1, r6
	PR_FAULT_INFO(
   16028:	f009 f828 	bl	1f07c <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1602c:	2400      	movs	r4, #0
}
   1602e:	e006      	b.n	1603e <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   16030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16032:	2a00      	cmp	r2, #0
   16034:	da1d      	bge.n	16072 <z_arm_fault+0xde>
		PR_EXC("  Debug event");
   16036:	4844      	ldr	r0, [pc, #272]	; (16148 <z_arm_fault+0x1b4>)
   16038:	4631      	mov	r1, r6
   1603a:	f009 f81f 	bl	1f07c <log_0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1603e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16042:	b99b      	cbnz	r3, 1606c <z_arm_fault+0xd8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   16044:	2220      	movs	r2, #32
   16046:	4629      	mov	r1, r5
   16048:	a802      	add	r0, sp, #8
   1604a:	f009 fbd7 	bl	1f7fc <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1604e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16050:	2f00      	cmp	r7, #0
   16052:	d067      	beq.n	16124 <z_arm_fault+0x190>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   16054:	f3c3 0208 	ubfx	r2, r3, #0, #9
   16058:	b922      	cbnz	r2, 16064 <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1605a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1605e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   16062:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   16064:	a902      	add	r1, sp, #8
   16066:	4620      	mov	r0, r4
   16068:	f7ff fcc8 	bl	159fc <z_arm_fatal_error>
}
   1606c:	b00a      	add	sp, #40	; 0x28
   1606e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   16072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16074:	005b      	lsls	r3, r3, #1
   16076:	d5e2      	bpl.n	1603e <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
   16078:	4834      	ldr	r0, [pc, #208]	; (1614c <z_arm_fault+0x1b8>)
   1607a:	4631      	mov	r1, r6
   1607c:	f008 fffe 	bl	1f07c <log_0>
	uint16_t fault_insn = *(ret_addr - 1);
   16080:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   16082:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   16086:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1608a:	429a      	cmp	r2, r3
   1608c:	d00d      	beq.n	160aa <z_arm_fault+0x116>
		} else if (SCB_MMFSR != 0) {
   1608e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   16092:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   16096:	781b      	ldrb	r3, [r3, #0]
   16098:	b173      	cbz	r3, 160b8 <z_arm_fault+0x124>
			reason = mem_manage_fault(esf, 1, recoverable);
   1609a:	f10d 0207 	add.w	r2, sp, #7
   1609e:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   160a0:	4628      	mov	r0, r5
   160a2:	f7ff fe2b 	bl	15cfc <mem_manage_fault>
   160a6:	4604      	mov	r4, r0
		break;
   160a8:	e7c9      	b.n	1603e <z_arm_fault+0xaa>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   160aa:	6829      	ldr	r1, [r5, #0]
   160ac:	4828      	ldr	r0, [pc, #160]	; (16150 <z_arm_fault+0x1bc>)
   160ae:	4632      	mov	r2, r6
   160b0:	f008 fff1 	bl	1f096 <log_1>
			reason = esf->basic.r0;
   160b4:	682c      	ldr	r4, [r5, #0]
   160b6:	e7c2      	b.n	1603e <z_arm_fault+0xaa>
		} else if (SCB_BFSR != 0) {
   160b8:	4b26      	ldr	r3, [pc, #152]	; (16154 <z_arm_fault+0x1c0>)
   160ba:	781b      	ldrb	r3, [r3, #0]
   160bc:	b12b      	cbz	r3, 160ca <z_arm_fault+0x136>
			reason = bus_fault(esf, 1, recoverable);
   160be:	f10d 0107 	add.w	r1, sp, #7
   160c2:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   160c4:	f7ff fef8 	bl	15eb8 <bus_fault.isra.0>
   160c8:	e7ed      	b.n	160a6 <z_arm_fault+0x112>
		} else if (SCB_UFSR != 0) {
   160ca:	4b23      	ldr	r3, [pc, #140]	; (16158 <z_arm_fault+0x1c4>)
   160cc:	881b      	ldrh	r3, [r3, #0]
   160ce:	b29b      	uxth	r3, r3
   160d0:	2b00      	cmp	r3, #0
   160d2:	d0b4      	beq.n	1603e <z_arm_fault+0xaa>
		reason = usage_fault(esf);
   160d4:	f7ff fe94 	bl	15e00 <usage_fault.isra.0>
   160d8:	e7e5      	b.n	160a6 <z_arm_fault+0x112>
		reason = mem_manage_fault(esf, 0, recoverable);
   160da:	f10d 0207 	add.w	r2, sp, #7
   160de:	2100      	movs	r1, #0
   160e0:	e7de      	b.n	160a0 <z_arm_fault+0x10c>
		reason = bus_fault(esf, 0, recoverable);
   160e2:	f10d 0107 	add.w	r1, sp, #7
   160e6:	2000      	movs	r0, #0
   160e8:	e7ec      	b.n	160c4 <z_arm_fault+0x130>
   160ea:	4912      	ldr	r1, [pc, #72]	; (16134 <z_arm_fault+0x1a0>)
   160ec:	4b12      	ldr	r3, [pc, #72]	; (16138 <z_arm_fault+0x1a4>)
	PR_FAULT_INFO(
   160ee:	481b      	ldr	r0, [pc, #108]	; (1615c <z_arm_fault+0x1c8>)
   160f0:	1ac9      	subs	r1, r1, r3
   160f2:	08c9      	lsrs	r1, r1, #3
   160f4:	0189      	lsls	r1, r1, #6
   160f6:	f041 0101 	orr.w	r1, r1, #1
   160fa:	e795      	b.n	16028 <z_arm_fault+0x94>
   160fc:	4a0e      	ldr	r2, [pc, #56]	; (16138 <z_arm_fault+0x1a4>)
   160fe:	4b0d      	ldr	r3, [pc, #52]	; (16134 <z_arm_fault+0x1a0>)
	PR_FAULT_INFO("***** %s %d) *****",
   16100:	4817      	ldr	r0, [pc, #92]	; (16160 <z_arm_fault+0x1cc>)
   16102:	4918      	ldr	r1, [pc, #96]	; (16164 <z_arm_fault+0x1d0>)
   16104:	1a9b      	subs	r3, r3, r2
   16106:	08db      	lsrs	r3, r3, #3
   16108:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
   1610c:	ea4f 1383 	mov.w	r3, r3, lsl #6
   16110:	bf18      	it	ne
   16112:	4601      	movne	r1, r0
   16114:	f043 0301 	orr.w	r3, r3, #1
   16118:	4813      	ldr	r0, [pc, #76]	; (16168 <z_arm_fault+0x1d4>)
   1611a:	f1a4 0210 	sub.w	r2, r4, #16
   1611e:	f008 ffce 	bl	1f0be <log_2>
   16122:	e783      	b.n	1602c <z_arm_fault+0x98>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   16124:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   16128:	f023 0301 	bic.w	r3, r3, #1
   1612c:	e799      	b.n	16062 <z_arm_fault+0xce>
   1612e:	bf00      	nop
   16130:	e000ed00 	.word	0xe000ed00
   16134:	00020df0 	.word	0x00020df0
   16138:	00020d88 	.word	0x00020d88
   1613c:	0002186e 	.word	0x0002186e
   16140:	00021899 	.word	0x00021899
   16144:	000218b0 	.word	0x000218b0
   16148:	000218d1 	.word	0x000218d1
   1614c:	000218df 	.word	0x000218df
   16150:	000218fe 	.word	0x000218fe
   16154:	e000ed29 	.word	0xe000ed29
   16158:	e000ed2a 	.word	0xe000ed2a
   1615c:	0002191a 	.word	0x0002191a
   16160:	00021953 	.word	0x00021953
   16164:	0002193e 	.word	0x0002193e
   16168:	0002196c 	.word	0x0002196c

0001616c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1616c:	4a02      	ldr	r2, [pc, #8]	; (16178 <z_arm_fault_init+0xc>)
   1616e:	6953      	ldr	r3, [r2, #20]
   16170:	f043 0310 	orr.w	r3, r3, #16
   16174:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   16176:	4770      	bx	lr
   16178:	e000ed00 	.word	0xe000ed00

0001617c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1617c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   16180:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   16184:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   16186:	4672      	mov	r2, lr
	bl z_arm_fault
   16188:	f7ff ff04 	bl	15f94 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1618c:	bd01      	pop	{r0, pc}
   1618e:	bf00      	nop

00016190 <z_arm_interrupt_init>:
   16190:	4804      	ldr	r0, [pc, #16]	; (161a4 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   16192:	2300      	movs	r3, #0
   16194:	2140      	movs	r1, #64	; 0x40
   16196:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   16198:	3301      	adds	r3, #1
   1619a:	2b30      	cmp	r3, #48	; 0x30
   1619c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   161a0:	d1f9      	bne.n	16196 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   161a2:	4770      	bx	lr
   161a4:	e000e100 	.word	0xe000e100

000161a8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   161a8:	2000      	movs	r0, #0
    msr CONTROL, r0
   161aa:	f380 8814 	msr	CONTROL, r0
    isb
   161ae:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   161b2:	f00a fc7f 	bl	20ab4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   161b6:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   161b8:	490d      	ldr	r1, [pc, #52]	; (161f0 <__start+0x48>)
    str r0, [r1]
   161ba:	6008      	str	r0, [r1, #0]
    dsb
   161bc:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   161c0:	480c      	ldr	r0, [pc, #48]	; (161f4 <__start+0x4c>)
    msr msp, r0
   161c2:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   161c6:	f000 f829 	bl	1621c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   161ca:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   161cc:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   161d0:	4809      	ldr	r0, [pc, #36]	; (161f8 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   161d2:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   161d6:	1840      	adds	r0, r0, r1
    msr PSP, r0
   161d8:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   161dc:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   161e0:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   161e2:	4308      	orrs	r0, r1
    msr CONTROL, r0
   161e4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   161e8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   161ec:	f7ff fc9c 	bl	15b28 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   161f0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   161f4:	200052a0 	.word	0x200052a0
    ldr r0, =z_interrupt_stacks
   161f8:	20005420 	.word	0x20005420

000161fc <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   161fc:	4a06      	ldr	r2, [pc, #24]	; (16218 <z_arm_clear_arm_mpu_config+0x1c>)
   161fe:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
   16200:	2300      	movs	r3, #0
	int num_regions =
   16202:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   16206:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   16208:	428b      	cmp	r3, r1
   1620a:	d100      	bne.n	1620e <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   1620c:	4770      	bx	lr
  MPU->RNR = rnr;
   1620e:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   16210:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   16212:	3301      	adds	r3, #1
   16214:	e7f8      	b.n	16208 <z_arm_clear_arm_mpu_config+0xc>
   16216:	bf00      	nop
   16218:	e000ed90 	.word	0xe000ed90

0001621c <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   1621c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1621e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   16220:	2300      	movs	r3, #0
   16222:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   16226:	f7ff ffe9 	bl	161fc <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   1622a:	4b14      	ldr	r3, [pc, #80]	; (1627c <z_arm_init_arch_hw_at_boot+0x60>)
   1622c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   16234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   16238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   1623c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   16240:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   16244:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   16248:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   1624c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   16250:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   16254:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   16258:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   1625c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   16260:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   16264:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   16268:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   1626c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   16270:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   16272:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16276:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   1627a:	bd08      	pop	{r3, pc}
   1627c:	e000e100 	.word	0xe000e100

00016280 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   16280:	4b06      	ldr	r3, [pc, #24]	; (1629c <z_impl_k_thread_abort+0x1c>)
   16282:	689b      	ldr	r3, [r3, #8]
   16284:	4283      	cmp	r3, r0
   16286:	d107      	bne.n	16298 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   16288:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   1628c:	b123      	cbz	r3, 16298 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1628e:	4a04      	ldr	r2, [pc, #16]	; (162a0 <z_impl_k_thread_abort+0x20>)
   16290:	6853      	ldr	r3, [r2, #4]
   16292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   16296:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   16298:	f005 bbb4 	b.w	1ba04 <z_thread_abort>
   1629c:	200020e0 	.word	0x200020e0
   162a0:	e000ed00 	.word	0xe000ed00

000162a4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   162a4:	4b02      	ldr	r3, [pc, #8]	; (162b0 <z_arm_configure_static_mpu_regions+0xc>)
   162a6:	4a03      	ldr	r2, [pc, #12]	; (162b4 <z_arm_configure_static_mpu_regions+0x10>)
   162a8:	4803      	ldr	r0, [pc, #12]	; (162b8 <z_arm_configure_static_mpu_regions+0x14>)
   162aa:	2101      	movs	r1, #1
   162ac:	f000 b884 	b.w	163b8 <arm_core_mpu_configure_static_mpu_regions>
   162b0:	20040000 	.word	0x20040000
   162b4:	20000000 	.word	0x20000000
   162b8:	00020f9c 	.word	0x00020f9c

000162bc <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   162bc:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   162be:	4b05      	ldr	r3, [pc, #20]	; (162d4 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   162c0:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   162c2:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   162c4:	4a04      	ldr	r2, [pc, #16]	; (162d8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   162c6:	2120      	movs	r1, #32
   162c8:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   162cc:	4618      	mov	r0, r3
   162ce:	2101      	movs	r1, #1
   162d0:	f000 b87c 	b.w	163cc <arm_core_mpu_configure_dynamic_mpu_regions>
   162d4:	20001f14 	.word	0x20001f14
   162d8:	150b0000 	.word	0x150b0000

000162dc <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   162dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   162de:	4f28      	ldr	r7, [pc, #160]	; (16380 <mpu_configure_regions+0xa4>)
   162e0:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   162e2:	2100      	movs	r1, #0
   162e4:	42b1      	cmp	r1, r6
   162e6:	da14      	bge.n	16312 <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
   162e8:	6844      	ldr	r4, [r0, #4]
   162ea:	2c00      	cmp	r4, #0
   162ec:	d045      	beq.n	1637a <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   162ee:	b1c3      	cbz	r3, 16322 <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   162f0:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   162f4:	ea14 0f0c 	tst.w	r4, ip
   162f8:	d00d      	beq.n	16316 <mpu_configure_regions+0x3a>
   162fa:	4a22      	ldr	r2, [pc, #136]	; (16384 <mpu_configure_regions+0xa8>)
   162fc:	4b22      	ldr	r3, [pc, #136]	; (16388 <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   162fe:	4823      	ldr	r0, [pc, #140]	; (1638c <mpu_configure_regions+0xb0>)
   16300:	1ad2      	subs	r2, r2, r3
   16302:	08d2      	lsrs	r2, r2, #3
   16304:	0192      	lsls	r2, r2, #6
   16306:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1630a:	f008 fec4 	bl	1f096 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   1630e:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   16312:	4610      	mov	r0, r2
   16314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   16316:	2c1f      	cmp	r4, #31
   16318:	d9ef      	bls.n	162fa <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
   1631a:	6805      	ldr	r5, [r0, #0]
		&&
   1631c:	ea1c 0f05 	tst.w	ip, r5
   16320:	d1eb      	bne.n	162fa <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   16322:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   16324:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   16326:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
   1632a:	6802      	ldr	r2, [r0, #0]
   1632c:	d916      	bls.n	1635c <mpu_configure_regions+0x80>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   1632e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   16332:	d815      	bhi.n	16360 <mpu_configure_regions+0x84>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   16334:	3c01      	subs	r4, #1
   16336:	fab4 f484 	clz	r4, r4
   1633a:	f1c4 041f 	rsb	r4, r4, #31
   1633e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   16340:	2d07      	cmp	r5, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   16342:	ea4c 0404 	orr.w	r4, ip, r4
   16346:	d90d      	bls.n	16364 <mpu_configure_regions+0x88>
   16348:	4a0e      	ldr	r2, [pc, #56]	; (16384 <mpu_configure_regions+0xa8>)
   1634a:	4b0f      	ldr	r3, [pc, #60]	; (16388 <mpu_configure_regions+0xac>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1634c:	4810      	ldr	r0, [pc, #64]	; (16390 <mpu_configure_regions+0xb4>)
   1634e:	1ad2      	subs	r2, r2, r3
   16350:	08d2      	lsrs	r2, r2, #3
   16352:	0192      	lsls	r2, r2, #6
   16354:	f042 0201 	orr.w	r2, r2, #1
   16358:	4629      	mov	r1, r5
   1635a:	e7d6      	b.n	1630a <mpu_configure_regions+0x2e>
		return REGION_32B;
   1635c:	2408      	movs	r4, #8
   1635e:	e7ef      	b.n	16340 <mpu_configure_regions+0x64>
		return REGION_4G;
   16360:	243e      	movs	r4, #62	; 0x3e
   16362:	e7ed      	b.n	16340 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   16364:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   16368:	432a      	orrs	r2, r5
   1636a:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1636e:	f044 0401 	orr.w	r4, r4, #1
   16372:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   16374:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   16376:	613c      	str	r4, [r7, #16]
		reg_index++;
   16378:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
   1637a:	3101      	adds	r1, #1
   1637c:	300c      	adds	r0, #12
   1637e:	e7b1      	b.n	162e4 <mpu_configure_regions+0x8>
   16380:	e000ed90 	.word	0xe000ed90
   16384:	00020de0 	.word	0x00020de0
   16388:	00020d88 	.word	0x00020d88
   1638c:	00021983 	.word	0x00021983
   16390:	000219a6 	.word	0x000219a6

00016394 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   16394:	4b03      	ldr	r3, [pc, #12]	; (163a4 <arm_core_mpu_enable+0x10>)
   16396:	2205      	movs	r2, #5
   16398:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   1639a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1639e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   163a2:	4770      	bx	lr
   163a4:	e000ed90 	.word	0xe000ed90

000163a8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   163a8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   163ac:	4b01      	ldr	r3, [pc, #4]	; (163b4 <arm_core_mpu_disable+0xc>)
   163ae:	2200      	movs	r2, #0
   163b0:	605a      	str	r2, [r3, #4]
}
   163b2:	4770      	bx	lr
   163b4:	e000ed90 	.word	0xe000ed90

000163b8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   163b8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   163ba:	4c03      	ldr	r4, [pc, #12]	; (163c8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   163bc:	2301      	movs	r3, #1
   163be:	7822      	ldrb	r2, [r4, #0]
   163c0:	f7ff ff8c 	bl	162dc <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   163c4:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   163c6:	bd10      	pop	{r4, pc}
   163c8:	20002b0e 	.word	0x20002b0e

000163cc <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   163cc:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   163ce:	4a08      	ldr	r2, [pc, #32]	; (163f0 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
   163d0:	2300      	movs	r3, #0
   163d2:	7812      	ldrb	r2, [r2, #0]
   163d4:	f7ff ff82 	bl	162dc <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   163d8:	f110 0f16 	cmn.w	r0, #22
   163dc:	d003      	beq.n	163e6 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
   163de:	4b05      	ldr	r3, [pc, #20]	; (163f4 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
   163e0:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   163e2:	2807      	cmp	r0, #7
   163e4:	dd00      	ble.n	163e8 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   163e6:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   163e8:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   163ea:	611a      	str	r2, [r3, #16]
   163ec:	3001      	adds	r0, #1
   163ee:	e7f8      	b.n	163e2 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   163f0:	20002b0e 	.word	0x20002b0e
   163f4:	e000ed90 	.word	0xe000ed90

000163f8 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   163f8:	4913      	ldr	r1, [pc, #76]	; (16448 <z_arm_mpu_init+0x50>)
   163fa:	6808      	ldr	r0, [r1, #0]
   163fc:	2808      	cmp	r0, #8
{
   163fe:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   16400:	d81e      	bhi.n	16440 <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   16402:	f7ff ffd1 	bl	163a8 <arm_core_mpu_disable>
   16406:	4c11      	ldr	r4, [pc, #68]	; (1644c <z_arm_mpu_init+0x54>)
   16408:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1640a:	2200      	movs	r2, #0
   1640c:	4290      	cmp	r0, r2
   1640e:	f101 010c 	add.w	r1, r1, #12
   16412:	d105      	bne.n	16420 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   16414:	4b0e      	ldr	r3, [pc, #56]	; (16450 <z_arm_mpu_init+0x58>)
   16416:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   16418:	f7ff ffbc 	bl	16394 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   1641c:	2000      	movs	r0, #0
}
   1641e:	bd10      	pop	{r4, pc}
   16420:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   16422:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   16426:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   1642a:	4313      	orrs	r3, r2
   1642c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   16430:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   16432:	f851 3c04 	ldr.w	r3, [r1, #-4]
   16436:	f043 0301 	orr.w	r3, r3, #1
   1643a:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1643c:	3201      	adds	r2, #1
   1643e:	e7e5      	b.n	1640c <z_arm_mpu_init+0x14>
		return -1;
   16440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16444:	e7eb      	b.n	1641e <z_arm_mpu_init+0x26>
   16446:	bf00      	nop
   16448:	00020fa8 	.word	0x00020fa8
   1644c:	e000ed90 	.word	0xe000ed90
   16450:	20002b0e 	.word	0x20002b0e

00016454 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   16454:	4b01      	ldr	r3, [pc, #4]	; (1645c <__stdout_hook_install+0x8>)
   16456:	6018      	str	r0, [r3, #0]
}
   16458:	4770      	bx	lr
   1645a:	bf00      	nop
   1645c:	20000488 	.word	0x20000488

00016460 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   16460:	f04f 0340 	mov.w	r3, #64	; 0x40
   16464:	f3ef 8111 	mrs	r1, BASEPRI
   16468:	f383 8812 	msr	BASEPRI_MAX, r3
   1646c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   16470:	4a0f      	ldr	r2, [pc, #60]	; (164b0 <nordicsemi_nrf52_init+0x50>)
   16472:	2301      	movs	r3, #1
   16474:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   16478:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1647c:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   16480:	4a0c      	ldr	r2, [pc, #48]	; (164b4 <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   16482:	6812      	ldr	r2, [r2, #0]
   16484:	2a08      	cmp	r2, #8
   16486:	d108      	bne.n	1649a <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   16488:	4a0b      	ldr	r2, [pc, #44]	; (164b8 <nordicsemi_nrf52_init+0x58>)
   1648a:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
   1648c:	2a05      	cmp	r2, #5
   1648e:	d804      	bhi.n	1649a <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   16490:	480a      	ldr	r0, [pc, #40]	; (164bc <nordicsemi_nrf52_init+0x5c>)
   16492:	5c82      	ldrb	r2, [r0, r2]
   16494:	b10a      	cbz	r2, 1649a <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   16496:	4a0a      	ldr	r2, [pc, #40]	; (164c0 <nordicsemi_nrf52_init+0x60>)
   16498:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   1649a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1649e:	2201      	movs	r2, #1
   164a0:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   164a4:	f381 8811 	msr	BASEPRI, r1
   164a8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   164ac:	2000      	movs	r0, #0
   164ae:	4770      	bx	lr
   164b0:	4001e000 	.word	0x4001e000
   164b4:	10000130 	.word	0x10000130
   164b8:	10000134 	.word	0x10000134
   164bc:	000219df 	.word	0x000219df
   164c0:	40000638 	.word	0x40000638

000164c4 <sys_arch_reboot>:
    *p_gpregret = val;
   164c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   164c8:	b2c0      	uxtb	r0, r0
   164ca:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   164ce:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   164d2:	4905      	ldr	r1, [pc, #20]	; (164e8 <sys_arch_reboot+0x24>)
   164d4:	4b05      	ldr	r3, [pc, #20]	; (164ec <sys_arch_reboot+0x28>)
   164d6:	68ca      	ldr	r2, [r1, #12]
   164d8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   164dc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   164de:	60cb      	str	r3, [r1, #12]
   164e0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   164e4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   164e6:	e7fd      	b.n	164e4 <sys_arch_reboot+0x20>
   164e8:	e000ed00 	.word	0xe000ed00
   164ec:	05fa0004 	.word	0x05fa0004

000164f0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   164f0:	b120      	cbz	r0, 164fc <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   164f2:	4b03      	ldr	r3, [pc, #12]	; (16500 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   164f4:	0180      	lsls	r0, r0, #6
   164f6:	f043 0301 	orr.w	r3, r3, #1
   164fa:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   164fc:	4770      	bx	lr
   164fe:	bf00      	nop
   16500:	00020ee0 	.word	0x00020ee0

00016504 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   16504:	4b0e      	ldr	r3, [pc, #56]	; (16540 <bt_hex_real+0x3c>)
   16506:	2940      	cmp	r1, #64	; 0x40
{
   16508:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   1650a:	bf28      	it	cs
   1650c:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   1650e:	4c0d      	ldr	r4, [pc, #52]	; (16544 <bt_hex_real+0x40>)
   16510:	1846      	adds	r6, r0, r1
   16512:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   16514:	42b0      	cmp	r0, r6
   16516:	f103 0302 	add.w	r3, r3, #2
   1651a:	d104      	bne.n	16526 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   1651c:	2300      	movs	r3, #0
   1651e:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   16522:	4807      	ldr	r0, [pc, #28]	; (16540 <bt_hex_real+0x3c>)
   16524:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   16526:	7802      	ldrb	r2, [r0, #0]
   16528:	0912      	lsrs	r2, r2, #4
   1652a:	5ca2      	ldrb	r2, [r4, r2]
   1652c:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   16530:	f810 2b01 	ldrb.w	r2, [r0], #1
   16534:	f002 020f 	and.w	r2, r2, #15
   16538:	5ca2      	ldrb	r2, [r4, r2]
   1653a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   1653e:	e7e9      	b.n	16514 <bt_hex_real+0x10>
   16540:	20002b0f 	.word	0x20002b0f
   16544:	00021a2a 	.word	0x00021a2a

00016548 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   16548:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   1654a:	7803      	ldrb	r3, [r0, #0]
   1654c:	b08b      	sub	sp, #44	; 0x2c
   1654e:	4604      	mov	r4, r0
   16550:	ad07      	add	r5, sp, #28
   16552:	2b03      	cmp	r3, #3
   16554:	d821      	bhi.n	1659a <bt_addr_le_str_real+0x52>
   16556:	e8df f003 	tbb	[pc, r3]
   1655a:	1a02      	.short	0x1a02
   1655c:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   1655e:	4912      	ldr	r1, [pc, #72]	; (165a8 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   16560:	4628      	mov	r0, r5
   16562:	f009 f8eb 	bl	1f73c <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   16566:	7863      	ldrb	r3, [r4, #1]
   16568:	9304      	str	r3, [sp, #16]
   1656a:	78a3      	ldrb	r3, [r4, #2]
   1656c:	9303      	str	r3, [sp, #12]
   1656e:	78e3      	ldrb	r3, [r4, #3]
   16570:	9302      	str	r3, [sp, #8]
   16572:	7923      	ldrb	r3, [r4, #4]
   16574:	9301      	str	r3, [sp, #4]
   16576:	7963      	ldrb	r3, [r4, #5]
   16578:	9300      	str	r3, [sp, #0]
   1657a:	4a0c      	ldr	r2, [pc, #48]	; (165ac <bt_addr_le_str_real+0x64>)
   1657c:	79a3      	ldrb	r3, [r4, #6]
   1657e:	9505      	str	r5, [sp, #20]
   16580:	211e      	movs	r1, #30
   16582:	480b      	ldr	r0, [pc, #44]	; (165b0 <bt_addr_le_str_real+0x68>)
   16584:	f008 fa4e 	bl	1ea24 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   16588:	4809      	ldr	r0, [pc, #36]	; (165b0 <bt_addr_le_str_real+0x68>)
   1658a:	b00b      	add	sp, #44	; 0x2c
   1658c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   1658e:	4909      	ldr	r1, [pc, #36]	; (165b4 <bt_addr_le_str_real+0x6c>)
   16590:	e7e6      	b.n	16560 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   16592:	4909      	ldr	r1, [pc, #36]	; (165b8 <bt_addr_le_str_real+0x70>)
   16594:	e7e4      	b.n	16560 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   16596:	4909      	ldr	r1, [pc, #36]	; (165bc <bt_addr_le_str_real+0x74>)
   16598:	e7e2      	b.n	16560 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1659a:	4a09      	ldr	r2, [pc, #36]	; (165c0 <bt_addr_le_str_real+0x78>)
   1659c:	210a      	movs	r1, #10
   1659e:	4628      	mov	r0, r5
   165a0:	f008 fa40 	bl	1ea24 <snprintk>
		break;
   165a4:	e7df      	b.n	16566 <bt_addr_le_str_real+0x1e>
   165a6:	bf00      	nop
   165a8:	000219e5 	.word	0x000219e5
   165ac:	00021a07 	.word	0x00021a07
   165b0:	20002b90 	.word	0x20002b90
   165b4:	000219ec 	.word	0x000219ec
   165b8:	000219f3 	.word	0x000219f3
   165bc:	000219fd 	.word	0x000219fd
   165c0:	00021d1c 	.word	0x00021d1c

000165c4 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   165c4:	b538      	push	{r3, r4, r5, lr}
   165c6:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   165c8:	4805      	ldr	r0, [pc, #20]	; (165e0 <bt_buf_get_rx+0x1c>)
   165ca:	f009 fa8f 	bl	1faec <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   165ce:	4604      	mov	r4, r0
   165d0:	b120      	cbz	r0, 165dc <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   165d2:	2100      	movs	r1, #0
   165d4:	3008      	adds	r0, #8
   165d6:	f009 faa8 	bl	1fb2a <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   165da:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   165dc:	4620      	mov	r0, r4
   165de:	bd38      	pop	{r3, r4, r5, pc}
   165e0:	20000704 	.word	0x20000704

000165e4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   165e4:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   165e6:	490b      	ldr	r1, [pc, #44]	; (16614 <bt_buf_get_cmd_complete+0x30>)
{
   165e8:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   165ea:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
{
   165ee:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   165f0:	b920      	cbnz	r0, 165fc <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   165f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   165f6:	2001      	movs	r0, #1
   165f8:	f7ff bfe4 	b.w	165c4 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   165fc:	f009 faa6 	bl	1fb4c <net_buf_ref>
   16600:	2301      	movs	r3, #1
		buf->len = 0U;
   16602:	2100      	movs	r1, #0
   16604:	7503      	strb	r3, [r0, #20]
   16606:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   16608:	4604      	mov	r4, r0
   1660a:	3008      	adds	r0, #8
   1660c:	f009 fa8d 	bl	1fb2a <net_buf_simple_reserve>
}
   16610:	4620      	mov	r0, r4
   16612:	bd10      	pop	{r4, pc}
   16614:	20000330 	.word	0x20000330

00016618 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
	switch (evt) {
   16618:	380e      	subs	r0, #14
   1661a:	2801      	cmp	r0, #1
{
   1661c:	b570      	push	{r4, r5, r6, lr}
   1661e:	460c      	mov	r4, r1
   16620:	4619      	mov	r1, r3
	switch (evt) {
   16622:	d804      	bhi.n	1662e <bt_buf_get_evt+0x16>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   16624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   16628:	4610      	mov	r0, r2
   1662a:	f7ff bfdb 	b.w	165e4 <bt_buf_get_cmd_complete>
		if (discardable) {
   1662e:	b164      	cbz	r4, 1664a <bt_buf_get_evt+0x32>
	return net_buf_alloc_fixed(pool, timeout);
   16630:	4808      	ldr	r0, [pc, #32]	; (16654 <bt_buf_get_evt+0x3c>)
   16632:	f009 fa5b 	bl	1faec <net_buf_alloc_fixed>
			if (buf) {
   16636:	4604      	mov	r4, r0
   16638:	b128      	cbz	r0, 16646 <bt_buf_get_evt+0x2e>
	net_buf_simple_reserve(&buf->b, reserve);
   1663a:	2100      	movs	r1, #0
   1663c:	3008      	adds	r0, #8
   1663e:	f009 fa74 	bl	1fb2a <net_buf_simple_reserve>
   16642:	2301      	movs	r3, #1
   16644:	7523      	strb	r3, [r4, #20]
}
   16646:	4620      	mov	r0, r4
   16648:	bd70      	pop	{r4, r5, r6, pc}
   1664a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1664e:	2001      	movs	r0, #1
   16650:	f7ff bfb8 	b.w	165c4 <bt_buf_get_rx>
   16654:	200006ac 	.word	0x200006ac

00016658 <ver_str>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(uint8_t ver)
{
   16658:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   1665a:	4d0b      	ldr	r5, [pc, #44]	; (16688 <ver_str+0x30>)
{
   1665c:	4606      	mov	r6, r0
	const char * const str[] = {
   1665e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   16660:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   16662:	ac01      	add	r4, sp, #4
   16664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   16666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1666a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1666c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3"
	};

	if (ver < ARRAY_SIZE(str)) {
   1666e:	2e0c      	cmp	r6, #12
	const char * const str[] = {
   16670:	682b      	ldr	r3, [r5, #0]
   16672:	6023      	str	r3, [r4, #0]
		return str[ver];
   16674:	bf9b      	ittet	ls
   16676:	ab0e      	addls	r3, sp, #56	; 0x38
   16678:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
   1667c:	4803      	ldrhi	r0, [pc, #12]	; (1668c <ver_str+0x34>)
		return str[ver];
   1667e:	f856 0c34 	ldrls.w	r0, [r6, #-52]
}
   16682:	b00e      	add	sp, #56	; 0x38
   16684:	bd70      	pop	{r4, r5, r6, pc}
   16686:	bf00      	nop
   16688:	00020e94 	.word	0x00020e94
   1668c:	00021b38 	.word	0x00021b38

00016690 <hci_hardware_error>:
{
   16690:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   16692:	2101      	movs	r1, #1
   16694:	3008      	adds	r0, #8
   16696:	f009 fa7c 	bl	1fb92 <net_buf_simple_pull_mem>
   1669a:	4b06      	ldr	r3, [pc, #24]	; (166b4 <hci_hardware_error+0x24>)
   1669c:	4a06      	ldr	r2, [pc, #24]	; (166b8 <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   1669e:	7801      	ldrb	r1, [r0, #0]
   166a0:	4806      	ldr	r0, [pc, #24]	; (166bc <hci_hardware_error+0x2c>)
   166a2:	1ad2      	subs	r2, r2, r3
   166a4:	08d2      	lsrs	r2, r2, #3
   166a6:	0192      	lsls	r2, r2, #6
}
   166a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   166ac:	f042 0201 	orr.w	r2, r2, #1
   166b0:	f008 bcf1 	b.w	1f096 <log_1>
   166b4:	00020d88 	.word	0x00020d88
   166b8:	00020d98 	.word	0x00020d98
   166bc:	00021b40 	.word	0x00021b40

000166c0 <hci_vendor_event>:
{
   166c0:	b510      	push	{r4, lr}
   166c2:	4a0a      	ldr	r2, [pc, #40]	; (166ec <hci_vendor_event+0x2c>)
   166c4:	4c0a      	ldr	r4, [pc, #40]	; (166f0 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
   166c6:	8981      	ldrh	r1, [r0, #12]
   166c8:	6880      	ldr	r0, [r0, #8]
   166ca:	1aa4      	subs	r4, r4, r2
   166cc:	f7ff ff1a 	bl	16504 <bt_hex_real>
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   166d0:	f7fe fa9c 	bl	14c0c <z_log_strdup>
   166d4:	08e4      	lsrs	r4, r4, #3
   166d6:	01a4      	lsls	r4, r4, #6
   166d8:	f044 0402 	orr.w	r4, r4, #2
   166dc:	4601      	mov	r1, r0
   166de:	4622      	mov	r2, r4
   166e0:	4804      	ldr	r0, [pc, #16]	; (166f4 <hci_vendor_event+0x34>)
}
   166e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   166e6:	f008 bcd6 	b.w	1f096 <log_1>
   166ea:	bf00      	nop
   166ec:	00020d88 	.word	0x00020d88
   166f0:	00020d98 	.word	0x00020d98
   166f4:	00021b62 	.word	0x00021b62

000166f8 <hci_cmd_done>:
{
   166f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   166fc:	4606      	mov	r6, r0
   166fe:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   16700:	7990      	ldrb	r0, [r2, #6]
   16702:	f8df 8134 	ldr.w	r8, [pc, #308]	; 16838 <hci_cmd_done+0x140>
{
   16706:	460f      	mov	r7, r1
   16708:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1670a:	f001 fd33 	bl	18174 <net_buf_pool_get>
   1670e:	4580      	cmp	r8, r0
   16710:	d016      	beq.n	16740 <hci_cmd_done+0x48>
   16712:	4b44      	ldr	r3, [pc, #272]	; (16824 <hci_cmd_done+0x12c>)
   16714:	4d44      	ldr	r5, [pc, #272]	; (16828 <hci_cmd_done+0x130>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   16716:	79a0      	ldrb	r0, [r4, #6]
   16718:	9600      	str	r6, [sp, #0]
   1671a:	1aed      	subs	r5, r5, r3
   1671c:	08ed      	lsrs	r5, r5, #3
   1671e:	9001      	str	r0, [sp, #4]
   16720:	f001 fd28 	bl	18174 <net_buf_pool_get>
   16724:	01ad      	lsls	r5, r5, #6
   16726:	f045 0502 	orr.w	r5, r5, #2
   1672a:	e9cd 0802 	strd	r0, r8, [sp, #8]
   1672e:	462b      	mov	r3, r5
   16730:	483e      	ldr	r0, [pc, #248]	; (1682c <hci_cmd_done+0x134>)
   16732:	2204      	movs	r2, #4
   16734:	4669      	mov	r1, sp
   16736:	f008 fcf7 	bl	1f128 <log_n>
}
   1673a:	b005      	add	sp, #20
   1673c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   16740:	4620      	mov	r0, r4
   16742:	f001 fd1f 	bl	18184 <net_buf_id>
   16746:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1683c <hci_cmd_done+0x144>
   1674a:	f04f 090c 	mov.w	r9, #12
   1674e:	fb09 8000 	mla	r0, r9, r0, r8
   16752:	4645      	mov	r5, r8
   16754:	8843      	ldrh	r3, [r0, #2]
   16756:	42b3      	cmp	r3, r6
   16758:	d012      	beq.n	16780 <hci_cmd_done+0x88>
   1675a:	4b32      	ldr	r3, [pc, #200]	; (16824 <hci_cmd_done+0x12c>)
   1675c:	4d32      	ldr	r5, [pc, #200]	; (16828 <hci_cmd_done+0x130>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   1675e:	4620      	mov	r0, r4
   16760:	1aed      	subs	r5, r5, r3
   16762:	f001 fd0f 	bl	18184 <net_buf_id>
   16766:	08ed      	lsrs	r5, r5, #3
   16768:	fb09 8000 	mla	r0, r9, r0, r8
   1676c:	01ad      	lsls	r5, r5, #6
   1676e:	f045 0502 	orr.w	r5, r5, #2
   16772:	8842      	ldrh	r2, [r0, #2]
   16774:	482e      	ldr	r0, [pc, #184]	; (16830 <hci_cmd_done+0x138>)
   16776:	462b      	mov	r3, r5
   16778:	4631      	mov	r1, r6
   1677a:	f008 fca0 	bl	1f0be <log_2>
		return;
   1677e:	e7dc      	b.n	1673a <hci_cmd_done+0x42>
	if (bt_dev.sent_cmd) {
   16780:	4e2c      	ldr	r6, [pc, #176]	; (16834 <hci_cmd_done+0x13c>)
   16782:	f8d6 00f8 	ldr.w	r0, [r6, #248]	; 0xf8
   16786:	b120      	cbz	r0, 16792 <hci_cmd_done+0x9a>
		net_buf_unref(bt_dev.sent_cmd);
   16788:	f001 fdb4 	bl	182f4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1678c:	2300      	movs	r3, #0
   1678e:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
	if (cmd(buf)->state && !status) {
   16792:	4620      	mov	r0, r4
   16794:	f001 fcf6 	bl	18184 <net_buf_id>
   16798:	260c      	movs	r6, #12
   1679a:	fb06 5000 	mla	r0, r6, r0, r5
   1679e:	6843      	ldr	r3, [r0, #4]
   167a0:	b1e3      	cbz	r3, 167dc <hci_cmd_done+0xe4>
   167a2:	b9df      	cbnz	r7, 167dc <hci_cmd_done+0xe4>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   167a4:	4620      	mov	r0, r4
   167a6:	f001 fced 	bl	18184 <net_buf_id>
   167aa:	fb06 5000 	mla	r0, r6, r0, r5
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   167ae:	2201      	movs	r2, #1
   167b0:	6840      	ldr	r0, [r0, #4]
   167b2:	e9d0 3100 	ldrd	r3, r1, [r0]

	if (val) {
   167b6:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   167b8:	f001 061f 	and.w	r6, r1, #31
   167bc:	40b2      	lsls	r2, r6
	if (val) {
   167be:	0949      	lsrs	r1, r1, #5
   167c0:	b318      	cbz	r0, 1680a <hci_cmd_done+0x112>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   167c2:	f3bf 8f5b 	dmb	ish
   167c6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   167ca:	e853 1f00 	ldrex	r1, [r3]
   167ce:	4311      	orrs	r1, r2
   167d0:	e843 1000 	strex	r0, r1, [r3]
   167d4:	2800      	cmp	r0, #0
   167d6:	d1f8      	bne.n	167ca <hci_cmd_done+0xd2>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   167d8:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
   167dc:	4620      	mov	r0, r4
   167de:	f001 fcd1 	bl	18184 <net_buf_id>
   167e2:	260c      	movs	r6, #12
   167e4:	fb06 5000 	mla	r0, r6, r0, r5
   167e8:	6883      	ldr	r3, [r0, #8]
   167ea:	2b00      	cmp	r3, #0
   167ec:	d0a5      	beq.n	1673a <hci_cmd_done+0x42>
		cmd(buf)->status = status;
   167ee:	4620      	mov	r0, r4
   167f0:	f001 fcc8 	bl	18184 <net_buf_id>
   167f4:	4370      	muls	r0, r6
   167f6:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   167f8:	4620      	mov	r0, r4
   167fa:	f001 fcc3 	bl	18184 <net_buf_id>
   167fe:	fb06 5500 	mla	r5, r6, r0, r5
   16802:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   16804:	f004 fc34 	bl	1b070 <z_impl_k_sem_give>
}
   16808:	e797      	b.n	1673a <hci_cmd_done+0x42>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1680a:	43d2      	mvns	r2, r2
   1680c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   16810:	f3bf 8f5b 	dmb	ish
   16814:	e853 1f00 	ldrex	r1, [r3]
   16818:	4011      	ands	r1, r2
   1681a:	e843 1000 	strex	r0, r1, [r3]
   1681e:	2800      	cmp	r0, #0
   16820:	d0da      	beq.n	167d8 <hci_cmd_done+0xe0>
   16822:	e7f7      	b.n	16814 <hci_cmd_done+0x11c>
   16824:	00020d88 	.word	0x00020d88
   16828:	00020d98 	.word	0x00020d98
   1682c:	00021b86 	.word	0x00021b86
   16830:	00021bbb 	.word	0x00021bbb
   16834:	20000330 	.word	0x20000330
   16838:	200006d8 	.word	0x200006d8
   1683c:	20001f20 	.word	0x20001f20

00016840 <handle_event>:
{
   16840:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16842:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   16846:	4605      	mov	r5, r0
   16848:	4608      	mov	r0, r1
		if (handler->event != event) {
   1684a:	7811      	ldrb	r1, [r2, #0]
   1684c:	42a9      	cmp	r1, r5
   1684e:	d01a      	beq.n	16886 <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
   16850:	3208      	adds	r2, #8
   16852:	429a      	cmp	r2, r3
   16854:	d1f9      	bne.n	1684a <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   16856:	8986      	ldrh	r6, [r0, #12]
   16858:	4b16      	ldr	r3, [pc, #88]	; (168b4 <handle_event+0x74>)
   1685a:	4c17      	ldr	r4, [pc, #92]	; (168b8 <handle_event+0x78>)
   1685c:	6880      	ldr	r0, [r0, #8]
   1685e:	4631      	mov	r1, r6
   16860:	1ae4      	subs	r4, r4, r3
   16862:	f7ff fe4f 	bl	16504 <bt_hex_real>
   16866:	f7fe f9d1 	bl	14c0c <z_log_strdup>
   1686a:	08e4      	lsrs	r4, r4, #3
   1686c:	01a4      	lsls	r4, r4, #6
   1686e:	f044 0402 	orr.w	r4, r4, #2
   16872:	4603      	mov	r3, r0
   16874:	f8ad 4000 	strh.w	r4, [sp]
   16878:	4810      	ldr	r0, [pc, #64]	; (168bc <handle_event+0x7c>)
   1687a:	4632      	mov	r2, r6
   1687c:	4629      	mov	r1, r5
   1687e:	f008 fc37 	bl	1f0f0 <log_3>
}
   16882:	b002      	add	sp, #8
   16884:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
   16886:	8981      	ldrh	r1, [r0, #12]
   16888:	7853      	ldrb	r3, [r2, #1]
   1688a:	428b      	cmp	r3, r1
   1688c:	d90d      	bls.n	168aa <handle_event+0x6a>
   1688e:	4a09      	ldr	r2, [pc, #36]	; (168b4 <handle_event+0x74>)
   16890:	4b09      	ldr	r3, [pc, #36]	; (168b8 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
   16892:	480b      	ldr	r0, [pc, #44]	; (168c0 <handle_event+0x80>)
   16894:	1a9b      	subs	r3, r3, r2
   16896:	08db      	lsrs	r3, r3, #3
   16898:	019b      	lsls	r3, r3, #6
   1689a:	f043 0301 	orr.w	r3, r3, #1
   1689e:	462a      	mov	r2, r5
}
   168a0:	b002      	add	sp, #8
   168a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   168a6:	f008 bc0a 	b.w	1f0be <log_2>
		handler->handler(buf);
   168aa:	6853      	ldr	r3, [r2, #4]
}
   168ac:	b002      	add	sp, #8
   168ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
   168b2:	4718      	bx	r3
   168b4:	00020d88 	.word	0x00020d88
   168b8:	00020d98 	.word	0x00020d98
   168bc:	00021c10 	.word	0x00021c10
   168c0:	00021bee 	.word	0x00021bee

000168c4 <hci_le_meta_event>:
{
   168c4:	b510      	push	{r4, lr}
   168c6:	2101      	movs	r1, #1
   168c8:	4604      	mov	r4, r0
   168ca:	3008      	adds	r0, #8
   168cc:	f009 f961 	bl	1fb92 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   168d0:	4621      	mov	r1, r4
   168d2:	4a03      	ldr	r2, [pc, #12]	; (168e0 <hci_le_meta_event+0x1c>)
   168d4:	7800      	ldrb	r0, [r0, #0]
}
   168d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   168da:	2301      	movs	r3, #1
   168dc:	f7ff bfb0 	b.w	16840 <handle_event>
   168e0:	00020fe8 	.word	0x00020fe8

000168e4 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   168e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   168e8:	4b29      	ldr	r3, [pc, #164]	; (16990 <hci_rx_thread+0xac>)
   168ea:	4c2a      	ldr	r4, [pc, #168]	; (16994 <hci_rx_thread+0xb0>)

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   168ec:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 169b0 <hci_rx_thread+0xcc>
   168f0:	1ae4      	subs	r4, r4, r3
   168f2:	08e4      	lsrs	r4, r4, #3
#endif /* CONFIG_BT_ISO */
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   168f4:	01a4      	lsls	r4, r4, #6
   168f6:	f044 0401 	orr.w	r4, r4, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   168fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   168fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16902:	4640      	mov	r0, r8
   16904:	f009 f8f7 	bl	1faf6 <net_buf_get>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16908:	7d06      	ldrb	r6, [r0, #20]
		switch (bt_buf_get_type(buf)) {
   1690a:	2e01      	cmp	r6, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   1690c:	4605      	mov	r5, r0
		switch (bt_buf_get_type(buf)) {
   1690e:	d139      	bne.n	16984 <hci_rx_thread+0xa0>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16910:	8983      	ldrh	r3, [r0, #12]
   16912:	2b01      	cmp	r3, #1
   16914:	d80c      	bhi.n	16930 <hci_rx_thread+0x4c>
   16916:	4a20      	ldr	r2, [pc, #128]	; (16998 <hci_rx_thread+0xb4>)
   16918:	4920      	ldr	r1, [pc, #128]	; (1699c <hci_rx_thread+0xb8>)
   1691a:	4821      	ldr	r0, [pc, #132]	; (169a0 <hci_rx_thread+0xbc>)
   1691c:	f640 1317 	movw	r3, #2327	; 0x917
   16920:	f008 f873 	bl	1ea0a <printk>
   16924:	4040      	eors	r0, r0
   16926:	f380 8811 	msr	BASEPRI, r0
   1692a:	f04f 0003 	mov.w	r0, #3
   1692e:	df02      	svc	2
   16930:	2102      	movs	r1, #2
   16932:	f105 0008 	add.w	r0, r5, #8
   16936:	f009 f92c 	bl	1fb92 <net_buf_simple_pull_mem>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1693a:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1693c:	2b05      	cmp	r3, #5
   1693e:	4607      	mov	r7, r0
   16940:	d01e      	beq.n	16980 <hci_rx_thread+0x9c>
   16942:	3b0e      	subs	r3, #14
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   16944:	2b01      	cmp	r3, #1
   16946:	bf88      	it	hi
   16948:	2602      	movhi	r6, #2
   1694a:	07b3      	lsls	r3, r6, #30
   1694c:	d40c      	bmi.n	16968 <hci_rx_thread+0x84>
   1694e:	4a12      	ldr	r2, [pc, #72]	; (16998 <hci_rx_thread+0xb4>)
   16950:	4914      	ldr	r1, [pc, #80]	; (169a4 <hci_rx_thread+0xc0>)
   16952:	4813      	ldr	r0, [pc, #76]	; (169a0 <hci_rx_thread+0xbc>)
   16954:	f640 131b 	movw	r3, #2331	; 0x91b
   16958:	f008 f857 	bl	1ea0a <printk>
   1695c:	4040      	eors	r0, r0
   1695e:	f380 8811 	msr	BASEPRI, r0
   16962:	f04f 0003 	mov.w	r0, #3
   16966:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   16968:	4a0f      	ldr	r2, [pc, #60]	; (169a8 <hci_rx_thread+0xc4>)
   1696a:	7838      	ldrb	r0, [r7, #0]
   1696c:	2303      	movs	r3, #3
   1696e:	4629      	mov	r1, r5
   16970:	f7ff ff66 	bl	16840 <handle_event>
			net_buf_unref(buf);
   16974:	4628      	mov	r0, r5
   16976:	f001 fcbd 	bl	182f4 <net_buf_unref>
	z_impl_k_yield();
   1697a:	f004 ff85 	bl	1b888 <z_impl_k_yield>
	while (1) {
   1697e:	e7bc      	b.n	168fa <hci_rx_thread+0x16>
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   16980:	2603      	movs	r6, #3
   16982:	e7e2      	b.n	1694a <hci_rx_thread+0x66>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   16984:	4809      	ldr	r0, [pc, #36]	; (169ac <hci_rx_thread+0xc8>)
   16986:	4622      	mov	r2, r4
   16988:	4631      	mov	r1, r6
   1698a:	f008 fb84 	bl	1f096 <log_1>
   1698e:	e7f1      	b.n	16974 <hci_rx_thread+0x90>
   16990:	00020d88 	.word	0x00020d88
   16994:	00020d98 	.word	0x00020d98
   16998:	00021c32 	.word	0x00021c32
   1699c:	00021c66 	.word	0x00021c66
   169a0:	00021c7f 	.word	0x00021c7f
   169a4:	00021c9c 	.word	0x00021c9c
   169a8:	00021010 	.word	0x00021010
   169ac:	00021cca 	.word	0x00021cca
   169b0:	2000042c 	.word	0x2000042c

000169b4 <hci_cmd_status>:
{
   169b4:	b538      	push	{r3, r4, r5, lr}
   169b6:	2104      	movs	r1, #4
   169b8:	4604      	mov	r4, r0
   169ba:	3008      	adds	r0, #8
   169bc:	f009 f8e9 	bl	1fb92 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   169c0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   169c2:	7801      	ldrb	r1, [r0, #0]
   169c4:	8840      	ldrh	r0, [r0, #2]
   169c6:	4622      	mov	r2, r4
   169c8:	f7ff fe96 	bl	166f8 <hci_cmd_done>
	if (ncmd) {
   169cc:	b125      	cbz	r5, 169d8 <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   169ce:	4803      	ldr	r0, [pc, #12]	; (169dc <hci_cmd_status+0x28>)
}
   169d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   169d4:	f004 bb4c 	b.w	1b070 <z_impl_k_sem_give>
   169d8:	bd38      	pop	{r3, r4, r5, pc}
   169da:	bf00      	nop
   169dc:	20000410 	.word	0x20000410

000169e0 <hci_cmd_complete>:
{
   169e0:	b538      	push	{r3, r4, r5, lr}
   169e2:	2103      	movs	r1, #3
   169e4:	4604      	mov	r4, r0
   169e6:	3008      	adds	r0, #8
   169e8:	f009 f8d3 	bl	1fb92 <net_buf_simple_pull_mem>
	status = buf->data[0];
   169ec:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   169ee:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   169f0:	7819      	ldrb	r1, [r3, #0]
   169f2:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   169f6:	4622      	mov	r2, r4
   169f8:	f7ff fe7e 	bl	166f8 <hci_cmd_done>
	if (ncmd) {
   169fc:	b125      	cbz	r5, 16a08 <hci_cmd_complete+0x28>
   169fe:	4803      	ldr	r0, [pc, #12]	; (16a0c <hci_cmd_complete+0x2c>)
}
   16a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16a04:	f004 bb34 	b.w	1b070 <z_impl_k_sem_give>
   16a08:	bd38      	pop	{r3, r4, r5, pc}
   16a0a:	bf00      	nop
   16a0c:	20000410 	.word	0x20000410

00016a10 <bt_hci_cmd_state_set_init>:
{
   16a10:	b510      	push	{r4, lr}
	state->bit = bit;
   16a12:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   16a16:	f89d 3008 	ldrb.w	r3, [sp, #8]
   16a1a:	720b      	strb	r3, [r1, #8]
{
   16a1c:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   16a1e:	f001 fbb1 	bl	18184 <net_buf_id>
   16a22:	4b03      	ldr	r3, [pc, #12]	; (16a30 <bt_hci_cmd_state_set_init+0x20>)
   16a24:	220c      	movs	r2, #12
   16a26:	fb02 3000 	mla	r0, r2, r0, r3
   16a2a:	6044      	str	r4, [r0, #4]
}
   16a2c:	bd10      	pop	{r4, pc}
   16a2e:	bf00      	nop
   16a30:	20001f20 	.word	0x20001f20

00016a34 <bt_hci_cmd_create>:
{
   16a34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   16a38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16a40:	4605      	mov	r5, r0
   16a42:	4816      	ldr	r0, [pc, #88]	; (16a9c <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
   16a44:	f8df 8058 	ldr.w	r8, [pc, #88]	; 16aa0 <bt_hci_cmd_create+0x6c>
{
   16a48:	460e      	mov	r6, r1
   16a4a:	f009 f84f 	bl	1faec <net_buf_alloc_fixed>
   16a4e:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   16a50:	f100 0b08 	add.w	fp, r0, #8
   16a54:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16a56:	2700      	movs	r7, #0
   16a58:	4658      	mov	r0, fp
   16a5a:	f009 f866 	bl	1fb2a <net_buf_simple_reserve>
   16a5e:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   16a60:	4620      	mov	r0, r4
   16a62:	f001 fb8f 	bl	18184 <net_buf_id>
   16a66:	f04f 0a0c 	mov.w	sl, #12
   16a6a:	fb0a 8000 	mla	r0, sl, r0, r8
   16a6e:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   16a70:	4620      	mov	r0, r4
   16a72:	f001 fb87 	bl	18184 <net_buf_id>
   16a76:	fb0a 8000 	mla	r0, sl, r0, r8
   16a7a:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   16a7c:	4620      	mov	r0, r4
   16a7e:	f001 fb81 	bl	18184 <net_buf_id>
   16a82:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   16a86:	2103      	movs	r1, #3
   16a88:	6047      	str	r7, [r0, #4]
   16a8a:	4658      	mov	r0, fp
   16a8c:	f009 f862 	bl	1fb54 <net_buf_simple_add>
	hdr->param_len = param_len;
   16a90:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   16a92:	8005      	strh	r5, [r0, #0]
}
   16a94:	4620      	mov	r0, r4
   16a96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a9a:	bf00      	nop
   16a9c:	200006d8 	.word	0x200006d8
   16aa0:	20001f20 	.word	0x20001f20

00016aa4 <bt_hci_cmd_send_sync>:
{
   16aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16aa8:	4607      	mov	r7, r0
   16aaa:	b086      	sub	sp, #24
   16aac:	4615      	mov	r5, r2
	if (!buf) {
   16aae:	460c      	mov	r4, r1
   16ab0:	b921      	cbnz	r1, 16abc <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   16ab2:	f7ff ffbf 	bl	16a34 <bt_hci_cmd_create>
		if (!buf) {
   16ab6:	4604      	mov	r4, r0
   16ab8:	2800      	cmp	r0, #0
   16aba:	d055      	beq.n	16b68 <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
   16abc:	2201      	movs	r2, #1
   16abe:	2100      	movs	r1, #0
   16ac0:	4668      	mov	r0, sp
   16ac2:	f009 fc46 	bl	20352 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   16ac6:	4620      	mov	r0, r4
   16ac8:	f001 fb5c 	bl	18184 <net_buf_id>
   16acc:	4e28      	ldr	r6, [pc, #160]	; (16b70 <bt_hci_cmd_send_sync+0xcc>)
   16ace:	230c      	movs	r3, #12
   16ad0:	fb03 6000 	mla	r0, r3, r0, r6
   16ad4:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   16ad8:	4620      	mov	r0, r4
   16ada:	f009 f837 	bl	1fb4c <net_buf_ref>
   16ade:	4601      	mov	r1, r0
   16ae0:	4824      	ldr	r0, [pc, #144]	; (16b74 <bt_hci_cmd_send_sync+0xd0>)
   16ae2:	f009 f826 	bl	1fb32 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   16ae6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   16aea:	2300      	movs	r3, #0
   16aec:	4668      	mov	r0, sp
   16aee:	f004 fae5 	bl	1b0bc <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   16af2:	4680      	mov	r8, r0
   16af4:	b180      	cbz	r0, 16b18 <bt_hci_cmd_send_sync+0x74>
   16af6:	4a20      	ldr	r2, [pc, #128]	; (16b78 <bt_hci_cmd_send_sync+0xd4>)
   16af8:	4920      	ldr	r1, [pc, #128]	; (16b7c <bt_hci_cmd_send_sync+0xd8>)
   16afa:	4821      	ldr	r0, [pc, #132]	; (16b80 <bt_hci_cmd_send_sync+0xdc>)
   16afc:	f240 1331 	movw	r3, #305	; 0x131
   16b00:	f007 ff83 	bl	1ea0a <printk>
   16b04:	481f      	ldr	r0, [pc, #124]	; (16b84 <bt_hci_cmd_send_sync+0xe0>)
   16b06:	4641      	mov	r1, r8
   16b08:	f007 ff7f 	bl	1ea0a <printk>
   16b0c:	4040      	eors	r0, r0
   16b0e:	f380 8811 	msr	BASEPRI, r0
   16b12:	f04f 0003 	mov.w	r0, #3
   16b16:	df02      	svc	2
	status = cmd(buf)->status;
   16b18:	4620      	mov	r0, r4
   16b1a:	f001 fb33 	bl	18184 <net_buf_id>
   16b1e:	230c      	movs	r3, #12
   16b20:	4343      	muls	r3, r0
   16b22:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   16b24:	b1be      	cbz	r6, 16b56 <bt_hci_cmd_send_sync+0xb2>
   16b26:	4a18      	ldr	r2, [pc, #96]	; (16b88 <bt_hci_cmd_send_sync+0xe4>)
   16b28:	4b18      	ldr	r3, [pc, #96]	; (16b8c <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   16b2a:	4819      	ldr	r0, [pc, #100]	; (16b90 <bt_hci_cmd_send_sync+0xec>)
   16b2c:	1a9b      	subs	r3, r3, r2
   16b2e:	08db      	lsrs	r3, r3, #3
   16b30:	019b      	lsls	r3, r3, #6
   16b32:	f043 0302 	orr.w	r3, r3, #2
   16b36:	4632      	mov	r2, r6
   16b38:	4639      	mov	r1, r7
   16b3a:	f008 fac0 	bl	1f0be <log_2>
		net_buf_unref(buf);
   16b3e:	4620      	mov	r0, r4
   16b40:	f001 fbd8 	bl	182f4 <net_buf_unref>
			return -EIO;
   16b44:	2e09      	cmp	r6, #9
   16b46:	bf0c      	ite	eq
   16b48:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   16b4c:	f06f 0004 	mvnne.w	r0, #4
}
   16b50:	b006      	add	sp, #24
   16b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   16b56:	b115      	cbz	r5, 16b5e <bt_hci_cmd_send_sync+0xba>
		*rsp = buf;
   16b58:	602c      	str	r4, [r5, #0]
	return 0;
   16b5a:	4630      	mov	r0, r6
   16b5c:	e7f8      	b.n	16b50 <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
   16b5e:	4620      	mov	r0, r4
   16b60:	f001 fbc8 	bl	182f4 <net_buf_unref>
	return 0;
   16b64:	4628      	mov	r0, r5
   16b66:	e7f3      	b.n	16b50 <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
   16b68:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16b6c:	e7f0      	b.n	16b50 <bt_hci_cmd_send_sync+0xac>
   16b6e:	bf00      	nop
   16b70:	20001f20 	.word	0x20001f20
   16b74:	20000444 	.word	0x20000444
   16b78:	00021c32 	.word	0x00021c32
   16b7c:	00021cde 	.word	0x00021cde
   16b80:	00021c7f 	.word	0x00021c7f
   16b84:	00021ce7 	.word	0x00021ce7
   16b88:	00020d88 	.word	0x00020d88
   16b8c:	00020d98 	.word	0x00020d98
   16b90:	00021d07 	.word	0x00021d07

00016b94 <hci_init>:
{
   16b94:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   16b96:	4db6      	ldr	r5, [pc, #728]	; (16e70 <hci_init+0x2dc>)
   16b98:	f8d5 312c 	ldr.w	r3, [r5, #300]	; 0x12c
   16b9c:	6899      	ldr	r1, [r3, #8]
   16b9e:	f011 0101 	ands.w	r1, r1, #1
{
   16ba2:	b087      	sub	sp, #28
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   16ba4:	d123      	bne.n	16bee <hci_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   16ba6:	aa01      	add	r2, sp, #4
   16ba8:	f640 4003 	movw	r0, #3075	; 0xc03
   16bac:	f7ff ff7a 	bl	16aa4 <bt_hci_cmd_send_sync>
		if (err) {
   16bb0:	4604      	mov	r4, r0
   16bb2:	2800      	cmp	r0, #0
   16bb4:	d175      	bne.n	16ca2 <hci_init+0x10e>
	uint8_t status = buf->data[0];
   16bb6:	9b01      	ldr	r3, [sp, #4]
   16bb8:	689b      	ldr	r3, [r3, #8]
	if (status) {
   16bba:	781b      	ldrb	r3, [r3, #0]
   16bbc:	b9a3      	cbnz	r3, 16be8 <hci_init+0x54>
		bt_scan_reset();
   16bbe:	f001 f927 	bl	17e10 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16bc2:	f3bf 8f5b 	dmb	ish
   16bc6:	462b      	mov	r3, r5
   16bc8:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   16bcc:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   16bd0:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16bd4:	f3bf 8f5b 	dmb	ish
   16bd8:	e853 1f00 	ldrex	r1, [r3]
   16bdc:	e843 2000 	strex	r0, r2, [r3]
   16be0:	2800      	cmp	r0, #0
   16be2:	d1f9      	bne.n	16bd8 <hci_init+0x44>
   16be4:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   16be8:	9801      	ldr	r0, [sp, #4]
   16bea:	f001 fb83 	bl	182f4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   16bee:	aa01      	add	r2, sp, #4
   16bf0:	2100      	movs	r1, #0
   16bf2:	f241 0003 	movw	r0, #4099	; 0x1003
   16bf6:	f7ff ff55 	bl	16aa4 <bt_hci_cmd_send_sync>
	if (err) {
   16bfa:	4604      	mov	r4, r0
   16bfc:	2800      	cmp	r0, #0
   16bfe:	d150      	bne.n	16ca2 <hci_init+0x10e>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   16c00:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   16c02:	489c      	ldr	r0, [pc, #624]	; (16e74 <hci_init+0x2e0>)
   16c04:	6899      	ldr	r1, [r3, #8]
   16c06:	2208      	movs	r2, #8
   16c08:	3101      	adds	r1, #1
   16c0a:	f008 fdf7 	bl	1f7fc <memcpy>
	net_buf_unref(rsp);
   16c0e:	9801      	ldr	r0, [sp, #4]
   16c10:	f001 fb70 	bl	182f4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   16c14:	4621      	mov	r1, r4
   16c16:	aa01      	add	r2, sp, #4
   16c18:	f241 0001 	movw	r0, #4097	; 0x1001
   16c1c:	f7ff ff42 	bl	16aa4 <bt_hci_cmd_send_sync>
	if (err) {
   16c20:	4604      	mov	r4, r0
   16c22:	2800      	cmp	r0, #0
   16c24:	d13d      	bne.n	16ca2 <hci_init+0x10e>
	read_local_ver_complete(rsp);
   16c26:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   16c28:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   16c2a:	785a      	ldrb	r2, [r3, #1]
   16c2c:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   16c30:	78d9      	ldrb	r1, [r3, #3]
   16c32:	789a      	ldrb	r2, [r3, #2]
   16c34:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16c38:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   16c3c:	791a      	ldrb	r2, [r3, #4]
   16c3e:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   16c42:	7a19      	ldrb	r1, [r3, #8]
   16c44:	79da      	ldrb	r2, [r3, #7]
   16c46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16c4a:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   16c4e:	795a      	ldrb	r2, [r3, #5]
   16c50:	799b      	ldrb	r3, [r3, #6]
   16c52:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   16c56:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   16c5a:	f001 fb4b 	bl	182f4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   16c5e:	4621      	mov	r1, r4
   16c60:	aa01      	add	r2, sp, #4
   16c62:	f241 0002 	movw	r0, #4098	; 0x1002
   16c66:	f7ff ff1d 	bl	16aa4 <bt_hci_cmd_send_sync>
	if (err) {
   16c6a:	4604      	mov	r4, r0
   16c6c:	b9c8      	cbnz	r0, 16ca2 <hci_init+0x10e>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   16c6e:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   16c70:	4881      	ldr	r0, [pc, #516]	; (16e78 <hci_init+0x2e4>)
   16c72:	6899      	ldr	r1, [r3, #8]
   16c74:	2240      	movs	r2, #64	; 0x40
   16c76:	3101      	adds	r1, #1
   16c78:	f008 fdc0 	bl	1f7fc <memcpy>
	net_buf_unref(rsp);
   16c7c:	9801      	ldr	r0, [sp, #4]
   16c7e:	f001 fb39 	bl	182f4 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   16c82:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   16c86:	0658      	lsls	r0, r3, #25
   16c88:	d40e      	bmi.n	16ca8 <hci_init+0x114>
   16c8a:	4b7c      	ldr	r3, [pc, #496]	; (16e7c <hci_init+0x2e8>)
   16c8c:	497c      	ldr	r1, [pc, #496]	; (16e80 <hci_init+0x2ec>)
		BT_ERR("Non-LE capable controller detected!");
   16c8e:	487d      	ldr	r0, [pc, #500]	; (16e84 <hci_init+0x2f0>)
   16c90:	1ac9      	subs	r1, r1, r3
   16c92:	08c9      	lsrs	r1, r1, #3
   16c94:	0189      	lsls	r1, r1, #6
   16c96:	f041 0101 	orr.w	r1, r1, #1
   16c9a:	f008 f9ef 	bl	1f07c <log_0>
		return -ENODEV;
   16c9e:	f06f 0412 	mvn.w	r4, #18
}
   16ca2:	4620      	mov	r0, r4
   16ca4:	b007      	add	sp, #28
   16ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   16ca8:	4621      	mov	r1, r4
   16caa:	aa01      	add	r2, sp, #4
   16cac:	f242 0003 	movw	r0, #8195	; 0x2003
   16cb0:	f7ff fef8 	bl	16aa4 <bt_hci_cmd_send_sync>
	if (err) {
   16cb4:	4604      	mov	r4, r0
   16cb6:	2800      	cmp	r0, #0
   16cb8:	d1f3      	bne.n	16ca2 <hci_init+0x10e>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   16cba:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   16cbc:	4872      	ldr	r0, [pc, #456]	; (16e88 <hci_init+0x2f4>)
   16cbe:	6899      	ldr	r1, [r3, #8]
   16cc0:	2208      	movs	r2, #8
   16cc2:	3101      	adds	r1, #1
   16cc4:	f008 fd9a 	bl	1f7fc <memcpy>
	net_buf_unref(rsp);
   16cc8:	9801      	ldr	r0, [sp, #4]
   16cca:	f001 fb13 	bl	182f4 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   16cce:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   16cd2:	0699      	lsls	r1, r3, #26
   16cd4:	d554      	bpl.n	16d80 <hci_init+0x1ec>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   16cd6:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   16cda:	071a      	lsls	r2, r3, #28
   16cdc:	d46b      	bmi.n	16db6 <hci_init+0x222>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   16cde:	2108      	movs	r1, #8
   16ce0:	f242 0001 	movw	r0, #8193	; 0x2001
   16ce4:	f7ff fea6 	bl	16a34 <bt_hci_cmd_create>
	if (!buf) {
   16ce8:	4604      	mov	r4, r0
   16cea:	2800      	cmp	r0, #0
   16cec:	d04f      	beq.n	16d8e <hci_init+0x1fa>
   16cee:	2108      	movs	r1, #8
   16cf0:	4408      	add	r0, r1
   16cf2:	f008 ff2f 	bl	1fb54 <net_buf_simple_add>
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   16cf6:	2702      	movs	r7, #2
	dst[1] = val >> 8;
   16cf8:	2200      	movs	r2, #0
	dst[0] = val;
   16cfa:	7007      	strb	r7, [r0, #0]
	dst[1] = val >> 8;
   16cfc:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
   16cfe:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   16d00:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   16d02:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   16d04:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   16d06:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   16d08:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   16d0a:	4621      	mov	r1, r4
   16d0c:	f242 0001 	movw	r0, #8193	; 0x2001
   16d10:	f7ff fec8 	bl	16aa4 <bt_hci_cmd_send_sync>
	if (err) {
   16d14:	4604      	mov	r4, r0
   16d16:	2800      	cmp	r0, #0
   16d18:	d1c3      	bne.n	16ca2 <hci_init+0x10e>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   16d1a:	2108      	movs	r1, #8
   16d1c:	f640 4001 	movw	r0, #3073	; 0xc01
   16d20:	f7ff fe88 	bl	16a34 <bt_hci_cmd_create>
	if (!buf) {
   16d24:	4606      	mov	r6, r0
   16d26:	b390      	cbz	r0, 16d8e <hci_init+0x1fa>
   16d28:	2108      	movs	r1, #8
   16d2a:	4408      	add	r0, r1
   16d2c:	f008 ff12 	bl	1fb54 <net_buf_simple_add>
   16d30:	2380      	movs	r3, #128	; 0x80
   16d32:	7043      	strb	r3, [r0, #1]
   16d34:	2320      	movs	r3, #32
	dst[0] = val;
   16d36:	7004      	strb	r4, [r0, #0]
   16d38:	7084      	strb	r4, [r0, #2]
   16d3a:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
   16d3c:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
   16d3e:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
   16d40:	70c7      	strb	r7, [r0, #3]
   16d42:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   16d44:	4622      	mov	r2, r4
   16d46:	4631      	mov	r1, r6
   16d48:	f640 4001 	movw	r0, #3073	; 0xc01
   16d4c:	f7ff feaa 	bl	16aa4 <bt_hci_cmd_send_sync>
	if (err) {
   16d50:	4604      	mov	r4, r0
   16d52:	2800      	cmp	r0, #0
   16d54:	d1a5      	bne.n	16ca2 <hci_init+0x10e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   16d56:	4601      	mov	r1, r0
   16d58:	466a      	mov	r2, sp
   16d5a:	f64f 4001 	movw	r0, #64513	; 0xfc01
   16d5e:	f7ff fea1 	bl	16aa4 <bt_hci_cmd_send_sync>
	if (err) {
   16d62:	4c47      	ldr	r4, [pc, #284]	; (16e80 <hci_init+0x2ec>)
   16d64:	4b45      	ldr	r3, [pc, #276]	; (16e7c <hci_init+0x2e8>)
   16d66:	1ae4      	subs	r4, r4, r3
   16d68:	08e4      	lsrs	r4, r4, #3
   16d6a:	01a4      	lsls	r4, r4, #6
   16d6c:	b3b8      	cbz	r0, 16dde <hci_init+0x24a>
		BT_WARN("Vendor HCI extensions not available");
   16d6e:	4847      	ldr	r0, [pc, #284]	; (16e8c <hci_init+0x2f8>)
   16d70:	ea44 0107 	orr.w	r1, r4, r7
			BT_WARN("Failed to read supported vendor features");
   16d74:	f008 f982 	bl	1f07c <log_0>
	err = bt_id_init();
   16d78:	f000 fd9c 	bl	178b4 <bt_id_init>
   16d7c:	4604      	mov	r4, r0
	if (err) {
   16d7e:	e790      	b.n	16ca2 <hci_init+0x10e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   16d80:	2102      	movs	r1, #2
   16d82:	f640 406d 	movw	r0, #3181	; 0xc6d
   16d86:	f7ff fe55 	bl	16a34 <bt_hci_cmd_create>
		if (!buf) {
   16d8a:	4606      	mov	r6, r0
   16d8c:	b910      	cbnz	r0, 16d94 <hci_init+0x200>
		return -ENOBUFS;
   16d8e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   16d92:	e786      	b.n	16ca2 <hci_init+0x10e>
   16d94:	2102      	movs	r1, #2
   16d96:	3008      	adds	r0, #8
   16d98:	f008 fedc 	bl	1fb54 <net_buf_simple_add>
		cp_le->le = 0x01;
   16d9c:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
   16d9e:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
   16da0:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   16da2:	4622      	mov	r2, r4
   16da4:	4631      	mov	r1, r6
   16da6:	f640 406d 	movw	r0, #3181	; 0xc6d
   16daa:	f7ff fe7b 	bl	16aa4 <bt_hci_cmd_send_sync>
		if (err) {
   16dae:	4604      	mov	r4, r0
   16db0:	2800      	cmp	r0, #0
   16db2:	d090      	beq.n	16cd6 <hci_init+0x142>
   16db4:	e775      	b.n	16ca2 <hci_init+0x10e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   16db6:	aa01      	add	r2, sp, #4
   16db8:	2100      	movs	r1, #0
   16dba:	f242 001c 	movw	r0, #8220	; 0x201c
   16dbe:	f7ff fe71 	bl	16aa4 <bt_hci_cmd_send_sync>
		if (err) {
   16dc2:	4604      	mov	r4, r0
   16dc4:	2800      	cmp	r0, #0
   16dc6:	f47f af6c 	bne.w	16ca2 <hci_init+0x10e>
		le_read_supp_states_complete(rsp);
   16dca:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   16dcc:	6883      	ldr	r3, [r0, #8]
   16dce:	f853 2f01 	ldr.w	r2, [r3, #1]!
   16dd2:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   16dd4:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   16dd8:	f001 fa8c 	bl	182f4 <net_buf_unref>
   16ddc:	e77f      	b.n	16cde <hci_init+0x14a>
	rp.info = (void *)rsp->data;
   16dde:	9b00      	ldr	r3, [sp, #0]
	BT_INFO("HW Platform: %s (0x%04x)",
   16de0:	482b      	ldr	r0, [pc, #172]	; (16e90 <hci_init+0x2fc>)
	rp.info = (void *)rsp->data;
   16de2:	689e      	ldr	r6, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
   16de4:	f8b6 2001 	ldrh.w	r2, [r6, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   16de8:	2a03      	cmp	r2, #3
		return plat_str[platform];
   16dea:	bf96      	itet	ls
   16dec:	4929      	ldrls	r1, [pc, #164]	; (16e94 <hci_init+0x300>)
	return "unknown";
   16dee:	492a      	ldrhi	r1, [pc, #168]	; (16e98 <hci_init+0x304>)
		return plat_str[platform];
   16df0:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
   16df4:	f044 0303 	orr.w	r3, r4, #3
   16df8:	f008 f961 	bl	1f0be <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   16dfc:	f8b6 1001 	ldrh.w	r1, [r6, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
   16e00:	f8b6 2003 	ldrh.w	r2, [r6, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   16e04:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
   16e06:	f044 0303 	orr.w	r3, r4, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   16e0a:	d12e      	bne.n	16e6a <hci_init+0x2d6>
	if (variant < ARRAY_SIZE(nordic_str)) {
   16e0c:	2a03      	cmp	r2, #3
   16e0e:	d82c      	bhi.n	16e6a <hci_init+0x2d6>
		return nordic_str[variant];
   16e10:	4922      	ldr	r1, [pc, #136]	; (16e9c <hci_init+0x308>)
   16e12:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
   16e16:	4822      	ldr	r0, [pc, #136]	; (16ea0 <hci_init+0x30c>)
   16e18:	f008 f951 	bl	1f0be <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   16e1c:	7972      	ldrb	r2, [r6, #5]
   16e1e:	4821      	ldr	r0, [pc, #132]	; (16ea4 <hci_init+0x310>)
	if (variant < ARRAY_SIZE(var_str)) {
   16e20:	2a03      	cmp	r2, #3
		return var_str[variant];
   16e22:	bf96      	itet	ls
   16e24:	4920      	ldrls	r1, [pc, #128]	; (16ea8 <hci_init+0x314>)
	return "unknown";
   16e26:	491c      	ldrhi	r1, [pc, #112]	; (16e98 <hci_init+0x304>)
		return var_str[variant];
   16e28:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   16e2c:	e9cd 1201 	strd	r1, r2, [sp, #4]
   16e30:	79b2      	ldrb	r2, [r6, #6]
   16e32:	9203      	str	r2, [sp, #12]
   16e34:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   16e38:	9204      	str	r2, [sp, #16]
   16e3a:	f8d6 2009 	ldr.w	r2, [r6, #9]
   16e3e:	9205      	str	r2, [sp, #20]
   16e40:	f044 0303 	orr.w	r3, r4, #3
   16e44:	2205      	movs	r2, #5
   16e46:	a901      	add	r1, sp, #4
   16e48:	f008 f96e 	bl	1f128 <log_n>
	net_buf_unref(rsp);
   16e4c:	9800      	ldr	r0, [sp, #0]
   16e4e:	f001 fa51 	bl	182f4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   16e52:	466a      	mov	r2, sp
   16e54:	2100      	movs	r1, #0
   16e56:	f64f 4002 	movw	r0, #64514	; 0xfc02
   16e5a:	f7ff fe23 	bl	16aa4 <bt_hci_cmd_send_sync>
	if (err) {
   16e5e:	4606      	mov	r6, r0
   16e60:	b330      	cbz	r0, 16eb0 <hci_init+0x31c>
		BT_WARN("Failed to read supported vendor commands");
   16e62:	4812      	ldr	r0, [pc, #72]	; (16eac <hci_init+0x318>)
   16e64:	f044 0102 	orr.w	r1, r4, #2
   16e68:	e784      	b.n	16d74 <hci_init+0x1e0>
		return "unknown";
   16e6a:	490b      	ldr	r1, [pc, #44]	; (16e98 <hci_init+0x304>)
   16e6c:	e7d3      	b.n	16e16 <hci_init+0x282>
   16e6e:	bf00      	nop
   16e70:	20000330 	.word	0x20000330
   16e74:	200003a0 	.word	0x200003a0
   16e78:	200003a8 	.word	0x200003a8
   16e7c:	00020d88 	.word	0x00020d88
   16e80:	00020d98 	.word	0x00020d98
   16e84:	00021d23 	.word	0x00021d23
   16e88:	20000400 	.word	0x20000400
   16e8c:	00021d47 	.word	0x00021d47
   16e90:	00021d6b 	.word	0x00021d6b
   16e94:	00021028 	.word	0x00021028
   16e98:	00021b38 	.word	0x00021b38
   16e9c:	00021000 	.word	0x00021000
   16ea0:	00021d84 	.word	0x00021d84
   16ea4:	00021d9c 	.word	0x00021d9c
   16ea8:	00021048 	.word	0x00021048
   16eac:	00021dc9 	.word	0x00021dc9
	rp.cmds = (void *)rsp->data;
   16eb0:	9b00      	ldr	r3, [sp, #0]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   16eb2:	4812      	ldr	r0, [pc, #72]	; (16efc <hci_init+0x368>)
   16eb4:	6899      	ldr	r1, [r3, #8]
   16eb6:	2202      	movs	r2, #2
   16eb8:	3101      	adds	r1, #1
   16eba:	f008 fc9f 	bl	1f7fc <memcpy>
	net_buf_unref(rsp);
   16ebe:	9800      	ldr	r0, [sp, #0]
   16ec0:	f001 fa18 	bl	182f4 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   16ec4:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   16ec8:	075b      	lsls	r3, r3, #29
   16eca:	f57f af55 	bpl.w	16d78 <hci_init+0x1e4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   16ece:	466a      	mov	r2, sp
   16ed0:	4631      	mov	r1, r6
   16ed2:	f64f 4003 	movw	r0, #64515	; 0xfc03
   16ed6:	f7ff fde5 	bl	16aa4 <bt_hci_cmd_send_sync>
		if (err) {
   16eda:	b118      	cbz	r0, 16ee4 <hci_init+0x350>
			BT_WARN("Failed to read supported vendor features");
   16edc:	4808      	ldr	r0, [pc, #32]	; (16f00 <hci_init+0x36c>)
   16ede:	f044 0102 	orr.w	r1, r4, #2
   16ee2:	e747      	b.n	16d74 <hci_init+0x1e0>
		rp.feat = (void *)rsp->data;
   16ee4:	9b00      	ldr	r3, [sp, #0]
		memcpy(bt_dev.vs_features, rp.feat->features,
   16ee6:	4807      	ldr	r0, [pc, #28]	; (16f04 <hci_init+0x370>)
   16ee8:	6899      	ldr	r1, [r3, #8]
   16eea:	2201      	movs	r2, #1
   16eec:	4411      	add	r1, r2
   16eee:	f008 fc85 	bl	1f7fc <memcpy>
		net_buf_unref(rsp);
   16ef2:	9800      	ldr	r0, [sp, #0]
   16ef4:	f001 f9fe 	bl	182f4 <net_buf_unref>
   16ef8:	e73e      	b.n	16d78 <hci_init+0x1e4>
   16efa:	bf00      	nop
   16efc:	200003e9 	.word	0x200003e9
   16f00:	00021df2 	.word	0x00021df2
   16f04:	200003e8 	.word	0x200003e8

00016f08 <bt_send>:
	return bt_dev.drv->send(buf);
   16f08:	4b02      	ldr	r3, [pc, #8]	; (16f14 <bt_send+0xc>)
   16f0a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
   16f0e:	691b      	ldr	r3, [r3, #16]
   16f10:	4718      	bx	r3
   16f12:	bf00      	nop
   16f14:	20000330 	.word	0x20000330

00016f18 <hci_tx_thread>:
{
   16f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16f1c:	4b46      	ldr	r3, [pc, #280]	; (17038 <hci_tx_thread+0x120>)
   16f1e:	4d47      	ldr	r5, [pc, #284]	; (1703c <hci_tx_thread+0x124>)
   16f20:	4e47      	ldr	r6, [pc, #284]	; (17040 <hci_tx_thread+0x128>)
		events[0].state = K_POLL_STATE_NOT_READY;
   16f22:	4f48      	ldr	r7, [pc, #288]	; (17044 <hci_tx_thread+0x12c>)
   16f24:	1aed      	subs	r5, r5, r3
   16f26:	08ed      	lsrs	r5, r5, #3
   16f28:	f106 08e0 	add.w	r8, r6, #224	; 0xe0
   16f2c:	68fb      	ldr	r3, [r7, #12]
   16f2e:	f36f 3352 	bfc	r3, #13, #6
   16f32:	60fb      	str	r3, [r7, #12]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   16f34:	4843      	ldr	r0, [pc, #268]	; (17044 <hci_tx_thread+0x12c>)
   16f36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16f3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16f3e:	2101      	movs	r1, #1
   16f40:	f004 ffe0 	bl	1bf04 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   16f44:	b160      	cbz	r0, 16f60 <hci_tx_thread+0x48>
   16f46:	4a40      	ldr	r2, [pc, #256]	; (17048 <hci_tx_thread+0x130>)
   16f48:	4940      	ldr	r1, [pc, #256]	; (1704c <hci_tx_thread+0x134>)
   16f4a:	4841      	ldr	r0, [pc, #260]	; (17050 <hci_tx_thread+0x138>)
   16f4c:	f640 1393 	movw	r3, #2451	; 0x993
   16f50:	f007 fd5b 	bl	1ea0a <printk>
   16f54:	4040      	eors	r0, r0
   16f56:	f380 8811 	msr	BASEPRI, r0
   16f5a:	f04f 0003 	mov.w	r0, #3
   16f5e:	df02      	svc	2
		switch (ev->state) {
   16f60:	68f9      	ldr	r1, [r7, #12]
   16f62:	f3c1 3145 	ubfx	r1, r1, #13, #6
   16f66:	2901      	cmp	r1, #1
   16f68:	d907      	bls.n	16f7a <hci_tx_thread+0x62>
   16f6a:	2904      	cmp	r1, #4
   16f6c:	d008      	beq.n	16f80 <hci_tx_thread+0x68>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   16f6e:	01aa      	lsls	r2, r5, #6
   16f70:	4838      	ldr	r0, [pc, #224]	; (17054 <hci_tx_thread+0x13c>)
   16f72:	f042 0202 	orr.w	r2, r2, #2
   16f76:	f008 f88e 	bl	1f096 <log_1>
	z_impl_k_yield();
   16f7a:	f004 fc85 	bl	1b888 <z_impl_k_yield>
	while (1) {
   16f7e:	e7d5      	b.n	16f2c <hci_tx_thread+0x14>
			if (ev->tag == BT_EVENT_CMD_TX) {
   16f80:	7b3b      	ldrb	r3, [r7, #12]
   16f82:	2b00      	cmp	r3, #0
   16f84:	d1f9      	bne.n	16f7a <hci_tx_thread+0x62>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   16f86:	4834      	ldr	r0, [pc, #208]	; (17058 <hci_tx_thread+0x140>)
   16f88:	2200      	movs	r2, #0
   16f8a:	2300      	movs	r3, #0
   16f8c:	f008 fdb3 	bl	1faf6 <net_buf_get>
	BT_ASSERT(buf);
   16f90:	4604      	mov	r4, r0
   16f92:	2800      	cmp	r0, #0
   16f94:	d042      	beq.n	1701c <hci_tx_thread+0x104>
	return z_impl_k_sem_take(sem, timeout);
   16f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16f9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16f9e:	4640      	mov	r0, r8
   16fa0:	f004 f88c 	bl	1b0bc <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   16fa4:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   16fa8:	bb53      	cbnz	r3, 17000 <hci_tx_thread+0xe8>
	bt_dev.sent_cmd = net_buf_ref(buf);
   16faa:	4620      	mov	r0, r4
   16fac:	f008 fdce 	bl	1fb4c <net_buf_ref>
   16fb0:	f8c6 00f8 	str.w	r0, [r6, #248]	; 0xf8
	err = bt_send(buf);
   16fb4:	4620      	mov	r0, r4
   16fb6:	f7ff ffa7 	bl	16f08 <bt_send>
	if (err) {
   16fba:	4601      	mov	r1, r0
   16fbc:	2800      	cmp	r0, #0
   16fbe:	d0dc      	beq.n	16f7a <hci_tx_thread+0x62>
		BT_ERR("Unable to send to driver (err %d)", err);
   16fc0:	01aa      	lsls	r2, r5, #6
   16fc2:	4826      	ldr	r0, [pc, #152]	; (1705c <hci_tx_thread+0x144>)
   16fc4:	f042 0201 	orr.w	r2, r2, #1
   16fc8:	f008 f865 	bl	1f096 <log_1>
	z_impl_k_sem_give(sem);
   16fcc:	4824      	ldr	r0, [pc, #144]	; (17060 <hci_tx_thread+0x148>)
   16fce:	f004 f84f 	bl	1b070 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   16fd2:	4620      	mov	r0, r4
   16fd4:	f001 f8d6 	bl	18184 <net_buf_id>
   16fd8:	4b22      	ldr	r3, [pc, #136]	; (17064 <hci_tx_thread+0x14c>)
   16fda:	220c      	movs	r2, #12
   16fdc:	fb02 3000 	mla	r0, r2, r0, r3
   16fe0:	211f      	movs	r1, #31
   16fe2:	4622      	mov	r2, r4
   16fe4:	8840      	ldrh	r0, [r0, #2]
   16fe6:	f7ff fb87 	bl	166f8 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   16fea:	f8d6 00f8 	ldr.w	r0, [r6, #248]	; 0xf8
   16fee:	f001 f981 	bl	182f4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   16ff2:	2300      	movs	r3, #0
		net_buf_unref(buf);
   16ff4:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   16ff6:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
		net_buf_unref(buf);
   16ffa:	f001 f97b 	bl	182f4 <net_buf_unref>
   16ffe:	e7bc      	b.n	16f7a <hci_tx_thread+0x62>
		BT_ERR("Uncleared pending sent_cmd");
   17000:	01a9      	lsls	r1, r5, #6
   17002:	4819      	ldr	r0, [pc, #100]	; (17068 <hci_tx_thread+0x150>)
   17004:	f041 0101 	orr.w	r1, r1, #1
   17008:	f008 f838 	bl	1f07c <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   1700c:	f8d6 00f8 	ldr.w	r0, [r6, #248]	; 0xf8
   17010:	f001 f970 	bl	182f4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   17014:	2300      	movs	r3, #0
   17016:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
   1701a:	e7c6      	b.n	16faa <hci_tx_thread+0x92>
	BT_ASSERT(buf);
   1701c:	4a0a      	ldr	r2, [pc, #40]	; (17048 <hci_tx_thread+0x130>)
   1701e:	4913      	ldr	r1, [pc, #76]	; (1706c <hci_tx_thread+0x154>)
   17020:	480b      	ldr	r0, [pc, #44]	; (17050 <hci_tx_thread+0x138>)
   17022:	f640 132a 	movw	r3, #2346	; 0x92a
   17026:	f007 fcf0 	bl	1ea0a <printk>
   1702a:	4040      	eors	r0, r0
   1702c:	f380 8811 	msr	BASEPRI, r0
   17030:	f04f 0003 	mov.w	r0, #3
   17034:	df02      	svc	2
   17036:	e7ae      	b.n	16f96 <hci_tx_thread+0x7e>
   17038:	00020d88 	.word	0x00020d88
   1703c:	00020d98 	.word	0x00020d98
   17040:	20000330 	.word	0x20000330
   17044:	2000048c 	.word	0x2000048c
   17048:	00021c32 	.word	0x00021c32
   1704c:	00021cde 	.word	0x00021cde
   17050:	00021c7f 	.word	0x00021c7f
   17054:	00021e3d 	.word	0x00021e3d
   17058:	20000444 	.word	0x20000444
   1705c:	00021e1b 	.word	0x00021e1b
   17060:	20000410 	.word	0x20000410
   17064:	20001f20 	.word	0x20001f20
   17068:	00021e5e 	.word	0x00021e5e
   1706c:	00021a45 	.word	0x00021a45

00017070 <hci_event_prio>:
{
   17070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17074:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   17076:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   1707a:	4630      	mov	r0, r6
   1707c:	f008 fd99 	bl	1fbb2 <net_buf_simple_headroom>
	state->len = buf->len;
   17080:	89a7      	ldrh	r7, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17082:	2f01      	cmp	r7, #1
	state->offset = net_buf_simple_headroom(buf);
   17084:	4605      	mov	r5, r0
   17086:	d80c      	bhi.n	170a2 <hci_event_prio+0x32>
   17088:	4a21      	ldr	r2, [pc, #132]	; (17110 <hci_event_prio+0xa0>)
   1708a:	4922      	ldr	r1, [pc, #136]	; (17114 <hci_event_prio+0xa4>)
   1708c:	4822      	ldr	r0, [pc, #136]	; (17118 <hci_event_prio+0xa8>)
   1708e:	f640 5327 	movw	r3, #3367	; 0xd27
   17092:	f007 fcba 	bl	1ea0a <printk>
   17096:	4040      	eors	r0, r0
   17098:	f380 8811 	msr	BASEPRI, r0
   1709c:	f04f 0003 	mov.w	r0, #3
   170a0:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   170a2:	4630      	mov	r0, r6
   170a4:	2102      	movs	r1, #2
   170a6:	f008 fd74 	bl	1fb92 <net_buf_simple_pull_mem>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   170aa:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
   170ac:	2b05      	cmp	r3, #5
   170ae:	4606      	mov	r6, r0
   170b0:	d026      	beq.n	17100 <hci_event_prio+0x90>
   170b2:	3b0e      	subs	r3, #14
		return BT_HCI_EVT_FLAG_RECV;
   170b4:	2b01      	cmp	r3, #1
   170b6:	bf94      	ite	ls
   170b8:	f04f 0801 	movls.w	r8, #1
   170bc:	f04f 0802 	movhi.w	r8, #2
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   170c0:	f018 0f01 	tst.w	r8, #1
   170c4:	d10c      	bne.n	170e0 <hci_event_prio+0x70>
   170c6:	4a12      	ldr	r2, [pc, #72]	; (17110 <hci_event_prio+0xa0>)
   170c8:	4914      	ldr	r1, [pc, #80]	; (1711c <hci_event_prio+0xac>)
   170ca:	4813      	ldr	r0, [pc, #76]	; (17118 <hci_event_prio+0xa8>)
   170cc:	f640 532b 	movw	r3, #3371	; 0xd2b
   170d0:	f007 fc9b 	bl	1ea0a <printk>
   170d4:	4040      	eors	r0, r0
   170d6:	f380 8811 	msr	BASEPRI, r0
   170da:	f04f 0003 	mov.w	r0, #3
   170de:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   170e0:	4a0f      	ldr	r2, [pc, #60]	; (17120 <hci_event_prio+0xb0>)
   170e2:	7830      	ldrb	r0, [r6, #0]
   170e4:	2302      	movs	r3, #2
   170e6:	4621      	mov	r1, r4
   170e8:	f7ff fbaa 	bl	16840 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   170ec:	f018 0f02 	tst.w	r8, #2
   170f0:	d009      	beq.n	17106 <hci_event_prio+0x96>
	buf->data = buf->__buf + state->offset;
   170f2:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   170f4:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
   170f6:	fa10 f585 	uxtah	r5, r0, r5
   170fa:	60a5      	str	r5, [r4, #8]
}
   170fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   17100:	f04f 0803 	mov.w	r8, #3
   17104:	e7dc      	b.n	170c0 <hci_event_prio+0x50>
		net_buf_unref(buf);
   17106:	4620      	mov	r0, r4
}
   17108:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   1710c:	f001 b8f2 	b.w	182f4 <net_buf_unref>
   17110:	00021c32 	.word	0x00021c32
   17114:	00021c66 	.word	0x00021c66
   17118:	00021c7f 	.word	0x00021c7f
   1711c:	00021e79 	.word	0x00021e79
   17120:	00021038 	.word	0x00021038

00017124 <bt_recv>:
{
   17124:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   17126:	7d04      	ldrb	r4, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   17128:	2c01      	cmp	r4, #1
{
   1712a:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   1712c:	d117      	bne.n	1715e <bt_recv+0x3a>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1712e:	6883      	ldr	r3, [r0, #8]
   17130:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
   17132:	2b05      	cmp	r3, #5
   17134:	d011      	beq.n	1715a <bt_recv+0x36>
   17136:	3b0e      	subs	r3, #14
		return BT_HCI_EVT_FLAG_RECV;
   17138:	2b01      	cmp	r3, #1
   1713a:	bf88      	it	hi
   1713c:	2402      	movhi	r4, #2
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1713e:	07e3      	lsls	r3, r4, #31
   17140:	d502      	bpl.n	17148 <bt_recv+0x24>
			hci_event_prio(buf);
   17142:	4628      	mov	r0, r5
   17144:	f7ff ff94 	bl	17070 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   17148:	f014 0002 	ands.w	r0, r4, #2
   1714c:	d004      	beq.n	17158 <bt_recv+0x34>
			net_buf_put(&bt_dev.rx_queue, buf);
   1714e:	480c      	ldr	r0, [pc, #48]	; (17180 <bt_recv+0x5c>)
   17150:	4629      	mov	r1, r5
   17152:	f008 fcee 	bl	1fb32 <net_buf_put>
		return 0;
   17156:	2000      	movs	r0, #0
}
   17158:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1715a:	2403      	movs	r4, #3
   1715c:	e7ef      	b.n	1713e <bt_recv+0x1a>
   1715e:	4b09      	ldr	r3, [pc, #36]	; (17184 <bt_recv+0x60>)
   17160:	4a09      	ldr	r2, [pc, #36]	; (17188 <bt_recv+0x64>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   17162:	480a      	ldr	r0, [pc, #40]	; (1718c <bt_recv+0x68>)
   17164:	1ad2      	subs	r2, r2, r3
   17166:	08d2      	lsrs	r2, r2, #3
   17168:	0192      	lsls	r2, r2, #6
   1716a:	f042 0201 	orr.w	r2, r2, #1
   1716e:	4621      	mov	r1, r4
   17170:	f007 ff91 	bl	1f096 <log_1>
		net_buf_unref(buf);
   17174:	4628      	mov	r0, r5
   17176:	f001 f8bd 	bl	182f4 <net_buf_unref>
		return -EINVAL;
   1717a:	f06f 0015 	mvn.w	r0, #21
   1717e:	e7eb      	b.n	17158 <bt_recv+0x34>
   17180:	2000042c 	.word	0x2000042c
   17184:	00020d88 	.word	0x00020d88
   17188:	00020d98 	.word	0x00020d98
   1718c:	00021e92 	.word	0x00021e92

00017190 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   17190:	4a08      	ldr	r2, [pc, #32]	; (171b4 <bt_hci_driver_register+0x24>)
{
   17192:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   17194:	f8d2 012c 	ldr.w	r0, [r2, #300]	; 0x12c
   17198:	b930      	cbnz	r0, 171a8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   1719a:	68d9      	ldr	r1, [r3, #12]
   1719c:	b139      	cbz	r1, 171ae <bt_hci_driver_register+0x1e>
   1719e:	6919      	ldr	r1, [r3, #16]
   171a0:	b129      	cbz	r1, 171ae <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   171a2:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
	return 0;
   171a6:	4770      	bx	lr
		return -EALREADY;
   171a8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   171ac:	4770      	bx	lr
		return -EINVAL;
   171ae:	f06f 0015 	mvn.w	r0, #21
}
   171b2:	4770      	bx	lr
   171b4:	20000330 	.word	0x20000330

000171b8 <bt_finalize_init>:
{
   171b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   171bc:	4c33      	ldr	r4, [pc, #204]	; (1728c <bt_finalize_init+0xd4>)
   171be:	f3bf 8f5b 	dmb	ish
   171c2:	b087      	sub	sp, #28
   171c4:	f104 03cc 	add.w	r3, r4, #204	; 0xcc
   171c8:	e853 2f00 	ldrex	r2, [r3]
   171cc:	f042 0202 	orr.w	r2, r2, #2
   171d0:	e843 2100 	strex	r1, r2, [r3]
   171d4:	2900      	cmp	r1, #0
   171d6:	d1f7      	bne.n	171c8 <bt_finalize_init+0x10>
   171d8:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
   171dc:	2000      	movs	r0, #0
   171de:	f000 fe1d 	bl	17e1c <bt_le_scan_update>
   171e2:	4d2b      	ldr	r5, [pc, #172]	; (17290 <bt_finalize_init+0xd8>)
   171e4:	4b2b      	ldr	r3, [pc, #172]	; (17294 <bt_finalize_init+0xdc>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   171e6:	492c      	ldr	r1, [pc, #176]	; (17298 <bt_finalize_init+0xe0>)
   171e8:	4e2c      	ldr	r6, [pc, #176]	; (1729c <bt_finalize_init+0xe4>)
		BT_INFO("Identity[%d]: %s",
   171ea:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 172ac <bt_finalize_init+0xf4>
   171ee:	1aed      	subs	r5, r5, r3
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   171f0:	79e3      	ldrb	r3, [r4, #7]
   171f2:	4620      	mov	r0, r4
   171f4:	2b01      	cmp	r3, #1
   171f6:	bf88      	it	hi
   171f8:	460e      	movhi	r6, r1
   171fa:	f7ff f9a5 	bl	16548 <bt_addr_le_str_real>
   171fe:	f7fd fd05 	bl	14c0c <z_log_strdup>
   17202:	08ed      	lsrs	r5, r5, #3
   17204:	01ad      	lsls	r5, r5, #6
   17206:	f045 0703 	orr.w	r7, r5, #3
   1720a:	4602      	mov	r2, r0
   1720c:	4631      	mov	r1, r6
   1720e:	4824      	ldr	r0, [pc, #144]	; (172a0 <bt_finalize_init+0xe8>)
   17210:	463b      	mov	r3, r7
   17212:	f007 ff54 	bl	1f0be <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   17216:	46a0      	mov	r8, r4
   17218:	2601      	movs	r6, #1
   1721a:	79e3      	ldrb	r3, [r4, #7]
   1721c:	429e      	cmp	r6, r3
   1721e:	f108 0807 	add.w	r8, r8, #7
   17222:	db25      	blt.n	17270 <bt_finalize_init+0xb8>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   17224:	f894 6068 	ldrb.w	r6, [r4, #104]	; 0x68
   17228:	4630      	mov	r0, r6
   1722a:	f7ff fa15 	bl	16658 <ver_str>
   1722e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
   17232:	9304      	str	r3, [sp, #16]
   17234:	f045 0503 	orr.w	r5, r5, #3
   17238:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
   1723c:	9305      	str	r3, [sp, #20]
   1723e:	e9cd 0602 	strd	r0, r6, [sp, #8]
   17242:	462b      	mov	r3, r5
   17244:	a902      	add	r1, sp, #8
   17246:	2204      	movs	r2, #4
   17248:	4816      	ldr	r0, [pc, #88]	; (172a4 <bt_finalize_init+0xec>)
   1724a:	f007 ff6d 	bl	1f128 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
   1724e:	f894 6069 	ldrb.w	r6, [r4, #105]	; 0x69
   17252:	4630      	mov	r0, r6
   17254:	f7ff fa00 	bl	16658 <ver_str>
   17258:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   1725c:	f8ad 5000 	strh.w	r5, [sp]
   17260:	4601      	mov	r1, r0
   17262:	4632      	mov	r2, r6
   17264:	4810      	ldr	r0, [pc, #64]	; (172a8 <bt_finalize_init+0xf0>)
   17266:	f007 ff43 	bl	1f0f0 <log_3>
}
   1726a:	b007      	add	sp, #28
   1726c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
   17270:	4640      	mov	r0, r8
   17272:	f7ff f969 	bl	16548 <bt_addr_le_str_real>
   17276:	f7fd fcc9 	bl	14c0c <z_log_strdup>
   1727a:	4631      	mov	r1, r6
   1727c:	4602      	mov	r2, r0
   1727e:	463b      	mov	r3, r7
   17280:	4648      	mov	r0, r9
   17282:	f007 ff1c 	bl	1f0be <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   17286:	3601      	adds	r6, #1
   17288:	e7c7      	b.n	1721a <bt_finalize_init+0x62>
   1728a:	bf00      	nop
   1728c:	20000330 	.word	0x20000330
   17290:	00020d98 	.word	0x00020d98
   17294:	00020d88 	.word	0x00020d88
   17298:	00021ea6 	.word	0x00021ea6
   1729c:	000214cc 	.word	0x000214cc
   172a0:	00021eaa 	.word	0x00021eaa
   172a4:	00021eca 	.word	0x00021eca
   172a8:	00021f08 	.word	0x00021f08
   172ac:	00021eb9 	.word	0x00021eb9

000172b0 <init_work>:
{
   172b0:	b510      	push	{r4, lr}
	err = hci_init();
   172b2:	f7ff fc6f 	bl	16b94 <hci_init>
	if (err) {
   172b6:	4604      	mov	r4, r0
   172b8:	b908      	cbnz	r0, 172be <init_work+0xe>
	bt_finalize_init();
   172ba:	f7ff ff7d 	bl	171b8 <bt_finalize_init>
	if (ready_cb) {
   172be:	4b04      	ldr	r3, [pc, #16]	; (172d0 <init_work+0x20>)
   172c0:	681b      	ldr	r3, [r3, #0]
   172c2:	b11b      	cbz	r3, 172cc <init_work+0x1c>
		ready_cb(err);
   172c4:	4620      	mov	r0, r4
}
   172c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   172ca:	4718      	bx	r3
}
   172cc:	bd10      	pop	{r4, pc}
   172ce:	bf00      	nop
   172d0:	20001f38 	.word	0x20001f38

000172d4 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   172d4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	int err;

	if (!bt_dev.drv) {
   172d8:	4d3b      	ldr	r5, [pc, #236]	; (173c8 <bt_enable+0xf4>)
   172da:	f8d5 312c 	ldr.w	r3, [r5, #300]	; 0x12c
{
   172de:	b088      	sub	sp, #32
   172e0:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   172e2:	b97b      	cbnz	r3, 17304 <bt_enable+0x30>
   172e4:	4b39      	ldr	r3, [pc, #228]	; (173cc <bt_enable+0xf8>)
   172e6:	493a      	ldr	r1, [pc, #232]	; (173d0 <bt_enable+0xfc>)
		BT_ERR("No HCI driver registered");
   172e8:	483a      	ldr	r0, [pc, #232]	; (173d4 <bt_enable+0x100>)
   172ea:	1ac9      	subs	r1, r1, r3
   172ec:	08c9      	lsrs	r1, r1, #3
   172ee:	0189      	lsls	r1, r1, #6
   172f0:	f041 0101 	orr.w	r1, r1, #1
   172f4:	f007 fec2 	bl	1f07c <log_0>
		return -ENODEV;
   172f8:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   172fc:	4620      	mov	r0, r4
   172fe:	b008      	add	sp, #32
   17300:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   17304:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   17308:	f3bf 8f5b 	dmb	ish
   1730c:	e853 4f00 	ldrex	r4, [r3]
   17310:	f044 0201 	orr.w	r2, r4, #1
   17314:	e843 2100 	strex	r1, r2, [r3]
   17318:	2900      	cmp	r1, #0
   1731a:	d1f7      	bne.n	1730c <bt_enable+0x38>
   1731c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   17320:	f014 0401 	ands.w	r4, r4, #1
   17324:	d14d      	bne.n	173c2 <bt_enable+0xee>
	ready_cb = cb;
   17326:	4b2c      	ldr	r3, [pc, #176]	; (173d8 <bt_enable+0x104>)
   17328:	f04f 0800 	mov.w	r8, #0
   1732c:	601e      	str	r6, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
   1732e:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17332:	f06f 0308 	mvn.w	r3, #8
   17336:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1733a:	e9cd 8906 	strd	r8, r9, [sp, #24]
   1733e:	e9cd 4400 	strd	r4, r4, [sp]
   17342:	4b26      	ldr	r3, [pc, #152]	; (173dc <bt_enable+0x108>)
   17344:	4926      	ldr	r1, [pc, #152]	; (173e0 <bt_enable+0x10c>)
   17346:	9404      	str	r4, [sp, #16]
   17348:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   1734c:	4825      	ldr	r0, [pc, #148]	; (173e4 <bt_enable+0x110>)
   1734e:	f003 fcf7 	bl	1ad40 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   17352:	4925      	ldr	r1, [pc, #148]	; (173e8 <bt_enable+0x114>)
   17354:	4823      	ldr	r0, [pc, #140]	; (173e4 <bt_enable+0x110>)
   17356:	f008 ff31 	bl	201bc <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1735a:	f06f 0307 	mvn.w	r3, #7
   1735e:	e9cd 4302 	strd	r4, r3, [sp, #8]
   17362:	e9cd 8906 	strd	r8, r9, [sp, #24]
   17366:	e9cd 4400 	strd	r4, r4, [sp]
   1736a:	4b20      	ldr	r3, [pc, #128]	; (173ec <bt_enable+0x118>)
   1736c:	4920      	ldr	r1, [pc, #128]	; (173f0 <bt_enable+0x11c>)
   1736e:	9404      	str	r4, [sp, #16]
   17370:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17374:	481f      	ldr	r0, [pc, #124]	; (173f4 <bt_enable+0x120>)
   17376:	f003 fce3 	bl	1ad40 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1737a:	491f      	ldr	r1, [pc, #124]	; (173f8 <bt_enable+0x124>)
   1737c:	481d      	ldr	r0, [pc, #116]	; (173f4 <bt_enable+0x120>)
   1737e:	f008 ff1d 	bl	201bc <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   17382:	f8d5 312c 	ldr.w	r3, [r5, #300]	; 0x12c
   17386:	68db      	ldr	r3, [r3, #12]
   17388:	4798      	blx	r3
	if (err) {
   1738a:	4604      	mov	r4, r0
   1738c:	b158      	cbz	r0, 173a6 <bt_enable+0xd2>
   1738e:	4b0f      	ldr	r3, [pc, #60]	; (173cc <bt_enable+0xf8>)
   17390:	4a0f      	ldr	r2, [pc, #60]	; (173d0 <bt_enable+0xfc>)
   17392:	1ad2      	subs	r2, r2, r3
   17394:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
   17396:	0192      	lsls	r2, r2, #6
   17398:	4601      	mov	r1, r0
   1739a:	f042 0201 	orr.w	r2, r2, #1
   1739e:	4817      	ldr	r0, [pc, #92]	; (173fc <bt_enable+0x128>)
   173a0:	f007 fe79 	bl	1f096 <log_1>
		return err;
   173a4:	e7aa      	b.n	172fc <bt_enable+0x28>
	if (!cb) {
   173a6:	b93e      	cbnz	r6, 173b8 <bt_enable+0xe4>
	err = hci_init();
   173a8:	f7ff fbf4 	bl	16b94 <hci_init>
	if (err) {
   173ac:	4604      	mov	r4, r0
   173ae:	2800      	cmp	r0, #0
   173b0:	d1a4      	bne.n	172fc <bt_enable+0x28>
	bt_finalize_init();
   173b2:	f7ff ff01 	bl	171b8 <bt_finalize_init>
	return 0;
   173b6:	e7a1      	b.n	172fc <bt_enable+0x28>
	k_work_submit(&bt_dev.init);
   173b8:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   173bc:	f003 ff96 	bl	1b2ec <k_work_submit>
	return 0;
   173c0:	e79c      	b.n	172fc <bt_enable+0x28>
		return -EALREADY;
   173c2:	f06f 0477 	mvn.w	r4, #119	; 0x77
   173c6:	e799      	b.n	172fc <bt_enable+0x28>
   173c8:	20000330 	.word	0x20000330
   173cc:	00020d88 	.word	0x00020d88
   173d0:	00020d98 	.word	0x00020d98
   173d4:	00021f2f 	.word	0x00021f2f
   173d8:	20001f38 	.word	0x20001f38
   173dc:	00016f19 	.word	0x00016f19
   173e0:	20003c40 	.word	0x20003c40
   173e4:	20001610 	.word	0x20001610
   173e8:	00021f48 	.word	0x00021f48
   173ec:	000168e5 	.word	0x000168e5
   173f0:	20003820 	.word	0x20003820
   173f4:	20001590 	.word	0x20001590
   173f8:	00021f4e 	.word	0x00021f4e
   173fc:	00021f54 	.word	0x00021f54

00017400 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   17400:	4800      	ldr	r0, [pc, #0]	; (17404 <bt_get_name+0x4>)
   17402:	4770      	bx	lr
   17404:	00021f70 	.word	0x00021f70

00017408 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   17408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1740a:	4f0b      	ldr	r7, [pc, #44]	; (17438 <id_find+0x30>)
{
   1740c:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   1740e:	2500      	movs	r5, #0
   17410:	79fb      	ldrb	r3, [r7, #7]
   17412:	b2ec      	uxtb	r4, r5
   17414:	42a3      	cmp	r3, r4
   17416:	d802      	bhi.n	1741e <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   17418:	f06f 0401 	mvn.w	r4, #1
   1741c:	e009      	b.n	17432 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   1741e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   17422:	2207      	movs	r2, #7
   17424:	4439      	add	r1, r7
   17426:	4630      	mov	r0, r6
   17428:	f008 f9c1 	bl	1f7ae <memcmp>
   1742c:	3501      	adds	r5, #1
   1742e:	2800      	cmp	r0, #0
   17430:	d1ee      	bne.n	17410 <id_find+0x8>
}
   17432:	4620      	mov	r0, r4
   17434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17436:	bf00      	nop
   17438:	20000330 	.word	0x20000330

0001743c <set_random_address>:
{
   1743c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   1743e:	4914      	ldr	r1, [pc, #80]	; (17490 <set_random_address+0x54>)
   17440:	2206      	movs	r2, #6
   17442:	4605      	mov	r5, r0
   17444:	f008 f9b3 	bl	1f7ae <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   17448:	4604      	mov	r4, r0
   1744a:	b1e0      	cbz	r0, 17486 <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   1744c:	2106      	movs	r1, #6
   1744e:	f242 0005 	movw	r0, #8197	; 0x2005
   17452:	f7ff faef 	bl	16a34 <bt_hci_cmd_create>
	if (!buf) {
   17456:	4604      	mov	r4, r0
   17458:	b1b8      	cbz	r0, 1748a <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1745a:	2206      	movs	r2, #6
   1745c:	4629      	mov	r1, r5
   1745e:	3008      	adds	r0, #8
   17460:	f008 fb7e 	bl	1fb60 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   17464:	4621      	mov	r1, r4
   17466:	2200      	movs	r2, #0
   17468:	f242 0005 	movw	r0, #8197	; 0x2005
   1746c:	f7ff fb1a 	bl	16aa4 <bt_hci_cmd_send_sync>
	if (err) {
   17470:	4604      	mov	r4, r0
   17472:	b940      	cbnz	r0, 17486 <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   17474:	2206      	movs	r2, #6
   17476:	4806      	ldr	r0, [pc, #24]	; (17490 <set_random_address+0x54>)
   17478:	4629      	mov	r1, r5
   1747a:	f008 f9bf 	bl	1f7fc <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   1747e:	4b05      	ldr	r3, [pc, #20]	; (17494 <set_random_address+0x58>)
   17480:	2201      	movs	r2, #1
   17482:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
   17486:	4620      	mov	r0, r4
   17488:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   1748a:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1748e:	e7fa      	b.n	17486 <set_random_address+0x4a>
   17490:	20000391 	.word	0x20000391
   17494:	20000330 	.word	0x20000330

00017498 <id_create.isra.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   17498:	b530      	push	{r4, r5, lr}
   1749a:	4604      	mov	r4, r0
   1749c:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1749e:	460d      	mov	r5, r1
   174a0:	b1a1      	cbz	r1, 174cc <id_create.isra.0+0x34>
   174a2:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   174a4:	2207      	movs	r2, #7
   174a6:	a902      	add	r1, sp, #8
   174a8:	4628      	mov	r0, r5
   174aa:	9302      	str	r3, [sp, #8]
   174ac:	f8cd 300b 	str.w	r3, [sp, #11]
   174b0:	f008 f97d 	bl	1f7ae <memcmp>
   174b4:	b150      	cbz	r0, 174cc <id_create.isra.0+0x34>
	memcpy(dst, src, sizeof(*dst));
   174b6:	4812      	ldr	r0, [pc, #72]	; (17500 <id_create.isra.0+0x68>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   174b8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   174bc:	2207      	movs	r2, #7
   174be:	4629      	mov	r1, r5
   174c0:	4420      	add	r0, r4
   174c2:	f008 f99b 	bl	1f7fc <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   174c6:	2000      	movs	r0, #0
}
   174c8:	b005      	add	sp, #20
   174ca:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   174cc:	4668      	mov	r0, sp
   174ce:	f008 f9ca 	bl	1f866 <bt_addr_le_create_static>
			if (err) {
   174d2:	2800      	cmp	r0, #0
   174d4:	d1f8      	bne.n	174c8 <id_create.isra.0+0x30>
		} while (id_find(&new_addr) >= 0);
   174d6:	4668      	mov	r0, sp
   174d8:	f7ff ff96 	bl	17408 <id_find>
   174dc:	2800      	cmp	r0, #0
   174de:	daf5      	bge.n	174cc <id_create.isra.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   174e0:	4807      	ldr	r0, [pc, #28]	; (17500 <id_create.isra.0+0x68>)
   174e2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   174e6:	4404      	add	r4, r0
   174e8:	2207      	movs	r2, #7
   174ea:	4669      	mov	r1, sp
   174ec:	4620      	mov	r0, r4
   174ee:	f008 f985 	bl	1f7fc <memcpy>
		if (addr) {
   174f2:	2d00      	cmp	r5, #0
   174f4:	d0e7      	beq.n	174c6 <id_create.isra.0+0x2e>
   174f6:	2207      	movs	r2, #7
   174f8:	4621      	mov	r1, r4
   174fa:	4628      	mov	r0, r5
   174fc:	e7e1      	b.n	174c2 <id_create.isra.0+0x2a>
   174fe:	bf00      	nop
   17500:	20000330 	.word	0x20000330

00017504 <bt_id_adv_random_addr_check>:
{
   17504:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17506:	4805      	ldr	r0, [pc, #20]	; (1751c <bt_id_adv_random_addr_check+0x18>)
   17508:	f008 f9bb 	bl	1f882 <atomic_get>
	if (!(atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING) ||
   1750c:	0503      	lsls	r3, r0, #20
   1750e:	d402      	bmi.n	17516 <bt_id_adv_random_addr_check+0x12>
   17510:	4802      	ldr	r0, [pc, #8]	; (1751c <bt_id_adv_random_addr_check+0x18>)
   17512:	f008 f9b6 	bl	1f882 <atomic_get>
}
   17516:	2001      	movs	r0, #1
   17518:	bd08      	pop	{r3, pc}
   1751a:	bf00      	nop
   1751c:	200003fc 	.word	0x200003fc

00017520 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   17520:	b573      	push	{r0, r1, r4, r5, r6, lr}
   17522:	460e      	mov	r6, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   17524:	4604      	mov	r4, r0
   17526:	b918      	cbnz	r0, 17530 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   17528:	b346      	cbz	r6, 1757c <bt_id_create+0x5c>
		return -EINVAL;
   1752a:	f06f 0015 	mvn.w	r0, #21
   1752e:	e023      	b.n	17578 <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   17530:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   17532:	2207      	movs	r2, #7
   17534:	4669      	mov	r1, sp
   17536:	9300      	str	r3, [sp, #0]
   17538:	f8cd 3003 	str.w	r3, [sp, #3]
   1753c:	f008 f937 	bl	1f7ae <memcmp>
   17540:	2800      	cmp	r0, #0
   17542:	d0f1      	beq.n	17528 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   17544:	7823      	ldrb	r3, [r4, #0]
   17546:	2b01      	cmp	r3, #1
   17548:	d104      	bne.n	17554 <bt_id_create+0x34>
   1754a:	79a3      	ldrb	r3, [r4, #6]
   1754c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17550:	2bc0      	cmp	r3, #192	; 0xc0
   17552:	d00a      	beq.n	1756a <bt_id_create+0x4a>
   17554:	4b1b      	ldr	r3, [pc, #108]	; (175c4 <bt_id_create+0xa4>)
   17556:	491c      	ldr	r1, [pc, #112]	; (175c8 <bt_id_create+0xa8>)
			BT_ERR("Only static random identity address supported");
   17558:	481c      	ldr	r0, [pc, #112]	; (175cc <bt_id_create+0xac>)
   1755a:	1ac9      	subs	r1, r1, r3
   1755c:	08c9      	lsrs	r1, r1, #3
   1755e:	0189      	lsls	r1, r1, #6
   17560:	f041 0101 	orr.w	r1, r1, #1
   17564:	f007 fd8a 	bl	1f07c <log_0>
			return -EINVAL;
   17568:	e7df      	b.n	1752a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   1756a:	4620      	mov	r0, r4
   1756c:	f7ff ff4c 	bl	17408 <id_find>
   17570:	2800      	cmp	r0, #0
   17572:	dbd9      	blt.n	17528 <bt_id_create+0x8>
			return -EALREADY;
   17574:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   17578:	b002      	add	sp, #8
   1757a:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   1757c:	4d14      	ldr	r5, [pc, #80]	; (175d0 <bt_id_create+0xb0>)
   1757e:	79eb      	ldrb	r3, [r5, #7]
   17580:	2b01      	cmp	r3, #1
   17582:	d01c      	beq.n	175be <bt_id_create+0x9e>
   17584:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   17588:	f008 f97b 	bl	1f882 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1758c:	07c3      	lsls	r3, r0, #31
   1758e:	d40b      	bmi.n	175a8 <bt_id_create+0x88>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   17590:	2c00      	cmp	r4, #0
   17592:	d0ca      	beq.n	1752a <bt_id_create+0xa>
   17594:	2207      	movs	r2, #7
   17596:	4669      	mov	r1, sp
   17598:	4620      	mov	r0, r4
   1759a:	9600      	str	r6, [sp, #0]
   1759c:	f8cd 6003 	str.w	r6, [sp, #3]
   175a0:	f008 f905 	bl	1f7ae <memcmp>
   175a4:	2800      	cmp	r0, #0
   175a6:	d0c0      	beq.n	1752a <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   175a8:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   175aa:	4621      	mov	r1, r4
	new_id = bt_dev.id_count++;
   175ac:	1c73      	adds	r3, r6, #1
	err = id_create(new_id, addr, irk);
   175ae:	4630      	mov	r0, r6
	new_id = bt_dev.id_count++;
   175b0:	71eb      	strb	r3, [r5, #7]
	err = id_create(new_id, addr, irk);
   175b2:	f7ff ff71 	bl	17498 <id_create.isra.0>
	new_id = bt_dev.id_count++;
   175b6:	2800      	cmp	r0, #0
   175b8:	bf08      	it	eq
   175ba:	4630      	moveq	r0, r6
   175bc:	e7dc      	b.n	17578 <bt_id_create+0x58>
		return -ENOMEM;
   175be:	f06f 000b 	mvn.w	r0, #11
   175c2:	e7d9      	b.n	17578 <bt_id_create+0x58>
   175c4:	00020d88 	.word	0x00020d88
   175c8:	00020da0 	.word	0x00020da0
   175cc:	00021f77 	.word	0x00021f77
   175d0:	20000330 	.word	0x20000330

000175d4 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   175d4:	b570      	push	{r4, r5, r6, lr}
   175d6:	b086      	sub	sp, #24
   175d8:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   175da:	aa01      	add	r2, sp, #4
   175dc:	2100      	movs	r1, #0
   175de:	f241 0009 	movw	r0, #4105	; 0x1009
   175e2:	f7ff fa5f 	bl	16aa4 <bt_hci_cmd_send_sync>
	if (err) {
   175e6:	4604      	mov	r4, r0
   175e8:	b160      	cbz	r0, 17604 <bt_id_read_public_addr+0x30>
   175ea:	491a      	ldr	r1, [pc, #104]	; (17654 <bt_id_read_public_addr+0x80>)
   175ec:	4b1a      	ldr	r3, [pc, #104]	; (17658 <bt_id_read_public_addr+0x84>)
		BT_WARN("Failed to read public address");
   175ee:	481b      	ldr	r0, [pc, #108]	; (1765c <bt_id_read_public_addr+0x88>)
   175f0:	1ac9      	subs	r1, r1, r3
   175f2:	08c9      	lsrs	r1, r1, #3
   175f4:	0189      	lsls	r1, r1, #6
   175f6:	f041 0102 	orr.w	r1, r1, #2
   175fa:	f007 fd3f 	bl	1f07c <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   175fe:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   17600:	b006      	add	sp, #24
   17602:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   17604:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   17606:	9002      	str	r0, [sp, #8]
   17608:	689d      	ldr	r5, [r3, #8]
   1760a:	f8ad 000c 	strh.w	r0, [sp, #12]
   1760e:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   17610:	2206      	movs	r2, #6
   17612:	a902      	add	r1, sp, #8
   17614:	4628      	mov	r0, r5
   17616:	f008 f8ca 	bl	1f7ae <memcmp>
   1761a:	b918      	cbnz	r0, 17624 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   1761c:	9801      	ldr	r0, [sp, #4]
   1761e:	f000 fe69 	bl	182f4 <net_buf_unref>
   17622:	e7ec      	b.n	175fe <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   17624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17628:	2206      	movs	r2, #6
   1762a:	a904      	add	r1, sp, #16
   1762c:	4628      	mov	r0, r5
   1762e:	9304      	str	r3, [sp, #16]
   17630:	f8ad 3014 	strh.w	r3, [sp, #20]
   17634:	f008 f8bb 	bl	1f7ae <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   17638:	2800      	cmp	r0, #0
   1763a:	d0ef      	beq.n	1761c <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   1763c:	2206      	movs	r2, #6
   1763e:	4629      	mov	r1, r5
   17640:	1c70      	adds	r0, r6, #1
   17642:	f008 f8db 	bl	1f7fc <memcpy>
	net_buf_unref(rsp);
   17646:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   17648:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   1764a:	f000 fe53 	bl	182f4 <net_buf_unref>
	return 1U;
   1764e:	2001      	movs	r0, #1
   17650:	e7d6      	b.n	17600 <bt_id_read_public_addr+0x2c>
   17652:	bf00      	nop
   17654:	00020da0 	.word	0x00020da0
   17658:	00020d88 	.word	0x00020d88
   1765c:	00021fa5 	.word	0x00021fa5

00017660 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   17660:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   17662:	4668      	mov	r0, sp
   17664:	f7ff ffb6 	bl	175d4 <bt_id_read_public_addr>
   17668:	4b04      	ldr	r3, [pc, #16]	; (1767c <bt_setup_public_id_addr+0x1c>)
   1766a:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   1766c:	b118      	cbz	r0, 17676 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   1766e:	4669      	mov	r1, sp
   17670:	2000      	movs	r0, #0
   17672:	f7ff ff11 	bl	17498 <id_create.isra.0>
}
   17676:	b003      	add	sp, #12
   17678:	f85d fb04 	ldr.w	pc, [sp], #4
   1767c:	20000330 	.word	0x20000330

00017680 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   17680:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   17684:	4b25      	ldr	r3, [pc, #148]	; (1771c <bt_read_static_addr+0x9c>)
   17686:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   1768a:	f014 0401 	ands.w	r4, r4, #1
{
   1768e:	4607      	mov	r7, r0
   17690:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   17692:	d10a      	bne.n	176aa <bt_read_static_addr+0x2a>
   17694:	4922      	ldr	r1, [pc, #136]	; (17720 <bt_read_static_addr+0xa0>)
   17696:	4b23      	ldr	r3, [pc, #140]	; (17724 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
   17698:	4823      	ldr	r0, [pc, #140]	; (17728 <bt_read_static_addr+0xa8>)
   1769a:	1ac9      	subs	r1, r1, r3
   1769c:	08c9      	lsrs	r1, r1, #3
   1769e:	0189      	lsls	r1, r1, #6
   176a0:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   176a4:	f007 fcea 	bl	1f07c <log_0>
   176a8:	e012      	b.n	176d0 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   176aa:	aa01      	add	r2, sp, #4
   176ac:	2100      	movs	r1, #0
   176ae:	f64f 4009 	movw	r0, #64521	; 0xfc09
   176b2:	f7ff f9f7 	bl	16aa4 <bt_hci_cmd_send_sync>
	if (err) {
   176b6:	4605      	mov	r5, r0
   176b8:	b170      	cbz	r0, 176d8 <bt_read_static_addr+0x58>
   176ba:	4b1a      	ldr	r3, [pc, #104]	; (17724 <bt_read_static_addr+0xa4>)
   176bc:	4918      	ldr	r1, [pc, #96]	; (17720 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
   176be:	481b      	ldr	r0, [pc, #108]	; (1772c <bt_read_static_addr+0xac>)
   176c0:	1ac9      	subs	r1, r1, r3
   176c2:	08c9      	lsrs	r1, r1, #3
   176c4:	0189      	lsls	r1, r1, #6
   176c6:	f041 0102 	orr.w	r1, r1, #2
   176ca:	f007 fcd7 	bl	1f07c <log_0>
		return 0;
   176ce:	2400      	movs	r4, #0
	}

	return cnt;
}
   176d0:	4620      	mov	r0, r4
   176d2:	b002      	add	sp, #8
   176d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
   176d8:	9b01      	ldr	r3, [sp, #4]
   176da:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   176dc:	785c      	ldrb	r4, [r3, #1]
   176de:	42b4      	cmp	r4, r6
   176e0:	bf28      	it	cs
   176e2:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   176e4:	f04f 0816 	mov.w	r8, #22
   176e8:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   176ea:	42a5      	cmp	r5, r4
   176ec:	db0d      	blt.n	1770a <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
   176ee:	9801      	ldr	r0, [sp, #4]
   176f0:	f000 fe00 	bl	182f4 <net_buf_unref>
	if (!cnt) {
   176f4:	2c00      	cmp	r4, #0
   176f6:	d1eb      	bne.n	176d0 <bt_read_static_addr+0x50>
   176f8:	4909      	ldr	r1, [pc, #36]	; (17720 <bt_read_static_addr+0xa0>)
   176fa:	4b0a      	ldr	r3, [pc, #40]	; (17724 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
   176fc:	480c      	ldr	r0, [pc, #48]	; (17730 <bt_read_static_addr+0xb0>)
   176fe:	1ac9      	subs	r1, r1, r3
   17700:	08c9      	lsrs	r1, r1, #3
   17702:	0189      	lsls	r1, r1, #6
   17704:	f041 0102 	orr.w	r1, r1, #2
   17708:	e7cc      	b.n	176a4 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   1770a:	fb08 7005 	mla	r0, r8, r5, r7
   1770e:	2216      	movs	r2, #22
   17710:	4631      	mov	r1, r6
   17712:	f008 f873 	bl	1f7fc <memcpy>
	for (i = 0; i < cnt; i++) {
   17716:	3501      	adds	r5, #1
   17718:	e7e7      	b.n	176ea <bt_read_static_addr+0x6a>
   1771a:	bf00      	nop
   1771c:	20000330 	.word	0x20000330
   17720:	00020da0 	.word	0x00020da0
   17724:	00020d88 	.word	0x00020d88
   17728:	00021fc3 	.word	0x00021fc3
   1772c:	00021fef 	.word	0x00021fef
   17730:	0002200f 	.word	0x0002200f

00017734 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   17734:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   17736:	4d14      	ldr	r5, [pc, #80]	; (17788 <bt_setup_random_id_addr+0x54>)
   17738:	79ec      	ldrb	r4, [r5, #7]
{
   1773a:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   1773c:	b92c      	cbnz	r4, 1774a <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1773e:	2101      	movs	r1, #1
   17740:	a802      	add	r0, sp, #8
   17742:	f7ff ff9d 	bl	17680 <bt_read_static_addr>
   17746:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   17748:	b9b8      	cbnz	r0, 1777a <bt_setup_random_id_addr+0x46>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   1774a:	2100      	movs	r1, #0
   1774c:	4608      	mov	r0, r1
   1774e:	f7ff fee7 	bl	17520 <bt_id_create>
   17752:	e010      	b.n	17776 <bt_setup_random_id_addr+0x42>
   17754:	ab02      	add	r3, sp, #8
   17756:	fb07 3106 	mla	r1, r7, r6, r3
   1775a:	2206      	movs	r2, #6
   1775c:	f10d 0001 	add.w	r0, sp, #1
   17760:	f008 f84c 	bl	1f7fc <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   17764:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   17766:	4669      	mov	r1, sp
   17768:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   1776a:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   1776e:	f7ff fe93 	bl	17498 <id_create.isra.0>
				if (err) {
   17772:	3401      	adds	r4, #1
   17774:	b110      	cbz	r0, 1777c <bt_setup_random_id_addr+0x48>
}
   17776:	b009      	add	sp, #36	; 0x24
   17778:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1777a:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1777c:	79eb      	ldrb	r3, [r5, #7]
   1777e:	b2e6      	uxtb	r6, r4
   17780:	42b3      	cmp	r3, r6
   17782:	d8e7      	bhi.n	17754 <bt_setup_random_id_addr+0x20>
			return 0;
   17784:	2000      	movs	r0, #0
   17786:	e7f6      	b.n	17776 <bt_setup_random_id_addr+0x42>
   17788:	20000330 	.word	0x20000330

0001778c <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   1778c:	b570      	push	{r4, r5, r6, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   1778e:	4b10      	ldr	r3, [pc, #64]	; (177d0 <bt_id_set_scan_own_addr+0x44>)
   17790:	781b      	ldrb	r3, [r3, #0]
   17792:	700b      	strb	r3, [r1, #0]
{
   17794:	4606      	mov	r6, r0
   17796:	460d      	mov	r5, r1
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
   17798:	f008 f879 	bl	1f88e <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
   1779c:	b9a0      	cbnz	r0, 177c8 <bt_id_set_scan_own_addr+0x3c>
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   1779e:	f008 f882 	bl	1f8a6 <bt_id_set_private_addr>
			if (err) {
   177a2:	4604      	mov	r4, r0
   177a4:	b170      	cbz	r0, 177c4 <bt_id_set_scan_own_addr+0x38>
				if (active_scan || !is_adv_using_rand_addr()) {
   177a6:	b986      	cbnz	r6, 177ca <bt_id_set_scan_own_addr+0x3e>
   177a8:	f008 f871 	bl	1f88e <is_adv_using_rand_addr>
   177ac:	b168      	cbz	r0, 177ca <bt_id_set_scan_own_addr+0x3e>
   177ae:	4a09      	ldr	r2, [pc, #36]	; (177d4 <bt_id_set_scan_own_addr+0x48>)
   177b0:	4b09      	ldr	r3, [pc, #36]	; (177d8 <bt_id_set_scan_own_addr+0x4c>)
					return err;
				}

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
   177b2:	480a      	ldr	r0, [pc, #40]	; (177dc <bt_id_set_scan_own_addr+0x50>)
   177b4:	1ad2      	subs	r2, r2, r3
   177b6:	08d2      	lsrs	r2, r2, #3
   177b8:	0192      	lsls	r2, r2, #6
   177ba:	f042 0202 	orr.w	r2, r2, #2
   177be:	4621      	mov	r1, r4
   177c0:	f007 fc69 	bl	1f096 <log_1>
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
   177c4:	2301      	movs	r3, #1
   177c6:	702b      	strb	r3, [r5, #0]
				return err;
			}
		}
	}

	return 0;
   177c8:	2400      	movs	r4, #0
}
   177ca:	4620      	mov	r0, r4
   177cc:	bd70      	pop	{r4, r5, r6, pc}
   177ce:	bf00      	nop
   177d0:	20000330 	.word	0x20000330
   177d4:	00020da0 	.word	0x00020da0
   177d8:	00020d88 	.word	0x00020d88
   177dc:	00022038 	.word	0x00022038

000177e0 <bt_id_set_adv_own_addr>:
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   177e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   177e4:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   177e8:	7806      	ldrb	r6, [r0, #0]
{
   177ea:	4680      	mov	r8, r0
   177ec:	460d      	mov	r5, r1
   177ee:	4691      	mov	r9, r2
   177f0:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   177f2:	d02b      	beq.n	1784c <bt_id_set_adv_own_addr+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   177f4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 178ac <bt_id_set_adv_own_addr+0xcc>
   177f8:	b12a      	cbz	r2, 17806 <bt_id_set_adv_own_addr+0x26>
   177fa:	0688      	lsls	r0, r1, #26
   177fc:	d503      	bpl.n	17806 <bt_id_set_adv_own_addr+0x26>
   177fe:	f898 30d0 	ldrb.w	r3, [r8, #208]	; 0xd0
   17802:	0659      	lsls	r1, r3, #25
   17804:	d54e      	bpl.n	178a4 <bt_id_set_adv_own_addr+0xc4>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   17806:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
   1780a:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   1780e:	f818 3003 	ldrb.w	r3, [r8, r3]
   17812:	2b01      	cmp	r3, #1
   17814:	d009      	beq.n	1782a <bt_id_set_adv_own_addr+0x4a>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   17816:	ebaa 0606 	sub.w	r6, sl, r6
   1781a:	f818 3006 	ldrb.w	r3, [r8, r6]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1781e:	f1b9 0f00 	cmp.w	r9, #0
   17822:	d10e      	bne.n	17842 <bt_id_set_adv_own_addr+0x62>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   17824:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   17826:	2400      	movs	r4, #0
   17828:	e008      	b.n	1783c <bt_id_set_adv_own_addr+0x5c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1782a:	2007      	movs	r0, #7
   1782c:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
   17830:	4440      	add	r0, r8
   17832:	f7ff fe03 	bl	1743c <set_random_address>
				if (err) {
   17836:	4604      	mov	r4, r0
   17838:	2800      	cmp	r0, #0
   1783a:	d0ec      	beq.n	17816 <bt_id_set_adv_own_addr+0x36>
}
   1783c:	4620      	mov	r0, r4
   1783e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   17842:	06aa      	lsls	r2, r5, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   17844:	bf48      	it	mi
   17846:	f043 0302 	orrmi.w	r3, r3, #2
   1784a:	e7eb      	b.n	17824 <bt_id_set_adv_own_addr+0x44>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   1784c:	f011 0504 	ands.w	r5, r1, #4
   17850:	d013      	beq.n	1787a <bt_id_set_adv_own_addr+0x9a>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   17852:	4d16      	ldr	r5, [pc, #88]	; (178ac <bt_id_set_adv_own_addr+0xcc>)
   17854:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
   17858:	ea4f 08c6 	mov.w	r8, r6, lsl #3
   1785c:	5ceb      	ldrb	r3, [r5, r3]
   1785e:	2b01      	cmp	r3, #1
   17860:	d106      	bne.n	17870 <bt_id_set_adv_own_addr+0x90>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   17862:	2007      	movs	r0, #7
   17864:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
   17868:	4428      	add	r0, r5
   1786a:	f7ff fde7 	bl	1743c <set_random_address>
   1786e:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
   17870:	eba8 0606 	sub.w	r6, r8, r6
   17874:	5dab      	ldrb	r3, [r5, r6]
   17876:	703b      	strb	r3, [r7, #0]
   17878:	e7e0      	b.n	1783c <bt_id_set_adv_own_addr+0x5c>
   1787a:	480d      	ldr	r0, [pc, #52]	; (178b0 <bt_id_set_adv_own_addr+0xd0>)
   1787c:	f008 f801 	bl	1f882 <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   17880:	0683      	lsls	r3, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   17882:	f3c0 1640 	ubfx	r6, r0, #5, #1
   17886:	d502      	bpl.n	1788e <bt_id_set_adv_own_addr+0xae>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   17888:	4628      	mov	r0, r5
   1788a:	f008 f92c 	bl	1fae6 <bt_le_scan_set_enable>
			err = bt_id_set_adv_private_addr(adv);
   1788e:	4640      	mov	r0, r8
   17890:	f008 f81b 	bl	1f8ca <bt_id_set_adv_private_addr>
   17894:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
   17896:	2001      	movs	r0, #1
   17898:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
   1789a:	2e00      	cmp	r6, #0
   1789c:	d0ce      	beq.n	1783c <bt_id_set_adv_own_addr+0x5c>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   1789e:	f008 f922 	bl	1fae6 <bt_le_scan_set_enable>
		if (err) {
   178a2:	e7cb      	b.n	1783c <bt_id_set_adv_own_addr+0x5c>
			return -ENOTSUP;
   178a4:	f06f 0485 	mvn.w	r4, #133	; 0x85
   178a8:	e7c8      	b.n	1783c <bt_id_set_adv_own_addr+0x5c>
   178aa:	bf00      	nop
   178ac:	20000330 	.word	0x20000330
   178b0:	200003fc 	.word	0x200003fc

000178b4 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   178b4:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   178b6:	4d16      	ldr	r5, [pc, #88]	; (17910 <bt_id_init+0x5c>)
   178b8:	79eb      	ldrb	r3, [r5, #7]
   178ba:	b113      	cbz	r3, 178c2 <bt_id_init+0xe>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   178bc:	2400      	movs	r4, #0
}
   178be:	4620      	mov	r0, r4
   178c0:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_setup_public_id_addr();
   178c2:	f7ff fecd 	bl	17660 <bt_setup_public_id_addr>
		if (err) {
   178c6:	4604      	mov	r4, r0
   178c8:	b150      	cbz	r0, 178e0 <bt_id_init+0x2c>
   178ca:	4912      	ldr	r1, [pc, #72]	; (17914 <bt_id_init+0x60>)
   178cc:	4b12      	ldr	r3, [pc, #72]	; (17918 <bt_id_init+0x64>)
			BT_ERR("Unable to set identity address");
   178ce:	4813      	ldr	r0, [pc, #76]	; (1791c <bt_id_init+0x68>)
   178d0:	1ac9      	subs	r1, r1, r3
   178d2:	08c9      	lsrs	r1, r1, #3
   178d4:	0189      	lsls	r1, r1, #6
   178d6:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to set random address");
   178da:	f007 fbcf 	bl	1f07c <log_0>
			return err;
   178de:	e7ee      	b.n	178be <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   178e0:	79eb      	ldrb	r3, [r5, #7]
   178e2:	2b00      	cmp	r3, #0
   178e4:	d1ea      	bne.n	178bc <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   178e6:	f7ff ff25 	bl	17734 <bt_setup_random_id_addr>
		if (err) {
   178ea:	4604      	mov	r4, r0
   178ec:	2800      	cmp	r0, #0
   178ee:	d1ec      	bne.n	178ca <bt_id_init+0x16>
		err = set_random_address(&bt_dev.id_addr[0].a);
   178f0:	1c68      	adds	r0, r5, #1
   178f2:	f7ff fda3 	bl	1743c <set_random_address>
		if (err) {
   178f6:	4604      	mov	r4, r0
   178f8:	2800      	cmp	r0, #0
   178fa:	d0e0      	beq.n	178be <bt_id_init+0xa>
   178fc:	4905      	ldr	r1, [pc, #20]	; (17914 <bt_id_init+0x60>)
   178fe:	4b06      	ldr	r3, [pc, #24]	; (17918 <bt_id_init+0x64>)
			BT_ERR("Unable to set random address");
   17900:	4807      	ldr	r0, [pc, #28]	; (17920 <bt_id_init+0x6c>)
   17902:	1ac9      	subs	r1, r1, r3
   17904:	08c9      	lsrs	r1, r1, #3
   17906:	0189      	lsls	r1, r1, #6
   17908:	f041 0101 	orr.w	r1, r1, #1
   1790c:	e7e5      	b.n	178da <bt_id_init+0x26>
   1790e:	bf00      	nop
   17910:	20000330 	.word	0x20000330
   17914:	00020da0 	.word	0x00020da0
   17918:	00020d88 	.word	0x00020d88
   1791c:	0002206e 	.word	0x0002206e
   17920:	0002208d 	.word	0x0002208d

00017924 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   17924:	6843      	ldr	r3, [r0, #4]
{
   17926:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17928:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1792a:	0558      	lsls	r0, r3, #21
   1792c:	d502      	bpl.n	17934 <valid_adv_param+0x10>
		return false;
   1792e:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   17930:	b003      	add	sp, #12
   17932:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   17934:	6922      	ldr	r2, [r4, #16]
   17936:	b10a      	cbz	r2, 1793c <valid_adv_param+0x18>
   17938:	07d9      	lsls	r1, r3, #31
   1793a:	d5f8      	bpl.n	1792e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   1793c:	4d1a      	ldr	r5, [pc, #104]	; (179a8 <valid_adv_param+0x84>)
   1793e:	7820      	ldrb	r0, [r4, #0]
   17940:	79eb      	ldrb	r3, [r5, #7]
   17942:	4283      	cmp	r3, r0
   17944:	d9f3      	bls.n	1792e <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   17946:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1794a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   1794c:	2207      	movs	r2, #7
   1794e:	4669      	mov	r1, sp
   17950:	4428      	add	r0, r5
   17952:	9300      	str	r3, [sp, #0]
   17954:	f8cd 3003 	str.w	r3, [sp, #3]
   17958:	f007 ff29 	bl	1f7ae <memcmp>
	if (param->id >= bt_dev.id_count ||
   1795c:	2800      	cmp	r0, #0
   1795e:	d0e6      	beq.n	1792e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   17960:	6860      	ldr	r0, [r4, #4]
   17962:	07c2      	lsls	r2, r0, #31
   17964:	d406      	bmi.n	17974 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   17966:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   1796a:	2b08      	cmp	r3, #8
   1796c:	d802      	bhi.n	17974 <valid_adv_param+0x50>
   1796e:	68a3      	ldr	r3, [r4, #8]
   17970:	2b9f      	cmp	r3, #159	; 0x9f
   17972:	d9dc      	bls.n	1792e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   17974:	f010 0f30 	tst.w	r0, #48	; 0x30
   17978:	d002      	beq.n	17980 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   1797a:	6923      	ldr	r3, [r4, #16]
   1797c:	2b00      	cmp	r3, #0
   1797e:	d0d6      	beq.n	1792e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   17980:	06c3      	lsls	r3, r0, #27
   17982:	d401      	bmi.n	17988 <valid_adv_param+0x64>
   17984:	6923      	ldr	r3, [r4, #16]
   17986:	b943      	cbnz	r3, 1799a <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   17988:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   1798c:	429a      	cmp	r2, r3
   1798e:	d8ce      	bhi.n	1792e <valid_adv_param+0xa>
   17990:	2a1f      	cmp	r2, #31
   17992:	d9cc      	bls.n	1792e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   17994:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   17998:	d8c9      	bhi.n	1792e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   1799a:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   1799e:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   179a2:	bf18      	it	ne
   179a4:	2001      	movne	r0, #1
   179a6:	e7c3      	b.n	17930 <valid_adv_param+0xc>
   179a8:	20000330 	.word	0x20000330

000179ac <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   179ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179b0:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   179b2:	2120      	movs	r1, #32
{
   179b4:	4682      	mov	sl, r0
   179b6:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   179b8:	f7ff f83c 	bl	16a34 <bt_hci_cmd_create>
	if (!buf) {
   179bc:	4606      	mov	r6, r0
   179be:	2800      	cmp	r0, #0
   179c0:	d05c      	beq.n	17a7c <hci_set_ad+0xd0>
	return net_buf_simple_add(&buf->b, len);
   179c2:	2120      	movs	r1, #32
   179c4:	3008      	adds	r0, #8
   179c6:	f008 f8c5 	bl	1fb54 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   179ca:	2220      	movs	r2, #32
   179cc:	2100      	movs	r1, #0
   179ce:	4681      	mov	r9, r0
   179d0:	f007 ff1f 	bl	1f812 <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   179d4:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   179d8:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   179dc:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   179de:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   179e0:	f8d4 8000 	ldr.w	r8, [r4]
   179e4:	2300      	movs	r3, #0
   179e6:	6862      	ldr	r2, [r4, #4]
   179e8:	4293      	cmp	r3, r2
   179ea:	d30d      	bcc.n	17a08 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   179ec:	9b00      	ldr	r3, [sp, #0]
   179ee:	3408      	adds	r4, #8
   179f0:	429c      	cmp	r4, r3
   179f2:	d1f5      	bne.n	179e0 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   179f4:	2200      	movs	r2, #0
   179f6:	4631      	mov	r1, r6
   179f8:	4650      	mov	r0, sl
	*data_len = set_data_len;
   179fa:	f889 5000 	strb.w	r5, [r9]
}
   179fe:	b003      	add	sp, #12
   17a00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   17a04:	f7ff b84e 	b.w	16aa4 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   17a08:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   17a0c:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   17a10:	1ca8      	adds	r0, r5, #2
   17a12:	1881      	adds	r1, r0, r2
   17a14:	291f      	cmp	r1, #31
   17a16:	d91a      	bls.n	17a4e <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   17a18:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   17a1c:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
   17a20:	d101      	bne.n	17a26 <hci_set_ad+0x7a>
   17a22:	2a00      	cmp	r2, #0
   17a24:	dc11      	bgt.n	17a4a <hci_set_ad+0x9e>
   17a26:	4b17      	ldr	r3, [pc, #92]	; (17a84 <hci_set_ad+0xd8>)
   17a28:	4917      	ldr	r1, [pc, #92]	; (17a88 <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
   17a2a:	4818      	ldr	r0, [pc, #96]	; (17a8c <hci_set_ad+0xe0>)
   17a2c:	1ac9      	subs	r1, r1, r3
   17a2e:	08c9      	lsrs	r1, r1, #3
   17a30:	0189      	lsls	r1, r1, #6
   17a32:	f041 0101 	orr.w	r1, r1, #1
   17a36:	f007 fb21 	bl	1f07c <log_0>
		net_buf_unref(buf);
   17a3a:	4630      	mov	r0, r6
   17a3c:	f000 fc5a 	bl	182f4 <net_buf_unref>
					return -EINVAL;
   17a40:	f06f 0015 	mvn.w	r0, #21
}
   17a44:	b003      	add	sp, #12
   17a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   17a4a:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   17a4e:	b2d7      	uxtb	r7, r2
   17a50:	1c79      	adds	r1, r7, #1
   17a52:	f80b 1005 	strb.w	r1, [fp, r5]
   17a56:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   17a58:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   17a5a:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   17a5e:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   17a62:	f8d8 1004 	ldr.w	r1, [r8, #4]
   17a66:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   17a68:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   17a6a:	f007 fec7 	bl	1f7fc <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   17a6e:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   17a70:	443d      	add	r5, r7
   17a72:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   17a74:	3301      	adds	r3, #1
   17a76:	f108 0808 	add.w	r8, r8, #8
   17a7a:	e7b4      	b.n	179e6 <hci_set_ad+0x3a>
		return -ENOBUFS;
   17a7c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17a80:	e7e0      	b.n	17a44 <hci_set_ad+0x98>
   17a82:	bf00      	nop
   17a84:	00020d88 	.word	0x00020d88
   17a88:	00020d88 	.word	0x00020d88
   17a8c:	000220b0 	.word	0x000220b0

00017a90 <bt_le_adv_lookup_legacy>:
}
   17a90:	4800      	ldr	r0, [pc, #0]	; (17a94 <bt_le_adv_lookup_legacy+0x4>)
   17a92:	4770      	bx	lr
   17a94:	20000348 	.word	0x20000348

00017a98 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   17a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a9c:	b08d      	sub	sp, #52	; 0x34
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17a9e:	f8df a214 	ldr.w	sl, [pc, #532]	; 17cb4 <bt_le_adv_start_legacy+0x21c>
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   17aa2:	690e      	ldr	r6, [r1, #16]
{
   17aa4:	9304      	str	r3, [sp, #16]
   17aa6:	f3bf 8f5b 	dmb	ish
   17aaa:	f8da 3000 	ldr.w	r3, [sl]
   17aae:	f3bf 8f5b 	dmb	ish
	bool dir_adv = (param->peer != NULL), scannable = false;
   17ab2:	f1b6 0b00 	subs.w	fp, r6, #0
   17ab6:	bf18      	it	ne
   17ab8:	f04f 0b01 	movne.w	fp, #1
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17abc:	079f      	lsls	r7, r3, #30
{
   17abe:	4605      	mov	r5, r0
   17ac0:	460c      	mov	r4, r1
   17ac2:	4691      	mov	r9, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17ac4:	f140 80e5 	bpl.w	17c92 <bt_le_adv_start_legacy+0x1fa>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   17ac8:	4608      	mov	r0, r1
   17aca:	f7ff ff2b 	bl	17924 <valid_adv_param>
   17ace:	b928      	cbnz	r0, 17adc <bt_le_adv_start_legacy+0x44>
		return -EINVAL;
   17ad0:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   17ad4:	4658      	mov	r0, fp
   17ad6:	b00d      	add	sp, #52	; 0x34
   17ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   17adc:	4620      	mov	r0, r4
   17ade:	f7ff fd11 	bl	17504 <bt_id_adv_random_addr_check>
   17ae2:	4607      	mov	r7, r0
   17ae4:	2800      	cmp	r0, #0
   17ae6:	d0f3      	beq.n	17ad0 <bt_le_adv_start_legacy+0x38>
   17ae8:	f3bf 8f5b 	dmb	ish
   17aec:	692b      	ldr	r3, [r5, #16]
   17aee:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   17af2:	0658      	lsls	r0, r3, #25
   17af4:	f105 0810 	add.w	r8, r5, #16
   17af8:	f3c3 1180 	ubfx	r1, r3, #6, #1
   17afc:	f100 80cc 	bmi.w	17c98 <bt_le_adv_start_legacy+0x200>
	(void)memset(&set_param, 0, sizeof(set_param));
   17b00:	220f      	movs	r2, #15
   17b02:	a808      	add	r0, sp, #32
   17b04:	9105      	str	r1, [sp, #20]
   17b06:	f007 fe84 	bl	1f812 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   17b0a:	68a3      	ldr	r3, [r4, #8]
   17b0c:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
   17b10:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   17b12:	68e3      	ldr	r3, [r4, #12]
   17b14:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   17b18:	f007 fef2 	bl	1f900 <get_adv_channel_map>
	if (adv->id != param->id) {
   17b1c:	782a      	ldrb	r2, [r5, #0]
   17b1e:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   17b20:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
   17b22:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   17b26:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   17b28:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
   17b2c:	d004      	beq.n	17b38 <bt_le_adv_start_legacy+0xa0>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17b2e:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   17b32:	4650      	mov	r0, sl
   17b34:	f007 fef3 	bl	1f91e <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   17b38:	4a5a      	ldr	r2, [pc, #360]	; (17ca4 <bt_le_adv_start_legacy+0x20c>)
	adv->id = param->id;
   17b3a:	7823      	ldrb	r3, [r4, #0]
   17b3c:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   17b3e:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   17b42:	6861      	ldr	r1, [r4, #4]
   17b44:	465a      	mov	r2, fp
   17b46:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   17b4a:	4628      	mov	r0, r5
   17b4c:	f7ff fe48 	bl	177e0 <bt_id_set_adv_own_addr>
	if (err) {
   17b50:	4683      	mov	fp, r0
   17b52:	2800      	cmp	r0, #0
   17b54:	d1be      	bne.n	17ad4 <bt_le_adv_start_legacy+0x3c>
	if (dir_adv) {
   17b56:	f105 0009 	add.w	r0, r5, #9
   17b5a:	2e00      	cmp	r6, #0
   17b5c:	d042      	beq.n	17be4 <bt_le_adv_start_legacy+0x14c>
	memcpy(dst, src, sizeof(*dst));
   17b5e:	6921      	ldr	r1, [r4, #16]
   17b60:	2207      	movs	r2, #7
   17b62:	f007 fe4b 	bl	1f7fc <memcpy>
	name_type = get_adv_name_type_param(param);
   17b66:	4620      	mov	r0, r4
   17b68:	f007 ff76 	bl	1fa58 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   17b6c:	6863      	ldr	r3, [r4, #4]
   17b6e:	07da      	lsls	r2, r3, #31
	name_type = get_adv_name_type_param(param);
   17b70:	4682      	mov	sl, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   17b72:	d540      	bpl.n	17bf6 <bt_le_adv_start_legacy+0x15e>
		if (dir_adv) {
   17b74:	2e00      	cmp	r6, #0
   17b76:	d03b      	beq.n	17bf0 <bt_le_adv_start_legacy+0x158>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   17b78:	f013 0f10 	tst.w	r3, #16
   17b7c:	bf14      	ite	ne
   17b7e:	2304      	movne	r3, #4
   17b80:	2301      	moveq	r3, #1
   17b82:	6921      	ldr	r1, [r4, #16]
   17b84:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   17b88:	2207      	movs	r2, #7
   17b8a:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   17b8e:	f007 fe35 	bl	1f7fc <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   17b92:	2700      	movs	r7, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   17b94:	210f      	movs	r1, #15
   17b96:	f242 0006 	movw	r0, #8198	; 0x2006
   17b9a:	f7fe ff4b 	bl	16a34 <bt_hci_cmd_create>
	if (!buf) {
   17b9e:	4683      	mov	fp, r0
   17ba0:	2800      	cmp	r0, #0
   17ba2:	d07c      	beq.n	17c9e <bt_le_adv_start_legacy+0x206>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17ba4:	220f      	movs	r2, #15
   17ba6:	a908      	add	r1, sp, #32
   17ba8:	3008      	adds	r0, #8
   17baa:	f007 ffd9 	bl	1fb60 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   17bae:	4659      	mov	r1, fp
   17bb0:	2200      	movs	r2, #0
   17bb2:	f242 0006 	movw	r0, #8198	; 0x2006
   17bb6:	f7fe ff75 	bl	16aa4 <bt_hci_cmd_send_sync>
	if (err) {
   17bba:	4683      	mov	fp, r0
   17bbc:	2800      	cmp	r0, #0
   17bbe:	d189      	bne.n	17ad4 <bt_le_adv_start_legacy+0x3c>
	if (!dir_adv) {
   17bc0:	b34e      	cbz	r6, 17c16 <bt_le_adv_start_legacy+0x17e>
	return bt_le_adv_set_enable_legacy(adv, enable);
   17bc2:	2101      	movs	r1, #1
   17bc4:	4628      	mov	r0, r5
   17bc6:	f007 ff57 	bl	1fa78 <bt_le_adv_set_enable_legacy>
	if (err) {
   17bca:	4683      	mov	fp, r0
   17bcc:	b388      	cbz	r0, 17c32 <bt_le_adv_start_legacy+0x19a>
   17bce:	4b36      	ldr	r3, [pc, #216]	; (17ca8 <bt_le_adv_start_legacy+0x210>)
   17bd0:	4936      	ldr	r1, [pc, #216]	; (17cac <bt_le_adv_start_legacy+0x214>)
		BT_ERR("Failed to start advertiser");
   17bd2:	4837      	ldr	r0, [pc, #220]	; (17cb0 <bt_le_adv_start_legacy+0x218>)
   17bd4:	1ac9      	subs	r1, r1, r3
   17bd6:	08c9      	lsrs	r1, r1, #3
   17bd8:	0189      	lsls	r1, r1, #6
   17bda:	f041 0101 	orr.w	r1, r1, #1
   17bde:	f007 fa4d 	bl	1f07c <log_0>
		return err;
   17be2:	e777      	b.n	17ad4 <bt_le_adv_start_legacy+0x3c>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   17be4:	9606      	str	r6, [sp, #24]
   17be6:	2207      	movs	r2, #7
   17be8:	f8cd 601b 	str.w	r6, [sp, #27]
   17bec:	a906      	add	r1, sp, #24
   17bee:	e7b8      	b.n	17b62 <bt_le_adv_start_legacy+0xca>
			set_param.type = BT_HCI_ADV_IND;
   17bf0:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
   17bf4:	e7ce      	b.n	17b94 <bt_le_adv_start_legacy+0xfc>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   17bf6:	0598      	lsls	r0, r3, #22
   17bf8:	d404      	bmi.n	17c04 <bt_le_adv_start_legacy+0x16c>
   17bfa:	9b16      	ldr	r3, [sp, #88]	; 0x58
   17bfc:	b913      	cbnz	r3, 17c04 <bt_le_adv_start_legacy+0x16c>
   17bfe:	f1ba 0f02 	cmp.w	sl, #2
   17c02:	d103      	bne.n	17c0c <bt_le_adv_start_legacy+0x174>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   17c04:	2302      	movs	r3, #2
   17c06:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   17c0a:	e7c3      	b.n	17b94 <bt_le_adv_start_legacy+0xfc>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   17c0c:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   17c0e:	9f16      	ldr	r7, [sp, #88]	; 0x58
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   17c10:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   17c14:	e7be      	b.n	17b94 <bt_le_adv_start_legacy+0xfc>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   17c16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   17c18:	9300      	str	r3, [sp, #0]
   17c1a:	e9cd 7a01 	strd	r7, sl, [sp, #4]
   17c1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   17c20:	9a04      	ldr	r2, [sp, #16]
   17c22:	4649      	mov	r1, r9
   17c24:	4628      	mov	r0, r5
   17c26:	f007 fea0 	bl	1f96a <le_adv_update.constprop.0>
		if (err) {
   17c2a:	4683      	mov	fp, r0
   17c2c:	2800      	cmp	r0, #0
   17c2e:	d0c8      	beq.n	17bc2 <bt_le_adv_start_legacy+0x12a>
   17c30:	e750      	b.n	17ad4 <bt_le_adv_start_legacy+0x3c>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   17c32:	bb66      	cbnz	r6, 17c8e <bt_le_adv_start_legacy+0x1f6>
   17c34:	6862      	ldr	r2, [r4, #4]
   17c36:	f082 0202 	eor.w	r2, r2, #2
   17c3a:	f3c2 0240 	ubfx	r2, r2, #1, #1
   17c3e:	4640      	mov	r0, r8
   17c40:	210d      	movs	r1, #13
   17c42:	f007 fe7b 	bl	1f93c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   17c46:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   17c4a:	425a      	negs	r2, r3
   17c4c:	415a      	adcs	r2, r3
   17c4e:	4640      	mov	r0, r8
   17c50:	2107      	movs	r1, #7
   17c52:	f007 fe73 	bl	1f93c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   17c56:	f1aa 0102 	sub.w	r1, sl, #2
   17c5a:	424a      	negs	r2, r1
   17c5c:	414a      	adcs	r2, r1
   17c5e:	4640      	mov	r0, r8
   17c60:	2108      	movs	r1, #8
   17c62:	f007 fe6b 	bl	1f93c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   17c66:	6862      	ldr	r2, [r4, #4]
   17c68:	4640      	mov	r0, r8
   17c6a:	f002 0201 	and.w	r2, r2, #1
   17c6e:	2109      	movs	r1, #9
   17c70:	f007 fe64 	bl	1f93c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   17c74:	463a      	mov	r2, r7
   17c76:	4640      	mov	r0, r8
   17c78:	210a      	movs	r1, #10
   17c7a:	f007 fe5f 	bl	1f93c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   17c7e:	6862      	ldr	r2, [r4, #4]
   17c80:	210c      	movs	r1, #12
   17c82:	f3c2 0280 	ubfx	r2, r2, #2, #1
   17c86:	4640      	mov	r0, r8
   17c88:	f007 fe58 	bl	1f93c <atomic_set_bit_to>
	return 0;
   17c8c:	e722      	b.n	17ad4 <bt_le_adv_start_legacy+0x3c>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   17c8e:	4602      	mov	r2, r0
   17c90:	e7d5      	b.n	17c3e <bt_le_adv_start_legacy+0x1a6>
		return -EAGAIN;
   17c92:	f06f 0b0a 	mvn.w	fp, #10
   17c96:	e71d      	b.n	17ad4 <bt_le_adv_start_legacy+0x3c>
		return -EALREADY;
   17c98:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   17c9c:	e71a      	b.n	17ad4 <bt_le_adv_start_legacy+0x3c>
		return -ENOBUFS;
   17c9e:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   17ca2:	e717      	b.n	17ad4 <bt_le_adv_start_legacy+0x3c>
   17ca4:	20000330 	.word	0x20000330
   17ca8:	00020d88 	.word	0x00020d88
   17cac:	00020d88 	.word	0x00020d88
   17cb0:	000220c9 	.word	0x000220c9
   17cb4:	200003fc 	.word	0x200003fc

00017cb8 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   17cb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   17cba:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   17cbc:	9a06      	ldr	r2, [sp, #24]
{
   17cbe:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   17cc0:	e9cd 3200 	strd	r3, r2, [sp]
   17cc4:	462b      	mov	r3, r5
   17cc6:	460a      	mov	r2, r1
   17cc8:	4601      	mov	r1, r0
   17cca:	4811      	ldr	r0, [pc, #68]	; (17d10 <bt_le_adv_start+0x58>)
   17ccc:	f7ff fee4 	bl	17a98 <bt_le_adv_start_legacy>
   17cd0:	4621      	mov	r1, r4
   17cd2:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   17cd4:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   17cd6:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   17cda:	429d      	cmp	r5, r3
   17cdc:	d102      	bne.n	17ce4 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   17cde:	4630      	mov	r0, r6
   17ce0:	b002      	add	sp, #8
   17ce2:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   17ce4:	880a      	ldrh	r2, [r1, #0]
   17ce6:	4282      	cmp	r2, r0
   17ce8:	d104      	bne.n	17cf4 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   17cea:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   17cec:	b112      	cbz	r2, 17cf4 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   17cee:	7812      	ldrb	r2, [r2, #0]
   17cf0:	07d2      	lsls	r2, r2, #31
   17cf2:	d402      	bmi.n	17cfa <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   17cf4:	3301      	adds	r3, #1
   17cf6:	3108      	adds	r1, #8
   17cf8:	e7ef      	b.n	17cda <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   17cfa:	4906      	ldr	r1, [pc, #24]	; (17d14 <bt_le_adv_start+0x5c>)
   17cfc:	4806      	ldr	r0, [pc, #24]	; (17d18 <bt_le_adv_start+0x60>)
   17cfe:	f008 fbbc 	bl	2047a <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   17d02:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   17d06:	2300      	movs	r3, #0
   17d08:	4803      	ldr	r0, [pc, #12]	; (17d18 <bt_le_adv_start+0x60>)
   17d0a:	f003 fb5b 	bl	1b3c4 <k_work_reschedule>
   17d0e:	e7e6      	b.n	17cde <bt_le_adv_start+0x26>
   17d10:	20000348 	.word	0x20000348
   17d14:	00017d7d 	.word	0x00017d7d
   17d18:	20000360 	.word	0x20000360

00017d1c <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   17d1c:	b538      	push	{r3, r4, r5, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   17d1e:	4d16      	ldr	r5, [pc, #88]	; (17d78 <bt_le_adv_stop+0x5c>)
   17d20:	4628      	mov	r0, r5
   17d22:	f007 fece 	bl	1fac2 <bt_le_lim_adv_cancel_timeout>
   17d26:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   17d2a:	f105 0010 	add.w	r0, r5, #16
   17d2e:	f007 fdf6 	bl	1f91e <atomic_and>
   17d32:	f3bf 8f5b 	dmb	ish
   17d36:	692b      	ldr	r3, [r5, #16]
   17d38:	f3bf 8f5b 	dmb	ish
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   17d3c:	065a      	lsls	r2, r3, #25
   17d3e:	d402      	bmi.n	17d46 <bt_le_adv_stop+0x2a>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		bt_le_adv_delete_legacy();
		return 0;
   17d40:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   17d42:	4620      	mov	r0, r4
   17d44:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_le_adv_set_enable_legacy(adv, false);
   17d46:	2100      	movs	r1, #0
   17d48:	4628      	mov	r0, r5
   17d4a:	f007 fe95 	bl	1fa78 <bt_le_adv_set_enable_legacy>
		if (err) {
   17d4e:	4604      	mov	r4, r0
   17d50:	2800      	cmp	r0, #0
   17d52:	d1f6      	bne.n	17d42 <bt_le_adv_stop+0x26>
   17d54:	f3bf 8f5b 	dmb	ish
   17d58:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   17d5c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   17d60:	069b      	lsls	r3, r3, #26
   17d62:	d5ed      	bpl.n	17d40 <bt_le_adv_stop+0x24>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   17d64:	f007 febf 	bl	1fae6 <bt_le_scan_set_enable>
			bt_id_set_private_addr(BT_ID_DEFAULT);
   17d68:	4620      	mov	r0, r4
   17d6a:	f007 fd9c 	bl	1f8a6 <bt_id_set_private_addr>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   17d6e:	2001      	movs	r0, #1
   17d70:	f007 feb9 	bl	1fae6 <bt_le_scan_set_enable>
   17d74:	e7e5      	b.n	17d42 <bt_le_adv_stop+0x26>
   17d76:	bf00      	nop
   17d78:	20000348 	.word	0x20000348

00017d7c <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   17d7c:	b508      	push	{r3, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   17d7e:	f7ff ffcd 	bl	17d1c <bt_le_adv_stop>
   17d82:	4b06      	ldr	r3, [pc, #24]	; (17d9c <adv_timeout+0x20>)
   17d84:	4a06      	ldr	r2, [pc, #24]	; (17da0 <adv_timeout+0x24>)
   17d86:	1ad2      	subs	r2, r2, r3
   17d88:	08d2      	lsrs	r2, r2, #3
#endif
	BT_WARN("Failed to stop advertising: %d", err);
   17d8a:	0192      	lsls	r2, r2, #6
	err = bt_le_adv_stop();
   17d8c:	4601      	mov	r1, r0
}
   17d8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_WARN("Failed to stop advertising: %d", err);
   17d92:	4804      	ldr	r0, [pc, #16]	; (17da4 <adv_timeout+0x28>)
   17d94:	f042 0202 	orr.w	r2, r2, #2
   17d98:	f007 b97d 	b.w	1f096 <log_1>
   17d9c:	00020d88 	.word	0x00020d88
   17da0:	00020d88 	.word	0x00020d88
   17da4:	000220e4 	.word	0x000220e4

00017da8 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   17da8:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   17daa:	2102      	movs	r1, #2
{
   17dac:	b087      	sub	sp, #28
   17dae:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   17db0:	f242 000c 	movw	r0, #8204	; 0x200c
   17db4:	f7fe fe3e 	bl	16a34 <bt_hci_cmd_create>
	if (!buf) {
   17db8:	4605      	mov	r5, r0
   17dba:	b318      	cbz	r0, 17e04 <bt_le_scan_set_enable_legacy+0x5c>
	return net_buf_simple_add(&buf->b, len);
   17dbc:	2102      	movs	r1, #2
   17dbe:	3008      	adds	r0, #8
   17dc0:	f007 fec8 	bl	1fb54 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   17dc4:	2c01      	cmp	r4, #1
   17dc6:	d11b      	bne.n	17e00 <bt_le_scan_set_enable_legacy+0x58>
   17dc8:	f3bf 8f5b 	dmb	ish
   17dcc:	4b0f      	ldr	r3, [pc, #60]	; (17e0c <bt_le_scan_set_enable_legacy+0x64>)
   17dce:	681b      	ldr	r3, [r3, #0]
   17dd0:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   17dd4:	f3c3 2300 	ubfx	r3, r3, #8, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   17dd8:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   17dda:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   17ddc:	7004      	strb	r4, [r0, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   17dde:	425c      	negs	r4, r3
   17de0:	415c      	adcs	r4, r3
   17de2:	4a0a      	ldr	r2, [pc, #40]	; (17e0c <bt_le_scan_set_enable_legacy+0x64>)
   17de4:	9400      	str	r4, [sp, #0]
   17de6:	a903      	add	r1, sp, #12
   17de8:	4628      	mov	r0, r5
   17dea:	2305      	movs	r3, #5
   17dec:	f7fe fe10 	bl	16a10 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   17df0:	2200      	movs	r2, #0
   17df2:	4629      	mov	r1, r5
   17df4:	f242 000c 	movw	r0, #8204	; 0x200c
   17df8:	f7fe fe54 	bl	16aa4 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   17dfc:	b007      	add	sp, #28
   17dfe:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   17e00:	2300      	movs	r3, #0
   17e02:	e7e9      	b.n	17dd8 <bt_le_scan_set_enable_legacy+0x30>
		return -ENOBUFS;
   17e04:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17e08:	e7f8      	b.n	17dfc <bt_le_scan_set_enable_legacy+0x54>
   17e0a:	bf00      	nop
   17e0c:	200003fc 	.word	0x200003fc

00017e10 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   17e10:	4b01      	ldr	r3, [pc, #4]	; (17e18 <bt_scan_reset+0x8>)
   17e12:	2200      	movs	r2, #0
   17e14:	601a      	str	r2, [r3, #0]
}
   17e16:	4770      	bx	lr
   17e18:	20001f44 	.word	0x20001f44

00017e1c <bt_le_scan_update>:
   17e1c:	4b0a      	ldr	r3, [pc, #40]	; (17e48 <bt_le_scan_update+0x2c>)
   17e1e:	f3bf 8f5b 	dmb	ish
   17e22:	681a      	ldr	r2, [r3, #0]
   17e24:	f3bf 8f5b 	dmb	ish
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   17e28:	f3c2 1080 	ubfx	r0, r2, #6, #1
   17e2c:	0652      	lsls	r2, r2, #25
   17e2e:	d408      	bmi.n	17e42 <bt_le_scan_update+0x26>
   17e30:	f3bf 8f5b 	dmb	ish
   17e34:	681b      	ldr	r3, [r3, #0]
   17e36:	f3bf 8f5b 	dmb	ish
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   17e3a:	069b      	lsls	r3, r3, #26
   17e3c:	d501      	bpl.n	17e42 <bt_le_scan_update+0x26>
	return bt_le_scan_set_enable_legacy(enable);
   17e3e:	f7ff bfb3 	b.w	17da8 <bt_le_scan_set_enable_legacy>
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   17e42:	2000      	movs	r0, #0
   17e44:	4770      	bx	lr
   17e46:	bf00      	nop
   17e48:	200003fc 	.word	0x200003fc

00017e4c <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   17e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   17e50:	f100 0808 	add.w	r8, r0, #8
   17e54:	b08b      	sub	sp, #44	; 0x2c
   17e56:	4604      	mov	r4, r0
   17e58:	4640      	mov	r0, r8
   17e5a:	f007 fea2 	bl	1fba2 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
   17e5e:	f8df b17c 	ldr.w	fp, [pc, #380]	; 17fdc <bt_hci_le_adv_report+0x190>
   17e62:	4606      	mov	r6, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   17e64:	b166      	cbz	r6, 17e80 <bt_hci_le_adv_report+0x34>
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
   17e66:	89a3      	ldrh	r3, [r4, #12]
   17e68:	2b08      	cmp	r3, #8
   17e6a:	d80c      	bhi.n	17e86 <bt_hci_le_adv_report+0x3a>
   17e6c:	4955      	ldr	r1, [pc, #340]	; (17fc4 <bt_hci_le_adv_report+0x178>)
   17e6e:	4b56      	ldr	r3, [pc, #344]	; (17fc8 <bt_hci_le_adv_report+0x17c>)
			BT_ERR("Unexpected end of buffer");
   17e70:	4856      	ldr	r0, [pc, #344]	; (17fcc <bt_hci_le_adv_report+0x180>)
   17e72:	1ac9      	subs	r1, r1, r3
   17e74:	08c9      	lsrs	r1, r1, #3
   17e76:	0189      	lsls	r1, r1, #6
   17e78:	f041 0101 	orr.w	r1, r1, #1
   17e7c:	f007 f8fe 	bl	1f07c <log_0>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   17e80:	b00b      	add	sp, #44	; 0x2c
   17e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   17e86:	2109      	movs	r1, #9
   17e88:	4640      	mov	r0, r8
   17e8a:	f007 fe82 	bl	1fb92 <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
   17e8e:	f890 9008 	ldrb.w	r9, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   17e92:	237f      	movs	r3, #127	; 0x7f
   17e94:	f88d 301e 	strb.w	r3, [sp, #30]
		adv_info.rssi = evt->data[evt->length];
   17e98:	eb00 0309 	add.w	r3, r0, r9
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   17e9c:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
   17e9e:	7a5b      	ldrb	r3, [r3, #9]
   17ea0:	f88d 301d 	strb.w	r3, [sp, #29]
		adv_info.sid = BT_GAP_SID_INVALID;
   17ea4:	23ff      	movs	r3, #255	; 0xff
   17ea6:	f88d 301c 	strb.w	r3, [sp, #28]
		adv_info.interval = 0U;
   17eaa:	2300      	movs	r3, #0
   17eac:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   17eb0:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
		adv_info.adv_type = evt->evt_type;
   17eb4:	7802      	ldrb	r2, [r0, #0]
   17eb6:	f88d 201f 	strb.w	r2, [sp, #31]
   17eba:	2a04      	cmp	r2, #4
   17ebc:	bf9c      	itt	ls
   17ebe:	4b44      	ldrls	r3, [pc, #272]	; (17fd0 <bt_hci_le_adv_report+0x184>)
   17ec0:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   17ec2:	f8ad 3020 	strh.w	r3, [sp, #32]
   17ec6:	4b43      	ldr	r3, [pc, #268]	; (17fd4 <bt_hci_le_adv_report+0x188>)
   17ec8:	f3bf 8f5b 	dmb	ish
   17ecc:	681b      	ldr	r3, [r3, #0]
   17ece:	f3bf 8f5b 	dmb	ish
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   17ed2:	065a      	lsls	r2, r3, #25
   17ed4:	4605      	mov	r5, r0
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   17ed6:	f100 0101 	add.w	r1, r0, #1
   17eda:	fa1f f989 	uxth.w	r9, r9
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   17ede:	d50b      	bpl.n	17ef8 <bt_hci_le_adv_report+0xac>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   17ee0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   17ee4:	075b      	lsls	r3, r3, #29
   17ee6:	d507      	bpl.n	17ef8 <bt_hci_le_adv_report+0xac>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   17ee8:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
   17eea:	4640      	mov	r0, r8
   17eec:	3101      	adds	r1, #1
   17eee:	3e01      	subs	r6, #1
   17ef0:	f007 fe47 	bl	1fb82 <net_buf_simple_pull>
   17ef4:	b2f6      	uxtb	r6, r6
   17ef6:	e7b5      	b.n	17e64 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   17ef8:	786b      	ldrb	r3, [r5, #1]
   17efa:	1e9a      	subs	r2, r3, #2
   17efc:	2a01      	cmp	r2, #1
   17efe:	d84f      	bhi.n	17fa0 <bt_hci_le_adv_report+0x154>
   17f00:	2207      	movs	r2, #7
   17f02:	a802      	add	r0, sp, #8
   17f04:	f007 fc7a 	bl	1f7fc <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   17f08:	f89d 3008 	ldrb.w	r3, [sp, #8]
   17f0c:	3b02      	subs	r3, #2
   17f0e:	f88d 3008 	strb.w	r3, [sp, #8]
	info->addr = &id_addr;
   17f12:	ab02      	add	r3, sp, #8
   17f14:	9306      	str	r3, [sp, #24]
	if (scan_dev_found_cb) {
   17f16:	f8db 3000 	ldr.w	r3, [fp]
   17f1a:	b1b3      	cbz	r3, 17f4a <bt_hci_le_adv_report+0xfe>
	state->offset = net_buf_simple_headroom(buf);
   17f1c:	4640      	mov	r0, r8
   17f1e:	f007 fe48 	bl	1fbb2 <net_buf_simple_headroom>
	state->len = buf->len;
   17f22:	89a3      	ldrh	r3, [r4, #12]
   17f24:	9300      	str	r3, [sp, #0]
	state->offset = net_buf_simple_headroom(buf);
   17f26:	4682      	mov	sl, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   17f28:	4643      	mov	r3, r8
   17f2a:	a802      	add	r0, sp, #8
   17f2c:	f89d 201f 	ldrb.w	r2, [sp, #31]
   17f30:	f99d 101d 	ldrsb.w	r1, [sp, #29]
   17f34:	f8db 7000 	ldr.w	r7, [fp]
		buf->len = len;
   17f38:	f8a4 900c 	strh.w	r9, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   17f3c:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
   17f3e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   17f40:	9b00      	ldr	r3, [sp, #0]
   17f42:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
   17f44:	fa10 f08a 	uxtah	r0, r0, sl
   17f48:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   17f4a:	4b23      	ldr	r3, [pc, #140]	; (17fd8 <bt_hci_le_adv_report+0x18c>)
   17f4c:	681b      	ldr	r3, [r3, #0]
   17f4e:	2b00      	cmp	r3, #0
   17f50:	d0ca      	beq.n	17ee8 <bt_hci_le_adv_report+0x9c>
   17f52:	f1b3 0208 	subs.w	r2, r3, #8
   17f56:	d0c7      	beq.n	17ee8 <bt_hci_le_adv_report+0x9c>
   17f58:	681f      	ldr	r7, [r3, #0]
   17f5a:	b107      	cbz	r7, 17f5e <bt_hci_le_adv_report+0x112>
   17f5c:	3f08      	subs	r7, #8
		if (listener->recv) {
   17f5e:	6813      	ldr	r3, [r2, #0]
   17f60:	9201      	str	r2, [sp, #4]
   17f62:	b193      	cbz	r3, 17f8a <bt_hci_le_adv_report+0x13e>
	state->offset = net_buf_simple_headroom(buf);
   17f64:	4640      	mov	r0, r8
   17f66:	f007 fe24 	bl	1fbb2 <net_buf_simple_headroom>
			listener->recv(info, buf);
   17f6a:	9a01      	ldr	r2, [sp, #4]
	state->len = buf->len;
   17f6c:	89a3      	ldrh	r3, [r4, #12]
   17f6e:	6812      	ldr	r2, [r2, #0]
			buf->len = len;
   17f70:	f8a4 900c 	strh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   17f74:	4682      	mov	sl, r0
			listener->recv(info, buf);
   17f76:	4641      	mov	r1, r8
   17f78:	a806      	add	r0, sp, #24
	state->len = buf->len;
   17f7a:	9300      	str	r3, [sp, #0]
   17f7c:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   17f7e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   17f80:	9b00      	ldr	r3, [sp, #0]
   17f82:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
   17f84:	fa10 f08a 	uxtah	r0, r0, sl
   17f88:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   17f8a:	2f00      	cmp	r7, #0
   17f8c:	d0ac      	beq.n	17ee8 <bt_hci_le_adv_report+0x9c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   17f8e:	f117 0308 	adds.w	r3, r7, #8
   17f92:	d002      	beq.n	17f9a <bt_hci_le_adv_report+0x14e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17f94:	68bb      	ldr	r3, [r7, #8]
   17f96:	b103      	cbz	r3, 17f9a <bt_hci_le_adv_report+0x14e>
   17f98:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
   17f9a:	463a      	mov	r2, r7
   17f9c:	461f      	mov	r7, r3
   17f9e:	e7de      	b.n	17f5e <bt_hci_le_adv_report+0x112>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   17fa0:	2bff      	cmp	r3, #255	; 0xff
   17fa2:	d109      	bne.n	17fb8 <bt_hci_le_adv_report+0x16c>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   17fa4:	2300      	movs	r3, #0
   17fa6:	9304      	str	r3, [sp, #16]
   17fa8:	2207      	movs	r2, #7
   17faa:	f8cd 3013 	str.w	r3, [sp, #19]
   17fae:	a904      	add	r1, sp, #16
   17fb0:	a802      	add	r0, sp, #8
   17fb2:	f007 fc23 	bl	1f7fc <memcpy>
}
   17fb6:	e7ac      	b.n	17f12 <bt_hci_le_adv_report+0xc6>
		bt_addr_le_copy(&id_addr,
   17fb8:	2000      	movs	r0, #0
   17fba:	f007 fc72 	bl	1f8a2 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   17fbe:	2207      	movs	r2, #7
   17fc0:	4601      	mov	r1, r0
   17fc2:	e7f5      	b.n	17fb0 <bt_hci_le_adv_report+0x164>
   17fc4:	00020db0 	.word	0x00020db0
   17fc8:	00020d88 	.word	0x00020d88
   17fcc:	0002210a 	.word	0x0002210a
   17fd0:	0002212b 	.word	0x0002212b
   17fd4:	200003fc 	.word	0x200003fc
   17fd8:	20001f3c 	.word	0x20001f3c
   17fdc:	20001f44 	.word	0x20001f44

00017fe0 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   17fe0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   17fe4:	4d61      	ldr	r5, [pc, #388]	; (1816c <bt_le_scan_start+0x18c>)
   17fe6:	f3bf 8f5b 	dmb	ish
   17fea:	682b      	ldr	r3, [r5, #0]
   17fec:	f3bf 8f5b 	dmb	ish
   17ff0:	4606      	mov	r6, r0
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17ff2:	0798      	lsls	r0, r3, #30
{
   17ff4:	460f      	mov	r7, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17ff6:	f140 80b6 	bpl.w	18166 <bt_le_scan_start+0x186>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   17ffa:	7832      	ldrb	r2, [r6, #0]
   17ffc:	2a01      	cmp	r2, #1
   17ffe:	d905      	bls.n	1800c <bt_le_scan_start+0x2c>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   18000:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   18004:	4620      	mov	r0, r4
   18006:	b003      	add	sp, #12
   18008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   1800c:	6873      	ldr	r3, [r6, #4]
   1800e:	f033 030f 	bics.w	r3, r3, #15
   18012:	d1f5      	bne.n	18000 <bt_le_scan_start+0x20>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   18014:	8930      	ldrh	r0, [r6, #8]
   18016:	1f03      	subs	r3, r0, #4
   18018:	b29b      	uxth	r3, r3
   1801a:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   1801e:	42a3      	cmp	r3, r4
   18020:	d8ee      	bhi.n	18000 <bt_le_scan_start+0x20>
	if (param->window < 0x0004 || param->window > 0x4000) {
   18022:	8971      	ldrh	r1, [r6, #10]
   18024:	1f0b      	subs	r3, r1, #4
   18026:	b29b      	uxth	r3, r3
   18028:	42a3      	cmp	r3, r4
   1802a:	d8e9      	bhi.n	18000 <bt_le_scan_start+0x20>
	if (param->window > param->interval) {
   1802c:	4288      	cmp	r0, r1
   1802e:	d3e7      	bcc.n	18000 <bt_le_scan_start+0x20>
	if (param->type && !bt_id_scan_random_addr_check()) {
   18030:	b98a      	cbnz	r2, 18056 <bt_le_scan_start+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18032:	f3bf 8f5b 	dmb	ish
   18036:	e855 0f00 	ldrex	r0, [r5]
   1803a:	f040 0340 	orr.w	r3, r0, #64	; 0x40
   1803e:	e845 3200 	strex	r2, r3, [r5]
   18042:	2a00      	cmp	r2, #0
   18044:	d1f7      	bne.n	18036 <bt_le_scan_start+0x56>
   18046:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1804a:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   1804e:	d007      	beq.n	18060 <bt_le_scan_start+0x80>
		return -EALREADY;
   18050:	f06f 0477 	mvn.w	r4, #119	; 0x77
   18054:	e7d6      	b.n	18004 <bt_le_scan_start+0x24>
	if (param->type && !bt_id_scan_random_addr_check()) {
   18056:	f007 fc4a 	bl	1f8ee <bt_id_scan_random_addr_check>
   1805a:	2800      	cmp	r0, #0
   1805c:	d1e9      	bne.n	18032 <bt_le_scan_start+0x52>
   1805e:	e7cf      	b.n	18000 <bt_le_scan_start+0x20>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18060:	f3bf 8f5b 	dmb	ish
   18064:	682b      	ldr	r3, [r5, #0]
   18066:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   1806a:	0699      	lsls	r1, r3, #26
   1806c:	d509      	bpl.n	18082 <bt_le_scan_start+0xa2>
	return bt_le_scan_set_enable_legacy(enable);
   1806e:	f7ff fe9b 	bl	17da8 <bt_le_scan_set_enable_legacy>
		if (err) {
   18072:	4604      	mov	r4, r0
   18074:	b128      	cbz	r0, 18082 <bt_le_scan_start+0xa2>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18076:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1807a:	483c      	ldr	r0, [pc, #240]	; (1816c <bt_le_scan_start+0x18c>)
   1807c:	f007 fd24 	bl	1fac8 <atomic_and>
		return err;
   18080:	e7c0      	b.n	18004 <bt_le_scan_start+0x24>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   18082:	6873      	ldr	r3, [r6, #4]
	if (val) {
   18084:	07da      	lsls	r2, r3, #31
   18086:	d515      	bpl.n	180b4 <bt_le_scan_start+0xd4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18088:	f3bf 8f5b 	dmb	ish
   1808c:	e855 3f00 	ldrex	r3, [r5]
   18090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   18094:	e845 3200 	strex	r2, r3, [r5]
   18098:	2a00      	cmp	r2, #0
   1809a:	d1f7      	bne.n	1808c <bt_le_scan_start+0xac>
   1809c:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
   180a0:	89b4      	ldrh	r4, [r6, #12]
   180a2:	b16c      	cbz	r4, 180c0 <bt_le_scan_start+0xe0>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   180a4:	4831      	ldr	r0, [pc, #196]	; (1816c <bt_le_scan_start+0x18c>)
   180a6:	f06f 0140 	mvn.w	r1, #64	; 0x40
   180aa:	f007 fd0d 	bl	1fac8 <atomic_and>
			return -ENOTSUP;
   180ae:	f06f 0485 	mvn.w	r4, #133	; 0x85
   180b2:	e7a7      	b.n	18004 <bt_le_scan_start+0x24>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   180b4:	f46f 7180 	mvn.w	r1, #256	; 0x100
   180b8:	482c      	ldr	r0, [pc, #176]	; (1816c <bt_le_scan_start+0x18c>)
   180ba:	f007 fd05 	bl	1fac8 <atomic_and>
   180be:	e7ef      	b.n	180a0 <bt_le_scan_start+0xc0>
		err = start_le_scan_legacy(param->type, param->interval,
   180c0:	f896 8000 	ldrb.w	r8, [r6]
   180c4:	f8b6 9008 	ldrh.w	r9, [r6, #8]
   180c8:	8976      	ldrh	r6, [r6, #10]
	(void)memset(&set_param, 0, sizeof(set_param));
   180ca:	4621      	mov	r1, r4
   180cc:	2207      	movs	r2, #7
   180ce:	4668      	mov	r0, sp
   180d0:	f007 fb9f 	bl	1f812 <memset>
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   180d4:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   180d8:	4258      	negs	r0, r3
   180da:	f10d 0105 	add.w	r1, sp, #5
   180de:	4158      	adcs	r0, r3
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   180e0:	f88d 4006 	strb.w	r4, [sp, #6]
	set_param.scan_type = scan_type;
   180e4:	f88d 8000 	strb.w	r8, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
   180e8:	f8ad 9001 	strh.w	r9, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
   180ec:	f8ad 6003 	strh.w	r6, [sp, #3]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   180f0:	f7ff fb4c 	bl	1778c <bt_id_set_scan_own_addr>
	if (err) {
   180f4:	4604      	mov	r4, r0
   180f6:	2800      	cmp	r0, #0
   180f8:	d1bd      	bne.n	18076 <bt_le_scan_start+0x96>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   180fa:	2107      	movs	r1, #7
   180fc:	f242 000b 	movw	r0, #8203	; 0x200b
   18100:	f7fe fc98 	bl	16a34 <bt_hci_cmd_create>
	if (!buf) {
   18104:	4606      	mov	r6, r0
   18106:	b358      	cbz	r0, 18160 <bt_le_scan_start+0x180>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18108:	2207      	movs	r2, #7
   1810a:	4669      	mov	r1, sp
   1810c:	3008      	adds	r0, #8
   1810e:	f007 fd27 	bl	1fb60 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   18112:	4622      	mov	r2, r4
   18114:	4631      	mov	r1, r6
   18116:	f242 000b 	movw	r0, #8203	; 0x200b
   1811a:	f7fe fcc3 	bl	16aa4 <bt_hci_cmd_send_sync>
	if (err) {
   1811e:	4604      	mov	r4, r0
   18120:	2800      	cmp	r0, #0
   18122:	d1a8      	bne.n	18076 <bt_le_scan_start+0x96>
	return bt_le_scan_set_enable_legacy(enable);
   18124:	2001      	movs	r0, #1
   18126:	f7ff fe3f 	bl	17da8 <bt_le_scan_set_enable_legacy>
	if (err) {
   1812a:	4604      	mov	r4, r0
   1812c:	2800      	cmp	r0, #0
   1812e:	d1a2      	bne.n	18076 <bt_le_scan_start+0x96>
	if (val) {
   18130:	f1b8 0f01 	cmp.w	r8, #1
   18134:	d10e      	bne.n	18154 <bt_le_scan_start+0x174>
   18136:	f3bf 8f5b 	dmb	ish
   1813a:	e855 3f00 	ldrex	r3, [r5]
   1813e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18142:	e845 3200 	strex	r2, r3, [r5]
   18146:	2a00      	cmp	r2, #0
   18148:	d1f7      	bne.n	1813a <bt_le_scan_start+0x15a>
   1814a:	f3bf 8f5b 	dmb	ish
	scan_dev_found_cb = cb;
   1814e:	4b08      	ldr	r3, [pc, #32]	; (18170 <bt_le_scan_start+0x190>)
   18150:	601f      	str	r7, [r3, #0]
	return 0;
   18152:	e757      	b.n	18004 <bt_le_scan_start+0x24>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18154:	f06f 0180 	mvn.w	r1, #128	; 0x80
   18158:	4804      	ldr	r0, [pc, #16]	; (1816c <bt_le_scan_start+0x18c>)
   1815a:	f007 fcb5 	bl	1fac8 <atomic_and>
	if (err) {
   1815e:	e7f6      	b.n	1814e <bt_le_scan_start+0x16e>
		return -ENOBUFS;
   18160:	f06f 0468 	mvn.w	r4, #104	; 0x68
   18164:	e787      	b.n	18076 <bt_le_scan_start+0x96>
		return -EAGAIN;
   18166:	f06f 040a 	mvn.w	r4, #10
   1816a:	e74b      	b.n	18004 <bt_le_scan_start+0x24>
   1816c:	200003fc 	.word	0x200003fc
   18170:	20001f44 	.word	0x20001f44

00018174 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   18174:	4b02      	ldr	r3, [pc, #8]	; (18180 <net_buf_pool_get+0xc>)
   18176:	222c      	movs	r2, #44	; 0x2c
   18178:	fb02 3000 	mla	r0, r2, r0, r3
   1817c:	4770      	bx	lr
   1817e:	bf00      	nop
   18180:	200006ac 	.word	0x200006ac

00018184 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18184:	7983      	ldrb	r3, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   18186:	4a06      	ldr	r2, [pc, #24]	; (181a0 <net_buf_id+0x1c>)
   18188:	212c      	movs	r1, #44	; 0x2c
   1818a:	fb01 2303 	mla	r3, r1, r3, r2
   1818e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   18190:	7f1b      	ldrb	r3, [r3, #28]
   18192:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   18194:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   18196:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1819a:	fbb0 f0f3 	udiv	r0, r0, r3
   1819e:	4770      	bx	lr
   181a0:	200006ac 	.word	0x200006ac

000181a4 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   181a4:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   181a6:	4a0a      	ldr	r2, [pc, #40]	; (181d0 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   181a8:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   181aa:	242c      	movs	r4, #44	; 0x2c
   181ac:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   181b0:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   181b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   181b4:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   181b6:	6823      	ldr	r3, [r4, #0]
   181b8:	429a      	cmp	r2, r3
   181ba:	bf94      	ite	ls
   181bc:	600a      	strls	r2, [r1, #0]
   181be:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   181c0:	f7ff ffe0 	bl	18184 <net_buf_id>
   181c4:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   181c8:	fb02 3000 	mla	r0, r2, r0, r3
   181cc:	bd10      	pop	{r4, pc}
   181ce:	bf00      	nop
   181d0:	200006ac 	.word	0x200006ac

000181d4 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   181d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   181d8:	4605      	mov	r5, r0
   181da:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   181dc:	4610      	mov	r0, r2
   181de:	4619      	mov	r1, r3
{
   181e0:	4616      	mov	r6, r2
   181e2:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   181e4:	f008 fac9 	bl	2077a <sys_clock_timeout_end_calc>
   181e8:	4680      	mov	r8, r0
   181ea:	4689      	mov	r9, r1
	__asm__ volatile(
   181ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   181f0:	f3ef 8a11 	mrs	sl, BASEPRI
   181f4:	f383 8812 	msr	BASEPRI_MAX, r3
   181f8:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   181fc:	8b6b      	ldrh	r3, [r5, #26]
   181fe:	2b00      	cmp	r3, #0
   18200:	d059      	beq.n	182b6 <net_buf_alloc_len+0xe2>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   18202:	8b2a      	ldrh	r2, [r5, #24]
   18204:	429a      	cmp	r2, r3
   18206:	d93d      	bls.n	18284 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   18208:	2200      	movs	r2, #0
   1820a:	2300      	movs	r3, #0
   1820c:	4628      	mov	r0, r5
   1820e:	f002 fefb 	bl	1b008 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   18212:	4604      	mov	r4, r0
   18214:	2800      	cmp	r0, #0
   18216:	d035      	beq.n	18284 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   18218:	f38a 8811 	msr	BASEPRI, sl
   1821c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   18220:	9b01      	ldr	r3, [sp, #4]
   18222:	2b00      	cmp	r3, #0
   18224:	d057      	beq.n	182d6 <net_buf_alloc_len+0x102>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   18226:	ea56 0307 	orrs.w	r3, r6, r7
   1822a:	d010      	beq.n	1824e <net_buf_alloc_len+0x7a>
   1822c:	1c7b      	adds	r3, r7, #1
   1822e:	bf08      	it	eq
   18230:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   18234:	d00b      	beq.n	1824e <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   18236:	f003 fda7 	bl	1bd88 <sys_clock_tick_get>
   1823a:	ebb8 0600 	subs.w	r6, r8, r0
   1823e:	eb69 0701 	sbc.w	r7, r9, r1
   18242:	2e00      	cmp	r6, #0
   18244:	f177 0300 	sbcs.w	r3, r7, #0
   18248:	bfbc      	itt	lt
   1824a:	2600      	movlt	r6, #0
   1824c:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1824e:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   18250:	f8df 8098 	ldr.w	r8, [pc, #152]	; 182ec <net_buf_alloc_len+0x118>
   18254:	f04f 092c 	mov.w	r9, #44	; 0x2c
   18258:	fb09 8303 	mla	r3, r9, r3, r8
   1825c:	4632      	mov	r2, r6
   1825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18260:	681b      	ldr	r3, [r3, #0]
   18262:	a901      	add	r1, sp, #4
   18264:	681d      	ldr	r5, [r3, #0]
   18266:	4620      	mov	r0, r4
   18268:	463b      	mov	r3, r7
   1826a:	47a8      	blx	r5
   1826c:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1826e:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   18270:	2800      	cmp	r0, #0
   18272:	d131      	bne.n	182d8 <net_buf_alloc_len+0x104>
	k_lifo_put(&pool->free, buf);
   18274:	79a0      	ldrb	r0, [r4, #6]
   18276:	4621      	mov	r1, r4
   18278:	fb00 8009 	mla	r0, r0, r9, r8
   1827c:	f008 f823 	bl	202c6 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   18280:	462c      	mov	r4, r5
}
   18282:	e024      	b.n	182ce <net_buf_alloc_len+0xfa>
		uninit_count = pool->uninit_count--;
   18284:	8b6b      	ldrh	r3, [r5, #26]
   18286:	1e5a      	subs	r2, r3, #1
   18288:	836a      	strh	r2, [r5, #26]
   1828a:	f38a 8811 	msr	BASEPRI, sl
   1828e:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   18292:	7f2a      	ldrb	r2, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   18294:	8b2c      	ldrh	r4, [r5, #24]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   18296:	f102 0017 	add.w	r0, r2, #23
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1829a:	1ae4      	subs	r4, r4, r3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1829c:	6aab      	ldr	r3, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1829e:	f020 0003 	bic.w	r0, r0, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   182a2:	fb04 3400 	mla	r4, r4, r0, r3
	return pool - _net_buf_pool_list;
   182a6:	4811      	ldr	r0, [pc, #68]	; (182ec <net_buf_alloc_len+0x118>)
   182a8:	4b11      	ldr	r3, [pc, #68]	; (182f0 <net_buf_alloc_len+0x11c>)
	buf->user_data_size = pool->user_data_size;
   182aa:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   182ac:	1a2d      	subs	r5, r5, r0
   182ae:	10ad      	asrs	r5, r5, #2
   182b0:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   182b2:	71a5      	strb	r5, [r4, #6]
		goto success;
   182b4:	e7b4      	b.n	18220 <net_buf_alloc_len+0x4c>
   182b6:	f38a 8811 	msr	BASEPRI, sl
   182ba:	f3bf 8f6f 	isb	sy
   182be:	4632      	mov	r2, r6
   182c0:	463b      	mov	r3, r7
   182c2:	4628      	mov	r0, r5
   182c4:	f002 fea0 	bl	1b008 <z_impl_k_queue_get>
	if (!buf) {
   182c8:	4604      	mov	r4, r0
   182ca:	2800      	cmp	r0, #0
   182cc:	d1a8      	bne.n	18220 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   182ce:	4620      	mov	r0, r4
   182d0:	b002      	add	sp, #8
   182d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   182d6:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   182d8:	2300      	movs	r3, #0
	buf->ref   = 1U;
   182da:	2201      	movs	r2, #1
	buf->frags = NULL;
   182dc:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   182de:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   182e0:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   182e2:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   182e4:	6923      	ldr	r3, [r4, #16]
   182e6:	81e2      	strh	r2, [r4, #14]
   182e8:	60a3      	str	r3, [r4, #8]
	return buf;
   182ea:	e7f0      	b.n	182ce <net_buf_alloc_len+0xfa>
   182ec:	200006ac 	.word	0x200006ac
   182f0:	ba2e8ba3 	.word	0xba2e8ba3

000182f4 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   182f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   182f8:	4d16      	ldr	r5, [pc, #88]	; (18354 <net_buf_unref+0x60>)
   182fa:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   182fc:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   182fe:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   18300:	b90c      	cbnz	r4, 18306 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   18302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   18306:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   18308:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1830c:	3b01      	subs	r3, #1
   1830e:	b2db      	uxtb	r3, r3
   18310:	7123      	strb	r3, [r4, #4]
   18312:	2b00      	cmp	r3, #0
   18314:	d1f5      	bne.n	18302 <net_buf_unref+0xe>
		if (buf->__buf) {
   18316:	6921      	ldr	r1, [r4, #16]
   18318:	b159      	cbz	r1, 18332 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1831a:	7963      	ldrb	r3, [r4, #5]
   1831c:	079b      	lsls	r3, r3, #30
   1831e:	d407      	bmi.n	18330 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   18320:	79a3      	ldrb	r3, [r4, #6]
   18322:	fb07 5303 	mla	r3, r7, r3, r5
   18326:	4620      	mov	r0, r4
   18328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1832a:	681b      	ldr	r3, [r3, #0]
   1832c:	689b      	ldr	r3, [r3, #8]
   1832e:	4798      	blx	r3
			buf->__buf = NULL;
   18330:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   18332:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   18334:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   18336:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1833a:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1833c:	6a1b      	ldr	r3, [r3, #32]
   1833e:	b11b      	cbz	r3, 18348 <net_buf_unref+0x54>
			pool->destroy(buf);
   18340:	4620      	mov	r0, r4
   18342:	4798      	blx	r3
{
   18344:	4644      	mov	r4, r8
   18346:	e7db      	b.n	18300 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   18348:	4621      	mov	r1, r4
   1834a:	fb00 5007 	mla	r0, r0, r7, r5
   1834e:	f007 ffba 	bl	202c6 <k_queue_prepend>
}
   18352:	e7f7      	b.n	18344 <net_buf_unref+0x50>
   18354:	200006ac 	.word	0x200006ac

00018358 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   18358:	b570      	push	{r4, r5, r6, lr}
   1835a:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   1835c:	480d      	ldr	r0, [pc, #52]	; (18394 <onoff_stop+0x3c>)
   1835e:	1a23      	subs	r3, r4, r0
   18360:	109a      	asrs	r2, r3, #2
   18362:	4b0d      	ldr	r3, [pc, #52]	; (18398 <onoff_stop+0x40>)
   18364:	4353      	muls	r3, r2
   18366:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
   18368:	250c      	movs	r5, #12
   1836a:	435d      	muls	r5, r3
   1836c:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
   18370:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
   18372:	4418      	add	r0, r3
   18374:	2140      	movs	r1, #64	; 0x40
   18376:	f007 fc29 	bl	1fbcc <set_off_state>
	if (err < 0) {
   1837a:	1e01      	subs	r1, r0, #0
   1837c:	db04      	blt.n	18388 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   1837e:	4b07      	ldr	r3, [pc, #28]	; (1839c <onoff_stop+0x44>)
   18380:	442b      	add	r3, r5
   18382:	685b      	ldr	r3, [r3, #4]
   18384:	4798      	blx	r3
	return 0;
   18386:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   18388:	4620      	mov	r0, r4
   1838a:	4633      	mov	r3, r6
}
   1838c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   18390:	4718      	bx	r3
   18392:	bf00      	nop
   18394:	20001f58 	.word	0x20001f58
   18398:	b6db6db7 	.word	0xb6db6db7
   1839c:	0002107c 	.word	0x0002107c

000183a0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   183a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   183a4:	4c0f      	ldr	r4, [pc, #60]	; (183e4 <onoff_start+0x44>)
   183a6:	4d10      	ldr	r5, [pc, #64]	; (183e8 <onoff_start+0x48>)
   183a8:	1b03      	subs	r3, r0, r4
   183aa:	109b      	asrs	r3, r3, #2
   183ac:	435d      	muls	r5, r3
   183ae:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
   183b0:	250c      	movs	r5, #12
   183b2:	435d      	muls	r5, r3
{
   183b4:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   183b6:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   183ba:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   183bc:	4420      	add	r0, r4
   183be:	2140      	movs	r1, #64	; 0x40
   183c0:	f007 fc1d 	bl	1fbfe <set_starting_state>
	if (err < 0) {
   183c4:	1e01      	subs	r1, r0, #0
   183c6:	db08      	blt.n	183da <onoff_start+0x3a>
	subdata->cb = cb;
   183c8:	4b08      	ldr	r3, [pc, #32]	; (183ec <onoff_start+0x4c>)
   183ca:	442c      	add	r4, r5
	subdata->user_data = user_data;
   183cc:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   183d0:	4b07      	ldr	r3, [pc, #28]	; (183f0 <onoff_start+0x50>)
   183d2:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   183d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   183d8:	4718      	bx	r3
		notify(mgr, err);
   183da:	4638      	mov	r0, r7
   183dc:	4633      	mov	r3, r6
}
   183de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   183e2:	4718      	bx	r3
   183e4:	20001f58 	.word	0x20001f58
   183e8:	b6db6db7 	.word	0xb6db6db7
   183ec:	0001fc61 	.word	0x0001fc61
   183f0:	0002107c 	.word	0x0002107c

000183f4 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   183f4:	2200      	movs	r2, #0
{
   183f6:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   183f8:	2101      	movs	r1, #1
{
   183fa:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   183fc:	4610      	mov	r0, r2
   183fe:	f7fd fb67 	bl	15ad0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   18402:	2000      	movs	r0, #0
   18404:	f7fd fb32 	bl	15a6c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   18408:	480f      	ldr	r0, [pc, #60]	; (18448 <clk_init+0x54>)
   1840a:	f001 fd67 	bl	19edc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1840e:	4b0f      	ldr	r3, [pc, #60]	; (1844c <clk_init+0x58>)
   18410:	4298      	cmp	r0, r3
   18412:	d115      	bne.n	18440 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   18414:	f007 fda3 	bl	1ff5e <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   18418:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1841a:	490d      	ldr	r1, [pc, #52]	; (18450 <clk_init+0x5c>)
   1841c:	4630      	mov	r0, r6
   1841e:	f006 fb5d 	bl	1eadc <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   18422:	2800      	cmp	r0, #0
   18424:	db0b      	blt.n	1843e <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   18426:	2501      	movs	r5, #1
   18428:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   1842a:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1842c:	4908      	ldr	r1, [pc, #32]	; (18450 <clk_init+0x5c>)
   1842e:	f104 001c 	add.w	r0, r4, #28
   18432:	f006 fb53 	bl	1eadc <onoff_manager_init>
		if (err < 0) {
   18436:	2800      	cmp	r0, #0
   18438:	db01      	blt.n	1843e <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1843a:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   1843c:	2000      	movs	r0, #0
}
   1843e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   18440:	f06f 0004 	mvn.w	r0, #4
   18444:	e7fb      	b.n	1843e <clk_init+0x4a>
   18446:	bf00      	nop
   18448:	00018489 	.word	0x00018489
   1844c:	0bad0000 	.word	0x0bad0000
   18450:	00021094 	.word	0x00021094

00018454 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   18454:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   18456:	230c      	movs	r3, #12
   18458:	4809      	ldr	r0, [pc, #36]	; (18480 <clkstarted_handle.constprop.0+0x2c>)
   1845a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1845c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1845e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   18460:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   18464:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   18466:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   18468:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1846a:	4418      	add	r0, r3
   1846c:	f007 fbe5 	bl	1fc3a <set_on_state>
	if (callback) {
   18470:	b12d      	cbz	r5, 1847e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   18472:	4632      	mov	r2, r6
   18474:	462b      	mov	r3, r5
   18476:	4803      	ldr	r0, [pc, #12]	; (18484 <clkstarted_handle.constprop.0+0x30>)
}
   18478:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1847c:	4718      	bx	r3
}
   1847e:	bd70      	pop	{r4, r5, r6, pc}
   18480:	20001f58 	.word	0x20001f58
   18484:	00020b60 	.word	0x00020b60

00018488 <clock_event_handler>:
	switch (event) {
   18488:	b110      	cbz	r0, 18490 <clock_event_handler+0x8>
   1848a:	2801      	cmp	r0, #1
   1848c:	d004      	beq.n	18498 <clock_event_handler+0x10>
   1848e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   18490:	4b03      	ldr	r3, [pc, #12]	; (184a0 <clock_event_handler+0x18>)
   18492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18494:	075b      	lsls	r3, r3, #29
   18496:	d101      	bne.n	1849c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   18498:	f7ff bfdc 	b.w	18454 <clkstarted_handle.constprop.0>
}
   1849c:	4770      	bx	lr
   1849e:	bf00      	nop
   184a0:	20001f58 	.word	0x20001f58

000184a4 <generic_hfclk_start>:
{
   184a4:	b508      	push	{r3, lr}
	__asm__ volatile(
   184a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   184aa:	f3ef 8111 	mrs	r1, BASEPRI
   184ae:	f383 8812 	msr	BASEPRI_MAX, r3
   184b2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   184b6:	4a12      	ldr	r2, [pc, #72]	; (18500 <generic_hfclk_start+0x5c>)
   184b8:	6813      	ldr	r3, [r2, #0]
   184ba:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   184be:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   184c2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   184c4:	d00c      	beq.n	184e0 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   184c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   184ca:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   184ce:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   184d2:	f013 0301 	ands.w	r3, r3, #1
   184d6:	d003      	beq.n	184e0 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   184d8:	480a      	ldr	r0, [pc, #40]	; (18504 <generic_hfclk_start+0x60>)
   184da:	f007 fbae 	bl	1fc3a <set_on_state>
			already_started = true;
   184de:	2301      	movs	r3, #1
	__asm__ volatile(
   184e0:	f381 8811 	msr	BASEPRI, r1
   184e4:	f3bf 8f6f 	isb	sy
	if (already_started) {
   184e8:	b123      	cbz	r3, 184f4 <generic_hfclk_start+0x50>
}
   184ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   184ee:	2000      	movs	r0, #0
   184f0:	f7ff bfb0 	b.w	18454 <clkstarted_handle.constprop.0>
}
   184f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   184f8:	2001      	movs	r0, #1
   184fa:	f001 bcdf 	b.w	19ebc <nrfx_clock_start>
   184fe:	bf00      	nop
   18500:	20001fa8 	.word	0x20001fa8
   18504:	20001f98 	.word	0x20001f98

00018508 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18508:	4b09      	ldr	r3, [pc, #36]	; (18530 <generic_hfclk_stop+0x28>)
   1850a:	f3bf 8f5b 	dmb	ish
   1850e:	e853 2f00 	ldrex	r2, [r3]
   18512:	f022 0102 	bic.w	r1, r2, #2
   18516:	e843 1000 	strex	r0, r1, [r3]
   1851a:	2800      	cmp	r0, #0
   1851c:	d1f7      	bne.n	1850e <generic_hfclk_stop+0x6>
   1851e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   18522:	07d3      	lsls	r3, r2, #31
   18524:	d402      	bmi.n	1852c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   18526:	2001      	movs	r0, #1
   18528:	f007 bd14 	b.w	1ff54 <nrfx_clock_stop>
}
   1852c:	4770      	bx	lr
   1852e:	bf00      	nop
   18530:	20001fa8 	.word	0x20001fa8

00018534 <api_blocking_start>:
{
   18534:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   18536:	2200      	movs	r2, #0
   18538:	2301      	movs	r3, #1
   1853a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1853e:	ab04      	add	r3, sp, #16
   18540:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   18544:	4a09      	ldr	r2, [pc, #36]	; (1856c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   18546:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1854a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1854c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   18550:	f007 fbac 	bl	1fcac <api_start>
	if (err < 0) {
   18554:	2800      	cmp	r0, #0
   18556:	db05      	blt.n	18564 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   18558:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1855c:	2300      	movs	r3, #0
   1855e:	4668      	mov	r0, sp
   18560:	f002 fdac 	bl	1b0bc <z_impl_k_sem_take>
}
   18564:	b007      	add	sp, #28
   18566:	f85d fb04 	ldr.w	pc, [sp], #4
   1856a:	bf00      	nop
   1856c:	0001fc7f 	.word	0x0001fc7f

00018570 <z_nrf_clock_control_lf_on>:
{
   18570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18574:	493a      	ldr	r1, [pc, #232]	; (18660 <z_nrf_clock_control_lf_on+0xf0>)
   18576:	f3bf 8f5b 	dmb	ish
   1857a:	4606      	mov	r6, r0
   1857c:	2201      	movs	r2, #1
   1857e:	e851 3f00 	ldrex	r3, [r1]
   18582:	e841 2000 	strex	r0, r2, [r1]
   18586:	2800      	cmp	r0, #0
   18588:	d1f9      	bne.n	1857e <z_nrf_clock_control_lf_on+0xe>
   1858a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1858e:	b933      	cbnz	r3, 1859e <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   18590:	4934      	ldr	r1, [pc, #208]	; (18664 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
   18592:	4835      	ldr	r0, [pc, #212]	; (18668 <z_nrf_clock_control_lf_on+0xf8>)
   18594:	604b      	str	r3, [r1, #4]
   18596:	60cb      	str	r3, [r1, #12]
   18598:	608a      	str	r2, [r1, #8]
   1859a:	f006 fab2 	bl	1eb02 <onoff_request>
	switch (start_mode) {
   1859e:	1e73      	subs	r3, r6, #1
   185a0:	2b01      	cmp	r3, #1
   185a2:	d832      	bhi.n	1860a <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   185a4:	2e01      	cmp	r6, #1
   185a6:	d107      	bne.n	185b8 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   185a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   185ac:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   185b0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   185b4:	2b01      	cmp	r3, #1
   185b6:	d028      	beq.n	1860a <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   185b8:	f007 fdfa 	bl	201b0 <k_is_in_isr>
   185bc:	4604      	mov	r4, r0
   185be:	b918      	cbnz	r0, 185c8 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
   185c0:	4b2a      	ldr	r3, [pc, #168]	; (1866c <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
   185c2:	781b      	ldrb	r3, [r3, #0]
   185c4:	2b00      	cmp	r3, #0
   185c6:	d144      	bne.n	18652 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
   185c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   185cc:	f3ef 8511 	mrs	r5, BASEPRI
   185d0:	f383 8812 	msr	BASEPRI_MAX, r3
   185d4:	f3bf 8f6f 	isb	sy
   185d8:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   185da:	4f25      	ldr	r7, [pc, #148]	; (18670 <z_nrf_clock_control_lf_on+0x100>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   185dc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 18674 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   185e0:	f8df 9094 	ldr.w	r9, [pc, #148]	; 18678 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   185e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   185e8:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   185ec:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   185f0:	03d2      	lsls	r2, r2, #15
   185f2:	d50c      	bpl.n	1860e <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   185f4:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   185f8:	2b01      	cmp	r3, #1
   185fa:	d001      	beq.n	18600 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   185fc:	2e01      	cmp	r6, #1
   185fe:	d106      	bne.n	1860e <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
   18600:	b30c      	cbz	r4, 18646 <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
   18602:	f385 8811 	msr	BASEPRI, r5
   18606:	f3bf 8f6f 	isb	sy
}
   1860a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1860e:	b1ac      	cbz	r4, 1863c <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   18610:	4628      	mov	r0, r5
   18612:	f7fd f9e9 	bl	159e8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   18616:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1861a:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1861e:	2b00      	cmp	r3, #0
   18620:	d1e0      	bne.n	185e4 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   18622:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   18624:	2900      	cmp	r1, #0
   18626:	d0dd      	beq.n	185e4 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18628:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1862a:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   1862c:	2301      	movs	r3, #1
   1862e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   18632:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18636:	f8c9 3000 	str.w	r3, [r9]
}
   1863a:	e7d3      	b.n	185e4 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
   1863c:	2100      	movs	r1, #0
   1863e:	2021      	movs	r0, #33	; 0x21
   18640:	f003 f9b0 	bl	1b9a4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   18644:	e7e7      	b.n	18616 <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
   18646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1864a:	2202      	movs	r2, #2
   1864c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   18650:	e7db      	b.n	1860a <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
   18652:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18656:	2202      	movs	r2, #2
   18658:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1865c:	4605      	mov	r5, r0
}
   1865e:	e7bc      	b.n	185da <z_nrf_clock_control_lf_on+0x6a>
   18660:	20001fac 	.word	0x20001fac
   18664:	20001f48 	.word	0x20001f48
   18668:	20001f74 	.word	0x20001f74
   1866c:	2000333d 	.word	0x2000333d
   18670:	40000104 	.word	0x40000104
   18674:	e000e100 	.word	0xe000e100
   18678:	40000008 	.word	0x40000008

0001867c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1867c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   1867e:	4b08      	ldr	r3, [pc, #32]	; (186a0 <uart_console_init+0x24>)
   18680:	4808      	ldr	r0, [pc, #32]	; (186a4 <uart_console_init+0x28>)
   18682:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   18684:	f007 fcda 	bl	2003c <z_device_ready>
   18688:	b138      	cbz	r0, 1869a <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   1868a:	4807      	ldr	r0, [pc, #28]	; (186a8 <uart_console_init+0x2c>)
   1868c:	f7fd fee2 	bl	16454 <__stdout_hook_install>
	__printk_hook_install(console_out);
   18690:	4805      	ldr	r0, [pc, #20]	; (186a8 <uart_console_init+0x2c>)
   18692:	f7fb fce5 	bl	14060 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   18696:	2000      	movs	r0, #0
}
   18698:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1869a:	f06f 0012 	mvn.w	r0, #18
   1869e:	e7fb      	b.n	18698 <uart_console_init+0x1c>
   186a0:	20001fb0 	.word	0x20001fb0
   186a4:	00020bf0 	.word	0x00020bf0
   186a8:	000186ad 	.word	0x000186ad

000186ac <console_out>:
	if ('\n' == c) {
   186ac:	280a      	cmp	r0, #10
{
   186ae:	b538      	push	{r3, r4, r5, lr}
   186b0:	4d07      	ldr	r5, [pc, #28]	; (186d0 <console_out+0x24>)
   186b2:	4604      	mov	r4, r0
	if ('\n' == c) {
   186b4:	d104      	bne.n	186c0 <console_out+0x14>
   186b6:	6828      	ldr	r0, [r5, #0]
   186b8:	6883      	ldr	r3, [r0, #8]
   186ba:	210d      	movs	r1, #13
   186bc:	685b      	ldr	r3, [r3, #4]
   186be:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   186c0:	6828      	ldr	r0, [r5, #0]
   186c2:	6883      	ldr	r3, [r0, #8]
   186c4:	b2e1      	uxtb	r1, r4
   186c6:	685b      	ldr	r3, [r3, #4]
   186c8:	4798      	blx	r3
}
   186ca:	4620      	mov	r0, r4
   186cc:	bd38      	pop	{r3, r4, r5, pc}
   186ce:	bf00      	nop
   186d0:	20001fb0 	.word	0x20001fb0

000186d4 <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   186d4:	0942      	lsrs	r2, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
   186d6:	b570      	push	{r4, r5, r6, lr}
   186d8:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   186da:	d002      	beq.n	186e2 <nrfx_gpio_handler+0xe>
   186dc:	2a01      	cmp	r2, #1
   186de:	d01d      	beq.n	1871c <nrfx_gpio_handler+0x48>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
   186e0:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   186e2:	4e0f      	ldr	r6, [pc, #60]	; (18720 <nrfx_gpio_handler+0x4c>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   186e4:	6932      	ldr	r2, [r6, #16]
   186e6:	6851      	ldr	r1, [r2, #4]
   186e8:	2900      	cmp	r1, #0
   186ea:	d0f9      	beq.n	186e0 <nrfx_gpio_handler+0xc>
   186ec:	680c      	ldr	r4, [r1, #0]
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   186ee:	f003 031f 	and.w	r3, r3, #31
	gpio_fire_callbacks(list, port, BIT(pin));
   186f2:	2501      	movs	r5, #1
   186f4:	2c00      	cmp	r4, #0
   186f6:	fa05 f503 	lsl.w	r5, r5, r3
	return node->next;
   186fa:	bf38      	it	cc
   186fc:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
   186fe:	688a      	ldr	r2, [r1, #8]
   18700:	402a      	ands	r2, r5
   18702:	d002      	beq.n	1870a <nrfx_gpio_handler+0x36>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   18704:	684b      	ldr	r3, [r1, #4]
   18706:	4630      	mov	r0, r6
   18708:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1870a:	2c00      	cmp	r4, #0
   1870c:	d0e8      	beq.n	186e0 <nrfx_gpio_handler+0xc>
   1870e:	6823      	ldr	r3, [r4, #0]
   18710:	2b00      	cmp	r3, #0
   18712:	bf38      	it	cc
   18714:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   18716:	4621      	mov	r1, r4
   18718:	461c      	mov	r4, r3
   1871a:	e7f0      	b.n	186fe <nrfx_gpio_handler+0x2a>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1871c:	4e01      	ldr	r6, [pc, #4]	; (18724 <nrfx_gpio_handler+0x50>)
   1871e:	e7e1      	b.n	186e4 <nrfx_gpio_handler+0x10>
   18720:	00020b78 	.word	0x00020b78
   18724:	00020b90 	.word	0x00020b90

00018728 <gpio_nrfx_pin_interrupt_configure>:
{
   18728:	b530      	push	{r4, r5, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1872a:	6840      	ldr	r0, [r0, #4]
   1872c:	7b04      	ldrb	r4, [r0, #12]
   1872e:	f001 051f 	and.w	r5, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
   18732:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   18736:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   1873a:	b085      	sub	sp, #20
   1873c:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   18740:	d104      	bne.n	1874c <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   18742:	4628      	mov	r0, r5
   18744:	f001 ff4c 	bl	1a5e0 <nrfx_gpiote_trigger_disable>
	return 0;
   18748:	2000      	movs	r0, #0
   1874a:	e032      	b.n	187b2 <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
   1874c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   18750:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   18754:	d12f      	bne.n	187b6 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   18756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   1875a:	bf0c      	ite	eq
   1875c:	2304      	moveq	r3, #4
   1875e:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   18760:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   18764:	6883      	ldr	r3, [r0, #8]
   18766:	fa23 f101 	lsr.w	r1, r3, r1
   1876a:	07c9      	lsls	r1, r1, #31
   1876c:	d42f      	bmi.n	187ce <gpio_nrfx_pin_interrupt_configure+0xa6>
   1876e:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   18772:	d12c      	bne.n	187ce <gpio_nrfx_pin_interrupt_configure+0xa6>

    return pin_number >> 5;
   18774:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   18776:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   18778:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   1877c:	4a1c      	ldr	r2, [pc, #112]	; (187f0 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1877e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   18782:	bf18      	it	ne
   18784:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   18788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1878c:	07db      	lsls	r3, r3, #31
   1878e:	d41e      	bmi.n	187ce <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   18790:	f10d 0407 	add.w	r4, sp, #7
   18794:	4621      	mov	r1, r4
   18796:	4628      	mov	r0, r5
   18798:	f001 fe8e 	bl	1a4b8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1879c:	4b15      	ldr	r3, [pc, #84]	; (187f4 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   1879e:	4298      	cmp	r0, r3
   187a0:	d114      	bne.n	187cc <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
   187a2:	4620      	mov	r0, r4
   187a4:	f001 fed2 	bl	1a54c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   187a8:	4b13      	ldr	r3, [pc, #76]	; (187f8 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   187aa:	4298      	cmp	r0, r3
   187ac:	d00e      	beq.n	187cc <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
   187ae:	f06f 000b 	mvn.w	r0, #11
}
   187b2:	b005      	add	sp, #20
   187b4:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   187b6:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   187ba:	d005      	beq.n	187c8 <gpio_nrfx_pin_interrupt_configure+0xa0>
   187bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   187c0:	bf0c      	ite	eq
   187c2:	2302      	moveq	r3, #2
   187c4:	2301      	movne	r3, #1
   187c6:	e7cb      	b.n	18760 <gpio_nrfx_pin_interrupt_configure+0x38>
   187c8:	2303      	movs	r3, #3
   187ca:	e7c9      	b.n	18760 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   187cc:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   187ce:	2300      	movs	r3, #0
   187d0:	4619      	mov	r1, r3
   187d2:	aa02      	add	r2, sp, #8
   187d4:	4628      	mov	r0, r5
   187d6:	f001 fd4d 	bl	1a274 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   187da:	4b07      	ldr	r3, [pc, #28]	; (187f8 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   187dc:	4298      	cmp	r0, r3
   187de:	d104      	bne.n	187ea <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   187e0:	2101      	movs	r1, #1
   187e2:	4628      	mov	r0, r5
   187e4:	f001 feb8 	bl	1a558 <nrfx_gpiote_trigger_enable>
   187e8:	e7ae      	b.n	18748 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   187ea:	f06f 0004 	mvn.w	r0, #4
   187ee:	e7e0      	b.n	187b2 <gpio_nrfx_pin_interrupt_configure+0x8a>
   187f0:	50000300 	.word	0x50000300
   187f4:	0bad0004 	.word	0x0bad0004
   187f8:	0bad0000 	.word	0x0bad0000

000187fc <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   187fc:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   187fe:	f001 fe95 	bl	1a52c <nrfx_gpiote_is_init>
   18802:	4604      	mov	r4, r0
   18804:	b968      	cbnz	r0, 18822 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   18806:	f001 fe69 	bl	1a4dc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1880a:	4b08      	ldr	r3, [pc, #32]	; (1882c <gpio_nrfx_init+0x30>)
   1880c:	4298      	cmp	r0, r3
   1880e:	d10a      	bne.n	18826 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   18810:	4807      	ldr	r0, [pc, #28]	; (18830 <gpio_nrfx_init+0x34>)
   18812:	4621      	mov	r1, r4
   18814:	f001 fe4a 	bl	1a4ac <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   18818:	4622      	mov	r2, r4
   1881a:	2105      	movs	r1, #5
   1881c:	2006      	movs	r0, #6
   1881e:	f7fd f957 	bl	15ad0 <z_arm_irq_priority_set>
		return 0;
   18822:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   18824:	bd10      	pop	{r4, pc}
		return -EIO;
   18826:	f06f 0004 	mvn.w	r0, #4
   1882a:	e7fb      	b.n	18824 <gpio_nrfx_init+0x28>
   1882c:	0bad0000 	.word	0x0bad0000
   18830:	000186d5 	.word	0x000186d5

00018834 <gpio_nrfx_pin_configure>:
{
   18834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   18838:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1883a:	7b3b      	ldrb	r3, [r7, #12]
   1883c:	f001 051f 	and.w	r5, r1, #31
{
   18840:	b085      	sub	sp, #20
   18842:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   18844:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   18848:	4614      	mov	r4, r2
   1884a:	b9ca      	cbnz	r2, 18880 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   1884c:	a902      	add	r1, sp, #8
   1884e:	4628      	mov	r0, r5
   18850:	f001 fe32 	bl	1a4b8 <nrfx_gpiote_channel_get>
   18854:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   18856:	4628      	mov	r0, r5
   18858:	f001 fee4 	bl	1a624 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   1885c:	4b48      	ldr	r3, [pc, #288]	; (18980 <gpio_nrfx_pin_configure+0x14c>)
   1885e:	4298      	cmp	r0, r3
   18860:	d004      	beq.n	1886c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   18862:	f06f 0004 	mvn.w	r0, #4
}
   18866:	b005      	add	sp, #20
   18868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   1886c:	4284      	cmp	r4, r0
   1886e:	d105      	bne.n	1887c <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   18870:	f89d 0008 	ldrb.w	r0, [sp, #8]
   18874:	f001 fe64 	bl	1a540 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   18878:	42a0      	cmp	r0, r4
   1887a:	d1f2      	bne.n	18862 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1887c:	2000      	movs	r0, #0
   1887e:	e7f2      	b.n	18866 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   18880:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   18884:	f10d 0103 	add.w	r1, sp, #3
   18888:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   1888a:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   1888e:	f001 fe13 	bl	1a4b8 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   18892:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   18894:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   18896:	aa02      	add	r2, sp, #8
   18898:	4649      	mov	r1, r9
   1889a:	4628      	mov	r0, r5
   1889c:	f001 fcea 	bl	1a274 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   188a0:	4b37      	ldr	r3, [pc, #220]	; (18980 <gpio_nrfx_pin_configure+0x14c>)
   188a2:	4298      	cmp	r0, r3
   188a4:	d002      	beq.n	188ac <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   188a6:	f06f 0015 	mvn.w	r0, #21
   188aa:	e7dc      	b.n	18866 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   188ac:	4580      	cmp	r8, r0
   188ae:	d103      	bne.n	188b8 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   188b0:	f89d 0003 	ldrb.w	r0, [sp, #3]
   188b4:	f001 fe44 	bl	1a540 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   188b8:	05a3      	lsls	r3, r4, #22
   188ba:	d54e      	bpl.n	1895a <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   188bc:	4b31      	ldr	r3, [pc, #196]	; (18984 <gpio_nrfx_pin_configure+0x150>)
   188be:	4a32      	ldr	r2, [pc, #200]	; (18988 <gpio_nrfx_pin_configure+0x154>)
   188c0:	4023      	ands	r3, r4
   188c2:	4293      	cmp	r3, r2
   188c4:	d03a      	beq.n	1893c <gpio_nrfx_pin_configure+0x108>
   188c6:	d80c      	bhi.n	188e2 <gpio_nrfx_pin_configure+0xae>
   188c8:	2b06      	cmp	r3, #6
   188ca:	d014      	beq.n	188f6 <gpio_nrfx_pin_configure+0xc2>
   188cc:	d804      	bhi.n	188d8 <gpio_nrfx_pin_configure+0xa4>
   188ce:	b193      	cbz	r3, 188f6 <gpio_nrfx_pin_configure+0xc2>
   188d0:	2b02      	cmp	r3, #2
   188d2:	d1e8      	bne.n	188a6 <gpio_nrfx_pin_configure+0x72>
   188d4:	2304      	movs	r3, #4
   188d6:	e00e      	b.n	188f6 <gpio_nrfx_pin_configure+0xc2>
   188d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   188dc:	d1e3      	bne.n	188a6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   188de:	2301      	movs	r3, #1
   188e0:	e009      	b.n	188f6 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   188e2:	4a2a      	ldr	r2, [pc, #168]	; (1898c <gpio_nrfx_pin_configure+0x158>)
   188e4:	4293      	cmp	r3, r2
   188e6:	d02b      	beq.n	18940 <gpio_nrfx_pin_configure+0x10c>
   188e8:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   188ec:	d02a      	beq.n	18944 <gpio_nrfx_pin_configure+0x110>
   188ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   188f2:	d1d8      	bne.n	188a6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   188f4:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   188f6:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   188fa:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   188fe:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   18902:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   18904:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   18908:	bf54      	ite	pl
   1890a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1890e:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   18910:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   18912:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   18916:	d517      	bpl.n	18948 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   18918:	687b      	ldr	r3, [r7, #4]
   1891a:	2101      	movs	r1, #1
   1891c:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   18920:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   18924:	2200      	movs	r2, #0
   18926:	a901      	add	r1, sp, #4
   18928:	4628      	mov	r0, r5
   1892a:	f001 fd4f 	bl	1a3cc <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1892e:	4b14      	ldr	r3, [pc, #80]	; (18980 <gpio_nrfx_pin_configure+0x14c>)
   18930:	4298      	cmp	r0, r3
   18932:	bf14      	ite	ne
   18934:	f06f 0015 	mvnne.w	r0, #21
   18938:	2000      	moveq	r0, #0
   1893a:	e794      	b.n	18866 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   1893c:	2307      	movs	r3, #7
   1893e:	e7da      	b.n	188f6 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   18940:	2305      	movs	r3, #5
   18942:	e7d8      	b.n	188f6 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   18944:	2303      	movs	r3, #3
   18946:	e7d6      	b.n	188f6 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   18948:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1894a:	bf41      	itttt	mi
   1894c:	687b      	ldrmi	r3, [r7, #4]
   1894e:	2101      	movmi	r1, #1
   18950:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   18954:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   18958:	e7e4      	b.n	18924 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
   1895a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1895c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   18960:	bf54      	ite	pl
   18962:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   18966:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   18968:	461a      	mov	r2, r3
   1896a:	a901      	add	r1, sp, #4
   1896c:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1896e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   18972:	f001 fc7f 	bl	1a274 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   18976:	4b02      	ldr	r3, [pc, #8]	; (18980 <gpio_nrfx_pin_configure+0x14c>)
   18978:	4298      	cmp	r0, r3
   1897a:	f43f af7f 	beq.w	1887c <gpio_nrfx_pin_configure+0x48>
   1897e:	e792      	b.n	188a6 <gpio_nrfx_pin_configure+0x72>
   18980:	0bad0000 	.word	0x0bad0000
   18984:	00f00006 	.word	0x00f00006
   18988:	00100006 	.word	0x00100006
   1898c:	00400002 	.word	0x00400002

00018990 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   18990:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   18992:	794b      	ldrb	r3, [r1, #5]
   18994:	2b01      	cmp	r3, #1
   18996:	d026      	beq.n	189e6 <uarte_nrfx_configure+0x56>
   18998:	2b03      	cmp	r3, #3
   1899a:	d121      	bne.n	189e0 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1899c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1899e:	798b      	ldrb	r3, [r1, #6]
   189a0:	2b03      	cmp	r3, #3
   189a2:	d11d      	bne.n	189e0 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   189a4:	79cc      	ldrb	r4, [r1, #7]
   189a6:	b10c      	cbz	r4, 189ac <uarte_nrfx_configure+0x1c>
   189a8:	2c01      	cmp	r4, #1
   189aa:	d119      	bne.n	189e0 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   189ac:	790a      	ldrb	r2, [r1, #4]
   189ae:	b112      	cbz	r2, 189b6 <uarte_nrfx_configure+0x26>
   189b0:	2a02      	cmp	r2, #2
   189b2:	d115      	bne.n	189e0 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   189b4:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   189b6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   189b8:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   189ba:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   189be:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   189c0:	d065      	beq.n	18a8e <uarte_nrfx_configure+0xfe>
   189c2:	d82d      	bhi.n	18a20 <uarte_nrfx_configure+0x90>
   189c4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   189c8:	d064      	beq.n	18a94 <uarte_nrfx_configure+0x104>
   189ca:	d816      	bhi.n	189fa <uarte_nrfx_configure+0x6a>
   189cc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   189d0:	d062      	beq.n	18a98 <uarte_nrfx_configure+0x108>
   189d2:	d80a      	bhi.n	189ea <uarte_nrfx_configure+0x5a>
   189d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   189d8:	d061      	beq.n	18a9e <uarte_nrfx_configure+0x10e>
   189da:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   189de:	d061      	beq.n	18aa4 <uarte_nrfx_configure+0x114>
   189e0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   189e4:	e052      	b.n	18a8c <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   189e6:	2600      	movs	r6, #0
   189e8:	e7d9      	b.n	1899e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   189ea:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   189ee:	d05c      	beq.n	18aaa <uarte_nrfx_configure+0x11a>
   189f0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   189f4:	d1f4      	bne.n	189e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   189f6:	4b37      	ldr	r3, [pc, #220]	; (18ad4 <uarte_nrfx_configure+0x144>)
   189f8:	e03c      	b.n	18a74 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   189fa:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   189fe:	d057      	beq.n	18ab0 <uarte_nrfx_configure+0x120>
   18a00:	d807      	bhi.n	18a12 <uarte_nrfx_configure+0x82>
   18a02:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   18a06:	d055      	beq.n	18ab4 <uarte_nrfx_configure+0x124>
   18a08:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   18a0c:	d1e8      	bne.n	189e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   18a0e:	4b32      	ldr	r3, [pc, #200]	; (18ad8 <uarte_nrfx_configure+0x148>)
   18a10:	e030      	b.n	18a74 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   18a12:	f647 2712 	movw	r7, #31250	; 0x7a12
   18a16:	42bb      	cmp	r3, r7
   18a18:	d1e2      	bne.n	189e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   18a1a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   18a1e:	e029      	b.n	18a74 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   18a20:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   18a24:	d048      	beq.n	18ab8 <uarte_nrfx_configure+0x128>
   18a26:	d813      	bhi.n	18a50 <uarte_nrfx_configure+0xc0>
   18a28:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   18a2c:	d047      	beq.n	18abe <uarte_nrfx_configure+0x12e>
   18a2e:	d809      	bhi.n	18a44 <uarte_nrfx_configure+0xb4>
   18a30:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   18a34:	42bb      	cmp	r3, r7
   18a36:	d044      	beq.n	18ac2 <uarte_nrfx_configure+0x132>
   18a38:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   18a3c:	d1d0      	bne.n	189e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   18a3e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   18a42:	e017      	b.n	18a74 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   18a44:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   18a48:	d1ca      	bne.n	189e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   18a4a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   18a4e:	e011      	b.n	18a74 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   18a50:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   18a54:	d038      	beq.n	18ac8 <uarte_nrfx_configure+0x138>
   18a56:	d808      	bhi.n	18a6a <uarte_nrfx_configure+0xda>
   18a58:	4f20      	ldr	r7, [pc, #128]	; (18adc <uarte_nrfx_configure+0x14c>)
   18a5a:	42bb      	cmp	r3, r7
   18a5c:	d037      	beq.n	18ace <uarte_nrfx_configure+0x13e>
   18a5e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   18a62:	d1bd      	bne.n	189e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   18a64:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   18a68:	e004      	b.n	18a74 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   18a6a:	4f1d      	ldr	r7, [pc, #116]	; (18ae0 <uarte_nrfx_configure+0x150>)
   18a6c:	42bb      	cmp	r3, r7
   18a6e:	d1b7      	bne.n	189e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   18a70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   18a74:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   18a78:	6903      	ldr	r3, [r0, #16]
   18a7a:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   18a7c:	4334      	orrs	r4, r6
   18a7e:	4322      	orrs	r2, r4
   18a80:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   18a82:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   18a86:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   18a8a:	2000      	movs	r0, #0
}
   18a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   18a8e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   18a92:	e7ef      	b.n	18a74 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   18a94:	4b13      	ldr	r3, [pc, #76]	; (18ae4 <uarte_nrfx_configure+0x154>)
   18a96:	e7ed      	b.n	18a74 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   18a98:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   18a9c:	e7ea      	b.n	18a74 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   18a9e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   18aa2:	e7e7      	b.n	18a74 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   18aa4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   18aa8:	e7e4      	b.n	18a74 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   18aaa:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   18aae:	e7e1      	b.n	18a74 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   18ab0:	4b0d      	ldr	r3, [pc, #52]	; (18ae8 <uarte_nrfx_configure+0x158>)
   18ab2:	e7df      	b.n	18a74 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   18ab4:	4b0d      	ldr	r3, [pc, #52]	; (18aec <uarte_nrfx_configure+0x15c>)
   18ab6:	e7dd      	b.n	18a74 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   18ab8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   18abc:	e7da      	b.n	18a74 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   18abe:	4b0c      	ldr	r3, [pc, #48]	; (18af0 <uarte_nrfx_configure+0x160>)
   18ac0:	e7d8      	b.n	18a74 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   18ac2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   18ac6:	e7d5      	b.n	18a74 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   18ac8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   18acc:	e7d2      	b.n	18a74 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   18ace:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   18ad2:	e7cf      	b.n	18a74 <uarte_nrfx_configure+0xe4>
   18ad4:	0013b000 	.word	0x0013b000
   18ad8:	004ea000 	.word	0x004ea000
   18adc:	0003d090 	.word	0x0003d090
   18ae0:	000f4240 	.word	0x000f4240
   18ae4:	00275000 	.word	0x00275000
   18ae8:	0075c000 	.word	0x0075c000
   18aec:	003af000 	.word	0x003af000
   18af0:	013a9000 	.word	0x013a9000

00018af4 <nrf_gpio_cfg_input>:
    *p_pin = pin_number & 0x1F;
   18af4:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   18af8:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   18afa:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   18afc:	4b04      	ldr	r3, [pc, #16]	; (18b10 <nrf_gpio_cfg_input+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
   18afe:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   18b02:	bf18      	it	ne
   18b04:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   18b08:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   18b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   18b0e:	4770      	bx	lr
   18b10:	50000300 	.word	0x50000300

00018b14 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   18b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   18b16:	6906      	ldr	r6, [r0, #16]
{
   18b18:	4605      	mov	r5, r0
   18b1a:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   18b1c:	f007 fb48 	bl	201b0 <k_is_in_isr>
   18b20:	b910      	cbnz	r0, 18b28 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   18b22:	4b2c      	ldr	r3, [pc, #176]	; (18bd4 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
   18b24:	781b      	ldrb	r3, [r3, #0]
   18b26:	b983      	cbnz	r3, 18b4a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   18b28:	f04f 0340 	mov.w	r3, #64	; 0x40
   18b2c:	f3ef 8411 	mrs	r4, BASEPRI
   18b30:	f383 8812 	msr	BASEPRI_MAX, r3
   18b34:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   18b38:	4628      	mov	r0, r5
   18b3a:	f007 f96c 	bl	1fe16 <is_tx_ready>
   18b3e:	bb28      	cbnz	r0, 18b8c <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   18b40:	f384 8811 	msr	BASEPRI, r4
   18b44:	f3bf 8f6f 	isb	sy
}
   18b48:	e7ee      	b.n	18b28 <uarte_nrfx_poll_out+0x14>
{
   18b4a:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   18b4c:	4628      	mov	r0, r5
   18b4e:	f007 f962 	bl	1fe16 <is_tx_ready>
   18b52:	b970      	cbnz	r0, 18b72 <uarte_nrfx_poll_out+0x5e>
   18b54:	2001      	movs	r0, #1
   18b56:	f007 fa11 	bl	1ff7c <nrfx_busy_wait>
   18b5a:	3c01      	subs	r4, #1
   18b5c:	d1f6      	bne.n	18b4c <uarte_nrfx_poll_out+0x38>
   18b5e:	2100      	movs	r1, #0
   18b60:	2021      	movs	r0, #33	; 0x21
   18b62:	f002 ff1f 	bl	1b9a4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   18b66:	e7f0      	b.n	18b4a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   18b68:	f384 8811 	msr	BASEPRI, r4
   18b6c:	f3bf 8f6f 	isb	sy
}
   18b70:	e7f5      	b.n	18b5e <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   18b72:	f04f 0340 	mov.w	r3, #64	; 0x40
   18b76:	f3ef 8411 	mrs	r4, BASEPRI
   18b7a:	f383 8812 	msr	BASEPRI_MAX, r3
   18b7e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   18b82:	4628      	mov	r0, r5
   18b84:	f007 f947 	bl	1fe16 <is_tx_ready>
   18b88:	2800      	cmp	r0, #0
   18b8a:	d0ed      	beq.n	18b68 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   18b8c:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   18b90:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   18b92:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   18b94:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   18b96:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   18b9a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18b9e:	2200      	movs	r2, #0
   18ba0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   18ba4:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   18ba8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   18bac:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   18bb0:	684a      	ldr	r2, [r1, #4]
   18bb2:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   18bb4:	bf41      	itttt	mi
   18bb6:	2208      	movmi	r2, #8
   18bb8:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   18bbc:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   18bc0:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18bc4:	2201      	movs	r2, #1
   18bc6:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   18bc8:	f384 8811 	msr	BASEPRI, r4
   18bcc:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
   18bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18bd2:	bf00      	nop
   18bd4:	2000333d 	.word	0x2000333d

00018bd8 <nrf_gpio_cfg_output>:
    *p_pin = pin_number & 0x1F;
   18bd8:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   18bdc:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   18bde:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   18be0:	4b04      	ldr	r3, [pc, #16]	; (18bf4 <nrf_gpio_cfg_output+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
   18be2:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   18be6:	bf18      	it	ne
   18be8:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   18bec:	2103      	movs	r1, #3
   18bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   18bf2:	4770      	bx	lr
   18bf4:	50000300 	.word	0x50000300

00018bf8 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
   18bf8:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   18bfc:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   18bfe:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   18c00:	4b04      	ldr	r3, [pc, #16]	; (18c14 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   18c02:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   18c06:	bf18      	it	ne
   18c08:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   18c0c:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   18c0e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   18c12:	4770      	bx	lr
   18c14:	50000300 	.word	0x50000300

00018c18 <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   18c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   18c1c:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
   18c20:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
   18c22:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   18c26:	2300      	movs	r3, #0
   18c28:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   18c2c:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   18c2e:	6845      	ldr	r5, [r0, #4]
static int uarte_instance_init(const struct device *dev,
   18c30:	4606      	mov	r6, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   18c32:	68e8      	ldr	r0, [r5, #12]
   18c34:	1c42      	adds	r2, r0, #1
   18c36:	d004      	beq.n	18c42 <uarte_instance_init.isra.0+0x2a>
        nrf_gpio_pin_set(pin_number);
   18c38:	f7ff ffde 	bl	18bf8 <nrf_gpio_pin_set>
			nrf_gpio_cfg_output(cfg->tx_pin);
   18c3c:	68e8      	ldr	r0, [r5, #12]
   18c3e:	f7ff ffcb 	bl	18bd8 <nrf_gpio_cfg_output>
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   18c42:	6928      	ldr	r0, [r5, #16]
   18c44:	1c43      	adds	r3, r0, #1
   18c46:	d006      	beq.n	18c56 <uarte_instance_init.isra.0+0x3e>
			nrf_gpio_cfg_input(cfg->rx_pin,
   18c48:	7f2b      	ldrb	r3, [r5, #28]
   18c4a:	2b00      	cmp	r3, #0
   18c4c:	bf14      	ite	ne
   18c4e:	2103      	movne	r1, #3
   18c50:	2100      	moveq	r1, #0
   18c52:	f7ff ff4f 	bl	18af4 <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   18c56:	6968      	ldr	r0, [r5, #20]
   18c58:	1c42      	adds	r2, r0, #1
   18c5a:	d004      	beq.n	18c66 <uarte_instance_init.isra.0+0x4e>
   18c5c:	f7ff ffcc 	bl	18bf8 <nrf_gpio_pin_set>
			nrf_gpio_cfg_output(cfg->rts_pin);
   18c60:	6968      	ldr	r0, [r5, #20]
   18c62:	f7ff ffb9 	bl	18bd8 <nrf_gpio_cfg_output>
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   18c66:	69a8      	ldr	r0, [r5, #24]
   18c68:	1c43      	adds	r3, r0, #1
   18c6a:	d006      	beq.n	18c7a <uarte_instance_init.isra.0+0x62>
			nrf_gpio_cfg_input(cfg->cts_pin,
   18c6c:	7f6b      	ldrb	r3, [r5, #29]
   18c6e:	2b00      	cmp	r3, #0
   18c70:	bf14      	ite	ne
   18c72:	2103      	movne	r1, #3
   18c74:	2100      	moveq	r1, #0
   18c76:	f7ff ff3d 	bl	18af4 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   18c7a:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
   18c7e:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
   18c80:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   18c84:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   18c88:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
   18c8c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   18c90:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
   18c92:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   18c96:	3104      	adds	r1, #4
   18c98:	4630      	mov	r0, r6
   18c9a:	f7ff fe79 	bl	18990 <uarte_nrfx_configure>
	if (err) {
   18c9e:	4605      	mov	r5, r0
   18ca0:	b9b0      	cbnz	r0, 18cd0 <uarte_instance_init.isra.0+0xb8>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   18ca2:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   18ca6:	0799      	lsls	r1, r3, #30
   18ca8:	d528      	bpl.n	18cfc <uarte_instance_init.isra.0+0xe4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   18caa:	f107 0012 	add.w	r0, r7, #18
   18cae:	f001 fdb5 	bl	1a81c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   18cb2:	4b27      	ldr	r3, [pc, #156]	; (18d50 <uarte_instance_init.isra.0+0x138>)
   18cb4:	4298      	cmp	r0, r3
   18cb6:	d00e      	beq.n	18cd6 <uarte_instance_init.isra.0+0xbe>
   18cb8:	4b26      	ldr	r3, [pc, #152]	; (18d54 <uarte_instance_init.isra.0+0x13c>)
   18cba:	4927      	ldr	r1, [pc, #156]	; (18d58 <uarte_instance_init.isra.0+0x140>)
		LOG_ERR("Failed to allocate PPI Channel");
   18cbc:	4827      	ldr	r0, [pc, #156]	; (18d5c <uarte_instance_init.isra.0+0x144>)
   18cbe:	1ac9      	subs	r1, r1, r3
   18cc0:	08c9      	lsrs	r1, r1, #3
   18cc2:	0189      	lsls	r1, r1, #6
   18cc4:	f041 0101 	orr.w	r1, r1, #1
   18cc8:	f006 f9d8 	bl	1f07c <log_0>
		return -EIO;
   18ccc:	f06f 0504 	mvn.w	r5, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   18cd0:	4628      	mov	r0, r5
   18cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   18cd6:	7cb8      	ldrb	r0, [r7, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   18cd8:	00c3      	lsls	r3, r0, #3
   18cda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18cde:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   18ce2:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   18ce6:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   18cea:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   18cee:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   18cf2:	4a1b      	ldr	r2, [pc, #108]	; (18d60 <uarte_instance_init.isra.0+0x148>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   18cf4:	2301      	movs	r3, #1
   18cf6:	4083      	lsls	r3, r0
   18cf8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   18cfc:	2308      	movs	r3, #8
   18cfe:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   18d02:	f898 3008 	ldrb.w	r3, [r8, #8]
   18d06:	b95b      	cbnz	r3, 18d20 <uarte_instance_init.isra.0+0x108>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18d08:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   18d0c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   18d10:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   18d14:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   18d18:	2301      	movs	r3, #1
   18d1a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18d1e:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   18d20:	f8d8 3004 	ldr.w	r3, [r8, #4]
   18d24:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   18d26:	bf5c      	itt	pl
   18d28:	f44f 7280 	movpl.w	r2, #256	; 0x100
   18d2c:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   18d30:	06db      	lsls	r3, r3, #27
   18d32:	bf44      	itt	mi
   18d34:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   18d38:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   18d3c:	3710      	adds	r7, #16
    p_reg->TXD.MAXCNT = length;
   18d3e:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   18d40:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   18d44:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18d48:	2301      	movs	r3, #1
   18d4a:	60a3      	str	r3, [r4, #8]
   18d4c:	60e3      	str	r3, [r4, #12]
	return 0;
   18d4e:	e7bf      	b.n	18cd0 <uarte_instance_init.isra.0+0xb8>
   18d50:	0bad0000 	.word	0x0bad0000
   18d54:	00020d88 	.word	0x00020d88
   18d58:	00020e20 	.word	0x00020e20
   18d5c:	00022166 	.word	0x00022166
   18d60:	4001f000 	.word	0x4001f000

00018d64 <random_byte_get>:
	__asm__ volatile(
   18d64:	f04f 0340 	mov.w	r3, #64	; 0x40
   18d68:	f3ef 8211 	mrs	r2, BASEPRI
   18d6c:	f383 8812 	msr	BASEPRI_MAX, r3
   18d70:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   18d74:	4b08      	ldr	r3, [pc, #32]	; (18d98 <random_byte_get+0x34>)
   18d76:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   18d78:	b159      	cbz	r1, 18d92 <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   18d7a:	4908      	ldr	r1, [pc, #32]	; (18d9c <random_byte_get+0x38>)
   18d7c:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18d80:	2100      	movs	r1, #0
   18d82:	6019      	str	r1, [r3, #0]
   18d84:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   18d86:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   18d88:	f382 8811 	msr	BASEPRI, r2
   18d8c:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   18d90:	4770      	bx	lr
	int retval = -EAGAIN;
   18d92:	f06f 000a 	mvn.w	r0, #10
   18d96:	e7f7      	b.n	18d88 <random_byte_get+0x24>
   18d98:	4000d100 	.word	0x4000d100
   18d9c:	4000d000 	.word	0x4000d000

00018da0 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   18da0:	b5f0      	push	{r4, r5, r6, r7, lr}
   18da2:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   18da4:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   18da6:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   18da8:	f04f 0540 	mov.w	r5, #64	; 0x40
   18dac:	f3ef 8011 	mrs	r0, BASEPRI
   18db0:	f385 8812 	msr	BASEPRI_MAX, r5
   18db4:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   18db8:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   18dba:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   18dbe:	1ba4      	subs	r4, r4, r6
   18dc0:	403c      	ands	r4, r7
	if (available < len) {
   18dc2:	42a2      	cmp	r2, r4
		len = available;
   18dc4:	bf88      	it	hi
   18dc6:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   18dc8:	eb06 0c02 	add.w	ip, r6, r2
   18dcc:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   18dd0:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   18dd2:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   18dd6:	f380 8811 	msr	BASEPRI, r0
   18dda:	f3bf 8f6f 	isb	sy
   18dde:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   18de0:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   18de2:	4282      	cmp	r2, r0
   18de4:	d119      	bne.n	18e1a <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   18de6:	4576      	cmp	r6, lr
   18de8:	d10d      	bne.n	18e06 <rng_pool_get+0x66>
	__asm__ volatile(
   18dea:	f04f 0540 	mov.w	r5, #64	; 0x40
   18dee:	f3ef 8211 	mrs	r2, BASEPRI
   18df2:	f385 8812 	msr	BASEPRI_MAX, r5
   18df6:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   18dfa:	781d      	ldrb	r5, [r3, #0]
   18dfc:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   18dfe:	f382 8811 	msr	BASEPRI, r2
   18e02:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   18e06:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   18e08:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   18e0a:	b288      	uxth	r0, r1
	available = available - len;
   18e0c:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   18e0e:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   18e10:	bf22      	ittt	cs
   18e12:	4b06      	ldrcs	r3, [pc, #24]	; (18e2c <rng_pool_get+0x8c>)
   18e14:	2201      	movcs	r2, #1
   18e16:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   18e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   18e1a:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   18e1e:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   18e20:	f89c c005 	ldrb.w	ip, [ip, #5]
   18e24:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   18e28:	403d      	ands	r5, r7
   18e2a:	e7da      	b.n	18de2 <rng_pool_get+0x42>
   18e2c:	4000d000 	.word	0x4000d000

00018e30 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   18e30:	43db      	mvns	r3, r3
{
   18e32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   18e36:	f013 0501 	ands.w	r5, r3, #1
{
   18e3a:	460e      	mov	r6, r1
   18e3c:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   18e3e:	d004      	beq.n	18e4a <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   18e40:	4821      	ldr	r0, [pc, #132]	; (18ec8 <entropy_nrf5_get_entropy_isr+0x98>)
   18e42:	f7ff ffad 	bl	18da0 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   18e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   18e4a:	2a00      	cmp	r2, #0
   18e4c:	d033      	beq.n	18eb6 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   18e4e:	f04f 0340 	mov.w	r3, #64	; 0x40
   18e52:	f3ef 8811 	mrs	r8, BASEPRI
   18e56:	f383 8812 	msr	BASEPRI_MAX, r3
   18e5a:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   18e5e:	200d      	movs	r0, #13
   18e60:	f7fc fe28 	bl	15ab4 <arch_irq_is_enabled>
   18e64:	4607      	mov	r7, r0
		irq_disable(IRQN);
   18e66:	200d      	movs	r0, #13
   18e68:	f7fc fe10 	bl	15a8c <arch_irq_disable>
	__asm__ volatile(
   18e6c:	f388 8811 	msr	BASEPRI, r8
   18e70:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18e74:	4a15      	ldr	r2, [pc, #84]	; (18ecc <entropy_nrf5_get_entropy_isr+0x9c>)
   18e76:	6015      	str	r5, [r2, #0]
   18e78:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   18e7a:	4b15      	ldr	r3, [pc, #84]	; (18ed0 <entropy_nrf5_get_entropy_isr+0xa0>)
   18e7c:	2101      	movs	r1, #1
   18e7e:	6019      	str	r1, [r3, #0]
   18e80:	4914      	ldr	r1, [pc, #80]	; (18ed4 <entropy_nrf5_get_entropy_isr+0xa4>)
   18e82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   18e86:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   18e8a:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   18e8c:	4691      	mov	r9, r2
   18e8e:	468a      	mov	sl, r1
   18e90:	4698      	mov	r8, r3
   18e92:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   18e96:	b183      	cbz	r3, 18eba <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   18e98:	f7ff ff64 	bl	18d64 <random_byte_get>
			if (byte < 0) {
   18e9c:	1e03      	subs	r3, r0, #0
   18e9e:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   18ea2:	dbf6      	blt.n	18e92 <entropy_nrf5_get_entropy_isr+0x62>
   18ea4:	3d01      	subs	r5, #1
   18ea6:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   18ea8:	5573      	strb	r3, [r6, r5]
		} while (len);
   18eaa:	2d00      	cmp	r5, #0
   18eac:	d1f1      	bne.n	18e92 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   18eae:	b117      	cbz	r7, 18eb6 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   18eb0:	200d      	movs	r0, #13
   18eb2:	f7fc fddb 	bl	15a6c <arch_irq_enable>
	return cnt;
   18eb6:	4620      	mov	r0, r4
   18eb8:	e7c5      	b.n	18e46 <entropy_nrf5_get_entropy_isr+0x16>
   18eba:	f3bf 8f4f 	dsb	sy
				__WFE();
   18ebe:	bf20      	wfe
				__SEV();
   18ec0:	bf40      	sev
				__WFE();
   18ec2:	bf20      	wfe
   18ec4:	e7e5      	b.n	18e92 <entropy_nrf5_get_entropy_isr+0x62>
   18ec6:	bf00      	nop
   18ec8:	20001ffc 	.word	0x20001ffc
   18ecc:	4000d100 	.word	0x4000d100
   18ed0:	4000d000 	.word	0x4000d000
   18ed4:	e000e100 	.word	0xe000e100

00018ed8 <entropy_nrf5_get_entropy>:
{
   18ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   18edc:	4f13      	ldr	r7, [pc, #76]	; (18f2c <entropy_nrf5_get_entropy+0x54>)
   18ede:	460d      	mov	r5, r1
   18ee0:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   18ee2:	f107 0845 	add.w	r8, r7, #69	; 0x45
   18ee6:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   18eea:	b914      	cbnz	r4, 18ef2 <entropy_nrf5_get_entropy+0x1a>
}
   18eec:	4620      	mov	r0, r4
   18eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18ef6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18efa:	4638      	mov	r0, r7
   18efc:	f002 f8de 	bl	1b0bc <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   18f00:	4622      	mov	r2, r4
   18f02:	4629      	mov	r1, r5
   18f04:	4640      	mov	r0, r8
   18f06:	f7ff ff4b 	bl	18da0 <rng_pool_get>
   18f0a:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   18f0c:	4638      	mov	r0, r7
   18f0e:	f002 f8af 	bl	1b070 <z_impl_k_sem_give>
		if (bytes == 0U) {
   18f12:	b93e      	cbnz	r6, 18f24 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   18f14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18f1c:	4648      	mov	r0, r9
   18f1e:	f002 f8cd 	bl	1b0bc <z_impl_k_sem_take>
			continue;
   18f22:	e7e2      	b.n	18eea <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   18f24:	1ba4      	subs	r4, r4, r6
   18f26:	b2a4      	uxth	r4, r4
		buf += bytes;
   18f28:	4435      	add	r5, r6
   18f2a:	e7de      	b.n	18eea <entropy_nrf5_get_entropy+0x12>
   18f2c:	20001fcc 	.word	0x20001fcc

00018f30 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   18f30:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   18f32:	4c19      	ldr	r4, [pc, #100]	; (18f98 <entropy_nrf5_init+0x68>)
   18f34:	2201      	movs	r2, #1
   18f36:	4611      	mov	r1, r2
   18f38:	4620      	mov	r0, r4
   18f3a:	f007 fa0a 	bl	20352 <z_impl_k_sem_init>
   18f3e:	2201      	movs	r2, #1
   18f40:	2100      	movs	r1, #0
   18f42:	f104 0018 	add.w	r0, r4, #24
   18f46:	f007 fa04 	bl	20352 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   18f4a:	f240 4307 	movw	r3, #1031	; 0x407
   18f4e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   18f52:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   18f56:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   18f58:	230c      	movs	r3, #12
   18f5a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   18f5e:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   18f60:	4b0e      	ldr	r3, [pc, #56]	; (18f9c <entropy_nrf5_init+0x6c>)
   18f62:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   18f66:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   18f6a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   18f6e:	f022 0201 	bic.w	r2, r2, #1
   18f72:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18f76:	4a0a      	ldr	r2, [pc, #40]	; (18fa0 <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
   18f78:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18f7a:	6015      	str	r5, [r2, #0]
   18f7c:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   18f7e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   18f82:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   18f84:	6019      	str	r1, [r3, #0]
   18f86:	200d      	movs	r0, #13
   18f88:	f7fc fda2 	bl	15ad0 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   18f8c:	200d      	movs	r0, #13
   18f8e:	f7fc fd6d 	bl	15a6c <arch_irq_enable>

	return 0;
}
   18f92:	4628      	mov	r0, r5
   18f94:	bd38      	pop	{r3, r4, r5, pc}
   18f96:	bf00      	nop
   18f98:	20001fcc 	.word	0x20001fcc
   18f9c:	4000d000 	.word	0x4000d000
   18fa0:	4000d100 	.word	0x4000d100

00018fa4 <isr>:
{
   18fa4:	b510      	push	{r4, lr}
	byte = random_byte_get();
   18fa6:	f7ff fedd 	bl	18d64 <random_byte_get>
	if (byte < 0) {
   18faa:	2800      	cmp	r0, #0
   18fac:	db20      	blt.n	18ff0 <isr+0x4c>
	uint8_t last  = rngp->last;
   18fae:	4b17      	ldr	r3, [pc, #92]	; (1900c <isr+0x68>)
   18fb0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   18fb4:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   18fb8:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   18fbc:	1a51      	subs	r1, r2, r1
   18fbe:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   18fc2:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   18fc4:	d10d      	bne.n	18fe2 <isr+0x3e>
	uint8_t last  = rngp->last;
   18fc6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   18fca:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   18fce:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   18fd2:	1a51      	subs	r1, r2, r1
   18fd4:	ea34 0101 	bics.w	r1, r4, r1
   18fd8:	d10b      	bne.n	18ff2 <isr+0x4e>
   18fda:	4b0d      	ldr	r3, [pc, #52]	; (19010 <isr+0x6c>)
   18fdc:	2201      	movs	r2, #1
   18fde:	601a      	str	r2, [r3, #0]
}
   18fe0:	e00e      	b.n	19000 <isr+0x5c>
	rngp->buffer[last] = byte;
   18fe2:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   18fe4:	3201      	adds	r2, #1
   18fe6:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   18fe8:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   18fec:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   18ff0:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   18ff2:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   18ff4:	3201      	adds	r2, #1
   18ff6:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   18ff8:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   18ffc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   19000:	4804      	ldr	r0, [pc, #16]	; (19014 <isr+0x70>)
}
   19002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19006:	f002 b833 	b.w	1b070 <z_impl_k_sem_give>
   1900a:	bf00      	nop
   1900c:	20001fcc 	.word	0x20001fcc
   19010:	4000d004 	.word	0x4000d004
   19014:	20001fe4 	.word	0x20001fe4

00019018 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   19018:	4919      	ldr	r1, [pc, #100]	; (19080 <sys_clock_timeout_handler+0x68>)
{
   1901a:	b570      	push	{r4, r5, r6, lr}
   1901c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1901e:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   19022:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   19024:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   19028:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1902c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1902e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   19032:	f04f 0500 	mov.w	r5, #0
   19036:	d20a      	bcs.n	1904e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   19038:	4b12      	ldr	r3, [pc, #72]	; (19084 <sys_clock_timeout_handler+0x6c>)
   1903a:	6819      	ldr	r1, [r3, #0]
   1903c:	060a      	lsls	r2, r1, #24
   1903e:	0a0b      	lsrs	r3, r1, #8
   19040:	1992      	adds	r2, r2, r6
   19042:	4911      	ldr	r1, [pc, #68]	; (19088 <sys_clock_timeout_handler+0x70>)
   19044:	f143 0300 	adc.w	r3, r3, #0
   19048:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   1904c:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1904e:	f002 fe2f 	bl	1bcb0 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   19052:	00a3      	lsls	r3, r4, #2
   19054:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19058:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1905c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   19060:	42b2      	cmp	r2, r6
   19062:	d10b      	bne.n	1907c <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   19064:	b91d      	cbnz	r5, 1906e <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
   19066:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1906a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1906e:	4b07      	ldr	r3, [pc, #28]	; (1908c <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   19070:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   19074:	fa00 f404 	lsl.w	r4, r0, r4
   19078:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1907c:	bd70      	pop	{r4, r5, r6, pc}
   1907e:	bf00      	nop
   19080:	200016a8 	.word	0x200016a8
   19084:	20002028 	.word	0x20002028
   19088:	20001690 	.word	0x20001690
   1908c:	40011000 	.word	0x40011000

00019090 <compare_int_lock>:
{
   19090:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   19092:	2301      	movs	r3, #1
   19094:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19096:	4a11      	ldr	r2, [pc, #68]	; (190dc <compare_int_lock+0x4c>)
   19098:	f3bf 8f5b 	dmb	ish
   1909c:	43dc      	mvns	r4, r3
   1909e:	e852 1f00 	ldrex	r1, [r2]
   190a2:	ea01 0c04 	and.w	ip, r1, r4
   190a6:	e842 ce00 	strex	lr, ip, [r2]
   190aa:	f1be 0f00 	cmp.w	lr, #0
   190ae:	d1f6      	bne.n	1909e <compare_int_lock+0xe>
   190b0:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   190b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   190b8:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   190bc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   190c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   190c4:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   190c8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   190cc:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   190d0:	420b      	tst	r3, r1
}
   190d2:	bf14      	ite	ne
   190d4:	2001      	movne	r0, #1
   190d6:	2000      	moveq	r0, #0
   190d8:	bd10      	pop	{r4, pc}
   190da:	bf00      	nop
   190dc:	20002024 	.word	0x20002024

000190e0 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
   190e0:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   190e2:	4a12      	ldr	r2, [pc, #72]	; (1912c <compare_int_unlock.part.0+0x4c>)
   190e4:	f3bf 8f5b 	dmb	ish
   190e8:	4083      	lsls	r3, r0
   190ea:	e852 1f00 	ldrex	r1, [r2]
   190ee:	4319      	orrs	r1, r3
   190f0:	e842 1c00 	strex	ip, r1, [r2]
   190f4:	f1bc 0f00 	cmp.w	ip, #0
   190f8:	d1f7      	bne.n	190ea <compare_int_unlock.part.0+0xa>
   190fa:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   190fe:	4a0c      	ldr	r2, [pc, #48]	; (19130 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   19100:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19104:	4083      	lsls	r3, r0
   19106:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1910a:	4b0a      	ldr	r3, [pc, #40]	; (19134 <compare_int_unlock.part.0+0x54>)
   1910c:	f3bf 8f5b 	dmb	ish
   19110:	681b      	ldr	r3, [r3, #0]
   19112:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   19116:	fa23 f000 	lsr.w	r0, r3, r0
   1911a:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1911c:	bf42      	ittt	mi
   1911e:	4b06      	ldrmi	r3, [pc, #24]	; (19138 <compare_int_unlock.part.0+0x58>)
   19120:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   19124:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   19128:	4770      	bx	lr
   1912a:	bf00      	nop
   1912c:	20002024 	.word	0x20002024
   19130:	40011000 	.word	0x40011000
   19134:	20002020 	.word	0x20002020
   19138:	e000e100 	.word	0xe000e100

0001913c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1913c:	4b0d      	ldr	r3, [pc, #52]	; (19174 <z_nrf_rtc_timer_read+0x38>)
   1913e:	681b      	ldr	r3, [r3, #0]
   19140:	0a19      	lsrs	r1, r3, #8
   19142:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   19144:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   19148:	4b0b      	ldr	r3, [pc, #44]	; (19178 <z_nrf_rtc_timer_read+0x3c>)
   1914a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1914e:	18c0      	adds	r0, r0, r3
   19150:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   19154:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   19158:	d20a      	bcs.n	19170 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1915a:	4b08      	ldr	r3, [pc, #32]	; (1917c <z_nrf_rtc_timer_read+0x40>)
   1915c:	e9d3 2300 	ldrd	r2, r3, [r3]
   19160:	4299      	cmp	r1, r3
   19162:	bf08      	it	eq
   19164:	4290      	cmpeq	r0, r2
   19166:	d203      	bcs.n	19170 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   19168:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1916c:	f141 0100 	adc.w	r1, r1, #0
}
   19170:	4770      	bx	lr
   19172:	bf00      	nop
   19174:	20002028 	.word	0x20002028
   19178:	40011000 	.word	0x40011000
   1917c:	20001690 	.word	0x20001690

00019180 <compare_set>:
{
   19180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19184:	b085      	sub	sp, #20
   19186:	4616      	mov	r6, r2
   19188:	461f      	mov	r7, r3
   1918a:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   1918c:	f7ff ff80 	bl	19090 <compare_int_lock>
   19190:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   19192:	f7ff ffd3 	bl	1913c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   19196:	42b9      	cmp	r1, r7
   19198:	bf08      	it	eq
   1919a:	42b0      	cmpeq	r0, r6
   1919c:	d27f      	bcs.n	1929e <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
   1919e:	ebb6 0800 	subs.w	r8, r6, r0
   191a2:	eb67 0901 	sbc.w	r9, r7, r1
   191a6:	2300      	movs	r3, #0
   191a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   191ac:	454b      	cmp	r3, r9
   191ae:	bf08      	it	eq
   191b0:	4542      	cmpeq	r2, r8
   191b2:	f0c0 8085 	bcc.w	192c0 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
   191b6:	4b44      	ldr	r3, [pc, #272]	; (192c8 <compare_set+0x148>)
   191b8:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   191bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   191c0:	429f      	cmp	r7, r3
   191c2:	bf08      	it	eq
   191c4:	4296      	cmpeq	r6, r2
   191c6:	d054      	beq.n	19272 <compare_set+0xf2>
   191c8:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   191cc:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
   191d0:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   191d4:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   191d8:	fa0b f205 	lsl.w	r2, fp, r5
   191dc:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   191e0:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   191e4:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   191e8:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
   191ea:	4a38      	ldr	r2, [pc, #224]	; (192cc <compare_set+0x14c>)
    return p_reg->CC[ch];
   191ec:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
   191f0:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   191f4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   191f8:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   191fc:	461c      	mov	r4, r3
   191fe:	4693      	mov	fp, r2
     return p_reg->COUNTER;
   19200:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   19204:	eba0 000a 	sub.w	r0, r0, sl
   19208:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1920c:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   19210:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   19212:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
   19216:	d105      	bne.n	19224 <compare_set+0xa4>
   19218:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   1921a:	2013      	movs	r0, #19
   1921c:	f007 faa9 	bl	20772 <z_impl_k_busy_wait>
   19220:	4a2a      	ldr	r2, [pc, #168]	; (192cc <compare_set+0x14c>)
   19222:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
   19224:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   19226:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   1922a:	eba4 000c 	sub.w	r0, r4, ip
   1922e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   19232:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   19236:	bf88      	it	hi
   19238:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1923a:	2000      	movs	r0, #0
   1923c:	f8c8 0000 	str.w	r0, [r8]
   19240:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   19244:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   19248:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1924c:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   19250:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   19254:	4582      	cmp	sl, r0
   19256:	d006      	beq.n	19266 <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
   19258:	1a20      	subs	r0, r4, r0
   1925a:	3802      	subs	r0, #2
   1925c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   19260:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   19264:	d819      	bhi.n	1929a <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
   19266:	1ae4      	subs	r4, r4, r3
   19268:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1926c:	1932      	adds	r2, r6, r4
   1926e:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
   19272:	4c15      	ldr	r4, [pc, #84]	; (192c8 <compare_set+0x148>)
   19274:	0129      	lsls	r1, r5, #4
   19276:	eb04 1005 	add.w	r0, r4, r5, lsl #4
   1927a:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
   1927e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
   19280:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
   19282:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
   19284:	6043      	str	r3, [r0, #4]
	return ret;
   19286:	2400      	movs	r4, #0
	if (key) {
   19288:	9b01      	ldr	r3, [sp, #4]
   1928a:	b113      	cbz	r3, 19292 <compare_set+0x112>
   1928c:	4628      	mov	r0, r5
   1928e:	f7ff ff27 	bl	190e0 <compare_int_unlock.part.0>
}
   19292:	4620      	mov	r0, r4
   19294:	b005      	add	sp, #20
   19296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1929a:	4620      	mov	r0, r4
   1929c:	e7b0      	b.n	19200 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   1929e:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   192a0:	4a0b      	ldr	r2, [pc, #44]	; (192d0 <compare_set+0x150>)
   192a2:	f3bf 8f5b 	dmb	ish
   192a6:	40ab      	lsls	r3, r5
   192a8:	e852 1f00 	ldrex	r1, [r2]
   192ac:	4319      	orrs	r1, r3
   192ae:	e842 1000 	strex	r0, r1, [r2]
   192b2:	2800      	cmp	r0, #0
   192b4:	d1f8      	bne.n	192a8 <compare_set+0x128>
   192b6:	f3bf 8f5b 	dmb	ish
   192ba:	4632      	mov	r2, r6
   192bc:	463b      	mov	r3, r7
   192be:	e7d8      	b.n	19272 <compare_set+0xf2>
			return -EINVAL;
   192c0:	f06f 0415 	mvn.w	r4, #21
   192c4:	e7e0      	b.n	19288 <compare_set+0x108>
   192c6:	bf00      	nop
   192c8:	20001698 	.word	0x20001698
   192cc:	40011000 	.word	0x40011000
   192d0:	20002020 	.word	0x20002020

000192d4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   192d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   192d6:	4b19      	ldr	r3, [pc, #100]	; (1933c <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   192d8:	4d19      	ldr	r5, [pc, #100]	; (19340 <sys_clock_driver_init+0x6c>)
   192da:	2400      	movs	r4, #0
   192dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   192e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   192e4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   192e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   192ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   192f0:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   192f4:	4b13      	ldr	r3, [pc, #76]	; (19344 <sys_clock_driver_init+0x70>)
   192f6:	2602      	movs	r6, #2
   192f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   192fc:	2101      	movs	r1, #1
   192fe:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   19302:	2011      	movs	r0, #17
   19304:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   19308:	4622      	mov	r2, r4
   1930a:	f7fc fbe1 	bl	15ad0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1930e:	2011      	movs	r0, #17
   19310:	f7fc fbac 	bl	15a6c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   19314:	4a0c      	ldr	r2, [pc, #48]	; (19348 <sys_clock_driver_init+0x74>)
   19316:	2301      	movs	r3, #1
   19318:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1931a:	4a0c      	ldr	r2, [pc, #48]	; (1934c <sys_clock_driver_init+0x78>)
   1931c:	602b      	str	r3, [r5, #0]
   1931e:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   19320:	4b0b      	ldr	r3, [pc, #44]	; (19350 <sys_clock_driver_init+0x7c>)
   19322:	4a0c      	ldr	r2, [pc, #48]	; (19354 <sys_clock_driver_init+0x80>)
   19324:	9300      	str	r3, [sp, #0]
   19326:	9401      	str	r4, [sp, #4]
   19328:	2300      	movs	r3, #0
   1932a:	4620      	mov	r0, r4
   1932c:	f7ff ff28 	bl	19180 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   19330:	4630      	mov	r0, r6
   19332:	f7ff f91d 	bl	18570 <z_nrf_clock_control_lf_on>

	return 0;
}
   19336:	4620      	mov	r0, r4
   19338:	b002      	add	sp, #8
   1933a:	bd70      	pop	{r4, r5, r6, pc}
   1933c:	20001698 	.word	0x20001698
   19340:	40011000 	.word	0x40011000
   19344:	e000e100 	.word	0xe000e100
   19348:	40011008 	.word	0x40011008
   1934c:	20002024 	.word	0x20002024
   19350:	00019019 	.word	0x00019019
   19354:	007fffff 	.word	0x007fffff

00019358 <rtc_nrf_isr>:
{
   19358:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return p_reg->INTENSET & mask;
   1935c:	4c2a      	ldr	r4, [pc, #168]	; (19408 <rtc_nrf_isr+0xb0>)
   1935e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   19362:	0799      	lsls	r1, r3, #30
   19364:	d509      	bpl.n	1937a <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19366:	4b29      	ldr	r3, [pc, #164]	; (1940c <rtc_nrf_isr+0xb4>)
   19368:	681a      	ldr	r2, [r3, #0]
   1936a:	b132      	cbz	r2, 1937a <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1936c:	2200      	movs	r2, #0
   1936e:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
   19370:	4a27      	ldr	r2, [pc, #156]	; (19410 <rtc_nrf_isr+0xb8>)
   19372:	681b      	ldr	r3, [r3, #0]
   19374:	6813      	ldr	r3, [r2, #0]
   19376:	3301      	adds	r3, #1
   19378:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1937a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1937e:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   19380:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   19384:	03d2      	lsls	r2, r2, #15
   19386:	d52c      	bpl.n	193e2 <rtc_nrf_isr+0x8a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19388:	f3bf 8f5b 	dmb	ish
   1938c:	4a21      	ldr	r2, [pc, #132]	; (19414 <rtc_nrf_isr+0xbc>)
   1938e:	e852 1f00 	ldrex	r1, [r2]
   19392:	f021 0001 	bic.w	r0, r1, #1
   19396:	e842 0500 	strex	r5, r0, [r2]
   1939a:	2d00      	cmp	r5, #0
   1939c:	d1f7      	bne.n	1938e <rtc_nrf_isr+0x36>
   1939e:	f3bf 8f5b 	dmb	ish
   193a2:	4a1d      	ldr	r2, [pc, #116]	; (19418 <rtc_nrf_isr+0xc0>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   193a4:	b909      	cbnz	r1, 193aa <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   193a6:	6811      	ldr	r1, [r2, #0]
		if (result) {
   193a8:	b1d9      	cbz	r1, 193e2 <rtc_nrf_isr+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   193aa:	2500      	movs	r5, #0
   193ac:	6015      	str	r5, [r2, #0]
   193ae:	6812      	ldr	r2, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   193b0:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   193b4:	f7ff fec2 	bl	1913c <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   193b8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   193bc:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   193be:	4b17      	ldr	r3, [pc, #92]	; (1941c <rtc_nrf_isr+0xc4>)
   193c0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   193c4:	4549      	cmp	r1, r9
   193c6:	bf08      	it	eq
   193c8:	4540      	cmpeq	r0, r8
   193ca:	d20f      	bcs.n	193ec <rtc_nrf_isr+0x94>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   193cc:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   193ce:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   193d2:	b141      	cbz	r1, 193e6 <rtc_nrf_isr+0x8e>
			handler(chan, expire_time, user_context);
   193d4:	f8cd a000 	str.w	sl, [sp]
   193d8:	4642      	mov	r2, r8
   193da:	464b      	mov	r3, r9
   193dc:	2000      	movs	r0, #0
   193de:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   193e0:	e001      	b.n	193e6 <rtc_nrf_isr+0x8e>
   193e2:	f383 8810 	msr	PRIMASK, r3
}
   193e6:	b002      	add	sp, #8
   193e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   193ec:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   193f0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   193f4:	e9d3 1a00 	ldrd	r1, sl, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   193f8:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
   193fc:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   193fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19402:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   19406:	e7e2      	b.n	193ce <rtc_nrf_isr+0x76>
   19408:	40011000 	.word	0x40011000
   1940c:	40011104 	.word	0x40011104
   19410:	20002028 	.word	0x20002028
   19414:	20002020 	.word	0x20002020
   19418:	40011140 	.word	0x40011140
   1941c:	20001698 	.word	0x20001698

00019420 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   19420:	4b14      	ldr	r3, [pc, #80]	; (19474 <sys_clock_set_timeout+0x54>)
{
   19422:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   19424:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   19428:	bf08      	it	eq
   1942a:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1942c:	1e44      	subs	r4, r0, #1
   1942e:	2c00      	cmp	r4, #0
   19430:	dd1e      	ble.n	19470 <sys_clock_set_timeout+0x50>
   19432:	429c      	cmp	r4, r3
   19434:	bfa8      	it	ge
   19436:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   19438:	f7ff fe80 	bl	1913c <z_nrf_rtc_timer_read>
   1943c:	4b0e      	ldr	r3, [pc, #56]	; (19478 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1943e:	490f      	ldr	r1, [pc, #60]	; (1947c <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   19440:	e9d3 2300 	ldrd	r2, r3, [r3]
   19444:	1a80      	subs	r0, r0, r2
		ticks = 0;
   19446:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1944a:	bf28      	it	cs
   1944c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1944e:	3001      	adds	r0, #1
   19450:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
   19452:	4808      	ldr	r0, [pc, #32]	; (19474 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   19454:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   19456:	4284      	cmp	r4, r0
   19458:	bf28      	it	cs
   1945a:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1945c:	1912      	adds	r2, r2, r4
   1945e:	f04f 0000 	mov.w	r0, #0
   19462:	9001      	str	r0, [sp, #4]
   19464:	f143 0300 	adc.w	r3, r3, #0
   19468:	f7ff fe8a 	bl	19180 <compare_set>
}
   1946c:	b002      	add	sp, #8
   1946e:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   19470:	2400      	movs	r4, #0
   19472:	e7e1      	b.n	19438 <sys_clock_set_timeout+0x18>
   19474:	007fffff 	.word	0x007fffff
   19478:	200016a8 	.word	0x200016a8
   1947c:	00019019 	.word	0x00019019

00019480 <sys_clock_elapsed>:
{
   19480:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   19482:	f7ff fe5b 	bl	1913c <z_nrf_rtc_timer_read>
   19486:	4b02      	ldr	r3, [pc, #8]	; (19490 <sys_clock_elapsed+0x10>)
   19488:	681b      	ldr	r3, [r3, #0]
}
   1948a:	1ac0      	subs	r0, r0, r3
   1948c:	bd08      	pop	{r3, pc}
   1948e:	bf00      	nop
   19490:	200016a8 	.word	0x200016a8

00019494 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   19494:	4602      	mov	r2, r0
   19496:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   19498:	4801      	ldr	r0, [pc, #4]	; (194a0 <multithreading_lock_acquire+0xc>)
   1949a:	f001 bcf1 	b.w	1ae80 <z_impl_k_mutex_lock>
   1949e:	bf00      	nop
   194a0:	20000600 	.word	0x20000600

000194a4 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   194a4:	4801      	ldr	r0, [pc, #4]	; (194ac <multithreading_lock_release+0x8>)
   194a6:	f001 bd69 	b.w	1af7c <z_impl_k_mutex_unlock>
   194aa:	bf00      	nop
   194ac:	20000600 	.word	0x20000600

000194b0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   194b0:	b508      	push	{r3, lr}
	z_impl_log_panic();
   194b2:	f7fb fd17 	bl	14ee4 <z_impl_log_panic>
   194b6:	4b06      	ldr	r3, [pc, #24]	; (194d0 <k_sys_fatal_error_handler+0x20>)
   194b8:	4906      	ldr	r1, [pc, #24]	; (194d4 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   194ba:	4807      	ldr	r0, [pc, #28]	; (194d8 <k_sys_fatal_error_handler+0x28>)
   194bc:	1ac9      	subs	r1, r1, r3
   194be:	08c9      	lsrs	r1, r1, #3
   194c0:	0189      	lsls	r1, r1, #6
   194c2:	f041 0101 	orr.w	r1, r1, #1
   194c6:	f005 fdd9 	bl	1f07c <log_0>
		sys_arch_reboot(0);
   194ca:	2000      	movs	r0, #0
   194cc:	f7fc fffa 	bl	164c4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   194d0:	00020d88 	.word	0x00020d88
   194d4:	00020dc0 	.word	0x00020dc0
   194d8:	000221b2 	.word	0x000221b2

000194dc <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   194dc:	460a      	mov	r2, r1
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   194de:	4905      	ldr	r1, [pc, #20]	; (194f4 <rand_prio_low_vector_get_blocking+0x18>)
{
   194e0:	b410      	push	{r4}
   194e2:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   194e4:	6808      	ldr	r0, [r1, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   194e6:	6881      	ldr	r1, [r0, #8]
   194e8:	680c      	ldr	r4, [r1, #0]
   194ea:	4619      	mov	r1, r3
   194ec:	4623      	mov	r3, r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   194ee:	bc10      	pop	{r4}
   194f0:	4718      	bx	r3
   194f2:	bf00      	nop
   194f4:	2000202c 	.word	0x2000202c

000194f8 <sdc_assertion_handler>:
{
   194f8:	b538      	push	{r3, r4, r5, lr}
   194fa:	4b0b      	ldr	r3, [pc, #44]	; (19528 <sdc_assertion_handler+0x30>)
   194fc:	4c0b      	ldr	r4, [pc, #44]	; (1952c <sdc_assertion_handler+0x34>)
   194fe:	1ae4      	subs	r4, r4, r3
   19500:	460d      	mov	r5, r1
   19502:	08e4      	lsrs	r4, r4, #3
   19504:	f7fb fb82 	bl	14c0c <z_log_strdup>
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   19508:	01a4      	lsls	r4, r4, #6
   1950a:	f044 0401 	orr.w	r4, r4, #1
   1950e:	4601      	mov	r1, r0
   19510:	4623      	mov	r3, r4
   19512:	4807      	ldr	r0, [pc, #28]	; (19530 <sdc_assertion_handler+0x38>)
   19514:	462a      	mov	r2, r5
   19516:	f005 fdd2 	bl	1f0be <log_2>
	k_oops();
   1951a:	4040      	eors	r0, r0
   1951c:	f380 8811 	msr	BASEPRI, r0
   19520:	f04f 0003 	mov.w	r0, #3
   19524:	df02      	svc	2
}
   19526:	bd38      	pop	{r3, r4, r5, pc}
   19528:	00020d88 	.word	0x00020d88
   1952c:	00020e08 	.word	0x00020e08
   19530:	000221cf 	.word	0x000221cf

00019534 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   19534:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   19536:	4804      	ldr	r0, [pc, #16]	; (19548 <hci_driver_init+0x14>)
   19538:	f7fd fe2a 	bl	17190 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1953c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   19540:	4802      	ldr	r0, [pc, #8]	; (1954c <hci_driver_init+0x18>)
   19542:	f7ea bcaf 	b.w	3ea4 <sdc_init>
   19546:	bf00      	nop
   19548:	00021148 	.word	0x00021148
   1954c:	000194f9 	.word	0x000194f9

00019550 <rand_prio_low_vector_get>:
{
   19550:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   19552:	4b08      	ldr	r3, [pc, #32]	; (19574 <rand_prio_low_vector_get+0x24>)
{
   19554:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   19556:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   19558:	6883      	ldr	r3, [r0, #8]
   1955a:	685d      	ldr	r5, [r3, #4]
   1955c:	460a      	mov	r2, r1
   1955e:	b135      	cbz	r5, 1956e <rand_prio_low_vector_get+0x1e>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   19560:	2300      	movs	r3, #0
   19562:	4621      	mov	r1, r4
   19564:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   19566:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1956a:	b2c0      	uxtb	r0, r0
   1956c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1956e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   19572:	e7f8      	b.n	19566 <rand_prio_low_vector_get+0x16>
   19574:	2000202c 	.word	0x2000202c

00019578 <hci_driver_send>:
{
   19578:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   1957a:	8983      	ldrh	r3, [r0, #12]
{
   1957c:	4605      	mov	r5, r0
	if (!buf->len) {
   1957e:	b1c3      	cbz	r3, 195b2 <hci_driver_send+0x3a>
	switch (type) {
   19580:	7d03      	ldrb	r3, [r0, #20]
   19582:	b9b3      	cbnz	r3, 195b2 <hci_driver_send+0x3a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   19584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19588:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1958c:	f7ff ff82 	bl	19494 <multithreading_lock_acquire>
	if (!errcode) {
   19590:	4604      	mov	r4, r0
   19592:	b960      	cbnz	r0, 195ae <hci_driver_send+0x36>
		errcode = hci_internal_cmd_put(cmd->data);
   19594:	68a8      	ldr	r0, [r5, #8]
   19596:	f000 f951 	bl	1983c <hci_internal_cmd_put>
   1959a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1959c:	f7ff ff82 	bl	194a4 <multithreading_lock_release>
	if (errcode) {
   195a0:	b92c      	cbnz	r4, 195ae <hci_driver_send+0x36>
	z_impl_k_sem_give(sem);
   195a2:	4805      	ldr	r0, [pc, #20]	; (195b8 <hci_driver_send+0x40>)
   195a4:	f001 fd64 	bl	1b070 <z_impl_k_sem_give>
		net_buf_unref(buf);
   195a8:	4628      	mov	r0, r5
   195aa:	f7fe fea3 	bl	182f4 <net_buf_unref>
}
   195ae:	4620      	mov	r0, r4
   195b0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   195b2:	f06f 0415 	mvn.w	r4, #21
   195b6:	e7fa      	b.n	195ae <hci_driver_send+0x36>
   195b8:	2000067c 	.word	0x2000067c

000195bc <recv_thread>:
{
   195bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   195c0:	4b27      	ldr	r3, [pc, #156]	; (19660 <recv_thread+0xa4>)
   195c2:	4d28      	ldr	r5, [pc, #160]	; (19664 <recv_thread+0xa8>)
	return z_impl_k_sem_take(sem, timeout);
   195c4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 19670 <recv_thread+0xb4>
		errcode = hci_internal_evt_get(p_hci_buffer);
   195c8:	4e27      	ldr	r6, [pc, #156]	; (19668 <recv_thread+0xac>)
   195ca:	1aed      	subs	r5, r5, r3
   195cc:	08ed      	lsrs	r5, r5, #3
	bool received_evt = false;
   195ce:	2400      	movs	r4, #0
		if (!received_evt && !received_data) {
   195d0:	b934      	cbnz	r4, 195e0 <recv_thread+0x24>
   195d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   195d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   195da:	4640      	mov	r0, r8
   195dc:	f001 fd6e 	bl	1b0bc <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   195e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   195e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   195e8:	f7ff ff54 	bl	19494 <multithreading_lock_acquire>
	if (!errcode) {
   195ec:	b118      	cbz	r0, 195f6 <recv_thread+0x3a>
		return false;
   195ee:	2400      	movs	r4, #0
	z_impl_k_yield();
   195f0:	f002 f94a 	bl	1b888 <z_impl_k_yield>
}
   195f4:	e7ec      	b.n	195d0 <recv_thread+0x14>
		errcode = hci_internal_evt_get(p_hci_buffer);
   195f6:	481c      	ldr	r0, [pc, #112]	; (19668 <recv_thread+0xac>)
   195f8:	f000 fb9e 	bl	19d38 <hci_internal_evt_get>
   195fc:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   195fe:	f7ff ff51 	bl	194a4 <multithreading_lock_release>
	if (errcode) {
   19602:	2c00      	cmp	r4, #0
   19604:	d1f3      	bne.n	195ee <recv_thread+0x32>
	switch (hdr->evt) {
   19606:	7830      	ldrb	r0, [r6, #0]
   19608:	283e      	cmp	r0, #62	; 0x3e
   1960a:	d007      	beq.n	1961c <recv_thread+0x60>
   1960c:	28ff      	cmp	r0, #255	; 0xff
   1960e:	d01a      	beq.n	19646 <recv_thread+0x8a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   19610:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19618:	2400      	movs	r4, #0
   1961a:	e005      	b.n	19628 <recv_thread+0x6c>
		switch (me->subevent) {
   1961c:	78b3      	ldrb	r3, [r6, #2]
   1961e:	2b02      	cmp	r3, #2
		switch (subevent) {
   19620:	d1f6      	bne.n	19610 <recv_thread+0x54>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   19622:	2200      	movs	r2, #0
   19624:	2300      	movs	r3, #0
   19626:	2401      	movs	r4, #1
   19628:	4621      	mov	r1, r4
   1962a:	f7fc fff5 	bl	16618 <bt_buf_get_evt>
	if (!evt_buf) {
   1962e:	4607      	mov	r7, r0
   19630:	b960      	cbnz	r0, 1964c <recv_thread+0x90>
		if (discardable) {
   19632:	2c00      	cmp	r4, #0
   19634:	d1dc      	bne.n	195f0 <recv_thread+0x34>
		BT_ERR("No event buffer available");
   19636:	01a9      	lsls	r1, r5, #6
   19638:	480c      	ldr	r0, [pc, #48]	; (1966c <recv_thread+0xb0>)
   1963a:	f041 0101 	orr.w	r1, r1, #1
   1963e:	f005 fd1d 	bl	1f07c <log_0>
	return true;
   19642:	2401      	movs	r4, #1
   19644:	e7d4      	b.n	195f0 <recv_thread+0x34>
		switch (subevent) {
   19646:	78b3      	ldrb	r3, [r6, #2]
   19648:	2b80      	cmp	r3, #128	; 0x80
   1964a:	e7e9      	b.n	19620 <recv_thread+0x64>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1964c:	7872      	ldrb	r2, [r6, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1964e:	4631      	mov	r1, r6
   19650:	3202      	adds	r2, #2
   19652:	3008      	adds	r0, #8
   19654:	f006 fa84 	bl	1fb60 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   19658:	4638      	mov	r0, r7
   1965a:	f7fd fd63 	bl	17124 <bt_recv>
   1965e:	e7f0      	b.n	19642 <recv_thread+0x86>
   19660:	00020d88 	.word	0x00020d88
   19664:	00020e08 	.word	0x00020e08
   19668:	20002bae 	.word	0x20002bae
   1966c:	000221f4 	.word	0x000221f4
   19670:	2000067c 	.word	0x2000067c

00019674 <hci_driver_open>:
{
   19674:	b570      	push	{r4, r5, r6, lr}
   19676:	b090      	sub	sp, #64	; 0x40
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19678:	2200      	movs	r2, #0
   1967a:	2300      	movs	r3, #0
   1967c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19680:	2300      	movs	r3, #0
   19682:	f06f 0209 	mvn.w	r2, #9
   19686:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1968a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1968e:	9300      	str	r3, [sp, #0]
   19690:	4957      	ldr	r1, [pc, #348]	; (197f0 <hci_driver_open+0x17c>)
   19692:	4b58      	ldr	r3, [pc, #352]	; (197f4 <hci_driver_open+0x180>)
   19694:	4858      	ldr	r0, [pc, #352]	; (197f8 <hci_driver_open+0x184>)
   19696:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1969a:	f001 fb51 	bl	1ad40 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1969e:	4957      	ldr	r1, [pc, #348]	; (197fc <hci_driver_open+0x188>)
   196a0:	4855      	ldr	r0, [pc, #340]	; (197f8 <hci_driver_open+0x184>)
   196a2:	4c57      	ldr	r4, [pc, #348]	; (19800 <hci_driver_open+0x18c>)
   196a4:	f006 fd8a 	bl	201bc <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   196a8:	a80b      	add	r0, sp, #44	; 0x2c
   196aa:	f7ea fb67 	bl	3d7c <sdc_build_revision_get>
   196ae:	4b55      	ldr	r3, [pc, #340]	; (19804 <hci_driver_open+0x190>)
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   196b0:	4855      	ldr	r0, [pc, #340]	; (19808 <hci_driver_open+0x194>)
   196b2:	1ae4      	subs	r4, r4, r3
   196b4:	08e4      	lsrs	r4, r4, #3
   196b6:	01a4      	lsls	r4, r4, #6
   196b8:	f044 0303 	orr.w	r3, r4, #3
   196bc:	2214      	movs	r2, #20
   196be:	a90b      	add	r1, sp, #44	; 0x2c
   196c0:	f005 fd3d 	bl	1f13e <log_hexdump>
			err = sdc_support_adv();
   196c4:	f7ea fc70 	bl	3fa8 <sdc_support_adv>
			if (err) {
   196c8:	b118      	cbz	r0, 196d2 <hci_driver_open+0x5e>
				return -ENOTSUP;
   196ca:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   196ce:	b010      	add	sp, #64	; 0x40
   196d0:	bd70      	pop	{r4, r5, r6, pc}
			err = sdc_support_scan();
   196d2:	f7ea fc79 	bl	3fc8 <sdc_support_scan>
			if (err) {
   196d6:	4606      	mov	r6, r0
   196d8:	2800      	cmp	r0, #0
   196da:	d1f6      	bne.n	196ca <hci_driver_open+0x56>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   196dc:	ad08      	add	r5, sp, #32
   196de:	462a      	mov	r2, r5
   196e0:	2101      	movs	r1, #1
	cfg.master_count.count = SDC_MASTER_COUNT;
   196e2:	f88d 0020 	strb.w	r0, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   196e6:	f7ea fb57 	bl	3d98 <sdc_cfg_set>
	if (required_memory < 0) {
   196ea:	2800      	cmp	r0, #0
   196ec:	dbef      	blt.n	196ce <hci_driver_open+0x5a>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   196ee:	462a      	mov	r2, r5
   196f0:	2102      	movs	r1, #2
   196f2:	4630      	mov	r0, r6
	cfg.slave_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   196f4:	f88d 6020 	strb.w	r6, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   196f8:	f7ea fb4e 	bl	3d98 <sdc_cfg_set>
	if (required_memory < 0) {
   196fc:	2800      	cmp	r0, #0
   196fe:	dbe6      	blt.n	196ce <hci_driver_open+0x5a>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   19700:	4b42      	ldr	r3, [pc, #264]	; (1980c <hci_driver_open+0x198>)
   19702:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19704:	462a      	mov	r2, r5
   19706:	2103      	movs	r1, #3
   19708:	4630      	mov	r0, r6
   1970a:	f7ea fb45 	bl	3d98 <sdc_cfg_set>
	if (required_memory < 0) {
   1970e:	2800      	cmp	r0, #0
   19710:	dbdd      	blt.n	196ce <hci_driver_open+0x5a>
	cfg.event_length.event_length_us =
   19712:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19716:	462a      	mov	r2, r5
   19718:	2104      	movs	r1, #4
   1971a:	4630      	mov	r0, r6
	cfg.event_length.event_length_us =
   1971c:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1971e:	f7ea fb3b 	bl	3d98 <sdc_cfg_set>
	if (required_memory < 0) {
   19722:	2800      	cmp	r0, #0
   19724:	dbd3      	blt.n	196ce <hci_driver_open+0x5a>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   19726:	2301      	movs	r3, #1
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19728:	462a      	mov	r2, r5
   1972a:	2105      	movs	r1, #5
   1972c:	4630      	mov	r0, r6
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1972e:	f88d 3020 	strb.w	r3, [sp, #32]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19732:	f7ea fb31 	bl	3d98 <sdc_cfg_set>
	if (required_memory < 0) {
   19736:	2800      	cmp	r0, #0
   19738:	dbc9      	blt.n	196ce <hci_driver_open+0x5a>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1973a:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1973c:	462a      	mov	r2, r5
   1973e:	2107      	movs	r1, #7
   19740:	4630      	mov	r0, r6
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   19742:	f8ad 3020 	strh.w	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19746:	f7ea fb27 	bl	3d98 <sdc_cfg_set>
		if (required_memory < 0) {
   1974a:	2800      	cmp	r0, #0
   1974c:	dbbf      	blt.n	196ce <hci_driver_open+0x5a>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   1974e:	2303      	movs	r3, #3
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19750:	462a      	mov	r2, r5
   19752:	2106      	movs	r1, #6
   19754:	4630      	mov	r0, r6
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   19756:	f88d 3020 	strb.w	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1975a:	f7ea fb1d 	bl	3d98 <sdc_cfg_set>
		if (required_memory < 0) {
   1975e:	2800      	cmp	r0, #0
   19760:	dbb5      	blt.n	196ce <hci_driver_open+0x5a>
	if (required_memory > sizeof(sdc_mempool)) {
   19762:	f240 23f2 	movw	r3, #754	; 0x2f2
   19766:	4298      	cmp	r0, r3
   19768:	dd10      	ble.n	1978c <hci_driver_open+0x118>
		BT_ERR("Allocated memory too low: %u < %u",
   1976a:	4602      	mov	r2, r0
   1976c:	f044 0301 	orr.w	r3, r4, #1
   19770:	4827      	ldr	r0, [pc, #156]	; (19810 <hci_driver_open+0x19c>)
   19772:	f240 21f2 	movw	r1, #754	; 0x2f2
   19776:	f005 fca2 	bl	1f0be <log_2>
		k_panic();
   1977a:	4040      	eors	r0, r0
   1977c:	f380 8811 	msr	BASEPRI, r0
   19780:	f04f 0004 	mov.w	r0, #4
   19784:	df02      	svc	2
		return -ENOMEM;
   19786:	f06f 000b 	mvn.w	r0, #11
   1978a:	e7a0      	b.n	196ce <hci_driver_open+0x5a>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1978c:	4821      	ldr	r0, [pc, #132]	; (19814 <hci_driver_open+0x1a0>)
   1978e:	f001 f8f1 	bl	1a974 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   19792:	4b21      	ldr	r3, [pc, #132]	; (19818 <hci_driver_open+0x1a4>)
   19794:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   19796:	b938      	cbnz	r0, 197a8 <hci_driver_open+0x134>
		BT_ERR("An entropy source is required");
   19798:	4820      	ldr	r0, [pc, #128]	; (1981c <hci_driver_open+0x1a8>)
   1979a:	f044 0101 	orr.w	r1, r4, #1
   1979e:	f005 fc6d 	bl	1f07c <log_0>
		return -ENODEV;
   197a2:	f06f 0012 	mvn.w	r0, #18
   197a6:	e792      	b.n	196ce <hci_driver_open+0x5a>
	sdc_rand_source_t rand_functions = {
   197a8:	4b1d      	ldr	r3, [pc, #116]	; (19820 <hci_driver_open+0x1ac>)
   197aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   197ae:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   197b2:	4628      	mov	r0, r5
   197b4:	f7ea fc6a 	bl	408c <sdc_rand_source_register>
	if (err) {
   197b8:	4601      	mov	r1, r0
   197ba:	b138      	cbz	r0, 197cc <hci_driver_open+0x158>
		BT_ERR("Failed to register rand source (%d)", err);
   197bc:	4819      	ldr	r0, [pc, #100]	; (19824 <hci_driver_open+0x1b0>)
   197be:	f044 0201 	orr.w	r2, r4, #1
   197c2:	f005 fc68 	bl	1f096 <log_1>
		return -EINVAL;
   197c6:	f06f 0015 	mvn.w	r0, #21
   197ca:	e780      	b.n	196ce <hci_driver_open+0x5a>
	err = MULTITHREADING_LOCK_ACQUIRE();
   197cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   197d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   197d4:	f7ff fe5e 	bl	19494 <multithreading_lock_acquire>
	if (!err) {
   197d8:	4604      	mov	r4, r0
   197da:	b930      	cbnz	r0, 197ea <hci_driver_open+0x176>
		err = sdc_enable(host_signal, sdc_mempool);
   197dc:	4912      	ldr	r1, [pc, #72]	; (19828 <hci_driver_open+0x1b4>)
   197de:	4813      	ldr	r0, [pc, #76]	; (1982c <hci_driver_open+0x1b8>)
   197e0:	f7ea fb38 	bl	3e54 <sdc_enable>
   197e4:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   197e6:	f7ff fe5d 	bl	194a4 <multithreading_lock_release>
	if (err < 0) {
   197ea:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   197ee:	e76e      	b.n	196ce <hci_driver_open+0x5a>
   197f0:	20004260 	.word	0x20004260
   197f4:	000195bd 	.word	0x000195bd
   197f8:	200016b0 	.word	0x200016b0
   197fc:	0002220e 	.word	0x0002220e
   19800:	00020e08 	.word	0x00020e08
   19804:	00020d88 	.word	0x00020d88
   19808:	00022215 	.word	0x00022215
   1980c:	02031b1b 	.word	0x02031b1b
   19810:	0002223c 	.word	0x0002223c
   19814:	000221a3 	.word	0x000221a3
   19818:	2000202c 	.word	0x2000202c
   1981c:	0002225e 	.word	0x0002225e
   19820:	00020ec8 	.word	0x00020ec8
   19824:	0002227c 	.word	0x0002227c
   19828:	20002bf4 	.word	0x20002bf4
   1982c:	00019831 	.word	0x00019831

00019830 <host_signal>:
	z_impl_k_sem_give(sem);
   19830:	4801      	ldr	r0, [pc, #4]	; (19838 <host_signal+0x8>)
   19832:	f001 bc1d 	b.w	1b070 <z_impl_k_sem_give>
   19836:	bf00      	nop
   19838:	2000067c 	.word	0x2000067c

0001983c <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1983c:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1983e:	4cdb      	ldr	r4, [pc, #876]	; (19bac <hci_internal_cmd_put+0x370>)
   19840:	7823      	ldrb	r3, [r4, #0]
   19842:	2b00      	cmp	r3, #0
   19844:	f040 8262 	bne.w	19d0c <hci_internal_cmd_put+0x4d0>
	return ((uint16_t)src[1] << 8) | src[0];
   19848:	7843      	ldrb	r3, [r0, #1]
   1984a:	7806      	ldrb	r6, [r0, #0]
   1984c:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	switch (BT_OGF(opcode)) {
   19850:	0ab3      	lsrs	r3, r6, #10
   19852:	2b08      	cmp	r3, #8
   19854:	b235      	sxth	r5, r6
   19856:	f000 80cf 	beq.w	199f8 <hci_internal_cmd_put+0x1bc>
   1985a:	d81a      	bhi.n	19892 <hci_internal_cmd_put+0x56>
   1985c:	2b03      	cmp	r3, #3
   1985e:	d035      	beq.n	198cc <hci_internal_cmd_put+0x90>
   19860:	2b04      	cmp	r3, #4
   19862:	d045      	beq.n	198f0 <hci_internal_cmd_put+0xb4>
   19864:	2304      	movs	r3, #4
   19866:	2001      	movs	r0, #1
	switch (hci_opcode) {
   19868:	f242 0219 	movw	r2, #8217	; 0x2019
   1986c:	4295      	cmp	r5, r2
   1986e:	f300 824a 	bgt.w	19d06 <hci_internal_cmd_put+0x4ca>
   19872:	f242 020c 	movw	r2, #8204	; 0x200c
   19876:	4295      	cmp	r5, r2
   19878:	f300 822c 	bgt.w	19cd4 <hci_internal_cmd_put+0x498>
   1987c:	f240 4206 	movw	r2, #1030	; 0x406
   19880:	4295      	cmp	r5, r2
   19882:	f000 8233 	beq.w	19cec <hci_internal_cmd_put+0x4b0>
   19886:	f240 421d 	movw	r2, #1053	; 0x41d
   1988a:	4295      	cmp	r5, r2
   1988c:	f040 80b0 	bne.w	199f0 <hci_internal_cmd_put+0x1b4>
   19890:	e22c      	b.n	19cec <hci_internal_cmd_put+0x4b0>
	switch (BT_OGF(opcode)) {
   19892:	2b3f      	cmp	r3, #63	; 0x3f
   19894:	d1e6      	bne.n	19864 <hci_internal_cmd_put+0x28>
	switch (opcode)	{
   19896:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   1989a:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1989c:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   198a0:	f200 81c2 	bhi.w	19c28 <hci_internal_cmd_put+0x3ec>
   198a4:	f5b6 4f7c 	cmp.w	r6, #64512	; 0xfc00
   198a8:	d018      	beq.n	198dc <hci_internal_cmd_put+0xa0>
   198aa:	f5a6 437c 	sub.w	r3, r6, #64512	; 0xfc00
   198ae:	3b01      	subs	r3, #1
   198b0:	2b09      	cmp	r3, #9
   198b2:	d813      	bhi.n	198dc <hci_internal_cmd_put+0xa0>
   198b4:	e8df f013 	tbh	[pc, r3, lsl #1]
   198b8:	01cd01c8 	.word	0x01cd01c8
   198bc:	00120012 	.word	0x00120012
   198c0:	01ef0012 	.word	0x01ef0012
   198c4:	00120012 	.word	0x00120012
   198c8:	01ea01e5 	.word	0x01ea01e5
	switch (opcode)	{
   198cc:	f640 4301 	movw	r3, #3073	; 0xc01
   198d0:	429d      	cmp	r5, r3
   198d2:	d005      	beq.n	198e0 <hci_internal_cmd_put+0xa4>
   198d4:	f640 4303 	movw	r3, #3075	; 0xc03
   198d8:	429d      	cmp	r5, r3
   198da:	d006      	beq.n	198ea <hci_internal_cmd_put+0xae>
	switch (opcode)	{
   198dc:	2001      	movs	r0, #1
   198de:	e205      	b.n	19cec <hci_internal_cmd_put+0x4b0>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   198e0:	3003      	adds	r0, #3
   198e2:	f7f6 fe6e 	bl	105c2 <sdc_hci_cmd_cb_set_event_mask>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   198e6:	2304      	movs	r3, #4
   198e8:	e082      	b.n	199f0 <hci_internal_cmd_put+0x1b4>
		return sdc_hci_cmd_cb_reset();
   198ea:	f7ea fcdf 	bl	42ac <sdc_hci_cmd_cb_reset>
   198ee:	e7fa      	b.n	198e6 <hci_internal_cmd_put+0xaa>
	switch (opcode)	{
   198f0:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
   198f4:	3d01      	subs	r5, #1
   198f6:	2d08      	cmp	r5, #8
   198f8:	d8f0      	bhi.n	198dc <hci_internal_cmd_put+0xa0>
   198fa:	a301      	add	r3, pc, #4	; (adr r3, 19900 <hci_internal_cmd_put+0xc4>)
   198fc:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   19900:	00019925 	.word	0x00019925
   19904:	0001992f 	.word	0x0001992f
   19908:	000199cd 	.word	0x000199cd
   1990c:	000198dd 	.word	0x000198dd
   19910:	000198dd 	.word	0x000198dd
   19914:	000198dd 	.word	0x000198dd
   19918:	000198dd 	.word	0x000198dd
   1991c:	000198dd 	.word	0x000198dd
   19920:	000199e9 	.word	0x000199e9
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   19924:	48a2      	ldr	r0, [pc, #648]	; (19bb0 <hci_internal_cmd_put+0x374>)
   19926:	f7f6 ff32 	bl	1078e <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1992a:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1992c:	e060      	b.n	199f0 <hci_internal_cmd_put+0x1b4>
	memset(cmds, 0, sizeof(*cmds));
   1992e:	48a0      	ldr	r0, [pc, #640]	; (19bb0 <hci_internal_cmd_put+0x374>)
   19930:	222e      	movs	r2, #46	; 0x2e
   19932:	2100      	movs	r1, #0
   19934:	f005 ff6d 	bl	1f812 <memset>
	cmds->hci_set_event_mask = 1;
   19938:	7b23      	ldrb	r3, [r4, #12]
   1993a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1993e:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_local_version_information = 1;
   19940:	7d63      	ldrb	r3, [r4, #21]
   19942:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   19946:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1994a:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1994c:	7da3      	ldrb	r3, [r4, #22]
   1994e:	f043 0302 	orr.w	r3, r3, #2
   19952:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_event_mask = 1;
   19954:	f894 3020 	ldrb.w	r3, [r4, #32]
   19958:	f063 0308 	orn	r3, r3, #8
   1995c:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   19960:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   19964:	f063 0330 	orn	r3, r3, #48	; 0x30
   19968:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   1996c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   19970:	f063 033c 	orn	r3, r3, #60	; 0x3c
   19974:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_supported_states = 1;
   19978:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1997c:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   19980:	f043 0378 	orr.w	r3, r3, #120	; 0x78
   19984:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_add_device_to_resolving_list = 1;
   19988:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1998c:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   19990:	f043 0378 	orr.w	r3, r3, #120	; 0x78
   19994:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   19998:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1999c:	f063 0379 	orn	r3, r3, #121	; 0x79
   199a0:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   199a4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   199a8:	f043 0301 	orr.w	r3, r3, #1
   199ac:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   199b0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   199b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   199b8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   199bc:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   199c0:	f043 0304 	orr.w	r3, r3, #4
   199c4:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	switch (hci_opcode) {
   199c8:	2344      	movs	r3, #68	; 0x44
   199ca:	e00b      	b.n	199e4 <hci_internal_cmd_put+0x1a8>
	memset(features, 0, sizeof(*features));
   199cc:	4878      	ldr	r0, [pc, #480]	; (19bb0 <hci_internal_cmd_put+0x374>)
   199ce:	2208      	movs	r2, #8
   199d0:	2100      	movs	r1, #0
   199d2:	f005 ff1e 	bl	1f812 <memset>
	features->bdedr_not_supported = 1;
   199d6:	7ae3      	ldrb	r3, [r4, #11]
   199d8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   199dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   199e0:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   199e2:	230c      	movs	r3, #12
	switch (hci_opcode) {
   199e4:	2000      	movs	r0, #0
   199e6:	e0fc      	b.n	19be2 <hci_internal_cmd_put+0x3a6>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   199e8:	4871      	ldr	r0, [pc, #452]	; (19bb0 <hci_internal_cmd_put+0x374>)
   199ea:	f7f6 fece 	bl	1078a <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   199ee:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   199f0:	2801      	cmp	r0, #1
   199f2:	f040 80f6 	bne.w	19be2 <hci_internal_cmd_put+0x3a6>
   199f6:	e179      	b.n	19cec <hci_internal_cmd_put+0x4b0>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   199f8:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   199fc:	3d01      	subs	r5, #1
   199fe:	3003      	adds	r0, #3
	switch (opcode)	{
   19a00:	2d4d      	cmp	r5, #77	; 0x4d
   19a02:	f63f af6b 	bhi.w	198dc <hci_internal_cmd_put+0xa0>
   19a06:	a301      	add	r3, pc, #4	; (adr r3, 19a0c <hci_internal_cmd_put+0x1d0>)
   19a08:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   19a0c:	00019b45 	.word	0x00019b45
   19a10:	00019b4b 	.word	0x00019b4b
   19a14:	00019b55 	.word	0x00019b55
   19a18:	000198dd 	.word	0x000198dd
   19a1c:	00019b71 	.word	0x00019b71
   19a20:	00019b77 	.word	0x00019b77
   19a24:	00019b7d 	.word	0x00019b7d
   19a28:	00019b87 	.word	0x00019b87
   19a2c:	00019b8d 	.word	0x00019b8d
   19a30:	00019b93 	.word	0x00019b93
   19a34:	00019b99 	.word	0x00019b99
   19a38:	00019b9f 	.word	0x00019b9f
   19a3c:	000198dd 	.word	0x000198dd
   19a40:	000198dd 	.word	0x000198dd
   19a44:	00019ba5 	.word	0x00019ba5
   19a48:	00019bb5 	.word	0x00019bb5
   19a4c:	00019bbb 	.word	0x00019bbb
   19a50:	00019bc1 	.word	0x00019bc1
   19a54:	000198dd 	.word	0x000198dd
   19a58:	000198dd 	.word	0x000198dd
   19a5c:	000198dd 	.word	0x000198dd
   19a60:	000198dd 	.word	0x000198dd
   19a64:	00019bc7 	.word	0x00019bc7
   19a68:	00019bd1 	.word	0x00019bd1
   19a6c:	000198dd 	.word	0x000198dd
   19a70:	000198dd 	.word	0x000198dd
   19a74:	000198dd 	.word	0x000198dd
   19a78:	00019bd9 	.word	0x00019bd9
   19a7c:	000198dd 	.word	0x000198dd
   19a80:	000198dd 	.word	0x000198dd
   19a84:	000198dd 	.word	0x000198dd
   19a88:	000198dd 	.word	0x000198dd
   19a8c:	000198dd 	.word	0x000198dd
   19a90:	000198dd 	.word	0x000198dd
   19a94:	000198dd 	.word	0x000198dd
   19a98:	000198dd 	.word	0x000198dd
   19a9c:	000198dd 	.word	0x000198dd
   19aa0:	000198dd 	.word	0x000198dd
   19aa4:	00019bf3 	.word	0x00019bf3
   19aa8:	00019bf9 	.word	0x00019bf9
   19aac:	00019bff 	.word	0x00019bff
   19ab0:	00019c05 	.word	0x00019c05
   19ab4:	000198dd 	.word	0x000198dd
   19ab8:	000198dd 	.word	0x000198dd
   19abc:	00019c0d 	.word	0x00019c0d
   19ac0:	00019c13 	.word	0x00019c13
   19ac4:	000198dd 	.word	0x000198dd
   19ac8:	000198dd 	.word	0x000198dd
   19acc:	000198dd 	.word	0x000198dd
   19ad0:	000198dd 	.word	0x000198dd
   19ad4:	000198dd 	.word	0x000198dd
   19ad8:	000198dd 	.word	0x000198dd
   19adc:	000198dd 	.word	0x000198dd
   19ae0:	000198dd 	.word	0x000198dd
   19ae4:	000198dd 	.word	0x000198dd
   19ae8:	000198dd 	.word	0x000198dd
   19aec:	000198dd 	.word	0x000198dd
   19af0:	000198dd 	.word	0x000198dd
   19af4:	000198dd 	.word	0x000198dd
   19af8:	000198dd 	.word	0x000198dd
   19afc:	000198dd 	.word	0x000198dd
   19b00:	000198dd 	.word	0x000198dd
   19b04:	000198dd 	.word	0x000198dd
   19b08:	000198dd 	.word	0x000198dd
   19b0c:	000198dd 	.word	0x000198dd
   19b10:	000198dd 	.word	0x000198dd
   19b14:	000198dd 	.word	0x000198dd
   19b18:	000198dd 	.word	0x000198dd
   19b1c:	000198dd 	.word	0x000198dd
   19b20:	000198dd 	.word	0x000198dd
   19b24:	000198dd 	.word	0x000198dd
   19b28:	000198dd 	.word	0x000198dd
   19b2c:	000198dd 	.word	0x000198dd
   19b30:	000198dd 	.word	0x000198dd
   19b34:	00019c19 	.word	0x00019c19
   19b38:	000198dd 	.word	0x000198dd
   19b3c:	000198dd 	.word	0x000198dd
   19b40:	00019c23 	.word	0x00019c23
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   19b44:	f7f6 fe4b 	bl	107de <sdc_hci_cmd_le_set_event_mask>
   19b48:	e6cd      	b.n	198e6 <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   19b4a:	4819      	ldr	r0, [pc, #100]	; (19bb0 <hci_internal_cmd_put+0x374>)
   19b4c:	f7f6 fe33 	bl	107b6 <sdc_hci_cmd_le_read_buffer_size>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   19b50:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   19b52:	e74d      	b.n	199f0 <hci_internal_cmd_put+0x1b4>
	memset(features, 0, sizeof(*features));
   19b54:	4816      	ldr	r0, [pc, #88]	; (19bb0 <hci_internal_cmd_put+0x374>)
   19b56:	2205      	movs	r2, #5
   19b58:	2100      	movs	r1, #0
   19b5a:	f005 fe5a 	bl	1f812 <memset>
	features->le_encryption = 1;
   19b5e:	79e3      	ldrb	r3, [r4, #7]
   19b60:	f063 032a 	orn	r3, r3, #42	; 0x2a
   19b64:	71e3      	strb	r3, [r4, #7]
	features->channel_selection_algorithm_2 = 1;
   19b66:	7a23      	ldrb	r3, [r4, #8]
   19b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19b6c:	7223      	strb	r3, [r4, #8]
   19b6e:	e738      	b.n	199e2 <hci_internal_cmd_put+0x1a6>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   19b70:	f7f6 fe3c 	bl	107ec <sdc_hci_cmd_le_set_random_address>
   19b74:	e6b7      	b.n	198e6 <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   19b76:	f7f6 fe30 	bl	107da <sdc_hci_cmd_le_set_adv_params>
   19b7a:	e6b4      	b.n	198e6 <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   19b7c:	480c      	ldr	r0, [pc, #48]	; (19bb0 <hci_internal_cmd_put+0x374>)
   19b7e:	f7f6 fe18 	bl	107b2 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   19b82:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   19b84:	e734      	b.n	199f0 <hci_internal_cmd_put+0x1b4>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   19b86:	f7f6 fe24 	bl	107d2 <sdc_hci_cmd_le_set_adv_data>
   19b8a:	e6ac      	b.n	198e6 <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   19b8c:	f7f6 fe36 	bl	107fc <sdc_hci_cmd_le_set_scan_response_data>
   19b90:	e6a9      	b.n	198e6 <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   19b92:	f7f6 fe20 	bl	107d6 <sdc_hci_cmd_le_set_adv_enable>
   19b96:	e6a6      	b.n	198e6 <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   19b98:	f7f6 fe2e 	bl	107f8 <sdc_hci_cmd_le_set_scan_params>
   19b9c:	e6a3      	b.n	198e6 <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   19b9e:	f7f6 fe29 	bl	107f4 <sdc_hci_cmd_le_set_scan_enable>
   19ba2:	e6a0      	b.n	198e6 <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   19ba4:	4802      	ldr	r0, [pc, #8]	; (19bb0 <hci_internal_cmd_put+0x374>)
   19ba6:	f7f6 fe0c 	bl	107c2 <sdc_hci_cmd_le_read_white_list_size>
   19baa:	e7ea      	b.n	19b82 <hci_internal_cmd_put+0x346>
   19bac:	20002ee6 	.word	0x20002ee6
   19bb0:	20002eed 	.word	0x20002eed
		return sdc_hci_cmd_le_clear_white_list();
   19bb4:	f7f6 fdf3 	bl	1079e <sdc_hci_cmd_le_clear_white_list>
   19bb8:	e695      	b.n	198e6 <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   19bba:	f7f6 fdec 	bl	10796 <sdc_hci_cmd_le_add_device_to_white_list>
   19bbe:	e692      	b.n	198e6 <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   19bc0:	f7f6 fe03 	bl	107ca <sdc_hci_cmd_le_remove_device_from_white_list>
   19bc4:	e68f      	b.n	198e6 <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   19bc6:	495b      	ldr	r1, [pc, #364]	; (19d34 <hci_internal_cmd_put+0x4f8>)
   19bc8:	f7f6 fdeb 	bl	107a2 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   19bcc:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   19bce:	e70f      	b.n	199f0 <hci_internal_cmd_put+0x1b4>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   19bd0:	4858      	ldr	r0, [pc, #352]	; (19d34 <hci_internal_cmd_put+0x4f8>)
   19bd2:	f7f6 fdec 	bl	107ae <sdc_hci_cmd_le_rand>
   19bd6:	e6a8      	b.n	1992a <hci_internal_cmd_put+0xee>
	*buf = states1;
   19bd8:	2333      	movs	r3, #51	; 0x33
	*(buf + 4) = states2;
   19bda:	2000      	movs	r0, #0
	*buf = states1;
   19bdc:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   19bde:	72e0      	strb	r0, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   19be0:	230c      	movs	r3, #12
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   19be2:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   19be4:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   19be6:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   19be8:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   19bea:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   19bec:	80a6      	strh	r6, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   19bee:	71a0      	strb	r0, [r4, #6]
}
   19bf0:	e085      	b.n	19cfe <hci_internal_cmd_put+0x4c2>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   19bf2:	f7f6 fdce 	bl	10792 <sdc_hci_cmd_le_add_device_to_resolving_list>
   19bf6:	e676      	b.n	198e6 <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   19bf8:	f7f6 fde5 	bl	107c6 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   19bfc:	e673      	b.n	198e6 <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_clear_resolving_list();
   19bfe:	f7f6 fdcc 	bl	1079a <sdc_hci_cmd_le_clear_resolving_list>
   19c02:	e670      	b.n	198e6 <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   19c04:	484b      	ldr	r0, [pc, #300]	; (19d34 <hci_internal_cmd_put+0x4f8>)
   19c06:	f7f6 fdd8 	bl	107ba <sdc_hci_cmd_le_read_resolving_list_size>
   19c0a:	e7ba      	b.n	19b82 <hci_internal_cmd_put+0x346>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   19c0c:	f7f6 fddf 	bl	107ce <sdc_hci_cmd_le_set_address_resolution_enable>
   19c10:	e669      	b.n	198e6 <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   19c12:	f7f6 fded 	bl	107f0 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   19c16:	e666      	b.n	198e6 <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   19c18:	4846      	ldr	r0, [pc, #280]	; (19d34 <hci_internal_cmd_put+0x4f8>)
   19c1a:	f7f6 fdd0 	bl	107be <sdc_hci_cmd_le_read_transmit_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   19c1e:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   19c20:	e6e6      	b.n	199f0 <hci_internal_cmd_put+0x1b4>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   19c22:	f7f6 fde1 	bl	107e8 <sdc_hci_cmd_le_set_privacy_mode>
   19c26:	e65e      	b.n	198e6 <hci_internal_cmd_put+0xaa>
	switch (opcode)	{
   19c28:	f506 7340 	add.w	r3, r6, #768	; 0x300
   19c2c:	b29b      	uxth	r3, r3
   19c2e:	2b05      	cmp	r3, #5
   19c30:	f63f ae54 	bhi.w	198dc <hci_internal_cmd_put+0xa0>
   19c34:	f5a6 437d 	sub.w	r3, r6, #64768	; 0xfd00
   19c38:	2b05      	cmp	r3, #5
   19c3a:	f63f ae4f 	bhi.w	198dc <hci_internal_cmd_put+0xa0>
   19c3e:	e8df f003 	tbb	[pc, r3]
   19c42:	3a2e      	.short	0x3a2e
   19c44:	4643403d 	.word	0x4643403d
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   19c48:	483a      	ldr	r0, [pc, #232]	; (19d34 <hci_internal_cmd_put+0x4f8>)
   19c4a:	f7ea fb47 	bl	42dc <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   19c4e:	2310      	movs	r3, #16
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   19c50:	e60a      	b.n	19868 <hci_internal_cmd_put+0x2c>
	memset(cmds, 0, sizeof(*cmds));
   19c52:	4838      	ldr	r0, [pc, #224]	; (19d34 <hci_internal_cmd_put+0x4f8>)
   19c54:	2202      	movs	r2, #2
   19c56:	2100      	movs	r1, #0
   19c58:	f005 fddb 	bl	1f812 <memset>
	cmds->read_version_info = 1;
   19c5c:	79e3      	ldrb	r3, [r4, #7]
   19c5e:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   19c62:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   19c66:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   19c68:	7a23      	ldrb	r3, [r4, #8]
   19c6a:	f023 0307 	bic.w	r3, r3, #7
   19c6e:	f043 0307 	orr.w	r3, r3, #7
   19c72:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   19c74:	f242 0319 	movw	r3, #8217	; 0x2019
   19c78:	429d      	cmp	r5, r3
   19c7a:	dd4a      	ble.n	19d12 <hci_internal_cmd_put+0x4d6>
   19c7c:	f242 0332 	movw	r3, #8242	; 0x2032
   19c80:	e052      	b.n	19d28 <hci_internal_cmd_put+0x4ec>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   19c82:	482c      	ldr	r0, [pc, #176]	; (19d34 <hci_internal_cmd_put+0x4f8>)
   19c84:	f7f6 fd30 	bl	106e8 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   19c88:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   19c8a:	e5ed      	b.n	19868 <hci_internal_cmd_put+0x2c>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   19c8c:	4829      	ldr	r0, [pc, #164]	; (19d34 <hci_internal_cmd_put+0x4f8>)
   19c8e:	f7f6 fcde 	bl	1064e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   19c92:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   19c94:	e5e8      	b.n	19868 <hci_internal_cmd_put+0x2c>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   19c96:	f7f6 fd76 	bl	10786 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   19c9a:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   19c9c:	e5e4      	b.n	19868 <hci_internal_cmd_put+0x2c>
	memset(cmds, 0, sizeof(*cmds));
   19c9e:	4825      	ldr	r0, [pc, #148]	; (19d34 <hci_internal_cmd_put+0x4f8>)
   19ca0:	2201      	movs	r2, #1
   19ca2:	2100      	movs	r1, #0
   19ca4:	f005 fdb5 	bl	1f812 <memset>
	cmds->read_supported_vs_commands = 1;
   19ca8:	79e3      	ldrb	r3, [r4, #7]
   19caa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   19cae:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   19cb2:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   19cb4:	e688      	b.n	199c8 <hci_internal_cmd_put+0x18c>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   19cb6:	f7f6 fcbd 	bl	10634 <sdc_hci_cmd_vs_llpm_mode_set>
   19cba:	e614      	b.n	198e6 <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   19cbc:	f7f6 fc8e 	bl	105dc <sdc_hci_cmd_vs_conn_update>
   19cc0:	e611      	b.n	198e6 <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   19cc2:	f7f6 fc83 	bl	105cc <sdc_hci_cmd_vs_conn_event_extend>
   19cc6:	e60e      	b.n	198e6 <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   19cc8:	f7f6 fcbc 	bl	10644 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   19ccc:	e60b      	b.n	198e6 <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   19cce:	f7f6 fcaf 	bl	10630 <sdc_hci_cmd_vs_event_length_set>
   19cd2:	e608      	b.n	198e6 <hci_internal_cmd_put+0xaa>
   19cd4:	f5a6 5200 	sub.w	r2, r6, #8192	; 0x2000
   19cd8:	3a0d      	subs	r2, #13
   19cda:	2101      	movs	r1, #1
   19cdc:	b292      	uxth	r2, r2
   19cde:	fa01 f202 	lsl.w	r2, r1, r2
   19ce2:	f241 2141 	movw	r1, #4673	; 0x1241
   19ce6:	420a      	tst	r2, r1
   19ce8:	f43f ae82 	beq.w	199f0 <hci_internal_cmd_put+0x1b4>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   19cec:	230f      	movs	r3, #15
   19cee:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   19cf0:	2304      	movs	r3, #4
   19cf2:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   19cf4:	2301      	movs	r3, #1
	evt_data->status = status_code;
   19cf6:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   19cf8:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   19cfa:	f8a4 6005 	strh.w	r6, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   19cfe:	2301      	movs	r3, #1
   19d00:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   19d02:	2000      	movs	r0, #0
}
   19d04:	bd70      	pop	{r4, r5, r6, pc}
	switch (hci_opcode) {
   19d06:	f242 0232 	movw	r2, #8242	; 0x2032
   19d0a:	e5be      	b.n	1988a <hci_internal_cmd_put+0x4e>
		return -NRF_EPERM;
   19d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19d10:	e7f8      	b.n	19d04 <hci_internal_cmd_put+0x4c8>
	switch (hci_opcode) {
   19d12:	f242 030c 	movw	r3, #8204	; 0x200c
   19d16:	429d      	cmp	r5, r3
   19d18:	f73f ae56 	bgt.w	199c8 <hci_internal_cmd_put+0x18c>
   19d1c:	f240 4306 	movw	r3, #1030	; 0x406
   19d20:	429d      	cmp	r5, r3
   19d22:	d004      	beq.n	19d2e <hci_internal_cmd_put+0x4f2>
   19d24:	f240 431d 	movw	r3, #1053	; 0x41d
   19d28:	429d      	cmp	r5, r3
   19d2a:	f47f ae4d 	bne.w	199c8 <hci_internal_cmd_put+0x18c>
   19d2e:	2000      	movs	r0, #0
   19d30:	e7dc      	b.n	19cec <hci_internal_cmd_put+0x4b0>
   19d32:	bf00      	nop
   19d34:	20002eed 	.word	0x20002eed

00019d38 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   19d38:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   19d3a:	4c07      	ldr	r4, [pc, #28]	; (19d58 <hci_internal_evt_get+0x20>)
   19d3c:	7823      	ldrb	r3, [r4, #0]
   19d3e:	b13b      	cbz	r3, 19d50 <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   19d40:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   19d42:	1c61      	adds	r1, r4, #1
   19d44:	3202      	adds	r2, #2
   19d46:	f005 fd59 	bl	1f7fc <memcpy>
		cmd_complete_or_status.occurred = false;
   19d4a:	2000      	movs	r0, #0
   19d4c:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   19d4e:	bd10      	pop	{r4, pc}
   19d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   19d54:	f7f6 bc28 	b.w	105a8 <sdc_hci_evt_get>
   19d58:	20002ee6 	.word	0x20002ee6

00019d5c <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   19d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   19d60:	4c0b      	ldr	r4, [pc, #44]	; (19d90 <bt_rand+0x34>)
   19d62:	6823      	ldr	r3, [r4, #0]
{
   19d64:	4605      	mov	r5, r0
   19d66:	460e      	mov	r6, r1
   19d68:	4627      	mov	r7, r4
	if (unlikely(!dev)) {
   19d6a:	b13b      	cbz	r3, 19d7c <bt_rand+0x20>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   19d6c:	6838      	ldr	r0, [r7, #0]
	return api->get_entropy(dev, buffer, length);
   19d6e:	6883      	ldr	r3, [r0, #8]
   19d70:	b2b2      	uxth	r2, r6
   19d72:	4629      	mov	r1, r5
   19d74:	681b      	ldr	r3, [r3, #0]
}
   19d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19d7a:	4718      	bx	r3
   19d7c:	4805      	ldr	r0, [pc, #20]	; (19d94 <bt_rand+0x38>)
   19d7e:	f000 fdf9 	bl	1a974 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   19d82:	6020      	str	r0, [r4, #0]
		if (!dev) {
   19d84:	2800      	cmp	r0, #0
   19d86:	d1f1      	bne.n	19d6c <bt_rand+0x10>
}
   19d88:	f06f 0012 	mvn.w	r0, #18
   19d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19d90:	20002030 	.word	0x20002030
   19d94:	000221a3 	.word	0x000221a3

00019d98 <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
   19d98:	b538      	push	{r3, r4, r5, lr}
   19d9a:	4b0b      	ldr	r3, [pc, #44]	; (19dc8 <m_assert_handler+0x30>)
   19d9c:	4c0b      	ldr	r4, [pc, #44]	; (19dcc <m_assert_handler+0x34>)
   19d9e:	1ae4      	subs	r4, r4, r3
   19da0:	460d      	mov	r5, r1
   19da2:	08e4      	lsrs	r4, r4, #3
   19da4:	f7fa ff32 	bl	14c0c <z_log_strdup>
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   19da8:	01a4      	lsls	r4, r4, #6
   19daa:	f044 0401 	orr.w	r4, r4, #1
   19dae:	4601      	mov	r1, r0
   19db0:	4623      	mov	r3, r4
   19db2:	4807      	ldr	r0, [pc, #28]	; (19dd0 <m_assert_handler+0x38>)
   19db4:	462a      	mov	r2, r5
   19db6:	f005 f982 	bl	1f0be <log_2>
	k_oops();
   19dba:	4040      	eors	r0, r0
   19dbc:	f380 8811 	msr	BASEPRI, r0
   19dc0:	f04f 0003 	mov.w	r0, #3
   19dc4:	df02      	svc	2
}
   19dc6:	bd38      	pop	{r3, r4, r5, pc}
   19dc8:	00020d88 	.word	0x00020d88
   19dcc:	00020dd8 	.word	0x00020dd8
   19dd0:	000222e1 	.word	0x000222e1

00019dd4 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   19dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   19dd6:	2332      	movs	r3, #50	; 0x32
   19dd8:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   19ddc:	4a10      	ldr	r2, [pc, #64]	; (19e20 <mpsl_lib_init+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   19dde:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   19de0:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   19de2:	2119      	movs	r1, #25
   19de4:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   19de6:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   19dea:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   19dee:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   19df2:	f7e9 fd13 	bl	381c <mpsl_init>
	if (err) {
   19df6:	4604      	mov	r4, r0
   19df8:	b970      	cbnz	r0, 19e18 <mpsl_lib_init+0x44>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   19dfa:	4601      	mov	r1, r0
   19dfc:	462a      	mov	r2, r5
   19dfe:	2008      	movs	r0, #8
   19e00:	f7fb fe66 	bl	15ad0 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   19e04:	462a      	mov	r2, r5
   19e06:	4621      	mov	r1, r4
   19e08:	200b      	movs	r0, #11
   19e0a:	f7fb fe61 	bl	15ad0 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   19e0e:	462a      	mov	r2, r5
   19e10:	4621      	mov	r1, r4
   19e12:	4628      	mov	r0, r5
   19e14:	f7fb fe5c 	bl	15ad0 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   19e18:	4620      	mov	r0, r4
   19e1a:	b003      	add	sp, #12
   19e1c:	bd30      	pop	{r4, r5, pc}
   19e1e:	bf00      	nop
   19e20:	00019d99 	.word	0x00019d99

00019e24 <mpsl_low_prio_irq_handler>:
   19e24:	4801      	ldr	r0, [pc, #4]	; (19e2c <mpsl_low_prio_irq_handler+0x8>)
   19e26:	f001 b923 	b.w	1b070 <z_impl_k_sem_give>
   19e2a:	bf00      	nop
   19e2c:	20000694 	.word	0x20000694

00019e30 <signal_thread>:
{
   19e30:	b510      	push	{r4, lr}
	return z_impl_k_sem_take(sem, timeout);
   19e32:	4c09      	ldr	r4, [pc, #36]	; (19e58 <signal_thread+0x28>)
   19e34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19e3c:	4620      	mov	r0, r4
   19e3e:	f001 f93d 	bl	1b0bc <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   19e42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19e46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19e4a:	f7ff fb23 	bl	19494 <multithreading_lock_acquire>
		mpsl_low_priority_process();
   19e4e:	f7f5 ff48 	bl	fce2 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   19e52:	f7ff fb27 	bl	194a4 <multithreading_lock_release>
	while (true) {
   19e56:	e7ed      	b.n	19e34 <signal_thread+0x4>
   19e58:	20000694 	.word	0x20000694

00019e5c <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   19e5c:	b530      	push	{r4, r5, lr}
   19e5e:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19e60:	4d0f      	ldr	r5, [pc, #60]	; (19ea0 <mpsl_signal_thread_init+0x44>)
   19e62:	4910      	ldr	r1, [pc, #64]	; (19ea4 <mpsl_signal_thread_init+0x48>)
   19e64:	2200      	movs	r2, #0
   19e66:	2300      	movs	r3, #0
   19e68:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19e6c:	2400      	movs	r4, #0
   19e6e:	f06f 0309 	mvn.w	r3, #9
   19e72:	e9cd 3403 	strd	r3, r4, [sp, #12]
   19e76:	e9cd 4401 	strd	r4, r4, [sp, #4]
   19e7a:	4b0b      	ldr	r3, [pc, #44]	; (19ea8 <mpsl_signal_thread_init+0x4c>)
   19e7c:	9400      	str	r4, [sp, #0]
   19e7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19e82:	4628      	mov	r0, r5
   19e84:	f000 ff5c 	bl	1ad40 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   19e88:	4908      	ldr	r1, [pc, #32]	; (19eac <mpsl_signal_thread_init+0x50>)
   19e8a:	4628      	mov	r0, r5
   19e8c:	f006 f996 	bl	201bc <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   19e90:	4622      	mov	r2, r4
   19e92:	2104      	movs	r1, #4
   19e94:	2019      	movs	r0, #25
   19e96:	f7fb fe1b 	bl	15ad0 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   19e9a:	4620      	mov	r0, r4
   19e9c:	b009      	add	sp, #36	; 0x24
   19e9e:	bd30      	pop	{r4, r5, pc}
   19ea0:	20001730 	.word	0x20001730
   19ea4:	20004680 	.word	0x20004680
   19ea8:	00019e31 	.word	0x00019e31
   19eac:	000222f5 	.word	0x000222f5

00019eb0 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   19eb0:	4b01      	ldr	r3, [pc, #4]	; (19eb8 <mpsl_hfclk_callback+0x8>)
   19eb2:	2000      	movs	r0, #0
   19eb4:	681b      	ldr	r3, [r3, #0]
   19eb6:	4718      	bx	r3
   19eb8:	20002034 	.word	0x20002034

00019ebc <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   19ebc:	b120      	cbz	r0, 19ec8 <nrfx_clock_start+0xc>
   19ebe:	2801      	cmp	r0, #1
   19ec0:	d106      	bne.n	19ed0 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   19ec2:	4804      	ldr	r0, [pc, #16]	; (19ed4 <nrfx_clock_start+0x18>)
   19ec4:	f7e9 bb14 	b.w	34f0 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   19ec8:	4b03      	ldr	r3, [pc, #12]	; (19ed8 <nrfx_clock_start+0x1c>)
   19eca:	2001      	movs	r0, #1
   19ecc:	681b      	ldr	r3, [r3, #0]
   19ece:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   19ed0:	4770      	bx	lr
   19ed2:	bf00      	nop
   19ed4:	00019eb1 	.word	0x00019eb1
   19ed8:	20002034 	.word	0x20002034

00019edc <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   19edc:	4b01      	ldr	r3, [pc, #4]	; (19ee4 <nrfx_clock_init+0x8>)
   19ede:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   19ee0:	4801      	ldr	r0, [pc, #4]	; (19ee8 <nrfx_clock_init+0xc>)
   19ee2:	4770      	bx	lr
   19ee4:	20002034 	.word	0x20002034
   19ee8:	0bad0000 	.word	0x0bad0000

00019eec <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19eec:	4b03      	ldr	r3, [pc, #12]	; (19efc <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
   19eee:	6818      	ldr	r0, [r3, #0]
}
   19ef0:	f1a0 0308 	sub.w	r3, r0, #8
   19ef4:	4258      	negs	r0, r3
   19ef6:	4158      	adcs	r0, r3
   19ef8:	4770      	bx	lr
   19efa:	bf00      	nop
   19efc:	10000130 	.word	0x10000130

00019f00 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19f00:	4b06      	ldr	r3, [pc, #24]	; (19f1c <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
   19f02:	681b      	ldr	r3, [r3, #0]
   19f04:	2b08      	cmp	r3, #8
   19f06:	d106      	bne.n	19f16 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   19f08:	4b05      	ldr	r3, [pc, #20]	; (19f20 <nrf52_errata_103+0x20>)
   19f0a:	681b      	ldr	r3, [r3, #0]
                switch(var2)
   19f0c:	2b05      	cmp	r3, #5
   19f0e:	d802      	bhi.n	19f16 <nrf52_errata_103+0x16>
   19f10:	4a04      	ldr	r2, [pc, #16]	; (19f24 <nrf52_errata_103+0x24>)
   19f12:	5cd0      	ldrb	r0, [r2, r3]
   19f14:	4770      	bx	lr
        return false;
   19f16:	2000      	movs	r0, #0
}
   19f18:	4770      	bx	lr
   19f1a:	bf00      	nop
   19f1c:	10000130 	.word	0x10000130
   19f20:	10000134 	.word	0x10000134
   19f24:	00022311 	.word	0x00022311

00019f28 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19f28:	4a02      	ldr	r2, [pc, #8]	; (19f34 <nvmc_wait+0xc>)
   19f2a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   19f2e:	2b00      	cmp	r3, #0
   19f30:	d0fb      	beq.n	19f2a <nvmc_wait+0x2>
}
   19f32:	4770      	bx	lr
   19f34:	4001e000 	.word	0x4001e000

00019f38 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   19f38:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   19f3a:	f7ff ffd7 	bl	19eec <nrf52_errata_136>
   19f3e:	b140      	cbz	r0, 19f52 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   19f40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19f44:	2200      	movs	r2, #0
   19f46:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   19f4a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   19f4e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   19f52:	f7ff ffcb 	bl	19eec <nrf52_errata_136>
   19f56:	2800      	cmp	r0, #0
   19f58:	d046      	beq.n	19fe8 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   19f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19f5e:	4b5b      	ldr	r3, [pc, #364]	; (1a0cc <SystemInit+0x194>)
   19f60:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   19f64:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   19f68:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   19f6c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   19f70:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   19f74:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   19f78:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   19f7c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   19f80:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   19f84:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   19f88:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   19f8c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   19f90:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   19f94:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   19f98:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   19f9c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   19fa0:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   19fa4:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   19fa8:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   19fac:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   19fb0:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   19fb4:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   19fb8:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   19fbc:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   19fc0:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   19fc4:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   19fc8:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   19fcc:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   19fd0:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   19fd4:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   19fd8:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   19fdc:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   19fe0:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   19fe4:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   19fe8:	f7ff ff8a 	bl	19f00 <nrf52_errata_103>
   19fec:	b110      	cbz	r0, 19ff4 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   19fee:	4b38      	ldr	r3, [pc, #224]	; (1a0d0 <SystemInit+0x198>)
   19ff0:	4a38      	ldr	r2, [pc, #224]	; (1a0d4 <SystemInit+0x19c>)
   19ff2:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   19ff4:	f7ff ff84 	bl	19f00 <nrf52_errata_103>
   19ff8:	b118      	cbz	r0, 1a002 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   19ffa:	4b37      	ldr	r3, [pc, #220]	; (1a0d8 <SystemInit+0x1a0>)
   19ffc:	22fb      	movs	r2, #251	; 0xfb
   19ffe:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1a002:	f7ff ff7d 	bl	19f00 <nrf52_errata_103>
   1a006:	b148      	cbz	r0, 1a01c <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1a008:	4934      	ldr	r1, [pc, #208]	; (1a0dc <SystemInit+0x1a4>)
   1a00a:	4b35      	ldr	r3, [pc, #212]	; (1a0e0 <SystemInit+0x1a8>)
   1a00c:	680a      	ldr	r2, [r1, #0]
   1a00e:	681b      	ldr	r3, [r3, #0]
   1a010:	f022 020f 	bic.w	r2, r2, #15
   1a014:	f003 030f 	and.w	r3, r3, #15
   1a018:	4313      	orrs	r3, r2
   1a01a:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1a01c:	f7ff ff70 	bl	19f00 <nrf52_errata_103>
   1a020:	b118      	cbz	r0, 1a02a <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1a022:	4b30      	ldr	r3, [pc, #192]	; (1a0e4 <SystemInit+0x1ac>)
   1a024:	f44f 7200 	mov.w	r2, #512	; 0x200
   1a028:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1a02a:	f7ff ff5f 	bl	19eec <nrf52_errata_136>
   1a02e:	b148      	cbz	r0, 1a044 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1a030:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a034:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1a038:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1a03a:	bf44      	itt	mi
   1a03c:	f06f 0201 	mvnmi.w	r2, #1
   1a040:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a044:	4b28      	ldr	r3, [pc, #160]	; (1a0e8 <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1a046:	681b      	ldr	r3, [r3, #0]
   1a048:	2b08      	cmp	r3, #8
   1a04a:	d10e      	bne.n	1a06a <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1a04c:	4b27      	ldr	r3, [pc, #156]	; (1a0ec <SystemInit+0x1b4>)
   1a04e:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   1a050:	2b05      	cmp	r3, #5
   1a052:	d802      	bhi.n	1a05a <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1a054:	4a26      	ldr	r2, [pc, #152]	; (1a0f0 <SystemInit+0x1b8>)
   1a056:	5cd3      	ldrb	r3, [r2, r3]
   1a058:	b13b      	cbz	r3, 1a06a <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1a05a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1a05e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1a062:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a066:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1a06a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1a06e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1a072:	2a00      	cmp	r2, #0
   1a074:	db03      	blt.n	1a07e <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1a076:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1a07a:	2b00      	cmp	r3, #0
   1a07c:	da22      	bge.n	1a0c4 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1a07e:	491d      	ldr	r1, [pc, #116]	; (1a0f4 <SystemInit+0x1bc>)
   1a080:	2301      	movs	r3, #1
   1a082:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1a086:	f7ff ff4f 	bl	19f28 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1a08a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   1a08e:	2412      	movs	r4, #18
   1a090:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1a094:	f7ff ff48 	bl	19f28 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1a098:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1a09c:	f7ff ff44 	bl	19f28 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1a0a0:	2300      	movs	r3, #0
   1a0a2:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1a0a6:	f7ff ff3f 	bl	19f28 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1a0aa:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1a0ae:	4912      	ldr	r1, [pc, #72]	; (1a0f8 <SystemInit+0x1c0>)
   1a0b0:	4b12      	ldr	r3, [pc, #72]	; (1a0fc <SystemInit+0x1c4>)
   1a0b2:	68ca      	ldr	r2, [r1, #12]
   1a0b4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1a0b8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1a0ba:	60cb      	str	r3, [r1, #12]
   1a0bc:	f3bf 8f4f 	dsb	sy
    __NOP();
   1a0c0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1a0c2:	e7fd      	b.n	1a0c0 <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1a0c4:	4b0e      	ldr	r3, [pc, #56]	; (1a100 <SystemInit+0x1c8>)
   1a0c6:	4a0f      	ldr	r2, [pc, #60]	; (1a104 <SystemInit+0x1cc>)
   1a0c8:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1a0ca:	bd10      	pop	{r4, pc}
   1a0cc:	4000c000 	.word	0x4000c000
   1a0d0:	4000568c 	.word	0x4000568c
   1a0d4:	00038148 	.word	0x00038148
   1a0d8:	4000f000 	.word	0x4000f000
   1a0dc:	40000ee4 	.word	0x40000ee4
   1a0e0:	10000258 	.word	0x10000258
   1a0e4:	40029640 	.word	0x40029640
   1a0e8:	10000130 	.word	0x10000130
   1a0ec:	10000134 	.word	0x10000134
   1a0f0:	0002230b 	.word	0x0002230b
   1a0f4:	4001e000 	.word	0x4001e000
   1a0f8:	e000ed00 	.word	0xe000ed00
   1a0fc:	05fa0004 	.word	0x05fa0004
   1a100:	200004c8 	.word	0x200004c8
   1a104:	03d09000 	.word	0x03d09000

0001a108 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1a108:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1a10a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1a10c:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1a10e:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
   1a112:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
   1a114:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
   1a118:	d014      	beq.n	1a144 <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a11a:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1a11e:	fa05 f204 	lsl.w	r2, r5, r4
   1a122:	ea23 0202 	bic.w	r2, r3, r2
   1a126:	e850 6f00 	ldrex	r6, [r0]
   1a12a:	429e      	cmp	r6, r3
   1a12c:	d104      	bne.n	1a138 <nrfx_flag32_alloc+0x30>
   1a12e:	e840 2c00 	strex	ip, r2, [r0]
   1a132:	f1bc 0f00 	cmp.w	ip, #0
   1a136:	d1f6      	bne.n	1a126 <nrfx_flag32_alloc+0x1e>
   1a138:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1a13c:	d1e6      	bne.n	1a10c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   1a13e:	4802      	ldr	r0, [pc, #8]	; (1a148 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
   1a140:	700c      	strb	r4, [r1, #0]
}
   1a142:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   1a144:	4801      	ldr	r0, [pc, #4]	; (1a14c <nrfx_flag32_alloc+0x44>)
   1a146:	e7fc      	b.n	1a142 <nrfx_flag32_alloc+0x3a>
   1a148:	0bad0000 	.word	0x0bad0000
   1a14c:	0bad0002 	.word	0x0bad0002

0001a150 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1a150:	6803      	ldr	r3, [r0, #0]
   1a152:	40cb      	lsrs	r3, r1
   1a154:	07db      	lsls	r3, r3, #31
{
   1a156:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   1a158:	d415      	bmi.n	1a186 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1a15a:	2301      	movs	r3, #1
   1a15c:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   1a160:	6803      	ldr	r3, [r0, #0]
   1a162:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1a166:	ea41 0203 	orr.w	r2, r1, r3
   1a16a:	e850 4f00 	ldrex	r4, [r0]
   1a16e:	429c      	cmp	r4, r3
   1a170:	d104      	bne.n	1a17c <nrfx_flag32_free+0x2c>
   1a172:	e840 2c00 	strex	ip, r2, [r0]
   1a176:	f1bc 0f00 	cmp.w	ip, #0
   1a17a:	d1f6      	bne.n	1a16a <nrfx_flag32_free+0x1a>
   1a17c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1a180:	d1ee      	bne.n	1a160 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   1a182:	4802      	ldr	r0, [pc, #8]	; (1a18c <nrfx_flag32_free+0x3c>)
}
   1a184:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1a186:	4802      	ldr	r0, [pc, #8]	; (1a190 <nrfx_flag32_free+0x40>)
   1a188:	e7fc      	b.n	1a184 <nrfx_flag32_free+0x34>
   1a18a:	bf00      	nop
   1a18c:	0bad0000 	.word	0x0bad0000
   1a190:	0bad0004 	.word	0x0bad0004

0001a194 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1a194:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1a196:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1a19a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a19c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1a19e:	6002      	str	r2, [r0, #0]
}
   1a1a0:	4802      	ldr	r0, [pc, #8]	; (1a1ac <nrf_gpio_pin_port_decode+0x18>)
   1a1a2:	bf18      	it	ne
   1a1a4:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1a1a8:	4770      	bx	lr
   1a1aa:	bf00      	nop
   1a1ac:	50000300 	.word	0x50000300

0001a1b0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1a1b0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1a1b2:	f100 0308 	add.w	r3, r0, #8
   1a1b6:	4c0c      	ldr	r4, [pc, #48]	; (1a1e8 <call_handler+0x38>)
   1a1b8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1a1bc:	05da      	lsls	r2, r3, #23
{
   1a1be:	4605      	mov	r5, r0
   1a1c0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1a1c2:	d507      	bpl.n	1a1d4 <call_handler+0x24>
   1a1c4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1a1c8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1a1cc:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1a1d0:	6852      	ldr	r2, [r2, #4]
   1a1d2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1a1d4:	68a3      	ldr	r3, [r4, #8]
   1a1d6:	b12b      	cbz	r3, 1a1e4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1a1d8:	68e2      	ldr	r2, [r4, #12]
   1a1da:	4631      	mov	r1, r6
   1a1dc:	4628      	mov	r0, r5
    }
}
   1a1de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1a1e2:	4718      	bx	r3
}
   1a1e4:	bd70      	pop	{r4, r5, r6, pc}
   1a1e6:	bf00      	nop
   1a1e8:	200004cc 	.word	0x200004cc

0001a1ec <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1a1ec:	4b12      	ldr	r3, [pc, #72]	; (1a238 <release_handler+0x4c>)
   1a1ee:	3008      	adds	r0, #8
{
   1a1f0:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1a1f2:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   1a1f6:	05d1      	lsls	r1, r2, #23
   1a1f8:	d51b      	bpl.n	1a232 <release_handler+0x46>
   1a1fa:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1a1fe:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
   1a202:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1a206:	f103 0410 	add.w	r4, r3, #16
   1a20a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1a20c:	f834 2b02 	ldrh.w	r2, [r4], #2
   1a210:	f412 7f80 	tst.w	r2, #256	; 0x100
   1a214:	d003      	beq.n	1a21e <release_handler+0x32>
   1a216:	f3c2 2243 	ubfx	r2, r2, #9, #4
   1a21a:	4291      	cmp	r1, r2
   1a21c:	d009      	beq.n	1a232 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1a21e:	3001      	adds	r0, #1
   1a220:	2830      	cmp	r0, #48	; 0x30
   1a222:	d1f3      	bne.n	1a20c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1a224:	2200      	movs	r2, #0
   1a226:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1a22a:	4804      	ldr	r0, [pc, #16]	; (1a23c <release_handler+0x50>)
}
   1a22c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1a22e:	f7ff bf8f 	b.w	1a150 <nrfx_flag32_free>
}
   1a232:	bc10      	pop	{r4}
   1a234:	4770      	bx	lr
   1a236:	bf00      	nop
   1a238:	200004cc 	.word	0x200004cc
   1a23c:	20000540 	.word	0x20000540

0001a240 <pin_handler_trigger_uninit>:
{
   1a240:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1a242:	4c0a      	ldr	r4, [pc, #40]	; (1a26c <pin_handler_trigger_uninit+0x2c>)
   1a244:	f100 0508 	add.w	r5, r0, #8
   1a248:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
   1a24c:	069a      	lsls	r2, r3, #26
   1a24e:	d506      	bpl.n	1a25e <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1a250:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1a252:	4a07      	ldr	r2, [pc, #28]	; (1a270 <pin_handler_trigger_uninit+0x30>)
   1a254:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1a258:	2100      	movs	r1, #0
   1a25a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
   1a25e:	f7ff ffc5 	bl	1a1ec <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1a262:	2300      	movs	r3, #0
   1a264:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1a268:	bd38      	pop	{r3, r4, r5, pc}
   1a26a:	bf00      	nop
   1a26c:	200004cc 	.word	0x200004cc
   1a270:	40006000 	.word	0x40006000

0001a274 <nrfx_gpiote_input_configure>:
{
   1a274:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1a278:	461d      	mov	r5, r3
   1a27a:	4604      	mov	r4, r0
   1a27c:	4617      	mov	r7, r2
    if (p_input_config)
   1a27e:	460b      	mov	r3, r1
   1a280:	b309      	cbz	r1, 1a2c6 <nrfx_gpiote_input_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1a282:	4e4d      	ldr	r6, [pc, #308]	; (1a3b8 <nrfx_gpiote_input_configure+0x144>)
   1a284:	f100 0808 	add.w	r8, r0, #8
        if (pin_is_task_output(pin))
   1a288:	f836 2018 	ldrh.w	r2, [r6, r8, lsl #1]
   1a28c:	f002 0222 	and.w	r2, r2, #34	; 0x22
   1a290:	2a22      	cmp	r2, #34	; 0x22
   1a292:	d103      	bne.n	1a29c <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   1a294:	4849      	ldr	r0, [pc, #292]	; (1a3bc <nrfx_gpiote_input_configure+0x148>)
}
   1a296:	b004      	add	sp, #16
   1a298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1a29c:	2200      	movs	r2, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1a29e:	e9cd 2200 	strd	r2, r2, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1a2a2:	f88d 200e 	strb.w	r2, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1a2a6:	f88d 200f 	strb.w	r2, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1a2aa:	f10d 010e 	add.w	r1, sp, #14
   1a2ae:	f10d 020f 	add.w	r2, sp, #15
   1a2b2:	f005 fe65 	bl	1ff80 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1a2b6:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   1a2ba:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1a2be:	f043 0301 	orr.w	r3, r3, #1
   1a2c2:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   1a2c6:	b197      	cbz	r7, 1a2ee <nrfx_gpiote_input_configure+0x7a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1a2c8:	483b      	ldr	r0, [pc, #236]	; (1a3b8 <nrfx_gpiote_input_configure+0x144>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1a2ca:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1a2cc:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1a2ce:	f104 0308 	add.w	r3, r4, #8
   1a2d2:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
        if (pin_is_output(pin))
   1a2d6:	078f      	lsls	r7, r1, #30
   1a2d8:	d50c      	bpl.n	1a2f4 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
   1a2da:	2a00      	cmp	r2, #0
   1a2dc:	d1da      	bne.n	1a294 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1a2de:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
   1a2e2:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1a2e6:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   1a2ea:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    if (p_handler_config)
   1a2ee:	bbcd      	cbnz	r5, 1a364 <nrfx_gpiote_input_configure+0xf0>
    return NRFX_SUCCESS;
   1a2f0:	4833      	ldr	r0, [pc, #204]	; (1a3c0 <nrfx_gpiote_input_configure+0x14c>)
   1a2f2:	e7d0      	b.n	1a296 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1a2f4:	f021 0120 	bic.w	r1, r1, #32
   1a2f8:	04c9      	lsls	r1, r1, #19
   1a2fa:	0cc9      	lsrs	r1, r1, #19
   1a2fc:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
            if (use_evt)
   1a300:	2a00      	cmp	r2, #0
   1a302:	d0ec      	beq.n	1a2de <nrfx_gpiote_input_configure+0x6a>
                if (!edge)
   1a304:	2e03      	cmp	r6, #3
   1a306:	d8c5      	bhi.n	1a294 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1a308:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1a30a:	b92e      	cbnz	r6, 1a318 <nrfx_gpiote_input_configure+0xa4>
   1a30c:	4a2d      	ldr	r2, [pc, #180]	; (1a3c4 <nrfx_gpiote_input_configure+0x150>)
   1a30e:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   1a312:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   1a316:	e7e2      	b.n	1a2de <nrfx_gpiote_input_configure+0x6a>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1a318:	00ba      	lsls	r2, r7, #2
   1a31a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1a31e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a322:	ea4f 2e04 	mov.w	lr, r4, lsl #8
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1a326:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   1a32a:	f02c 0c03 	bic.w	ip, ip, #3
   1a32e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1a332:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   1a336:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   1a33a:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   1a33e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a342:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   1a346:	f40e 5e7c 	and.w	lr, lr, #16128	; 0x3f00
   1a34a:	ea4c 4c06 	orr.w	ip, ip, r6, lsl #16
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1a34e:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1a352:	ea4c 0c0e 	orr.w	ip, ip, lr
   1a356:	f041 0120 	orr.w	r1, r1, #32
   1a35a:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
   1a35e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   1a362:	e7bc      	b.n	1a2de <nrfx_gpiote_input_configure+0x6a>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1a364:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1a368:	4620      	mov	r0, r4
   1a36a:	f7ff ff3f 	bl	1a1ec <release_handler>
    if (!handler)
   1a36e:	2e00      	cmp	r6, #0
   1a370:	d0be      	beq.n	1a2f0 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1a372:	4d11      	ldr	r5, [pc, #68]	; (1a3b8 <nrfx_gpiote_input_configure+0x144>)
   1a374:	682b      	ldr	r3, [r5, #0]
   1a376:	429e      	cmp	r6, r3
   1a378:	d104      	bne.n	1a384 <nrfx_gpiote_input_configure+0x110>
   1a37a:	686b      	ldr	r3, [r5, #4]
   1a37c:	429f      	cmp	r7, r3
   1a37e:	d101      	bne.n	1a384 <nrfx_gpiote_input_configure+0x110>
   1a380:	2200      	movs	r2, #0
   1a382:	e009      	b.n	1a398 <nrfx_gpiote_input_configure+0x124>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1a384:	4810      	ldr	r0, [pc, #64]	; (1a3c8 <nrfx_gpiote_input_configure+0x154>)
   1a386:	f10d 010f 	add.w	r1, sp, #15
   1a38a:	f7ff febd 	bl	1a108 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1a38e:	4b0c      	ldr	r3, [pc, #48]	; (1a3c0 <nrfx_gpiote_input_configure+0x14c>)
   1a390:	4298      	cmp	r0, r3
   1a392:	d180      	bne.n	1a296 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   1a394:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   1a398:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1a39c:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1a3a0:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1a3a2:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1a3a4:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1a3a8:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1a3ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1a3b0:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   1a3b4:	e79c      	b.n	1a2f0 <nrfx_gpiote_input_configure+0x7c>
   1a3b6:	bf00      	nop
   1a3b8:	200004cc 	.word	0x200004cc
   1a3bc:	0bad0004 	.word	0x0bad0004
   1a3c0:	0bad0000 	.word	0x0bad0000
   1a3c4:	40006000 	.word	0x40006000
   1a3c8:	20000540 	.word	0x20000540

0001a3cc <nrfx_gpiote_output_configure>:
{
   1a3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a3ce:	4604      	mov	r4, r0
   1a3d0:	b085      	sub	sp, #20
   1a3d2:	4615      	mov	r5, r2
    if (p_config)
   1a3d4:	b309      	cbz	r1, 1a41a <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1a3d6:	f100 0708 	add.w	r7, r0, #8
   1a3da:	4e31      	ldr	r6, [pc, #196]	; (1a4a0 <nrfx_gpiote_output_configure+0xd4>)
   1a3dc:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1a3e0:	0798      	lsls	r0, r3, #30
   1a3e2:	d401      	bmi.n	1a3e8 <nrfx_gpiote_output_configure+0x1c>
   1a3e4:	069a      	lsls	r2, r3, #26
   1a3e6:	d458      	bmi.n	1a49a <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1a3e8:	f013 0f1c 	tst.w	r3, #28
   1a3ec:	d002      	beq.n	1a3f4 <nrfx_gpiote_output_configure+0x28>
   1a3ee:	784b      	ldrb	r3, [r1, #1]
   1a3f0:	2b01      	cmp	r3, #1
   1a3f2:	d052      	beq.n	1a49a <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1a3f4:	2301      	movs	r3, #1
   1a3f6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1a3fa:	2300      	movs	r3, #0
   1a3fc:	e9cd 1300 	strd	r1, r3, [sp]
   1a400:	1c4a      	adds	r2, r1, #1
   1a402:	1c8b      	adds	r3, r1, #2
   1a404:	4620      	mov	r0, r4
   1a406:	f10d 010f 	add.w	r1, sp, #15
   1a40a:	f005 fdb9 	bl	1ff80 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1a40e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1a412:	f043 0303 	orr.w	r3, r3, #3
   1a416:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   1a41a:	b915      	cbnz	r5, 1a422 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
   1a41c:	4821      	ldr	r0, [pc, #132]	; (1a4a4 <nrfx_gpiote_output_configure+0xd8>)
}
   1a41e:	b005      	add	sp, #20
   1a420:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1a422:	4e1f      	ldr	r6, [pc, #124]	; (1a4a0 <nrfx_gpiote_output_configure+0xd4>)
   1a424:	f104 0708 	add.w	r7, r4, #8
   1a428:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   1a42c:	0783      	lsls	r3, r0, #30
   1a42e:	d534      	bpl.n	1a49a <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
   1a430:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1a434:	4661      	mov	r1, ip
   1a436:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1a438:	f020 0020 	bic.w	r0, r0, #32
   1a43c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1a440:	04c0      	lsls	r0, r0, #19
   1a442:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1a446:	0cc0      	lsrs	r0, r0, #19
   1a448:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1a44c:	2300      	movs	r3, #0
   1a44e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1a452:	786a      	ldrb	r2, [r5, #1]
   1a454:	2a00      	cmp	r2, #0
   1a456:	d0e1      	beq.n	1a41c <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1a458:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   1a45c:	78ad      	ldrb	r5, [r5, #2]
   1a45e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1a462:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1a466:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a46a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1a46e:	0223      	lsls	r3, r4, #8
   1a470:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1a474:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a476:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1a47a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1a47e:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a480:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1a482:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1a486:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a48a:	432b      	orrs	r3, r5
   1a48c:	f040 0020 	orr.w	r0, r0, #32
   1a490:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1a494:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1a498:	e7c0      	b.n	1a41c <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
   1a49a:	4803      	ldr	r0, [pc, #12]	; (1a4a8 <nrfx_gpiote_output_configure+0xdc>)
   1a49c:	e7bf      	b.n	1a41e <nrfx_gpiote_output_configure+0x52>
   1a49e:	bf00      	nop
   1a4a0:	200004cc 	.word	0x200004cc
   1a4a4:	0bad0000 	.word	0x0bad0000
   1a4a8:	0bad0004 	.word	0x0bad0004

0001a4ac <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1a4ac:	4b01      	ldr	r3, [pc, #4]	; (1a4b4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1a4ae:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1a4b2:	4770      	bx	lr
   1a4b4:	200004cc 	.word	0x200004cc

0001a4b8 <nrfx_gpiote_channel_get>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1a4b8:	3008      	adds	r0, #8
   1a4ba:	4b05      	ldr	r3, [pc, #20]	; (1a4d0 <nrfx_gpiote_channel_get+0x18>)
   1a4bc:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    if (pin_in_use_by_te(pin))
   1a4c0:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1a4c2:	bf43      	ittte	mi
   1a4c4:	0b5b      	lsrmi	r3, r3, #13
        return NRFX_SUCCESS;
   1a4c6:	4803      	ldrmi	r0, [pc, #12]	; (1a4d4 <nrfx_gpiote_channel_get+0x1c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1a4c8:	700b      	strbmi	r3, [r1, #0]
        return NRFX_ERROR_INVALID_PARAM;
   1a4ca:	4803      	ldrpl	r0, [pc, #12]	; (1a4d8 <nrfx_gpiote_channel_get+0x20>)
}
   1a4cc:	4770      	bx	lr
   1a4ce:	bf00      	nop
   1a4d0:	200004cc 	.word	0x200004cc
   1a4d4:	0bad0000 	.word	0x0bad0000
   1a4d8:	0bad0004 	.word	0x0bad0004

0001a4dc <nrfx_gpiote_init>:
{
   1a4dc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1a4de:	4c0e      	ldr	r4, [pc, #56]	; (1a518 <nrfx_gpiote_init+0x3c>)
   1a4e0:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1a4e4:	b9b5      	cbnz	r5, 1a514 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1a4e6:	2260      	movs	r2, #96	; 0x60
   1a4e8:	4629      	mov	r1, r5
   1a4ea:	f104 0010 	add.w	r0, r4, #16
   1a4ee:	f005 f990 	bl	1f812 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1a4f2:	2006      	movs	r0, #6
   1a4f4:	f7fb faba 	bl	15a6c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a4f8:	4b08      	ldr	r3, [pc, #32]	; (1a51c <nrfx_gpiote_init+0x40>)
    return err_code;
   1a4fa:	4809      	ldr	r0, [pc, #36]	; (1a520 <nrfx_gpiote_init+0x44>)
   1a4fc:	601d      	str	r5, [r3, #0]
   1a4fe:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1a500:	4b08      	ldr	r3, [pc, #32]	; (1a524 <nrfx_gpiote_init+0x48>)
   1a502:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1a506:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1a50a:	2301      	movs	r3, #1
   1a50c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1a510:	6763      	str	r3, [r4, #116]	; 0x74
}
   1a512:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1a514:	4804      	ldr	r0, [pc, #16]	; (1a528 <nrfx_gpiote_init+0x4c>)
   1a516:	e7fc      	b.n	1a512 <nrfx_gpiote_init+0x36>
   1a518:	200004cc 	.word	0x200004cc
   1a51c:	4000617c 	.word	0x4000617c
   1a520:	0bad0000 	.word	0x0bad0000
   1a524:	40006000 	.word	0x40006000
   1a528:	0bad0005 	.word	0x0bad0005

0001a52c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1a52c:	4b03      	ldr	r3, [pc, #12]	; (1a53c <nrfx_gpiote_is_init+0x10>)
   1a52e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1a532:	3800      	subs	r0, #0
   1a534:	bf18      	it	ne
   1a536:	2001      	movne	r0, #1
   1a538:	4770      	bx	lr
   1a53a:	bf00      	nop
   1a53c:	200004cc 	.word	0x200004cc

0001a540 <nrfx_gpiote_channel_free>:
{
   1a540:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1a542:	4801      	ldr	r0, [pc, #4]	; (1a548 <nrfx_gpiote_channel_free+0x8>)
   1a544:	f7ff be04 	b.w	1a150 <nrfx_flag32_free>
   1a548:	2000053c 	.word	0x2000053c

0001a54c <nrfx_gpiote_channel_alloc>:
{
   1a54c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1a54e:	4801      	ldr	r0, [pc, #4]	; (1a554 <nrfx_gpiote_channel_alloc+0x8>)
   1a550:	f7ff bdda 	b.w	1a108 <nrfx_flag32_alloc>
   1a554:	2000053c 	.word	0x2000053c

0001a558 <nrfx_gpiote_trigger_enable>:
{
   1a558:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1a55a:	4b1f      	ldr	r3, [pc, #124]	; (1a5d8 <nrfx_gpiote_trigger_enable+0x80>)
   1a55c:	f100 0208 	add.w	r2, r0, #8
{
   1a560:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1a562:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1a566:	069a      	lsls	r2, r3, #26
   1a568:	d51d      	bpl.n	1a5a6 <nrfx_gpiote_trigger_enable+0x4e>
   1a56a:	f013 0502 	ands.w	r5, r3, #2
   1a56e:	d11a      	bne.n	1a5a6 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1a570:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1a572:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   1a574:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   1a578:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   1a57c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1a580:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a584:	6005      	str	r5, [r0, #0]
   1a586:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1a588:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1a58c:	f040 0001 	orr.w	r0, r0, #1
   1a590:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   1a594:	b129      	cbz	r1, 1a5a2 <nrfx_gpiote_trigger_enable+0x4a>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1a596:	2201      	movs	r2, #1
   1a598:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   1a59c:	4a0f      	ldr	r2, [pc, #60]	; (1a5dc <nrfx_gpiote_trigger_enable+0x84>)
   1a59e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1a5a2:	b003      	add	sp, #12
   1a5a4:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1a5a6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1a5aa:	2b04      	cmp	r3, #4
   1a5ac:	d010      	beq.n	1a5d0 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1a5ae:	2b05      	cmp	r3, #5
   1a5b0:	d010      	beq.n	1a5d4 <nrfx_gpiote_trigger_enable+0x7c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a5b2:	a801      	add	r0, sp, #4
   1a5b4:	9401      	str	r4, [sp, #4]
   1a5b6:	f7ff fded 	bl	1a194 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1a5ba:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1a5bc:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1a5c0:	40d9      	lsrs	r1, r3
   1a5c2:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1a5c6:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1a5c8:	4620      	mov	r0, r4
   1a5ca:	f005 fd20 	bl	2000e <nrf_gpio_cfg_sense_set>
}
   1a5ce:	e7e8      	b.n	1a5a2 <nrfx_gpiote_trigger_enable+0x4a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1a5d0:	2103      	movs	r1, #3
   1a5d2:	e7f9      	b.n	1a5c8 <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1a5d4:	2102      	movs	r1, #2
   1a5d6:	e7f7      	b.n	1a5c8 <nrfx_gpiote_trigger_enable+0x70>
   1a5d8:	200004cc 	.word	0x200004cc
   1a5dc:	40006000 	.word	0x40006000

0001a5e0 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1a5e0:	4b0e      	ldr	r3, [pc, #56]	; (1a61c <nrfx_gpiote_trigger_disable+0x3c>)
   1a5e2:	f100 0208 	add.w	r2, r0, #8
   1a5e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1a5ea:	0699      	lsls	r1, r3, #26
   1a5ec:	d513      	bpl.n	1a616 <nrfx_gpiote_trigger_disable+0x36>
   1a5ee:	079a      	lsls	r2, r3, #30
   1a5f0:	d411      	bmi.n	1a616 <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1a5f2:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1a5f4:	2201      	movs	r2, #1
   1a5f6:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1a5f8:	009b      	lsls	r3, r3, #2
   1a5fa:	4909      	ldr	r1, [pc, #36]	; (1a620 <nrfx_gpiote_trigger_disable+0x40>)
   1a5fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a600:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1a604:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1a608:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1a60c:	f022 0203 	bic.w	r2, r2, #3
   1a610:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1a614:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1a616:	2100      	movs	r1, #0
   1a618:	f005 bcf9 	b.w	2000e <nrf_gpio_cfg_sense_set>
   1a61c:	200004cc 	.word	0x200004cc
   1a620:	40006000 	.word	0x40006000

0001a624 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1a624:	4b0e      	ldr	r3, [pc, #56]	; (1a660 <nrfx_gpiote_pin_uninit+0x3c>)
   1a626:	f100 0208 	add.w	r2, r0, #8
{
   1a62a:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1a62c:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   1a630:	07db      	lsls	r3, r3, #31
{
   1a632:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1a634:	d511      	bpl.n	1a65a <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   1a636:	f7ff ffd3 	bl	1a5e0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1a63a:	4620      	mov	r0, r4
   1a63c:	f7ff fe00 	bl	1a240 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a640:	a801      	add	r0, sp, #4
   1a642:	9401      	str	r4, [sp, #4]
   1a644:	f7ff fda6 	bl	1a194 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1a648:	9b01      	ldr	r3, [sp, #4]
   1a64a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a64e:	2202      	movs	r2, #2
   1a650:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   1a654:	4803      	ldr	r0, [pc, #12]	; (1a664 <nrfx_gpiote_pin_uninit+0x40>)
}
   1a656:	b002      	add	sp, #8
   1a658:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1a65a:	4803      	ldr	r0, [pc, #12]	; (1a668 <nrfx_gpiote_pin_uninit+0x44>)
   1a65c:	e7fb      	b.n	1a656 <nrfx_gpiote_pin_uninit+0x32>
   1a65e:	bf00      	nop
   1a660:	200004cc 	.word	0x200004cc
   1a664:	0bad0000 	.word	0x0bad0000
   1a668:	0bad0004 	.word	0x0bad0004

0001a66c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1a66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a670:	4b64      	ldr	r3, [pc, #400]	; (1a804 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   1a672:	4865      	ldr	r0, [pc, #404]	; (1a808 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1a674:	4965      	ldr	r1, [pc, #404]	; (1a80c <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   1a676:	2500      	movs	r5, #0
{
   1a678:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1a67a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a67c:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a67e:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1a680:	b136      	cbz	r6, 1a690 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1a682:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   1a686:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a688:	bf1e      	ittt	ne
   1a68a:	601c      	strne	r4, [r3, #0]
   1a68c:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1a68e:	4315      	orrne	r5, r2
        }
        mask <<= 1;
   1a690:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1a692:	428b      	cmp	r3, r1
        mask <<= 1;
   1a694:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1a698:	d1f1      	bne.n	1a67e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a69a:	4f5d      	ldr	r7, [pc, #372]	; (1a810 <nrfx_gpiote_irq_handler+0x1a4>)
   1a69c:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1a69e:	b37b      	cbz	r3, 1a700 <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
   1a6a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a6a4:	4e5b      	ldr	r6, [pc, #364]	; (1a814 <nrfx_gpiote_irq_handler+0x1a8>)
   1a6a6:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1a6aa:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1a6ac:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1a6b0:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   1a6b4:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1a6b6:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1a6ba:	9600      	str	r6, [sp, #0]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1a6bc:	f10d 0910 	add.w	r9, sp, #16
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1a6c0:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1a6c4:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
   1a6c8:	f8d9 3000 	ldr.w	r3, [r9]
   1a6cc:	b9f3      	cbnz	r3, 1a70c <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1a6ce:	f108 0820 	add.w	r8, r8, #32
   1a6d2:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
   1a6d6:	f109 0904 	add.w	r9, r9, #4
   1a6da:	d1f5      	bne.n	1a6c8 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a6dc:	603b      	str	r3, [r7, #0]
   1a6de:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
   1a6e0:	9900      	ldr	r1, [sp, #0]
        *p_masks = gpio_regs[i]->LATCH;
   1a6e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a6e6:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1a6ea:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1a6ec:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1a6f0:	9b00      	ldr	r3, [sp, #0]
   1a6f2:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   1a6f6:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1a6f8:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   1a6fc:	4313      	orrs	r3, r2
   1a6fe:	d1dd      	bne.n	1a6bc <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
   1a700:	2401      	movs	r4, #1
    while (mask)
   1a702:	2d00      	cmp	r5, #0
   1a704:	d166      	bne.n	1a7d4 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1a706:	b007      	add	sp, #28
   1a708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   1a70c:	fa93 f3a3 	rbit	r3, r3
   1a710:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
   1a714:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1a718:	f106 0208 	add.w	r2, r6, #8
   1a71c:	4b3e      	ldr	r3, [pc, #248]	; (1a818 <nrfx_gpiote_irq_handler+0x1ac>)
   1a71e:	9603      	str	r6, [sp, #12]
   1a720:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
   1a724:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1a728:	08f4      	lsrs	r4, r6, #3
   1a72a:	9301      	str	r3, [sp, #4]
   1a72c:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
   1a72e:	ab04      	add	r3, sp, #16
    bit = BITMASK_RELBIT_GET(bit);
   1a730:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1a734:	fa0b fc00 	lsl.w	ip, fp, r0
   1a738:	5d18      	ldrb	r0, [r3, r4]
   1a73a:	ea20 000c 	bic.w	r0, r0, ip
   1a73e:	5518      	strb	r0, [r3, r4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a740:	a803      	add	r0, sp, #12
   1a742:	0891      	lsrs	r1, r2, #2
   1a744:	f7ff fd26 	bl	1a194 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1a748:	9c03      	ldr	r4, [sp, #12]
   1a74a:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    if (is_level(trigger))
   1a74e:	074b      	lsls	r3, r1, #29
   1a750:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1a754:	f3c4 4401 	ubfx	r4, r4, #16, #2
   1a758:	d523      	bpl.n	1a7a2 <nrfx_gpiote_irq_handler+0x136>
        call_handler(pin, trigger);
   1a75a:	4651      	mov	r1, sl
   1a75c:	4630      	mov	r0, r6
   1a75e:	f7ff fd27 	bl	1a1b0 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a762:	a803      	add	r0, sp, #12
   1a764:	9603      	str	r6, [sp, #12]
   1a766:	f7ff fd15 	bl	1a194 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1a76a:	9a03      	ldr	r2, [sp, #12]
   1a76c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1a770:	b2e4      	uxtb	r4, r4
   1a772:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1a776:	f3c2 4201 	ubfx	r2, r2, #16, #2
   1a77a:	4294      	cmp	r4, r2
   1a77c:	d107      	bne.n	1a78e <nrfx_gpiote_irq_handler+0x122>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1a77e:	2100      	movs	r1, #0
   1a780:	4630      	mov	r0, r6
   1a782:	f005 fc44 	bl	2000e <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1a786:	4621      	mov	r1, r4
   1a788:	4630      	mov	r0, r6
   1a78a:	f005 fc40 	bl	2000e <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a78e:	a803      	add	r0, sp, #12
   1a790:	9603      	str	r6, [sp, #12]
   1a792:	f7ff fcff 	bl	1a194 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1a796:	9b03      	ldr	r3, [sp, #12]
   1a798:	fa0b f303 	lsl.w	r3, fp, r3
   1a79c:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
   1a7a0:	e792      	b.n	1a6c8 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1a7a2:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1a7a4:	bf0c      	ite	eq
   1a7a6:	2103      	moveq	r1, #3
   1a7a8:	2102      	movne	r1, #2
   1a7aa:	4630      	mov	r0, r6
   1a7ac:	f005 fc2f 	bl	2000e <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1a7b0:	9b01      	ldr	r3, [sp, #4]
   1a7b2:	2b03      	cmp	r3, #3
   1a7b4:	d004      	beq.n	1a7c0 <nrfx_gpiote_irq_handler+0x154>
   1a7b6:	2c02      	cmp	r4, #2
   1a7b8:	d107      	bne.n	1a7ca <nrfx_gpiote_irq_handler+0x15e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1a7ba:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1a7be:	d1e6      	bne.n	1a78e <nrfx_gpiote_irq_handler+0x122>
            call_handler(pin, trigger);
   1a7c0:	4651      	mov	r1, sl
   1a7c2:	4630      	mov	r0, r6
   1a7c4:	f7ff fcf4 	bl	1a1b0 <call_handler>
   1a7c8:	e7e1      	b.n	1a78e <nrfx_gpiote_irq_handler+0x122>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1a7ca:	2c03      	cmp	r4, #3
   1a7cc:	d1df      	bne.n	1a78e <nrfx_gpiote_irq_handler+0x122>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1a7ce:	f1ba 0f02 	cmp.w	sl, #2
   1a7d2:	e7f4      	b.n	1a7be <nrfx_gpiote_irq_handler+0x152>
        uint32_t ch = NRF_CTZ(mask);
   1a7d4:	fa95 f3a5 	rbit	r3, r5
   1a7d8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1a7dc:	fa04 f203 	lsl.w	r2, r4, r3
   1a7e0:	009b      	lsls	r3, r3, #2
   1a7e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a7e6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1a7ea:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1a7ee:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1a7f2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1a7f6:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1a7fa:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1a7fe:	f7ff fcd7 	bl	1a1b0 <call_handler>
   1a802:	e77e      	b.n	1a702 <nrfx_gpiote_irq_handler+0x96>
   1a804:	40006100 	.word	0x40006100
   1a808:	40006000 	.word	0x40006000
   1a80c:	40006120 	.word	0x40006120
   1a810:	4000617c 	.word	0x4000617c
   1a814:	50000300 	.word	0x50000300
   1a818:	200004cc 	.word	0x200004cc

0001a81c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1a81c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1a81e:	4801      	ldr	r0, [pc, #4]	; (1a824 <nrfx_ppi_channel_alloc+0x8>)
   1a820:	f7ff bc72 	b.w	1a108 <nrfx_flag32_alloc>
   1a824:	20000548 	.word	0x20000548

0001a828 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1a828:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1a82a:	4c11      	ldr	r4, [pc, #68]	; (1a870 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1a82c:	4a11      	ldr	r2, [pc, #68]	; (1a874 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1a82e:	4912      	ldr	r1, [pc, #72]	; (1a878 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1a830:	2303      	movs	r3, #3
   1a832:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1a834:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1a836:	4b11      	ldr	r3, [pc, #68]	; (1a87c <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   1a838:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1a83a:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1a83c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1a840:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1a842:	2300      	movs	r3, #0
   1a844:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1a846:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1a848:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1a84a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1a84c:	4a0c      	ldr	r2, [pc, #48]	; (1a880 <_DoInit+0x58>)
   1a84e:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   1a850:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1a852:	2210      	movs	r2, #16
   1a854:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1a856:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1a858:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1a85a:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   1a85c:	f004 ff6e 	bl	1f73c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1a860:	4908      	ldr	r1, [pc, #32]	; (1a884 <_DoInit+0x5c>)
   1a862:	4620      	mov	r0, r4
   1a864:	f004 ff6a 	bl	1f73c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1a868:	2320      	movs	r3, #32
   1a86a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1a86c:	bd10      	pop	{r4, pc}
   1a86e:	bf00      	nop
   1a870:	20002038 	.word	0x20002038
   1a874:	00022317 	.word	0x00022317
   1a878:	00022320 	.word	0x00022320
   1a87c:	20002f3d 	.word	0x20002f3d
   1a880:	20002f2d 	.word	0x20002f2d
   1a884:	00022324 	.word	0x00022324

0001a888 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1a888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1a88c:	4f23      	ldr	r7, [pc, #140]	; (1a91c <SEGGER_RTT_WriteSkipNoLock+0x94>)
   1a88e:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1a892:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   1a894:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1a898:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   1a89a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1a89c:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1a89e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1a8a0:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1a8a2:	d834      	bhi.n	1a90e <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1a8a4:	f8d2 a020 	ldr.w	sl, [r2, #32]
   1a8a8:	ebaa 0905 	sub.w	r9, sl, r5
   1a8ac:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
   1a8b0:	4294      	cmp	r4, r2
   1a8b2:	d811      	bhi.n	1a8d8 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1a8b4:	f04f 0918 	mov.w	r9, #24
   1a8b8:	fb06 9309 	mla	r3, r6, r9, r9
   1a8bc:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   1a8be:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1a8c0:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   1a8c2:	4641      	mov	r1, r8
   1a8c4:	4428      	add	r0, r5
   1a8c6:	f004 ff99 	bl	1f7fc <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   1a8ca:	fb09 7606 	mla	r6, r9, r6, r7
   1a8ce:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   1a8d0:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   1a8d2:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   1a8d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   1a8d8:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1a8da:	429c      	cmp	r4, r3
   1a8dc:	d81b      	bhi.n	1a916 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1a8de:	fb00 bb0b 	mla	fp, r0, fp, fp
   1a8e2:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1a8e4:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1a8e6:	f8db 0004 	ldr.w	r0, [fp, #4]
   1a8ea:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1a8ec:	4428      	add	r0, r5
   1a8ee:	f004 ff85 	bl	1f7fc <memcpy>
      if (NumBytes) {
   1a8f2:	ebb4 040a 	subs.w	r4, r4, sl
   1a8f6:	d006      	beq.n	1a906 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   1a8f8:	f8db 0004 	ldr.w	r0, [fp, #4]
   1a8fc:	4622      	mov	r2, r4
   1a8fe:	eb08 0109 	add.w	r1, r8, r9
   1a902:	f004 ff7b 	bl	1f7fc <memcpy>
      pRing->WrOff = NumBytes;
   1a906:	2018      	movs	r0, #24
   1a908:	fb00 7606 	mla	r6, r0, r6, r7
   1a90c:	e7e0      	b.n	1a8d0 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   1a90e:	3b01      	subs	r3, #1
   1a910:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1a912:	42a3      	cmp	r3, r4
   1a914:	d2ce      	bcs.n	1a8b4 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   1a916:	2000      	movs	r0, #0
   1a918:	e7dc      	b.n	1a8d4 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1a91a:	bf00      	nop
   1a91c:	20002038 	.word	0x20002038

0001a920 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   1a920:	4b03      	ldr	r3, [pc, #12]	; (1a930 <SEGGER_RTT_HasDataUp+0x10>)
   1a922:	2218      	movs	r2, #24
   1a924:	fb02 3300 	mla	r3, r2, r0, r3
   1a928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1a92a:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1a92c:	1a80      	subs	r0, r0, r2
   1a92e:	4770      	bx	lr
   1a930:	20002038 	.word	0x20002038

0001a934 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a934:	4b0e      	ldr	r3, [pc, #56]	; (1a970 <z_sys_init_run_level+0x3c>)
{
   1a936:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a938:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1a93c:	3001      	adds	r0, #1
   1a93e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1a942:	42a6      	cmp	r6, r4
   1a944:	d800      	bhi.n	1a948 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1a946:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1a948:	e9d4 3500 	ldrd	r3, r5, [r4]
   1a94c:	4628      	mov	r0, r5
   1a94e:	4798      	blx	r3
		if (dev != NULL) {
   1a950:	b165      	cbz	r5, 1a96c <z_sys_init_run_level+0x38>
			if (rc != 0) {
   1a952:	68eb      	ldr	r3, [r5, #12]
   1a954:	b130      	cbz	r0, 1a964 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1a956:	2800      	cmp	r0, #0
   1a958:	bfb8      	it	lt
   1a95a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1a95c:	28ff      	cmp	r0, #255	; 0xff
   1a95e:	bfa8      	it	ge
   1a960:	20ff      	movge	r0, #255	; 0xff
   1a962:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1a964:	785a      	ldrb	r2, [r3, #1]
   1a966:	f042 0201 	orr.w	r2, r2, #1
   1a96a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a96c:	3408      	adds	r4, #8
   1a96e:	e7e8      	b.n	1a942 <z_sys_init_run_level+0xe>
   1a970:	0002115c 	.word	0x0002115c

0001a974 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1a974:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1a976:	4605      	mov	r5, r0
   1a978:	b910      	cbnz	r0, 1a980 <z_impl_device_get_binding+0xc>
		return NULL;
   1a97a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   1a97c:	4620      	mov	r0, r4
   1a97e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   1a980:	7803      	ldrb	r3, [r0, #0]
   1a982:	2b00      	cmp	r3, #0
   1a984:	d0f9      	beq.n	1a97a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1a986:	4a0f      	ldr	r2, [pc, #60]	; (1a9c4 <z_impl_device_get_binding+0x50>)
   1a988:	4c0f      	ldr	r4, [pc, #60]	; (1a9c8 <z_impl_device_get_binding+0x54>)
   1a98a:	4616      	mov	r6, r2
   1a98c:	4294      	cmp	r4, r2
   1a98e:	d108      	bne.n	1a9a2 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1a990:	4c0d      	ldr	r4, [pc, #52]	; (1a9c8 <z_impl_device_get_binding+0x54>)
   1a992:	42b4      	cmp	r4, r6
   1a994:	d0f1      	beq.n	1a97a <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1a996:	4620      	mov	r0, r4
   1a998:	f005 fb50 	bl	2003c <z_device_ready>
   1a99c:	b950      	cbnz	r0, 1a9b4 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   1a99e:	3418      	adds	r4, #24
   1a9a0:	e7f7      	b.n	1a992 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   1a9a2:	4620      	mov	r0, r4
   1a9a4:	f005 fb4a 	bl	2003c <z_device_ready>
   1a9a8:	b110      	cbz	r0, 1a9b0 <z_impl_device_get_binding+0x3c>
   1a9aa:	6823      	ldr	r3, [r4, #0]
   1a9ac:	42ab      	cmp	r3, r5
   1a9ae:	d0e5      	beq.n	1a97c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1a9b0:	3418      	adds	r4, #24
   1a9b2:	e7eb      	b.n	1a98c <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1a9b4:	6821      	ldr	r1, [r4, #0]
   1a9b6:	4628      	mov	r0, r5
   1a9b8:	f004 feed 	bl	1f796 <strcmp>
   1a9bc:	2800      	cmp	r0, #0
   1a9be:	d1ee      	bne.n	1a99e <z_impl_device_get_binding+0x2a>
   1a9c0:	e7dc      	b.n	1a97c <z_impl_device_get_binding+0x8>
   1a9c2:	bf00      	nop
   1a9c4:	00020c08 	.word	0x00020c08
   1a9c8:	00020b60 	.word	0x00020b60

0001a9cc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1a9cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a9d0:	4606      	mov	r6, r0
   1a9d2:	460f      	mov	r7, r1
	__asm__ volatile(
   1a9d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a9d8:	f3ef 8811 	mrs	r8, BASEPRI
   1a9dc:	f383 8812 	msr	BASEPRI_MAX, r3
   1a9e0:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1a9e4:	f000 fff8 	bl	1b9d8 <z_impl_z_current_get>
   1a9e8:	4c1f      	ldr	r4, [pc, #124]	; (1aa68 <z_fatal_error+0x9c>)
   1a9ea:	4b20      	ldr	r3, [pc, #128]	; (1aa6c <z_fatal_error+0xa0>)
   1a9ec:	1ae4      	subs	r4, r4, r3
   1a9ee:	2e04      	cmp	r6, #4
   1a9f0:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1a9f4:	bf96      	itet	ls
   1a9f6:	4a1e      	ldrls	r2, [pc, #120]	; (1aa70 <z_fatal_error+0xa4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1a9f8:	4a1e      	ldrhi	r2, [pc, #120]	; (1aa74 <z_fatal_error+0xa8>)
   1a9fa:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   1a9fe:	01a4      	lsls	r4, r4, #6
   1aa00:	f044 0301 	orr.w	r3, r4, #1
   1aa04:	4605      	mov	r5, r0
   1aa06:	f8ad 3000 	strh.w	r3, [sp]
   1aa0a:	481b      	ldr	r0, [pc, #108]	; (1aa78 <z_fatal_error+0xac>)
   1aa0c:	2300      	movs	r3, #0
   1aa0e:	4631      	mov	r1, r6
   1aa10:	f004 fb6e 	bl	1f0f0 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1aa14:	b147      	cbz	r7, 1aa28 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1aa16:	69fb      	ldr	r3, [r7, #28]
   1aa18:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1aa1c:	b123      	cbz	r3, 1aa28 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1aa1e:	4817      	ldr	r0, [pc, #92]	; (1aa7c <z_fatal_error+0xb0>)
   1aa20:	f044 0101 	orr.w	r1, r4, #1
   1aa24:	f004 fb2a 	bl	1f07c <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1aa28:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1aa2c:	b12d      	cbz	r5, 1aa3a <z_fatal_error+0x6e>
   1aa2e:	4628      	mov	r0, r5
   1aa30:	f005 fbc7 	bl	201c2 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1aa34:	b108      	cbz	r0, 1aa3a <z_fatal_error+0x6e>
   1aa36:	7803      	ldrb	r3, [r0, #0]
   1aa38:	b903      	cbnz	r3, 1aa3c <z_fatal_error+0x70>
		thread_name = "unknown";
   1aa3a:	4811      	ldr	r0, [pc, #68]	; (1aa80 <z_fatal_error+0xb4>)
   1aa3c:	f7fa f8e6 	bl	14c0c <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   1aa40:	4623      	mov	r3, r4
   1aa42:	4602      	mov	r2, r0
   1aa44:	4629      	mov	r1, r5
   1aa46:	480f      	ldr	r0, [pc, #60]	; (1aa84 <z_fatal_error+0xb8>)
   1aa48:	f004 fb39 	bl	1f0be <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1aa4c:	4639      	mov	r1, r7
   1aa4e:	4630      	mov	r0, r6
   1aa50:	f7fe fd2e 	bl	194b0 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1aa54:	f388 8811 	msr	BASEPRI, r8
   1aa58:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1aa5c:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1aa5e:	b002      	add	sp, #8
   1aa60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1aa64:	f7fb bc0c 	b.w	16280 <z_impl_k_thread_abort>
   1aa68:	00020df0 	.word	0x00020df0
   1aa6c:	00020d88 	.word	0x00020d88
   1aa70:	00021174 	.word	0x00021174
   1aa74:	0002232b 	.word	0x0002232b
   1aa78:	00022339 	.word	0x00022339
   1aa7c:	00022361 	.word	0x00022361
   1aa80:	00021b38 	.word	0x00021b38
   1aa84:	00022382 	.word	0x00022382

0001aa88 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   1aa88:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   1aa8a:	2300      	movs	r3, #0
{
   1aa8c:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
   1aa8e:	2201      	movs	r2, #1
   1aa90:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1aa94:	220f      	movs	r2, #15
   1aa96:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
   1aa9a:	4c0d      	ldr	r4, [pc, #52]	; (1aad0 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1aa9c:	4a0d      	ldr	r2, [pc, #52]	; (1aad4 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
   1aa9e:	9301      	str	r3, [sp, #4]
   1aaa0:	490d      	ldr	r1, [pc, #52]	; (1aad8 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1aaa2:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
   1aaa4:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1aaa8:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
   1aaac:	f44f 75b0 	mov.w	r5, #352	; 0x160
   1aab0:	9300      	str	r3, [sp, #0]
   1aab2:	fb05 1100 	mla	r1, r5, r0, r1
   1aab6:	4b09      	ldr	r3, [pc, #36]	; (1aadc <init_idle_thread+0x54>)
   1aab8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1aabc:	4620      	mov	r0, r4
   1aabe:	f000 f90d 	bl	1acdc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1aac2:	7b63      	ldrb	r3, [r4, #13]
   1aac4:	f023 0304 	bic.w	r3, r3, #4
   1aac8:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1aaca:	b007      	add	sp, #28
   1aacc:	bd30      	pop	{r4, r5, pc}
   1aace:	bf00      	nop
   1aad0:	200017b0 	.word	0x200017b0
   1aad4:	200020e0 	.word	0x200020e0
   1aad8:	200052c0 	.word	0x200052c0
   1aadc:	0001ae55 	.word	0x0001ae55

0001aae0 <bg_thread_main>:
{
   1aae0:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1aae2:	4b0a      	ldr	r3, [pc, #40]	; (1ab0c <bg_thread_main+0x2c>)
   1aae4:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1aae6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1aae8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1aaea:	f7ff ff23 	bl	1a934 <z_sys_init_run_level>
	boot_banner();
   1aaee:	f001 faad 	bl	1c04c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1aaf2:	2003      	movs	r0, #3
   1aaf4:	f7ff ff1e 	bl	1a934 <z_sys_init_run_level>
	z_init_static_threads();
   1aaf8:	f000 f94e 	bl	1ad98 <z_init_static_threads>
	main();
   1aafc:	f7f9 fa50 	bl	13fa0 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1ab00:	4a03      	ldr	r2, [pc, #12]	; (1ab10 <bg_thread_main+0x30>)
   1ab02:	7b13      	ldrb	r3, [r2, #12]
   1ab04:	f023 0301 	bic.w	r3, r3, #1
   1ab08:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1ab0a:	bd08      	pop	{r3, pc}
   1ab0c:	2000333d 	.word	0x2000333d
   1ab10:	20001830 	.word	0x20001830

0001ab14 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1ab14:	4802      	ldr	r0, [pc, #8]	; (1ab20 <z_bss_zero+0xc>)
   1ab16:	4a03      	ldr	r2, [pc, #12]	; (1ab24 <z_bss_zero+0x10>)
   1ab18:	2100      	movs	r1, #0
   1ab1a:	1a12      	subs	r2, r2, r0
   1ab1c:	f004 be79 	b.w	1f812 <memset>
   1ab20:	20000730 	.word	0x20000730
   1ab24:	200034fc 	.word	0x200034fc

0001ab28 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1ab28:	b580      	push	{r7, lr}
   1ab2a:	b0a6      	sub	sp, #152	; 0x98
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1ab2c:	f7f9 ffae 	bl	14a8c <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1ab30:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 1ac0c <z_cstart+0xe4>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1ab34:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1ab38:	4d2e      	ldr	r5, [pc, #184]	; (1abf4 <z_cstart+0xcc>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1ab3a:	4e2f      	ldr	r6, [pc, #188]	; (1abf8 <z_cstart+0xd0>)
   1ab3c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1ab3e:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 1ac10 <z_cstart+0xe8>
   1ab42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1ab46:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ab48:	23e0      	movs	r3, #224	; 0xe0
   1ab4a:	2400      	movs	r4, #0
   1ab4c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1ab50:	2320      	movs	r3, #32
   1ab52:	77eb      	strb	r3, [r5, #31]
   1ab54:	762c      	strb	r4, [r5, #24]
   1ab56:	766c      	strb	r4, [r5, #25]
   1ab58:	76ac      	strb	r4, [r5, #26]
   1ab5a:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1ab5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ab60:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1ab64:	626b      	str	r3, [r5, #36]	; 0x24
   1ab66:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1ab6a:	f7fb faff 	bl	1616c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1ab6e:	f7fa ff27 	bl	159c0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1ab72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ab76:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1ab78:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1ab7a:	f7fb fc3d 	bl	163f8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1ab7e:	f7fb fb91 	bl	162a4 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1ab82:	f240 1301 	movw	r3, #257	; 0x101
   1ab86:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1ab8a:	ab06      	add	r3, sp, #24
   1ab8c:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   1ab8e:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1ab92:	f005 fa52 	bl	2003a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1ab96:	4620      	mov	r0, r4
   1ab98:	f7ff fecc 	bl	1a934 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1ab9c:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   1ab9e:	4d17      	ldr	r5, [pc, #92]	; (1abfc <z_cstart+0xd4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1aba0:	f7ff fec8 	bl	1a934 <z_sys_init_run_level>
	z_sched_init();
   1aba4:	f000 fe64 	bl	1b870 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1aba8:	4b15      	ldr	r3, [pc, #84]	; (1ac00 <z_cstart+0xd8>)
   1abaa:	9305      	str	r3, [sp, #20]
   1abac:	2301      	movs	r3, #1
   1abae:	4915      	ldr	r1, [pc, #84]	; (1ac04 <z_cstart+0xdc>)
   1abb0:	9400      	str	r4, [sp, #0]
   1abb2:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1abb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1abba:	464b      	mov	r3, r9
   1abbc:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1abc0:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   1abc2:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1abc4:	f000 f88a 	bl	1acdc <z_setup_new_thread>
   1abc8:	7b6a      	ldrb	r2, [r5, #13]
   1abca:	f022 0204 	bic.w	r2, r2, #4
   1abce:	736a      	strb	r2, [r5, #13]
   1abd0:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
   1abd2:	4628      	mov	r0, r5
   1abd4:	f005 fcd0 	bl	20578 <z_ready_thread>
		init_idle_thread(i);
   1abd8:	4620      	mov	r0, r4
   1abda:	f7ff ff55 	bl	1aa88 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1abde:	4b0a      	ldr	r3, [pc, #40]	; (1ac08 <z_cstart+0xe0>)
   1abe0:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1abe2:	464a      	mov	r2, r9
   1abe4:	4639      	mov	r1, r7
   1abe6:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   1abe8:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   1abea:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1abee:	f7fb f841 	bl	15c74 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1abf2:	bf00      	nop
   1abf4:	e000ed00 	.word	0xe000ed00
   1abf8:	200020e0 	.word	0x200020e0
   1abfc:	20001830 	.word	0x20001830
   1ac00:	000223e4 	.word	0x000223e4
   1ac04:	20004aa0 	.word	0x20004aa0
   1ac08:	200017b0 	.word	0x200017b0
   1ac0c:	20005c40 	.word	0x20005c40
   1ac10:	0001aae1 	.word	0x0001aae1

0001ac14 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1ac14:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1ac16:	4c06      	ldr	r4, [pc, #24]	; (1ac30 <statics_init+0x1c>)
   1ac18:	4d06      	ldr	r5, [pc, #24]	; (1ac34 <statics_init+0x20>)
   1ac1a:	42ac      	cmp	r4, r5
   1ac1c:	d301      	bcc.n	1ac22 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1ac1e:	2000      	movs	r0, #0
   1ac20:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1ac22:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1ac26:	4620      	mov	r0, r4
   1ac28:	f005 fa12 	bl	20050 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1ac2c:	3414      	adds	r4, #20
   1ac2e:	e7f4      	b.n	1ac1a <statics_init+0x6>
   1ac30:	200005ec 	.word	0x200005ec
   1ac34:	200005ec 	.word	0x200005ec

0001ac38 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1ac38:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1ac3a:	4b0e      	ldr	r3, [pc, #56]	; (1ac74 <init_mem_slab_module+0x3c>)
   1ac3c:	4c0e      	ldr	r4, [pc, #56]	; (1ac78 <init_mem_slab_module+0x40>)
   1ac3e:	42a3      	cmp	r3, r4
   1ac40:	d301      	bcc.n	1ac46 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   1ac42:	2000      	movs	r0, #0
	return rc;
}
   1ac44:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1ac46:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1ac4a:	ea41 0200 	orr.w	r2, r1, r0
   1ac4e:	f012 0203 	ands.w	r2, r2, #3
   1ac52:	d10b      	bne.n	1ac6c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1ac54:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1ac56:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ac58:	42aa      	cmp	r2, r5
   1ac5a:	d101      	bne.n	1ac60 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1ac5c:	331c      	adds	r3, #28
   1ac5e:	e7ee      	b.n	1ac3e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1ac60:	695e      	ldr	r6, [r3, #20]
   1ac62:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ac64:	3201      	adds	r2, #1
		slab->free_list = p;
   1ac66:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1ac68:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1ac6a:	e7f5      	b.n	1ac58 <init_mem_slab_module+0x20>
		return -EINVAL;
   1ac6c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1ac70:	e7e8      	b.n	1ac44 <init_mem_slab_module+0xc>
   1ac72:	bf00      	nop
   1ac74:	200005ec 	.word	0x200005ec
   1ac78:	200005ec 	.word	0x200005ec

0001ac7c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1ac7c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1ac7e:	460c      	mov	r4, r1
   1ac80:	4616      	mov	r6, r2
   1ac82:	461f      	mov	r7, r3
	__asm__ volatile(
   1ac84:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ac88:	f3ef 8111 	mrs	r1, BASEPRI
   1ac8c:	f383 8812 	msr	BASEPRI_MAX, r3
   1ac90:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1ac94:	6943      	ldr	r3, [r0, #20]
   1ac96:	b15b      	cbz	r3, 1acb0 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1ac98:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1ac9a:	681b      	ldr	r3, [r3, #0]
   1ac9c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1ac9e:	6983      	ldr	r3, [r0, #24]
   1aca0:	3301      	adds	r3, #1
   1aca2:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1aca4:	2000      	movs	r0, #0
	__asm__ volatile(
   1aca6:	f381 8811 	msr	BASEPRI, r1
   1acaa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1acae:	e011      	b.n	1acd4 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1acb0:	ea56 0207 	orrs.w	r2, r6, r7
   1acb4:	d103      	bne.n	1acbe <k_mem_slab_alloc+0x42>
		*mem = NULL;
   1acb6:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1acb8:	f06f 000b 	mvn.w	r0, #11
   1acbc:	e7f3      	b.n	1aca6 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1acbe:	4602      	mov	r2, r0
   1acc0:	e9cd 6700 	strd	r6, r7, [sp]
   1acc4:	3008      	adds	r0, #8
   1acc6:	f000 fd25 	bl	1b714 <z_pend_curr>
		if (result == 0) {
   1acca:	b918      	cbnz	r0, 1acd4 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1accc:	4b02      	ldr	r3, [pc, #8]	; (1acd8 <k_mem_slab_alloc+0x5c>)
   1acce:	689b      	ldr	r3, [r3, #8]
   1acd0:	695b      	ldr	r3, [r3, #20]
   1acd2:	6023      	str	r3, [r4, #0]
}
   1acd4:	b002      	add	sp, #8
   1acd6:	bdd0      	pop	{r4, r6, r7, pc}
   1acd8:	200020e0 	.word	0x200020e0

0001acdc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1acdc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1ace0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1ace2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1ace4:	2604      	movs	r6, #4
   1ace6:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1ace8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1acea:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1acec:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   1acf0:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1acf2:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1acf4:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1acf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1acfa:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1acfc:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1ad00:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1ad02:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1ad06:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1ad0a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1ad0c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1ad0e:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1ad10:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ad14:	9202      	str	r2, [sp, #8]
   1ad16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ad18:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1ad1a:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ad1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ad1e:	9200      	str	r2, [sp, #0]
   1ad20:	4642      	mov	r2, r8
{
   1ad22:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ad24:	f7fa ff70 	bl	15c08 <arch_new_thread>
	if (!_current) {
   1ad28:	4b04      	ldr	r3, [pc, #16]	; (1ad3c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   1ad2a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1ad2c:	689b      	ldr	r3, [r3, #8]
   1ad2e:	b103      	cbz	r3, 1ad32 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1ad30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1ad32:	6763      	str	r3, [r4, #116]	; 0x74
}
   1ad34:	4640      	mov	r0, r8
   1ad36:	b004      	add	sp, #16
   1ad38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ad3c:	200020e0 	.word	0x200020e0

0001ad40 <z_impl_k_thread_create>:
{
   1ad40:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ad42:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1ad44:	2500      	movs	r5, #0
   1ad46:	9505      	str	r5, [sp, #20]
   1ad48:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1ad4a:	9504      	str	r5, [sp, #16]
   1ad4c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1ad4e:	9503      	str	r5, [sp, #12]
   1ad50:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1ad52:	9502      	str	r5, [sp, #8]
{
   1ad54:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1ad58:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1ad5a:	9501      	str	r5, [sp, #4]
   1ad5c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1ad5e:	9500      	str	r5, [sp, #0]
{
   1ad60:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1ad62:	f7ff ffbb 	bl	1acdc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1ad66:	1c7b      	adds	r3, r7, #1
   1ad68:	bf08      	it	eq
   1ad6a:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1ad6e:	d005      	beq.n	1ad7c <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ad70:	ea56 0307 	orrs.w	r3, r6, r7
   1ad74:	d105      	bne.n	1ad82 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1ad76:	4620      	mov	r0, r4
   1ad78:	f000 fc70 	bl	1b65c <z_sched_start>
}
   1ad7c:	4620      	mov	r0, r4
   1ad7e:	b007      	add	sp, #28
   1ad80:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1ad82:	4904      	ldr	r1, [pc, #16]	; (1ad94 <z_impl_k_thread_create+0x54>)
   1ad84:	4632      	mov	r2, r6
   1ad86:	463b      	mov	r3, r7
   1ad88:	f104 0018 	add.w	r0, r4, #24
   1ad8c:	f000 ff08 	bl	1bba0 <z_add_timeout>
   1ad90:	e7f4      	b.n	1ad7c <z_impl_k_thread_create+0x3c>
   1ad92:	bf00      	nop
   1ad94:	00020599 	.word	0x00020599

0001ad98 <z_init_static_threads>:
{
   1ad98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1ad9c:	4e2a      	ldr	r6, [pc, #168]	; (1ae48 <z_init_static_threads+0xb0>)
   1ad9e:	4d2b      	ldr	r5, [pc, #172]	; (1ae4c <z_init_static_threads+0xb4>)
{
   1ada0:	b086      	sub	sp, #24
   1ada2:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1ada4:	42b5      	cmp	r5, r6
   1ada6:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1adaa:	d310      	bcc.n	1adce <z_init_static_threads+0x36>
	k_sched_lock();
   1adac:	f000 fb6a 	bl	1b484 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1adb0:	4c26      	ldr	r4, [pc, #152]	; (1ae4c <z_init_static_threads+0xb4>)
   1adb2:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1ae50 <z_init_static_threads+0xb8>
		} else {
			return (t * to_hz + off) / from_hz;
   1adb6:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1adba:	f240 36e7 	movw	r6, #999	; 0x3e7
   1adbe:	2700      	movs	r7, #0
   1adc0:	4544      	cmp	r4, r8
   1adc2:	d321      	bcc.n	1ae08 <z_init_static_threads+0x70>
}
   1adc4:	b006      	add	sp, #24
   1adc6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   1adca:	f000 bd35 	b.w	1b838 <k_sched_unlock>
		z_setup_new_thread(
   1adce:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1add2:	9305      	str	r3, [sp, #20]
   1add4:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1add8:	9304      	str	r3, [sp, #16]
   1adda:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1adde:	9303      	str	r3, [sp, #12]
   1ade0:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1ade4:	9302      	str	r3, [sp, #8]
   1ade6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1adea:	9301      	str	r3, [sp, #4]
   1adec:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1adf0:	9300      	str	r3, [sp, #0]
   1adf2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1adf6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1adfa:	f7ff ff6f 	bl	1acdc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1adfe:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1ae02:	655d      	str	r5, [r3, #84]	; 0x54
   1ae04:	4625      	mov	r5, r4
   1ae06:	e7cd      	b.n	1ada4 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1ae08:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ae0a:	1c5a      	adds	r2, r3, #1
   1ae0c:	d00d      	beq.n	1ae2a <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   1ae0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1ae12:	4630      	mov	r0, r6
   1ae14:	4639      	mov	r1, r7
   1ae16:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ae1a:	42b9      	cmp	r1, r7
   1ae1c:	bf08      	it	eq
   1ae1e:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   1ae20:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ae22:	d104      	bne.n	1ae2e <z_init_static_threads+0x96>
	z_sched_start(thread);
   1ae24:	4628      	mov	r0, r5
   1ae26:	f000 fc19 	bl	1b65c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1ae2a:	3430      	adds	r4, #48	; 0x30
   1ae2c:	e7c8      	b.n	1adc0 <z_init_static_threads+0x28>
   1ae2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ae32:	2300      	movs	r3, #0
   1ae34:	f7e5 f964 	bl	100 <__aeabi_uldivmod>
   1ae38:	4602      	mov	r2, r0
   1ae3a:	460b      	mov	r3, r1
   1ae3c:	f105 0018 	add.w	r0, r5, #24
   1ae40:	4651      	mov	r1, sl
   1ae42:	f000 fead 	bl	1bba0 <z_add_timeout>
   1ae46:	e7f0      	b.n	1ae2a <z_init_static_threads+0x92>
   1ae48:	200005ec 	.word	0x200005ec
   1ae4c:	200005ec 	.word	0x200005ec
   1ae50:	00020599 	.word	0x00020599

0001ae54 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1ae54:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1ae56:	4c09      	ldr	r4, [pc, #36]	; (1ae7c <idle+0x28>)
	__asm__ volatile(
   1ae58:	f04f 0240 	mov.w	r2, #64	; 0x40
   1ae5c:	f3ef 8311 	mrs	r3, BASEPRI
   1ae60:	f382 8812 	msr	BASEPRI_MAX, r2
   1ae64:	f3bf 8f6f 	isb	sy
   1ae68:	f005 fc55 	bl	20716 <z_get_next_timeout_expiry>
   1ae6c:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   1ae6e:	f7fa fc5d 	bl	1572c <pm_system_suspend>
   1ae72:	2800      	cmp	r0, #0
   1ae74:	d1f0      	bne.n	1ae58 <idle+0x4>
	arch_cpu_idle();
   1ae76:	f7fa fda9 	bl	159cc <arch_cpu_idle>
}
   1ae7a:	e7ed      	b.n	1ae58 <idle+0x4>
   1ae7c:	200020e0 	.word	0x200020e0

0001ae80 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1ae80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ae84:	4604      	mov	r4, r0
   1ae86:	4616      	mov	r6, r2
   1ae88:	461f      	mov	r7, r3
   1ae8a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ae8e:	f3ef 8811 	mrs	r8, BASEPRI
   1ae92:	f383 8812 	msr	BASEPRI_MAX, r3
   1ae96:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1ae9a:	68c3      	ldr	r3, [r0, #12]
   1ae9c:	4a35      	ldr	r2, [pc, #212]	; (1af74 <z_impl_k_mutex_lock+0xf4>)
   1ae9e:	b16b      	cbz	r3, 1aebc <z_impl_k_mutex_lock+0x3c>
   1aea0:	6880      	ldr	r0, [r0, #8]
   1aea2:	6891      	ldr	r1, [r2, #8]
   1aea4:	4288      	cmp	r0, r1
   1aea6:	d019      	beq.n	1aedc <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1aea8:	ea56 0307 	orrs.w	r3, r6, r7
   1aeac:	d118      	bne.n	1aee0 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1aeae:	f388 8811 	msr	BASEPRI, r8
   1aeb2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1aeb6:	f06f 000f 	mvn.w	r0, #15
   1aeba:	e00c      	b.n	1aed6 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1aebc:	6891      	ldr	r1, [r2, #8]
   1aebe:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1aec2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1aec4:	3301      	adds	r3, #1
   1aec6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1aec8:	6893      	ldr	r3, [r2, #8]
   1aeca:	60a3      	str	r3, [r4, #8]
   1aecc:	f388 8811 	msr	BASEPRI, r8
   1aed0:	f3bf 8f6f 	isb	sy
		return 0;
   1aed4:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1aed6:	b002      	add	sp, #8
   1aed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1aedc:	6921      	ldr	r1, [r4, #16]
   1aede:	e7f0      	b.n	1aec2 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1aee0:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1aee4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   1aee8:	4299      	cmp	r1, r3
   1aeea:	bfa8      	it	ge
   1aeec:	4619      	movge	r1, r3
   1aeee:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1aef2:	4291      	cmp	r1, r2
   1aef4:	bfb8      	it	lt
   1aef6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1aef8:	428b      	cmp	r3, r1
   1aefa:	dd2f      	ble.n	1af5c <z_impl_k_mutex_lock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
   1aefc:	f000 fc1e 	bl	1b73c <z_set_prio>
   1af00:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1af02:	e9cd 6700 	strd	r6, r7, [sp]
   1af06:	481c      	ldr	r0, [pc, #112]	; (1af78 <z_impl_k_mutex_lock+0xf8>)
   1af08:	4622      	mov	r2, r4
   1af0a:	4641      	mov	r1, r8
   1af0c:	f000 fc02 	bl	1b714 <z_pend_curr>
	if (got_mutex == 0) {
   1af10:	2800      	cmp	r0, #0
   1af12:	d0e0      	beq.n	1aed6 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1af14:	f04f 0340 	mov.w	r3, #64	; 0x40
   1af18:	f3ef 8611 	mrs	r6, BASEPRI
   1af1c:	f383 8812 	msr	BASEPRI_MAX, r3
   1af20:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1af24:	6823      	ldr	r3, [r4, #0]
   1af26:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1af28:	429c      	cmp	r4, r3
   1af2a:	d00a      	beq.n	1af42 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1af2c:	b14b      	cbz	r3, 1af42 <z_impl_k_mutex_lock+0xc2>
   1af2e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1af32:	4299      	cmp	r1, r3
   1af34:	bfa8      	it	ge
   1af36:	4619      	movge	r1, r3
   1af38:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1af3c:	4299      	cmp	r1, r3
   1af3e:	bfb8      	it	lt
   1af40:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1af42:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1af44:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1af48:	4299      	cmp	r1, r3
   1af4a:	d109      	bne.n	1af60 <z_impl_k_mutex_lock+0xe0>
	if (resched) {
   1af4c:	b16d      	cbz	r5, 1af6a <z_impl_k_mutex_lock+0xea>
		z_reschedule(&lock, key);
   1af4e:	480a      	ldr	r0, [pc, #40]	; (1af78 <z_impl_k_mutex_lock+0xf8>)
   1af50:	4631      	mov	r1, r6
   1af52:	f000 fa85 	bl	1b460 <z_reschedule>
	return -EAGAIN;
   1af56:	f06f 000a 	mvn.w	r0, #10
   1af5a:	e7bc      	b.n	1aed6 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1af5c:	2500      	movs	r5, #0
   1af5e:	e7d0      	b.n	1af02 <z_impl_k_mutex_lock+0x82>
		return z_set_prio(mutex->owner, new_prio);
   1af60:	f000 fbec 	bl	1b73c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1af64:	2800      	cmp	r0, #0
   1af66:	d1f2      	bne.n	1af4e <z_impl_k_mutex_lock+0xce>
   1af68:	e7f0      	b.n	1af4c <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   1af6a:	f386 8811 	msr	BASEPRI, r6
   1af6e:	f3bf 8f6f 	isb	sy
   1af72:	e7f0      	b.n	1af56 <z_impl_k_mutex_lock+0xd6>
   1af74:	200020e0 	.word	0x200020e0
   1af78:	2000333e 	.word	0x2000333e

0001af7c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1af7c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1af7e:	6883      	ldr	r3, [r0, #8]
{
   1af80:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1af82:	2b00      	cmp	r3, #0
   1af84:	d036      	beq.n	1aff4 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1af86:	4a1e      	ldr	r2, [pc, #120]	; (1b000 <z_impl_k_mutex_unlock+0x84>)
   1af88:	6892      	ldr	r2, [r2, #8]
   1af8a:	4293      	cmp	r3, r2
   1af8c:	d135      	bne.n	1affa <z_impl_k_mutex_unlock+0x7e>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1af8e:	7bda      	ldrb	r2, [r3, #15]
   1af90:	3a01      	subs	r2, #1
   1af92:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1af94:	68c3      	ldr	r3, [r0, #12]
   1af96:	2b01      	cmp	r3, #1
   1af98:	d905      	bls.n	1afa6 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1af9a:	3b01      	subs	r3, #1
   1af9c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1af9e:	f000 fc4b 	bl	1b838 <k_sched_unlock>

	return 0;
   1afa2:	2000      	movs	r0, #0
}
   1afa4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1afa6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1afaa:	f3ef 8511 	mrs	r5, BASEPRI
   1afae:	f383 8812 	msr	BASEPRI_MAX, r3
   1afb2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1afb6:	6901      	ldr	r1, [r0, #16]
   1afb8:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1afba:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1afbe:	4299      	cmp	r1, r3
   1afc0:	d001      	beq.n	1afc6 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1afc2:	f000 fbbb 	bl	1b73c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1afc6:	4620      	mov	r0, r4
   1afc8:	f005 fb4a 	bl	20660 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1afcc:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1afce:	b158      	cbz	r0, 1afe8 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1afd0:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1afd4:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1afd6:	2200      	movs	r2, #0
   1afd8:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1afda:	f005 facd 	bl	20578 <z_ready_thread>
		z_reschedule(&lock, key);
   1afde:	4809      	ldr	r0, [pc, #36]	; (1b004 <z_impl_k_mutex_unlock+0x88>)
   1afe0:	4629      	mov	r1, r5
   1afe2:	f000 fa3d 	bl	1b460 <z_reschedule>
   1afe6:	e7da      	b.n	1af9e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1afe8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1afea:	f385 8811 	msr	BASEPRI, r5
   1afee:	f3bf 8f6f 	isb	sy
   1aff2:	e7d4      	b.n	1af9e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1aff4:	f06f 0015 	mvn.w	r0, #21
   1aff8:	e7d4      	b.n	1afa4 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1affa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1affe:	e7d1      	b.n	1afa4 <z_impl_k_mutex_unlock+0x28>
   1b000:	200020e0 	.word	0x200020e0
   1b004:	2000333e 	.word	0x2000333e

0001b008 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1b008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b00a:	4616      	mov	r6, r2
   1b00c:	461f      	mov	r7, r3
	__asm__ volatile(
   1b00e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b012:	f3ef 8511 	mrs	r5, BASEPRI
   1b016:	f383 8812 	msr	BASEPRI_MAX, r3
   1b01a:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1b01e:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1b020:	b19c      	cbz	r4, 1b04a <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1b022:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1b024:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1b026:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1b02a:	4294      	cmp	r4, r2
	list->head = node;
   1b02c:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1b02e:	bf08      	it	eq
   1b030:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1b032:	2101      	movs	r1, #1
   1b034:	4620      	mov	r0, r4
   1b036:	f005 f93a 	bl	202ae <z_queue_node_peek>
   1b03a:	4604      	mov	r4, r0
	__asm__ volatile(
   1b03c:	f385 8811 	msr	BASEPRI, r5
   1b040:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1b044:	4620      	mov	r0, r4
   1b046:	b003      	add	sp, #12
   1b048:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b04a:	ea56 0307 	orrs.w	r3, r6, r7
   1b04e:	d0f5      	beq.n	1b03c <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1b050:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1b054:	e9cd 6700 	strd	r6, r7, [sp]
   1b058:	4629      	mov	r1, r5
   1b05a:	4610      	mov	r0, r2
   1b05c:	f000 fb5a 	bl	1b714 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1b060:	2800      	cmp	r0, #0
   1b062:	d1ef      	bne.n	1b044 <z_impl_k_queue_get+0x3c>
   1b064:	4b01      	ldr	r3, [pc, #4]	; (1b06c <z_impl_k_queue_get+0x64>)
   1b066:	689b      	ldr	r3, [r3, #8]
   1b068:	695c      	ldr	r4, [r3, #20]
   1b06a:	e7eb      	b.n	1b044 <z_impl_k_queue_get+0x3c>
   1b06c:	200020e0 	.word	0x200020e0

0001b070 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1b070:	b538      	push	{r3, r4, r5, lr}
   1b072:	4604      	mov	r4, r0
	__asm__ volatile(
   1b074:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b078:	f3ef 8511 	mrs	r5, BASEPRI
   1b07c:	f383 8812 	msr	BASEPRI_MAX, r3
   1b080:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1b084:	f005 faec 	bl	20660 <z_unpend_first_thread>

	if (thread != NULL) {
   1b088:	b148      	cbz	r0, 1b09e <z_impl_k_sem_give+0x2e>
   1b08a:	2200      	movs	r2, #0
   1b08c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1b08e:	f005 fa73 	bl	20578 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1b092:	4629      	mov	r1, r5
   1b094:	4808      	ldr	r0, [pc, #32]	; (1b0b8 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1b096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1b09a:	f000 b9e1 	b.w	1b460 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b09e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1b0a2:	429a      	cmp	r2, r3
   1b0a4:	bf18      	it	ne
   1b0a6:	3301      	addne	r3, #1
   1b0a8:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1b0aa:	2102      	movs	r1, #2
   1b0ac:	f104 0010 	add.w	r0, r4, #16
   1b0b0:	f005 fcea 	bl	20a88 <z_handle_obj_poll_events>
}
   1b0b4:	e7ed      	b.n	1b092 <z_impl_k_sem_give+0x22>
   1b0b6:	bf00      	nop
   1b0b8:	2000333e 	.word	0x2000333e

0001b0bc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1b0bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b0be:	4614      	mov	r4, r2
   1b0c0:	461d      	mov	r5, r3
   1b0c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b0c6:	f3ef 8111 	mrs	r1, BASEPRI
   1b0ca:	f383 8812 	msr	BASEPRI_MAX, r3
   1b0ce:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1b0d2:	6883      	ldr	r3, [r0, #8]
   1b0d4:	b143      	cbz	r3, 1b0e8 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1b0d6:	3b01      	subs	r3, #1
   1b0d8:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1b0da:	f381 8811 	msr	BASEPRI, r1
   1b0de:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1b0e2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1b0e4:	b003      	add	sp, #12
   1b0e6:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b0e8:	ea54 0305 	orrs.w	r3, r4, r5
   1b0ec:	d106      	bne.n	1b0fc <z_impl_k_sem_take+0x40>
   1b0ee:	f381 8811 	msr	BASEPRI, r1
   1b0f2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1b0f6:	f06f 000f 	mvn.w	r0, #15
   1b0fa:	e7f3      	b.n	1b0e4 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1b0fc:	4602      	mov	r2, r0
   1b0fe:	e9cd 4500 	strd	r4, r5, [sp]
   1b102:	4802      	ldr	r0, [pc, #8]	; (1b10c <z_impl_k_sem_take+0x50>)
   1b104:	f000 fb06 	bl	1b714 <z_pend_curr>
	return ret;
   1b108:	e7ec      	b.n	1b0e4 <z_impl_k_sem_take+0x28>
   1b10a:	bf00      	nop
   1b10c:	2000333e 	.word	0x2000333e

0001b110 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1b110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1b114:	4e4b      	ldr	r6, [pc, #300]	; (1b244 <work_queue_main+0x134>)
{
   1b116:	b085      	sub	sp, #20
   1b118:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1b11a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1b11e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   1b122:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b126:	f3ef 8711 	mrs	r7, BASEPRI
   1b12a:	f383 8812 	msr	BASEPRI_MAX, r3
   1b12e:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1b132:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   1b136:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   1b13a:	b985      	cbnz	r5, 1b15e <work_queue_main+0x4e>
	*flagp &= ~BIT(bit);
   1b13c:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
   1b140:	075d      	lsls	r5, r3, #29
	*flagp &= ~BIT(bit);
   1b142:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   1b146:	d433      	bmi.n	1b1b0 <work_queue_main+0xa0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1b148:	2300      	movs	r3, #0
   1b14a:	e9cd 8900 	strd	r8, r9, [sp]
   1b14e:	9302      	str	r3, [sp, #8]
   1b150:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1b154:	4639      	mov	r1, r7
   1b156:	483c      	ldr	r0, [pc, #240]	; (1b248 <work_queue_main+0x138>)
   1b158:	f000 fca6 	bl	1baa8 <z_sched_wait>
			continue;
   1b15c:	e7e1      	b.n	1b122 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b15e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   1b162:	6829      	ldr	r1, [r5, #0]
	list->head = node;
   1b164:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b168:	4295      	cmp	r5, r2
   1b16a:	d101      	bne.n	1b170 <work_queue_main+0x60>
	list->tail = node;
   1b16c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1b170:	f043 0302 	orr.w	r3, r3, #2
   1b174:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1b178:	68eb      	ldr	r3, [r5, #12]
   1b17a:	f023 0304 	bic.w	r3, r3, #4
   1b17e:	f043 0301 	orr.w	r3, r3, #1
   1b182:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1b184:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1b186:	f387 8811 	msr	BASEPRI, r7
   1b18a:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   1b18e:	4628      	mov	r0, r5
   1b190:	4798      	blx	r3
	__asm__ volatile(
   1b192:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b196:	f3ef 8b11 	mrs	fp, BASEPRI
   1b19a:	f383 8812 	msr	BASEPRI_MAX, r3
   1b19e:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1b1a2:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b1a4:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1b1a6:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b1aa:	d40b      	bmi.n	1b1c4 <work_queue_main+0xb4>
	*flagp &= ~BIT(bit);
   1b1ac:	60ea      	str	r2, [r5, #12]
   1b1ae:	e00e      	b.n	1b1ce <work_queue_main+0xbe>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1b1b0:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1b1b4:	2200      	movs	r2, #0
   1b1b6:	2101      	movs	r1, #1
   1b1b8:	4628      	mov	r0, r5
   1b1ba:	f005 fa79 	bl	206b0 <z_sched_wake>
   1b1be:	2800      	cmp	r0, #0
   1b1c0:	d1f8      	bne.n	1b1b4 <work_queue_main+0xa4>
   1b1c2:	e7c1      	b.n	1b148 <work_queue_main+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1b1c4:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1b1c6:	f023 0303 	bic.w	r3, r3, #3
   1b1ca:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1b1cc:	b970      	cbnz	r0, 1b1ec <work_queue_main+0xdc>
	*flagp &= ~BIT(bit);
   1b1ce:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1b1d2:	f023 0302 	bic.w	r3, r3, #2
   1b1d6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   1b1da:	f38b 8811 	msr	BASEPRI, fp
   1b1de:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1b1e2:	05d8      	lsls	r0, r3, #23
   1b1e4:	d49d      	bmi.n	1b122 <work_queue_main+0x12>
	z_impl_k_yield();
   1b1e6:	f000 fb4f 	bl	1b888 <z_impl_k_yield>
}
   1b1ea:	e79a      	b.n	1b122 <work_queue_main+0x12>
	return node->next;
   1b1ec:	6807      	ldr	r7, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b1ee:	f04f 0a00 	mov.w	sl, #0
   1b1f2:	2f00      	cmp	r7, #0
   1b1f4:	bf38      	it	cc
   1b1f6:	2700      	movcc	r7, #0
	parent->next = child;
   1b1f8:	4653      	mov	r3, sl
		if (wc->work == work) {
   1b1fa:	6842      	ldr	r2, [r0, #4]
   1b1fc:	4295      	cmp	r5, r2
   1b1fe:	4601      	mov	r1, r0
   1b200:	d10e      	bne.n	1b220 <work_queue_main+0x110>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   1b202:	6801      	ldr	r1, [r0, #0]
   1b204:	f1ba 0f00 	cmp.w	sl, #0
   1b208:	d114      	bne.n	1b234 <work_queue_main+0x124>
   1b20a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1b20c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b20e:	4290      	cmp	r0, r2
   1b210:	d100      	bne.n	1b214 <work_queue_main+0x104>
	list->tail = node;
   1b212:	6071      	str	r1, [r6, #4]
	parent->next = child;
   1b214:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1b218:	f7ff ff2a 	bl	1b070 <z_impl_k_sem_give>
}
   1b21c:	4651      	mov	r1, sl
   1b21e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1b220:	2f00      	cmp	r7, #0
   1b222:	d0d4      	beq.n	1b1ce <work_queue_main+0xbe>
	return node->next;
   1b224:	683a      	ldr	r2, [r7, #0]
   1b226:	2a00      	cmp	r2, #0
   1b228:	bf38      	it	cc
   1b22a:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b22c:	4638      	mov	r0, r7
   1b22e:	468a      	mov	sl, r1
   1b230:	4617      	mov	r7, r2
   1b232:	e7e2      	b.n	1b1fa <work_queue_main+0xea>
	parent->next = child;
   1b234:	f8ca 1000 	str.w	r1, [sl]
Z_GENLIST_REMOVE(slist, snode)
   1b238:	6872      	ldr	r2, [r6, #4]
   1b23a:	4290      	cmp	r0, r2
	list->tail = node;
   1b23c:	bf08      	it	eq
   1b23e:	f8c6 a004 	streq.w	sl, [r6, #4]
}
   1b242:	e7e7      	b.n	1b214 <work_queue_main+0x104>
   1b244:	20002108 	.word	0x20002108
   1b248:	2000333e 	.word	0x2000333e

0001b24c <submit_to_queue_locked>:
{
   1b24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b24e:	68c3      	ldr	r3, [r0, #12]
   1b250:	079a      	lsls	r2, r3, #30
{
   1b252:	4604      	mov	r4, r0
   1b254:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b256:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1b25a:	d41f      	bmi.n	1b29c <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1b25c:	075f      	lsls	r7, r3, #29
   1b25e:	d41f      	bmi.n	1b2a0 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   1b260:	680a      	ldr	r2, [r1, #0]
   1b262:	b90a      	cbnz	r2, 1b268 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1b264:	6882      	ldr	r2, [r0, #8]
   1b266:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1b268:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   1b26a:	bf44      	itt	mi
   1b26c:	68a3      	ldrmi	r3, [r4, #8]
   1b26e:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   1b270:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   1b272:	bf4c      	ite	mi
   1b274:	2502      	movmi	r5, #2
		ret = 1;
   1b276:	2501      	movpl	r5, #1
	if (queue == NULL) {
   1b278:	b37f      	cbz	r7, 1b2da <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1b27a:	4b1b      	ldr	r3, [pc, #108]	; (1b2e8 <submit_to_queue_locked+0x9c>)
   1b27c:	689b      	ldr	r3, [r3, #8]
   1b27e:	42bb      	cmp	r3, r7
   1b280:	d111      	bne.n	1b2a6 <submit_to_queue_locked+0x5a>
   1b282:	f004 ff95 	bl	201b0 <k_is_in_isr>
   1b286:	f080 0001 	eor.w	r0, r0, #1
   1b28a:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   1b28c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1b290:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1b292:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1b296:	d523      	bpl.n	1b2e0 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   1b298:	b13a      	cbz	r2, 1b2aa <submit_to_queue_locked+0x5e>
   1b29a:	b940      	cbnz	r0, 1b2ae <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   1b29c:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   1b2a0:	2300      	movs	r3, #0
   1b2a2:	6033      	str	r3, [r6, #0]
	return ret;
   1b2a4:	e013      	b.n	1b2ce <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1b2a6:	2000      	movs	r0, #0
   1b2a8:	e7f0      	b.n	1b28c <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   1b2aa:	071b      	lsls	r3, r3, #28
   1b2ac:	d4f6      	bmi.n	1b29c <submit_to_queue_locked+0x50>
	parent->next = child;
   1b2ae:	2300      	movs	r3, #0
   1b2b0:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1b2b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1b2b6:	b963      	cbnz	r3, 1b2d2 <submit_to_queue_locked+0x86>
	list->head = node;
   1b2b8:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1b2bc:	4638      	mov	r0, r7
   1b2be:	f005 f858 	bl	20372 <notify_queue_locked>
	*flagp |= BIT(bit);
   1b2c2:	68e3      	ldr	r3, [r4, #12]
   1b2c4:	f043 0304 	orr.w	r3, r3, #4
   1b2c8:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1b2ca:	6833      	ldr	r3, [r6, #0]
   1b2cc:	60a3      	str	r3, [r4, #8]
}
   1b2ce:	4628      	mov	r0, r5
   1b2d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1b2d2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b2d4:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   1b2d8:	e7f0      	b.n	1b2bc <submit_to_queue_locked+0x70>
		return -EINVAL;
   1b2da:	f06f 0515 	mvn.w	r5, #21
   1b2de:	e7df      	b.n	1b2a0 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   1b2e0:	f06f 0512 	mvn.w	r5, #18
   1b2e4:	e7dc      	b.n	1b2a0 <submit_to_queue_locked+0x54>
   1b2e6:	bf00      	nop
   1b2e8:	200020e0 	.word	0x200020e0

0001b2ec <k_work_submit>:
{
   1b2ec:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1b2ee:	4801      	ldr	r0, [pc, #4]	; (1b2f4 <k_work_submit+0x8>)
   1b2f0:	f005 b8a6 	b.w	20440 <k_work_submit_to_queue>
   1b2f4:	200018b8 	.word	0x200018b8

0001b2f8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1b2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b2fa:	b089      	sub	sp, #36	; 0x24
   1b2fc:	4604      	mov	r4, r0
	list->head = NULL;
   1b2fe:	2000      	movs	r0, #0
	list->tail = NULL;
   1b300:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   1b304:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1b306:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1b30a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1b30e:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1b312:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1b316:	b31d      	cbz	r5, 1b360 <k_work_queue_start+0x68>
   1b318:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1b31a:	2800      	cmp	r0, #0
   1b31c:	f240 1001 	movw	r0, #257	; 0x101
   1b320:	bf08      	it	eq
   1b322:	2001      	moveq	r0, #1
	*flagp = flags;
   1b324:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1b328:	2000      	movs	r0, #0
   1b32a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1b32e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1b332:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1b336:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1b33a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1b33e:	4b09      	ldr	r3, [pc, #36]	; (1b364 <k_work_queue_start+0x6c>)
   1b340:	9400      	str	r4, [sp, #0]
   1b342:	4620      	mov	r0, r4
   1b344:	f7ff fcfc 	bl	1ad40 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1b348:	b125      	cbz	r5, 1b354 <k_work_queue_start+0x5c>
   1b34a:	6829      	ldr	r1, [r5, #0]
   1b34c:	b111      	cbz	r1, 1b354 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1b34e:	4620      	mov	r0, r4
   1b350:	f004 ff34 	bl	201bc <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1b354:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1b356:	b009      	add	sp, #36	; 0x24
   1b358:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1b35c:	f004 bf33 	b.w	201c6 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1b360:	2001      	movs	r0, #1
   1b362:	e7df      	b.n	1b324 <k_work_queue_start+0x2c>
   1b364:	0001b111 	.word	0x0001b111

0001b368 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1b368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b36a:	460c      	mov	r4, r1
   1b36c:	9001      	str	r0, [sp, #4]
   1b36e:	4616      	mov	r6, r2
   1b370:	461f      	mov	r7, r3
	__asm__ volatile(
   1b372:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b376:	f3ef 8511 	mrs	r5, BASEPRI
   1b37a:	f383 8812 	msr	BASEPRI_MAX, r3
   1b37e:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1b382:	4608      	mov	r0, r1
   1b384:	f004 fffc 	bl	20380 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b388:	ea56 0307 	orrs.w	r3, r6, r7
   1b38c:	d109      	bne.n	1b3a2 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1b38e:	a901      	add	r1, sp, #4
   1b390:	4620      	mov	r0, r4
   1b392:	f7ff ff5b 	bl	1b24c <submit_to_queue_locked>
	__asm__ volatile(
   1b396:	f385 8811 	msr	BASEPRI, r5
   1b39a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1b39e:	b003      	add	sp, #12
   1b3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1b3a2:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1b3a4:	4906      	ldr	r1, [pc, #24]	; (1b3c0 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1b3a6:	f043 0308 	orr.w	r3, r3, #8
   1b3aa:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1b3ac:	9b01      	ldr	r3, [sp, #4]
   1b3ae:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1b3b0:	f104 0010 	add.w	r0, r4, #16
   1b3b4:	4632      	mov	r2, r6
   1b3b6:	463b      	mov	r3, r7
   1b3b8:	f000 fbf2 	bl	1bba0 <z_add_timeout>
	return ret;
   1b3bc:	2001      	movs	r0, #1
   1b3be:	e7ea      	b.n	1b396 <k_work_reschedule_for_queue+0x2e>
   1b3c0:	00020403 	.word	0x00020403

0001b3c4 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1b3c4:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1b3c6:	4801      	ldr	r0, [pc, #4]	; (1b3cc <k_work_reschedule+0x8>)
   1b3c8:	f7ff bfce 	b.w	1b368 <k_work_reschedule_for_queue>
   1b3cc:	200018b8 	.word	0x200018b8

0001b3d0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1b3d0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1b3d2:	4c08      	ldr	r4, [pc, #32]	; (1b3f4 <z_reset_time_slice+0x24>)
   1b3d4:	6823      	ldr	r3, [r4, #0]
   1b3d6:	b15b      	cbz	r3, 1b3f0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1b3d8:	f7fe f852 	bl	19480 <sys_clock_elapsed>
   1b3dc:	4603      	mov	r3, r0
   1b3de:	6820      	ldr	r0, [r4, #0]
   1b3e0:	4a05      	ldr	r2, [pc, #20]	; (1b3f8 <z_reset_time_slice+0x28>)
   1b3e2:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1b3e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1b3e8:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1b3ea:	2100      	movs	r1, #0
   1b3ec:	f005 b9a3 	b.w	20736 <z_set_timeout_expiry>
}
   1b3f0:	bd10      	pop	{r4, pc}
   1b3f2:	bf00      	nop
   1b3f4:	20002118 	.word	0x20002118
   1b3f8:	200020e0 	.word	0x200020e0

0001b3fc <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1b3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b3fe:	4604      	mov	r4, r0
   1b400:	460d      	mov	r5, r1
	__asm__ volatile(
   1b402:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b406:	f3ef 8611 	mrs	r6, BASEPRI
   1b40a:	f383 8812 	msr	BASEPRI_MAX, r3
   1b40e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1b412:	4b10      	ldr	r3, [pc, #64]	; (1b454 <k_sched_time_slice_set+0x58>)
   1b414:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1b416:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1b41a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b41e:	2100      	movs	r1, #0
   1b420:	611a      	str	r2, [r3, #16]
   1b422:	fbe7 0104 	umlal	r0, r1, r7, r4
   1b426:	2300      	movs	r3, #0
   1b428:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b42c:	f7e4 fe68 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1b430:	2c00      	cmp	r4, #0
   1b432:	4b09      	ldr	r3, [pc, #36]	; (1b458 <k_sched_time_slice_set+0x5c>)
   1b434:	dc09      	bgt.n	1b44a <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   1b436:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1b438:	4b08      	ldr	r3, [pc, #32]	; (1b45c <k_sched_time_slice_set+0x60>)
   1b43a:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1b43c:	f7ff ffc8 	bl	1b3d0 <z_reset_time_slice>
	__asm__ volatile(
   1b440:	f386 8811 	msr	BASEPRI, r6
   1b444:	f3bf 8f6f 	isb	sy
	}
}
   1b448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   1b44a:	2802      	cmp	r0, #2
   1b44c:	bfb8      	it	lt
   1b44e:	2002      	movlt	r0, #2
   1b450:	e7f1      	b.n	1b436 <k_sched_time_slice_set+0x3a>
   1b452:	bf00      	nop
   1b454:	200020e0 	.word	0x200020e0
   1b458:	20002118 	.word	0x20002118
   1b45c:	20002114 	.word	0x20002114

0001b460 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1b460:	b949      	cbnz	r1, 1b476 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1b462:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1b466:	b930      	cbnz	r0, 1b476 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1b468:	4b05      	ldr	r3, [pc, #20]	; (1b480 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1b46a:	69da      	ldr	r2, [r3, #28]
   1b46c:	689b      	ldr	r3, [r3, #8]
   1b46e:	429a      	cmp	r2, r3
   1b470:	d001      	beq.n	1b476 <z_reschedule+0x16>
	ret = arch_swap(key);
   1b472:	f7fa bb75 	b.w	15b60 <arch_swap>
   1b476:	f381 8811 	msr	BASEPRI, r1
   1b47a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1b47e:	4770      	bx	lr
   1b480:	200020e0 	.word	0x200020e0

0001b484 <k_sched_lock>:
	__asm__ volatile(
   1b484:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b488:	f3ef 8111 	mrs	r1, BASEPRI
   1b48c:	f383 8812 	msr	BASEPRI_MAX, r3
   1b490:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1b494:	4b04      	ldr	r3, [pc, #16]	; (1b4a8 <k_sched_lock+0x24>)
   1b496:	689a      	ldr	r2, [r3, #8]
   1b498:	7bd3      	ldrb	r3, [r2, #15]
   1b49a:	3b01      	subs	r3, #1
   1b49c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1b49e:	f381 8811 	msr	BASEPRI, r1
   1b4a2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1b4a6:	4770      	bx	lr
   1b4a8:	200020e0 	.word	0x200020e0

0001b4ac <update_cache>:
{
   1b4ac:	b538      	push	{r3, r4, r5, lr}
   1b4ae:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   1b4b0:	480c      	ldr	r0, [pc, #48]	; (1b4e4 <update_cache+0x38>)
   1b4b2:	4d0d      	ldr	r5, [pc, #52]	; (1b4e8 <update_cache+0x3c>)
   1b4b4:	f005 f856 	bl	20564 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1b4b8:	4604      	mov	r4, r0
   1b4ba:	b900      	cbnz	r0, 1b4be <update_cache+0x12>
   1b4bc:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   1b4be:	68ab      	ldr	r3, [r5, #8]
   1b4c0:	b94a      	cbnz	r2, 1b4d6 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   1b4c2:	7b5a      	ldrb	r2, [r3, #13]
   1b4c4:	06d2      	lsls	r2, r2, #27
   1b4c6:	d106      	bne.n	1b4d6 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1b4c8:	69a2      	ldr	r2, [r4, #24]
   1b4ca:	b922      	cbnz	r2, 1b4d6 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   1b4cc:	89da      	ldrh	r2, [r3, #14]
   1b4ce:	2a7f      	cmp	r2, #127	; 0x7f
   1b4d0:	d901      	bls.n	1b4d6 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   1b4d2:	61eb      	str	r3, [r5, #28]
}
   1b4d4:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1b4d6:	429c      	cmp	r4, r3
   1b4d8:	d001      	beq.n	1b4de <update_cache+0x32>
			z_reset_time_slice();
   1b4da:	f7ff ff79 	bl	1b3d0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1b4de:	61ec      	str	r4, [r5, #28]
}
   1b4e0:	e7f8      	b.n	1b4d4 <update_cache+0x28>
   1b4e2:	bf00      	nop
   1b4e4:	20002100 	.word	0x20002100
   1b4e8:	200020e0 	.word	0x200020e0

0001b4ec <move_thread_to_end_of_prio_q>:
{
   1b4ec:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1b4ee:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1b4f2:	7b43      	ldrb	r3, [r0, #13]
   1b4f4:	2a00      	cmp	r2, #0
{
   1b4f6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1b4f8:	da04      	bge.n	1b504 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b4fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b4fe:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1b500:	f004 ffdb 	bl	204ba <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1b504:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1b506:	4a17      	ldr	r2, [pc, #92]	; (1b564 <move_thread_to_end_of_prio_q+0x78>)
   1b508:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b50c:	4610      	mov	r0, r2
   1b50e:	734b      	strb	r3, [r1, #13]
   1b510:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b514:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b516:	4283      	cmp	r3, r0
   1b518:	bf08      	it	eq
   1b51a:	2300      	moveq	r3, #0
   1b51c:	2b00      	cmp	r3, #0
   1b51e:	bf38      	it	cc
   1b520:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b522:	b1cb      	cbz	r3, 1b558 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
   1b524:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1b528:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1b52c:	42a6      	cmp	r6, r4
   1b52e:	d00f      	beq.n	1b550 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
   1b530:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b532:	2c00      	cmp	r4, #0
   1b534:	dd0c      	ble.n	1b550 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1b536:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1b538:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1b53c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1b53e:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1b540:	6890      	ldr	r0, [r2, #8]
   1b542:	1a43      	subs	r3, r0, r1
   1b544:	4258      	negs	r0, r3
}
   1b546:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1b54a:	4158      	adcs	r0, r3
   1b54c:	f7ff bfae 	b.w	1b4ac <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1b550:	42ab      	cmp	r3, r5
   1b552:	d001      	beq.n	1b558 <move_thread_to_end_of_prio_q+0x6c>
   1b554:	681b      	ldr	r3, [r3, #0]
   1b556:	e7e4      	b.n	1b522 <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
   1b558:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
   1b55c:	6029      	str	r1, [r5, #0]
	list->tail = node;
   1b55e:	6251      	str	r1, [r2, #36]	; 0x24
}
   1b560:	e7ee      	b.n	1b540 <move_thread_to_end_of_prio_q+0x54>
   1b562:	bf00      	nop
   1b564:	200020e0 	.word	0x200020e0

0001b568 <z_time_slice>:
{
   1b568:	b570      	push	{r4, r5, r6, lr}
   1b56a:	4601      	mov	r1, r0
	__asm__ volatile(
   1b56c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b570:	f3ef 8411 	mrs	r4, BASEPRI
   1b574:	f383 8812 	msr	BASEPRI_MAX, r3
   1b578:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1b57c:	4b16      	ldr	r3, [pc, #88]	; (1b5d8 <z_time_slice+0x70>)
   1b57e:	4a17      	ldr	r2, [pc, #92]	; (1b5dc <z_time_slice+0x74>)
   1b580:	6898      	ldr	r0, [r3, #8]
   1b582:	6815      	ldr	r5, [r2, #0]
   1b584:	42a8      	cmp	r0, r5
   1b586:	461d      	mov	r5, r3
   1b588:	d106      	bne.n	1b598 <z_time_slice+0x30>
			z_reset_time_slice();
   1b58a:	f7ff ff21 	bl	1b3d0 <z_reset_time_slice>
	__asm__ volatile(
   1b58e:	f384 8811 	msr	BASEPRI, r4
   1b592:	f3bf 8f6f 	isb	sy
}
   1b596:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1b598:	2600      	movs	r6, #0
   1b59a:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1b59c:	4a10      	ldr	r2, [pc, #64]	; (1b5e0 <z_time_slice+0x78>)
   1b59e:	6812      	ldr	r2, [r2, #0]
   1b5a0:	b1ba      	cbz	r2, 1b5d2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1b5a2:	89c2      	ldrh	r2, [r0, #14]
   1b5a4:	2a7f      	cmp	r2, #127	; 0x7f
   1b5a6:	d814      	bhi.n	1b5d2 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1b5a8:	7b42      	ldrb	r2, [r0, #13]
   1b5aa:	06d2      	lsls	r2, r2, #27
   1b5ac:	d111      	bne.n	1b5d2 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1b5ae:	4a0d      	ldr	r2, [pc, #52]	; (1b5e4 <z_time_slice+0x7c>)
   1b5b0:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1b5b4:	6812      	ldr	r2, [r2, #0]
   1b5b6:	4296      	cmp	r6, r2
   1b5b8:	db0b      	blt.n	1b5d2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1b5ba:	4a0b      	ldr	r2, [pc, #44]	; (1b5e8 <z_time_slice+0x80>)
   1b5bc:	4290      	cmp	r0, r2
   1b5be:	d008      	beq.n	1b5d2 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1b5c0:	691a      	ldr	r2, [r3, #16]
   1b5c2:	428a      	cmp	r2, r1
   1b5c4:	dc02      	bgt.n	1b5cc <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1b5c6:	f7ff ff91 	bl	1b4ec <move_thread_to_end_of_prio_q>
   1b5ca:	e7de      	b.n	1b58a <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   1b5cc:	1a52      	subs	r2, r2, r1
   1b5ce:	611a      	str	r2, [r3, #16]
   1b5d0:	e7dd      	b.n	1b58e <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1b5d2:	2300      	movs	r3, #0
   1b5d4:	612b      	str	r3, [r5, #16]
   1b5d6:	e7da      	b.n	1b58e <z_time_slice+0x26>
   1b5d8:	200020e0 	.word	0x200020e0
   1b5dc:	20002110 	.word	0x20002110
   1b5e0:	20002118 	.word	0x20002118
   1b5e4:	20002114 	.word	0x20002114
   1b5e8:	200017b0 	.word	0x200017b0

0001b5ec <ready_thread>:
{
   1b5ec:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1b5ee:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1b5f2:	7b42      	ldrb	r2, [r0, #13]
   1b5f4:	2b00      	cmp	r3, #0
   1b5f6:	db2d      	blt.n	1b654 <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b5f8:	06d3      	lsls	r3, r2, #27
   1b5fa:	d12b      	bne.n	1b654 <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
   1b5fc:	6983      	ldr	r3, [r0, #24]
   1b5fe:	bb4b      	cbnz	r3, 1b654 <ready_thread+0x68>
	return list->head == list;
   1b600:	4915      	ldr	r1, [pc, #84]	; (1b658 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1b602:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1b606:	7342      	strb	r2, [r0, #13]
   1b608:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b60a:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	return list->head == list;
   1b60c:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b610:	4294      	cmp	r4, r2
   1b612:	bf18      	it	ne
   1b614:	4623      	movne	r3, r4
   1b616:	2b00      	cmp	r3, #0
   1b618:	bf38      	it	cc
   1b61a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b61c:	b1ab      	cbz	r3, 1b64a <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
   1b61e:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1b622:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1b626:	42a6      	cmp	r6, r4
   1b628:	d00b      	beq.n	1b642 <ready_thread+0x56>
		return b2 - b1;
   1b62a:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b62c:	2c00      	cmp	r4, #0
   1b62e:	dd08      	ble.n	1b642 <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
   1b630:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b632:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1b636:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1b638:	6058      	str	r0, [r3, #4]
}
   1b63a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1b63c:	2000      	movs	r0, #0
   1b63e:	f7ff bf35 	b.w	1b4ac <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1b642:	42ab      	cmp	r3, r5
   1b644:	d001      	beq.n	1b64a <ready_thread+0x5e>
   1b646:	681b      	ldr	r3, [r3, #0]
   1b648:	e7e8      	b.n	1b61c <ready_thread+0x30>
	node->prev = tail;
   1b64a:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
   1b64e:	6028      	str	r0, [r5, #0]
	list->tail = node;
   1b650:	6248      	str	r0, [r1, #36]	; 0x24
}
   1b652:	e7f2      	b.n	1b63a <ready_thread+0x4e>
}
   1b654:	bc70      	pop	{r4, r5, r6}
   1b656:	4770      	bx	lr
   1b658:	200020e0 	.word	0x200020e0

0001b65c <z_sched_start>:
{
   1b65c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b65e:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b662:	f3ef 8411 	mrs	r4, BASEPRI
   1b666:	f382 8812 	msr	BASEPRI_MAX, r2
   1b66a:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1b66e:	7b42      	ldrb	r2, [r0, #13]
   1b670:	0751      	lsls	r1, r2, #29
   1b672:	d404      	bmi.n	1b67e <z_sched_start+0x22>
	__asm__ volatile(
   1b674:	f384 8811 	msr	BASEPRI, r4
   1b678:	f3bf 8f6f 	isb	sy
}
   1b67c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b67e:	f022 0204 	bic.w	r2, r2, #4
   1b682:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1b684:	f7ff ffb2 	bl	1b5ec <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1b688:	4621      	mov	r1, r4
   1b68a:	4802      	ldr	r0, [pc, #8]	; (1b694 <z_sched_start+0x38>)
}
   1b68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1b690:	f7ff bee6 	b.w	1b460 <z_reschedule>
   1b694:	2000333e 	.word	0x2000333e

0001b698 <unready_thread>:
{
   1b698:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1b69a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1b69e:	7b43      	ldrb	r3, [r0, #13]
   1b6a0:	2a00      	cmp	r2, #0
{
   1b6a2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1b6a4:	da04      	bge.n	1b6b0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b6a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b6aa:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b6ac:	f004 ff05 	bl	204ba <sys_dlist_remove>
	update_cache(thread == _current);
   1b6b0:	4b04      	ldr	r3, [pc, #16]	; (1b6c4 <unready_thread+0x2c>)
   1b6b2:	6898      	ldr	r0, [r3, #8]
   1b6b4:	1a43      	subs	r3, r0, r1
   1b6b6:	4258      	negs	r0, r3
   1b6b8:	4158      	adcs	r0, r3
}
   1b6ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1b6be:	f7ff bef5 	b.w	1b4ac <update_cache>
   1b6c2:	bf00      	nop
   1b6c4:	200020e0 	.word	0x200020e0

0001b6c8 <pend>:
{
   1b6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b6cc:	4606      	mov	r6, r0
   1b6ce:	4614      	mov	r4, r2
   1b6d0:	461d      	mov	r5, r3
	__asm__ volatile(
   1b6d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b6d6:	f3ef 8711 	mrs	r7, BASEPRI
   1b6da:	f383 8812 	msr	BASEPRI_MAX, r3
   1b6de:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1b6e2:	f004 ff7b 	bl	205dc <add_to_waitq_locked>
	__asm__ volatile(
   1b6e6:	f387 8811 	msr	BASEPRI, r7
   1b6ea:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b6ee:	1c6b      	adds	r3, r5, #1
   1b6f0:	bf08      	it	eq
   1b6f2:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   1b6f6:	d008      	beq.n	1b70a <pend+0x42>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1b6f8:	4622      	mov	r2, r4
   1b6fa:	462b      	mov	r3, r5
   1b6fc:	f106 0018 	add.w	r0, r6, #24
   1b700:	4903      	ldr	r1, [pc, #12]	; (1b710 <pend+0x48>)
}
   1b702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b706:	f000 ba4b 	b.w	1bba0 <z_add_timeout>
   1b70a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b70e:	bf00      	nop
   1b710:	00020599 	.word	0x00020599

0001b714 <z_pend_curr>:
{
   1b714:	b510      	push	{r4, lr}
	pending_current = _current;
   1b716:	4b07      	ldr	r3, [pc, #28]	; (1b734 <z_pend_curr+0x20>)
   1b718:	6898      	ldr	r0, [r3, #8]
   1b71a:	4b07      	ldr	r3, [pc, #28]	; (1b738 <z_pend_curr+0x24>)
{
   1b71c:	460c      	mov	r4, r1
	pending_current = _current;
   1b71e:	6018      	str	r0, [r3, #0]
{
   1b720:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1b722:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1b726:	f7ff ffcf 	bl	1b6c8 <pend>
   1b72a:	4620      	mov	r0, r4
}
   1b72c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b730:	f7fa ba16 	b.w	15b60 <arch_swap>
   1b734:	200020e0 	.word	0x200020e0
   1b738:	20002110 	.word	0x20002110

0001b73c <z_set_prio>:
{
   1b73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b73e:	4604      	mov	r4, r0
	__asm__ volatile(
   1b740:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b744:	f3ef 8611 	mrs	r6, BASEPRI
   1b748:	f383 8812 	msr	BASEPRI_MAX, r3
   1b74c:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b750:	7b43      	ldrb	r3, [r0, #13]
   1b752:	06da      	lsls	r2, r3, #27
   1b754:	b249      	sxtb	r1, r1
   1b756:	d138      	bne.n	1b7ca <z_set_prio+0x8e>
	return !sys_dnode_is_linked(&to->node);
   1b758:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1b75a:	2d00      	cmp	r5, #0
   1b75c:	d135      	bne.n	1b7ca <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b75e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b762:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b764:	f004 fea9 	bl	204ba <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1b768:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   1b76a:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1b76c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b770:	7343      	strb	r3, [r0, #13]
	return list->head == list;
   1b772:	4817      	ldr	r0, [pc, #92]	; (1b7d0 <z_set_prio+0x94>)
   1b774:	4603      	mov	r3, r0
   1b776:	f853 7f20 	ldr.w	r7, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b77a:	429f      	cmp	r7, r3
   1b77c:	bf18      	it	ne
   1b77e:	463d      	movne	r5, r7
   1b780:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b782:	6a47      	ldr	r7, [r0, #36]	; 0x24
   1b784:	461a      	mov	r2, r3
   1b786:	462b      	mov	r3, r5
   1b788:	bf38      	it	cc
   1b78a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b78c:	b1c3      	cbz	r3, 1b7c0 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
   1b78e:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1b792:	42a9      	cmp	r1, r5
   1b794:	d010      	beq.n	1b7b8 <z_set_prio+0x7c>
		return b2 - b1;
   1b796:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b798:	2d00      	cmp	r5, #0
   1b79a:	dd0d      	ble.n	1b7b8 <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
   1b79c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b79e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1b7a2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b7a4:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1b7a6:	2001      	movs	r0, #1
   1b7a8:	f7ff fe80 	bl	1b4ac <update_cache>
   1b7ac:	2001      	movs	r0, #1
	__asm__ volatile(
   1b7ae:	f386 8811 	msr	BASEPRI, r6
   1b7b2:	f3bf 8f6f 	isb	sy
}
   1b7b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b7b8:	42bb      	cmp	r3, r7
   1b7ba:	d001      	beq.n	1b7c0 <z_set_prio+0x84>
   1b7bc:	681b      	ldr	r3, [r3, #0]
   1b7be:	e7e5      	b.n	1b78c <z_set_prio+0x50>
	node->prev = tail;
   1b7c0:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
   1b7c4:	603c      	str	r4, [r7, #0]
	list->tail = node;
   1b7c6:	6244      	str	r4, [r0, #36]	; 0x24
}
   1b7c8:	e7ed      	b.n	1b7a6 <z_set_prio+0x6a>
			thread->base.prio = prio;
   1b7ca:	73a1      	strb	r1, [r4, #14]
   1b7cc:	2000      	movs	r0, #0
   1b7ce:	e7ee      	b.n	1b7ae <z_set_prio+0x72>
   1b7d0:	200020e0 	.word	0x200020e0

0001b7d4 <z_impl_k_thread_suspend>:
{
   1b7d4:	b570      	push	{r4, r5, r6, lr}
   1b7d6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1b7d8:	3018      	adds	r0, #24
   1b7da:	f004 ff86 	bl	206ea <z_abort_timeout>
	__asm__ volatile(
   1b7de:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b7e2:	f3ef 8611 	mrs	r6, BASEPRI
   1b7e6:	f383 8812 	msr	BASEPRI_MAX, r3
   1b7ea:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1b7ee:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1b7f2:	7b63      	ldrb	r3, [r4, #13]
   1b7f4:	2a00      	cmp	r2, #0
   1b7f6:	da05      	bge.n	1b804 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b7f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b7fc:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b7fe:	4620      	mov	r0, r4
   1b800:	f004 fe5b 	bl	204ba <sys_dlist_remove>
		update_cache(thread == _current);
   1b804:	4d0b      	ldr	r5, [pc, #44]	; (1b834 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b806:	7b63      	ldrb	r3, [r4, #13]
   1b808:	68a8      	ldr	r0, [r5, #8]
   1b80a:	f043 0310 	orr.w	r3, r3, #16
   1b80e:	7363      	strb	r3, [r4, #13]
   1b810:	1b03      	subs	r3, r0, r4
   1b812:	4258      	negs	r0, r3
   1b814:	4158      	adcs	r0, r3
   1b816:	f7ff fe49 	bl	1b4ac <update_cache>
	__asm__ volatile(
   1b81a:	f386 8811 	msr	BASEPRI, r6
   1b81e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1b822:	68ab      	ldr	r3, [r5, #8]
   1b824:	42a3      	cmp	r3, r4
   1b826:	d103      	bne.n	1b830 <z_impl_k_thread_suspend+0x5c>
}
   1b828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1b82c:	f004 be90 	b.w	20550 <z_reschedule_unlocked>
}
   1b830:	bd70      	pop	{r4, r5, r6, pc}
   1b832:	bf00      	nop
   1b834:	200020e0 	.word	0x200020e0

0001b838 <k_sched_unlock>:
{
   1b838:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b83a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b83e:	f3ef 8411 	mrs	r4, BASEPRI
   1b842:	f383 8812 	msr	BASEPRI_MAX, r3
   1b846:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1b84a:	4b08      	ldr	r3, [pc, #32]	; (1b86c <k_sched_unlock+0x34>)
   1b84c:	689a      	ldr	r2, [r3, #8]
   1b84e:	7bd3      	ldrb	r3, [r2, #15]
   1b850:	3301      	adds	r3, #1
   1b852:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1b854:	2000      	movs	r0, #0
   1b856:	f7ff fe29 	bl	1b4ac <update_cache>
	__asm__ volatile(
   1b85a:	f384 8811 	msr	BASEPRI, r4
   1b85e:	f3bf 8f6f 	isb	sy
}
   1b862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1b866:	f004 be73 	b.w	20550 <z_reschedule_unlocked>
   1b86a:	bf00      	nop
   1b86c:	200020e0 	.word	0x200020e0

0001b870 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1b870:	4b04      	ldr	r3, [pc, #16]	; (1b884 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1b872:	2100      	movs	r1, #0
   1b874:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1b878:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1b87c:	4608      	mov	r0, r1
   1b87e:	f7ff bdbd 	b.w	1b3fc <k_sched_time_slice_set>
   1b882:	bf00      	nop
   1b884:	200020e0 	.word	0x200020e0

0001b888 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1b888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1b88a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b88e:	f3ef 8411 	mrs	r4, BASEPRI
   1b892:	f383 8812 	msr	BASEPRI_MAX, r3
   1b896:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1b89a:	491b      	ldr	r1, [pc, #108]	; (1b908 <z_impl_k_yield+0x80>)
   1b89c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b89e:	7b43      	ldrb	r3, [r0, #13]
   1b8a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b8a4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b8a6:	f004 fe08 	bl	204ba <sys_dlist_remove>
	}
	queue_thread(_current);
   1b8aa:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1b8ac:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
   1b8ae:	4608      	mov	r0, r1
   1b8b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b8b4:	7353      	strb	r3, [r2, #13]
   1b8b6:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b8ba:	6a4e      	ldr	r6, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b8bc:	4283      	cmp	r3, r0
   1b8be:	bf08      	it	eq
   1b8c0:	2300      	moveq	r3, #0
   1b8c2:	2b00      	cmp	r3, #0
   1b8c4:	bf38      	it	cc
   1b8c6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b8c8:	b1cb      	cbz	r3, 1b8fe <z_impl_k_yield+0x76>
	int32_t b1 = thread_1->base.prio;
   1b8ca:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
   1b8ce:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1b8d2:	42af      	cmp	r7, r5
   1b8d4:	d00f      	beq.n	1b8f6 <z_impl_k_yield+0x6e>
		return b2 - b1;
   1b8d6:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b8d8:	2d00      	cmp	r5, #0
   1b8da:	dd0c      	ble.n	1b8f6 <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
   1b8dc:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1b8de:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
   1b8e2:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1b8e4:	605a      	str	r2, [r3, #4]
	update_cache(1);
   1b8e6:	2001      	movs	r0, #1
   1b8e8:	f7ff fde0 	bl	1b4ac <update_cache>
   1b8ec:	4620      	mov	r0, r4
	z_swap(&sched_spinlock, key);
}
   1b8ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1b8f2:	f7fa b935 	b.w	15b60 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1b8f6:	42b3      	cmp	r3, r6
   1b8f8:	d001      	beq.n	1b8fe <z_impl_k_yield+0x76>
   1b8fa:	681b      	ldr	r3, [r3, #0]
   1b8fc:	e7e4      	b.n	1b8c8 <z_impl_k_yield+0x40>
	node->prev = tail;
   1b8fe:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
   1b902:	6032      	str	r2, [r6, #0]
	list->tail = node;
   1b904:	624a      	str	r2, [r1, #36]	; 0x24
}
   1b906:	e7ee      	b.n	1b8e6 <z_impl_k_yield+0x5e>
   1b908:	200020e0 	.word	0x200020e0

0001b90c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   1b90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b910:	4604      	mov	r4, r0
   1b912:	460d      	mov	r5, r1
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1b914:	ea54 0105 	orrs.w	r1, r4, r5
   1b918:	d104      	bne.n	1b924 <z_tick_sleep+0x18>
	z_impl_k_yield();
   1b91a:	f7ff ffb5 	bl	1b888 <z_impl_k_yield>
		k_yield();
		return 0;
   1b91e:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   1b920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   1b924:	f06f 0101 	mvn.w	r1, #1
   1b928:	1a0a      	subs	r2, r1, r0
   1b92a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b92e:	eb61 0305 	sbc.w	r3, r1, r5
   1b932:	2a01      	cmp	r2, #1
   1b934:	f173 0300 	sbcs.w	r3, r3, #0
   1b938:	da2a      	bge.n	1b990 <z_tick_sleep+0x84>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1b93a:	f004 ff16 	bl	2076a <sys_clock_tick_get_32>
   1b93e:	1906      	adds	r6, r0, r4
   1b940:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b944:	f3ef 8811 	mrs	r8, BASEPRI
   1b948:	f383 8812 	msr	BASEPRI_MAX, r3
   1b94c:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1b950:	4f11      	ldr	r7, [pc, #68]	; (1b998 <z_tick_sleep+0x8c>)
   1b952:	4b12      	ldr	r3, [pc, #72]	; (1b99c <z_tick_sleep+0x90>)
   1b954:	68b8      	ldr	r0, [r7, #8]
   1b956:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1b958:	f7ff fe9e 	bl	1b698 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1b95c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1b95e:	4910      	ldr	r1, [pc, #64]	; (1b9a0 <z_tick_sleep+0x94>)
   1b960:	4622      	mov	r2, r4
   1b962:	462b      	mov	r3, r5
   1b964:	3018      	adds	r0, #24
   1b966:	f000 f91b 	bl	1bba0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1b96a:	68ba      	ldr	r2, [r7, #8]
   1b96c:	7b53      	ldrb	r3, [r2, #13]
   1b96e:	f043 0310 	orr.w	r3, r3, #16
   1b972:	7353      	strb	r3, [r2, #13]
   1b974:	4640      	mov	r0, r8
   1b976:	f7fa f8f3 	bl	15b60 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1b97a:	f004 fef6 	bl	2076a <sys_clock_tick_get_32>
   1b97e:	1a30      	subs	r0, r6, r0
   1b980:	eb66 0106 	sbc.w	r1, r6, r6
	if (ticks > 0) {
   1b984:	2801      	cmp	r0, #1
   1b986:	f171 0300 	sbcs.w	r3, r1, #0
		return ticks;
   1b98a:	bfb8      	it	lt
   1b98c:	2000      	movlt	r0, #0
   1b98e:	e7c7      	b.n	1b920 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1b990:	f06f 0601 	mvn.w	r6, #1
   1b994:	1a36      	subs	r6, r6, r0
   1b996:	e7d3      	b.n	1b940 <z_tick_sleep+0x34>
   1b998:	200020e0 	.word	0x200020e0
   1b99c:	20002110 	.word	0x20002110
   1b9a0:	00020599 	.word	0x00020599

0001b9a4 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1b9a4:	b508      	push	{r3, lr}
   1b9a6:	460b      	mov	r3, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b9a8:	3301      	adds	r3, #1
   1b9aa:	bf08      	it	eq
   1b9ac:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   1b9b0:	d106      	bne.n	1b9c0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1b9b2:	4b08      	ldr	r3, [pc, #32]	; (1b9d4 <z_impl_k_sleep+0x30>)
   1b9b4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1b9b6:	f7ff ff0d 	bl	1b7d4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1b9ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1b9be:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1b9c0:	f7ff ffa4 	bl	1b90c <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   1b9c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1b9c8:	fb80 2303 	smull	r2, r3, r0, r3
   1b9cc:	0bd0      	lsrs	r0, r2, #15
   1b9ce:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1b9d2:	e7f4      	b.n	1b9be <z_impl_k_sleep+0x1a>
   1b9d4:	200020e0 	.word	0x200020e0

0001b9d8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1b9d8:	4b01      	ldr	r3, [pc, #4]	; (1b9e0 <z_impl_z_current_get+0x8>)
   1b9da:	6898      	ldr	r0, [r3, #8]
   1b9dc:	4770      	bx	lr
   1b9de:	bf00      	nop
   1b9e0:	200020e0 	.word	0x200020e0

0001b9e4 <z_impl_k_is_preempt_thread>:
   1b9e4:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   1b9e8:	b93b      	cbnz	r3, 1b9fa <z_impl_k_is_preempt_thread+0x16>
   1b9ea:	4b05      	ldr	r3, [pc, #20]	; (1ba00 <z_impl_k_is_preempt_thread+0x1c>)
   1b9ec:	689b      	ldr	r3, [r3, #8]
   1b9ee:	89d8      	ldrh	r0, [r3, #14]
   1b9f0:	287f      	cmp	r0, #127	; 0x7f
   1b9f2:	bf8c      	ite	hi
   1b9f4:	2000      	movhi	r0, #0
   1b9f6:	2001      	movls	r0, #1
   1b9f8:	4770      	bx	lr
   1b9fa:	2000      	movs	r0, #0
}
   1b9fc:	4770      	bx	lr
   1b9fe:	bf00      	nop
   1ba00:	200020e0 	.word	0x200020e0

0001ba04 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1ba04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba08:	4604      	mov	r4, r0
   1ba0a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ba0e:	f3ef 8611 	mrs	r6, BASEPRI
   1ba12:	f383 8812 	msr	BASEPRI_MAX, r3
   1ba16:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1ba1a:	7b43      	ldrb	r3, [r0, #13]
   1ba1c:	071a      	lsls	r2, r3, #28
   1ba1e:	d505      	bpl.n	1ba2c <z_thread_abort+0x28>
	__asm__ volatile(
   1ba20:	f386 8811 	msr	BASEPRI, r6
   1ba24:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1ba28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1ba2c:	f023 0220 	bic.w	r2, r3, #32
   1ba30:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1ba34:	09d2      	lsrs	r2, r2, #7
   1ba36:	d120      	bne.n	1ba7a <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1ba38:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1ba3a:	68a3      	ldr	r3, [r4, #8]
   1ba3c:	b113      	cbz	r3, 1ba44 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   1ba3e:	4620      	mov	r0, r4
   1ba40:	f004 fd43 	bl	204ca <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1ba44:	f104 0018 	add.w	r0, r4, #24
   1ba48:	f004 fe4f 	bl	206ea <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1ba4c:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1ba50:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1ba54:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ba56:	42bd      	cmp	r5, r7
   1ba58:	d000      	beq.n	1ba5c <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1ba5a:	b9b5      	cbnz	r5, 1ba8a <z_thread_abort+0x86>
		update_cache(1);
   1ba5c:	2001      	movs	r0, #1
   1ba5e:	f7ff fd25 	bl	1b4ac <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1ba62:	4b10      	ldr	r3, [pc, #64]	; (1baa4 <z_thread_abort+0xa0>)
   1ba64:	689b      	ldr	r3, [r3, #8]
   1ba66:	42a3      	cmp	r3, r4
   1ba68:	d1da      	bne.n	1ba20 <z_thread_abort+0x1c>
   1ba6a:	f3ef 8305 	mrs	r3, IPSR
   1ba6e:	2b00      	cmp	r3, #0
   1ba70:	d1d6      	bne.n	1ba20 <z_thread_abort+0x1c>
   1ba72:	4630      	mov	r0, r6
   1ba74:	f7fa f874 	bl	15b60 <arch_swap>
	return ret;
   1ba78:	e7d2      	b.n	1ba20 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ba7a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1ba7e:	f043 0308 	orr.w	r3, r3, #8
   1ba82:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1ba84:	f004 fd19 	bl	204ba <sys_dlist_remove>
}
   1ba88:	e7d7      	b.n	1ba3a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   1ba8a:	4628      	mov	r0, r5
   1ba8c:	f004 fd1d 	bl	204ca <unpend_thread_no_timeout>
   1ba90:	f105 0018 	add.w	r0, r5, #24
   1ba94:	f004 fe29 	bl	206ea <z_abort_timeout>
   1ba98:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1ba9c:	4628      	mov	r0, r5
   1ba9e:	f7ff fda5 	bl	1b5ec <ready_thread>
   1baa2:	e7d7      	b.n	1ba54 <z_thread_abort+0x50>
   1baa4:	200020e0 	.word	0x200020e0

0001baa8 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1baa8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1baaa:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1baae:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1bab0:	e9cd 6700 	strd	r6, r7, [sp]
   1bab4:	f7ff fe2e 	bl	1b714 <z_pend_curr>

	if (data != NULL) {
   1bab8:	b11c      	cbz	r4, 1bac2 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1baba:	4b03      	ldr	r3, [pc, #12]	; (1bac8 <z_sched_wait+0x20>)
   1babc:	689b      	ldr	r3, [r3, #8]
   1babe:	695b      	ldr	r3, [r3, #20]
   1bac0:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1bac2:	b002      	add	sp, #8
   1bac4:	bdd0      	pop	{r4, r6, r7, pc}
   1bac6:	bf00      	nop
   1bac8:	200020e0 	.word	0x200020e0

0001bacc <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1bacc:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   1bace:	4806      	ldr	r0, [pc, #24]	; (1bae8 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   1bad0:	4a06      	ldr	r2, [pc, #24]	; (1baec <z_data_copy+0x20>)
   1bad2:	4907      	ldr	r1, [pc, #28]	; (1baf0 <z_data_copy+0x24>)
   1bad4:	1a12      	subs	r2, r2, r0
   1bad6:	f003 fe91 	bl	1f7fc <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1bada:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1bade:	4a05      	ldr	r2, [pc, #20]	; (1baf4 <z_data_copy+0x28>)
   1bae0:	4905      	ldr	r1, [pc, #20]	; (1baf8 <z_data_copy+0x2c>)
   1bae2:	4806      	ldr	r0, [pc, #24]	; (1bafc <z_data_copy+0x30>)
   1bae4:	f003 be8a 	b.w	1f7fc <memcpy>
   1bae8:	20000000 	.word	0x20000000
   1baec:	20000730 	.word	0x20000730
   1baf0:	0002242c 	.word	0x0002242c
   1baf4:	00000000 	.word	0x00000000
   1baf8:	0002242c 	.word	0x0002242c
   1bafc:	20000000 	.word	0x20000000

0001bb00 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1bb00:	4b03      	ldr	r3, [pc, #12]	; (1bb10 <elapsed+0x10>)
   1bb02:	681b      	ldr	r3, [r3, #0]
   1bb04:	b90b      	cbnz	r3, 1bb0a <elapsed+0xa>
   1bb06:	f7fd bcbb 	b.w	19480 <sys_clock_elapsed>
}
   1bb0a:	2000      	movs	r0, #0
   1bb0c:	4770      	bx	lr
   1bb0e:	bf00      	nop
   1bb10:	2000211c 	.word	0x2000211c

0001bb14 <remove_timeout>:
{
   1bb14:	b530      	push	{r4, r5, lr}
   1bb16:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bb18:	b168      	cbz	r0, 1bb36 <remove_timeout+0x22>
   1bb1a:	4a0a      	ldr	r2, [pc, #40]	; (1bb44 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1bb1c:	6852      	ldr	r2, [r2, #4]
   1bb1e:	4290      	cmp	r0, r2
   1bb20:	d009      	beq.n	1bb36 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1bb22:	b143      	cbz	r3, 1bb36 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1bb24:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1bb28:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1bb2c:	1912      	adds	r2, r2, r4
   1bb2e:	eb45 0101 	adc.w	r1, r5, r1
   1bb32:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1bb36:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1bb38:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1bb3a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1bb3c:	2300      	movs	r3, #0
	node->prev = NULL;
   1bb3e:	e9c0 3300 	strd	r3, r3, [r0]
}
   1bb42:	bd30      	pop	{r4, r5, pc}
   1bb44:	2000054c 	.word	0x2000054c

0001bb48 <next_timeout>:

static int32_t next_timeout(void)
{
   1bb48:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1bb4a:	4b13      	ldr	r3, [pc, #76]	; (1bb98 <next_timeout+0x50>)
   1bb4c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bb4e:	429c      	cmp	r4, r3
   1bb50:	bf08      	it	eq
   1bb52:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1bb54:	f7ff ffd4 	bl	1bb00 <elapsed>
   1bb58:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1bb5a:	b1bc      	cbz	r4, 1bb8c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1bb5c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1bb60:	1b40      	subs	r0, r0, r5
   1bb62:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1bb66:	2801      	cmp	r0, #1
   1bb68:	f171 0300 	sbcs.w	r3, r1, #0
   1bb6c:	db11      	blt.n	1bb92 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1bb6e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1bb72:	2300      	movs	r3, #0
   1bb74:	4282      	cmp	r2, r0
   1bb76:	eb73 0401 	sbcs.w	r4, r3, r1
   1bb7a:	da00      	bge.n	1bb7e <next_timeout+0x36>
   1bb7c:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1bb7e:	4b07      	ldr	r3, [pc, #28]	; (1bb9c <next_timeout+0x54>)
   1bb80:	691b      	ldr	r3, [r3, #16]
   1bb82:	b113      	cbz	r3, 1bb8a <next_timeout+0x42>
   1bb84:	4298      	cmp	r0, r3
   1bb86:	bfa8      	it	ge
   1bb88:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1bb8a:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1bb8c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1bb90:	e7f5      	b.n	1bb7e <next_timeout+0x36>
   1bb92:	2000      	movs	r0, #0
   1bb94:	e7f3      	b.n	1bb7e <next_timeout+0x36>
   1bb96:	bf00      	nop
   1bb98:	2000054c 	.word	0x2000054c
   1bb9c:	200020e0 	.word	0x200020e0

0001bba0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1bba4:	bf08      	it	eq
   1bba6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1bbaa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bbae:	4604      	mov	r4, r0
   1bbb0:	4692      	mov	sl, r2
   1bbb2:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bbb4:	d073      	beq.n	1bc9e <z_add_timeout+0xfe>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1bbb6:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1bbb8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bbbc:	f3ef 8511 	mrs	r5, BASEPRI
   1bbc0:	f383 8812 	msr	BASEPRI_MAX, r3
   1bbc4:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1bbc8:	f06f 0301 	mvn.w	r3, #1
   1bbcc:	ebb3 080a 	subs.w	r8, r3, sl
   1bbd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bbd4:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1bbd8:	f1b8 0f00 	cmp.w	r8, #0
   1bbdc:	f179 0100 	sbcs.w	r1, r9, #0
   1bbe0:	db1c      	blt.n	1bc1c <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1bbe2:	4830      	ldr	r0, [pc, #192]	; (1bca4 <z_add_timeout+0x104>)
   1bbe4:	e9d0 1000 	ldrd	r1, r0, [r0]
   1bbe8:	1a5b      	subs	r3, r3, r1
   1bbea:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   1bbee:	ebb3 060a 	subs.w	r6, r3, sl
   1bbf2:	eb62 070b 	sbc.w	r7, r2, fp
   1bbf6:	2e01      	cmp	r6, #1
   1bbf8:	f177 0300 	sbcs.w	r3, r7, #0
   1bbfc:	bfbc      	itt	lt
   1bbfe:	2601      	movlt	r6, #1
   1bc00:	2700      	movlt	r7, #0
   1bc02:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
   1bc06:	4a28      	ldr	r2, [pc, #160]	; (1bca8 <z_add_timeout+0x108>)
   1bc08:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bc0c:	4293      	cmp	r3, r2
   1bc0e:	d11e      	bne.n	1bc4e <z_add_timeout+0xae>
	node->prev = tail;
   1bc10:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   1bc14:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   1bc18:	6054      	str	r4, [r2, #4]
}
   1bc1a:	e02d      	b.n	1bc78 <z_add_timeout+0xd8>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1bc1c:	f7ff ff70 	bl	1bb00 <elapsed>
   1bc20:	f11a 0301 	adds.w	r3, sl, #1
   1bc24:	9300      	str	r3, [sp, #0]
   1bc26:	f14b 0300 	adc.w	r3, fp, #0
   1bc2a:	9301      	str	r3, [sp, #4]
   1bc2c:	e9dd 2300 	ldrd	r2, r3, [sp]
   1bc30:	1812      	adds	r2, r2, r0
   1bc32:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   1bc36:	e9c4 2304 	strd	r2, r3, [r4, #16]
   1bc3a:	e7e4      	b.n	1bc06 <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   1bc3c:	ebb6 0008 	subs.w	r0, r6, r8
   1bc40:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
   1bc44:	4563      	cmp	r3, ip
   1bc46:	e9c4 0104 	strd	r0, r1, [r4, #16]
   1bc4a:	d0e1      	beq.n	1bc10 <z_add_timeout+0x70>
   1bc4c:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1bc4e:	2b00      	cmp	r3, #0
   1bc50:	d0de      	beq.n	1bc10 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
   1bc52:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
   1bc56:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
   1bc5a:	4546      	cmp	r6, r8
   1bc5c:	eb77 0109 	sbcs.w	r1, r7, r9
   1bc60:	daec      	bge.n	1bc3c <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
   1bc62:	ebb8 0006 	subs.w	r0, r8, r6
   1bc66:	eb69 0107 	sbc.w	r1, r9, r7
   1bc6a:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1bc6e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1bc70:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   1bc74:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1bc76:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1bc78:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bc7a:	4293      	cmp	r3, r2
   1bc7c:	d00b      	beq.n	1bc96 <z_add_timeout+0xf6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1bc7e:	429c      	cmp	r4, r3
   1bc80:	d109      	bne.n	1bc96 <z_add_timeout+0xf6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1bc82:	f7ff ff61 	bl	1bb48 <next_timeout>

			if (next_time == 0 ||
   1bc86:	b118      	cbz	r0, 1bc90 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
   1bc88:	4b08      	ldr	r3, [pc, #32]	; (1bcac <z_add_timeout+0x10c>)
			if (next_time == 0 ||
   1bc8a:	691b      	ldr	r3, [r3, #16]
   1bc8c:	4283      	cmp	r3, r0
   1bc8e:	d002      	beq.n	1bc96 <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
   1bc90:	2100      	movs	r1, #0
   1bc92:	f7fd fbc5 	bl	19420 <sys_clock_set_timeout>
	__asm__ volatile(
   1bc96:	f385 8811 	msr	BASEPRI, r5
   1bc9a:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1bc9e:	b003      	add	sp, #12
   1bca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bca4:	200018b0 	.word	0x200018b0
   1bca8:	2000054c 	.word	0x2000054c
   1bcac:	200020e0 	.word	0x200020e0

0001bcb0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1bcb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bcb4:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1bcb6:	f7ff fc57 	bl	1b568 <z_time_slice>
	__asm__ volatile(
   1bcba:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bcbe:	f3ef 8411 	mrs	r4, BASEPRI
   1bcc2:	f383 8812 	msr	BASEPRI_MAX, r3
   1bcc6:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1bcca:	4d2c      	ldr	r5, [pc, #176]	; (1bd7c <sys_clock_announce+0xcc>)
   1bccc:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1bd80 <sys_clock_announce+0xd0>
	return list->head == list;
   1bcd0:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 1bd84 <sys_clock_announce+0xd4>
   1bcd4:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1bcd6:	4651      	mov	r1, sl
   1bcd8:	f8d5 c000 	ldr.w	ip, [r5]
   1bcdc:	f8db 0000 	ldr.w	r0, [fp]
   1bce0:	4662      	mov	r2, ip
   1bce2:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bce4:	4558      	cmp	r0, fp
   1bce6:	e9da 8900 	ldrd	r8, r9, [sl]
   1bcea:	e9cd 2300 	strd	r2, r3, [sp]
   1bcee:	d00d      	beq.n	1bd0c <sys_clock_announce+0x5c>
   1bcf0:	b160      	cbz	r0, 1bd0c <sys_clock_announce+0x5c>
   1bcf2:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1bcf6:	45b4      	cmp	ip, r6
   1bcf8:	41bb      	sbcs	r3, r7
   1bcfa:	da1e      	bge.n	1bd3a <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1bcfc:	9b00      	ldr	r3, [sp, #0]
   1bcfe:	ebb6 0c03 	subs.w	ip, r6, r3
   1bd02:	9b01      	ldr	r3, [sp, #4]
   1bd04:	eb67 0603 	sbc.w	r6, r7, r3
   1bd08:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   1bd0c:	9b00      	ldr	r3, [sp, #0]
   1bd0e:	eb13 0208 	adds.w	r2, r3, r8
   1bd12:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   1bd14:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   1bd18:	eb43 0309 	adc.w	r3, r3, r9
   1bd1c:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   1bd20:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1bd22:	f7ff ff11 	bl	1bb48 <next_timeout>
   1bd26:	4631      	mov	r1, r6
   1bd28:	f7fd fb7a 	bl	19420 <sys_clock_set_timeout>
	__asm__ volatile(
   1bd2c:	f384 8811 	msr	BASEPRI, r4
   1bd30:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1bd34:	b003      	add	sp, #12
   1bd36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1bd3a:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   1bd3e:	f04f 0200 	mov.w	r2, #0
   1bd42:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   1bd46:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1bd4a:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1bd4e:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   1bd52:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   1bd56:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   1bd58:	f7ff fedc 	bl	1bb14 <remove_timeout>
   1bd5c:	f384 8811 	msr	BASEPRI, r4
   1bd60:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1bd64:	6883      	ldr	r3, [r0, #8]
   1bd66:	4798      	blx	r3
	__asm__ volatile(
   1bd68:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bd6c:	f3ef 8411 	mrs	r4, BASEPRI
   1bd70:	f383 8812 	msr	BASEPRI_MAX, r3
   1bd74:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   1bd78:	4901      	ldr	r1, [pc, #4]	; (1bd80 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1bd7a:	e7ad      	b.n	1bcd8 <sys_clock_announce+0x28>
   1bd7c:	2000211c 	.word	0x2000211c
   1bd80:	200018b0 	.word	0x200018b0
   1bd84:	2000054c 	.word	0x2000054c

0001bd88 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1bd88:	b510      	push	{r4, lr}
   1bd8a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bd8e:	f3ef 8411 	mrs	r4, BASEPRI
   1bd92:	f383 8812 	msr	BASEPRI_MAX, r3
   1bd96:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1bd9a:	f7fd fb71 	bl	19480 <sys_clock_elapsed>
   1bd9e:	4b06      	ldr	r3, [pc, #24]	; (1bdb8 <sys_clock_tick_get+0x30>)
   1bda0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bda4:	1812      	adds	r2, r2, r0
   1bda6:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1bdaa:	f384 8811 	msr	BASEPRI, r4
   1bdae:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1bdb2:	4610      	mov	r0, r2
   1bdb4:	4619      	mov	r1, r3
   1bdb6:	bd10      	pop	{r4, pc}
   1bdb8:	200018b0 	.word	0x200018b0

0001bdbc <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1bdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bdbe:	4604      	mov	r4, r0
	__asm__ volatile(
   1bdc0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bdc4:	f3ef 8511 	mrs	r5, BASEPRI
   1bdc8:	f383 8812 	msr	BASEPRI_MAX, r3
   1bdcc:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1bdd0:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1bdd4:	1c56      	adds	r6, r2, #1
   1bdd6:	f143 0700 	adc.w	r7, r3, #0
   1bdda:	2f00      	cmp	r7, #0
   1bddc:	bf08      	it	eq
   1bdde:	2e02      	cmpeq	r6, #2
   1bde0:	d302      	bcc.n	1bde8 <z_timer_expiration_handler+0x2c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bde2:	4917      	ldr	r1, [pc, #92]	; (1be40 <z_timer_expiration_handler+0x84>)
   1bde4:	f7ff fedc 	bl	1bba0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1bde8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1bdea:	3301      	adds	r3, #1
   1bdec:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1bdee:	6a23      	ldr	r3, [r4, #32]
   1bdf0:	b173      	cbz	r3, 1be10 <z_timer_expiration_handler+0x54>
	__asm__ volatile(
   1bdf2:	f385 8811 	msr	BASEPRI, r5
   1bdf6:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   1bdfa:	6a23      	ldr	r3, [r4, #32]
   1bdfc:	4620      	mov	r0, r4
   1bdfe:	4798      	blx	r3
	__asm__ volatile(
   1be00:	f04f 0340 	mov.w	r3, #64	; 0x40
   1be04:	f3ef 8511 	mrs	r5, BASEPRI
   1be08:	f383 8812 	msr	BASEPRI_MAX, r3
   1be0c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1be10:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1be14:	42a6      	cmp	r6, r4
   1be16:	d000      	beq.n	1be1a <z_timer_expiration_handler+0x5e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1be18:	b926      	cbnz	r6, 1be24 <z_timer_expiration_handler+0x68>
	__asm__ volatile(
   1be1a:	f385 8811 	msr	BASEPRI, r5
   1be1e:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   1be22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
   1be24:	4630      	mov	r0, r6
   1be26:	f004 fb63 	bl	204f0 <z_unpend_thread_no_timeout>
   1be2a:	2300      	movs	r3, #0
   1be2c:	67f3      	str	r3, [r6, #124]	; 0x7c
   1be2e:	f385 8811 	msr	BASEPRI, r5
   1be32:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   1be36:	4630      	mov	r0, r6
}
   1be38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   1be3c:	f004 bb9c 	b.w	20578 <z_ready_thread>
   1be40:	0001bdbd 	.word	0x0001bdbd

0001be44 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1be44:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   1be48:	4619      	mov	r1, r3
   1be4a:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1be4c:	1c4c      	adds	r4, r1, #1
{
   1be4e:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1be50:	bf08      	it	eq
   1be52:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1be56:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1be5a:	4680      	mov	r8, r0
   1be5c:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1be5e:	d04c      	beq.n	1befa <z_impl_k_timer_start+0xb6>
   1be60:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1be62:	1c6b      	adds	r3, r5, #1
   1be64:	bf08      	it	eq
   1be66:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1be6a:	4614      	mov	r4, r2
   1be6c:	d019      	beq.n	1bea2 <z_impl_k_timer_start+0x5e>
   1be6e:	ea54 0305 	orrs.w	r3, r4, r5
   1be72:	d016      	beq.n	1bea2 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   1be74:	f06f 0301 	mvn.w	r3, #1
   1be78:	ebb3 0a02 	subs.w	sl, r3, r2
   1be7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1be80:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1be84:	f1ba 0f00 	cmp.w	sl, #0
   1be88:	f17b 0300 	sbcs.w	r3, fp, #0
   1be8c:	da09      	bge.n	1bea2 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   1be8e:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
   1be92:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   1be96:	2c01      	cmp	r4, #1
   1be98:	f175 0300 	sbcs.w	r3, r5, #0
   1be9c:	bfbc      	itt	lt
   1be9e:	2401      	movlt	r4, #1
   1bea0:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1bea2:	f06f 0301 	mvn.w	r3, #1
   1bea6:	1a1b      	subs	r3, r3, r0
   1bea8:	9300      	str	r3, [sp, #0]
   1beaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1beae:	eb63 0301 	sbc.w	r3, r3, r1
   1beb2:	9301      	str	r3, [sp, #4]
   1beb4:	e9dd 2300 	ldrd	r2, r3, [sp]
   1beb8:	2a00      	cmp	r2, #0
   1beba:	f173 0300 	sbcs.w	r3, r3, #0
   1bebe:	da0c      	bge.n	1beda <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1bec0:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
   1bec4:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
   1bec8:	f1b8 0f00 	cmp.w	r8, #0
   1becc:	f179 0300 	sbcs.w	r3, r9, #0
   1bed0:	bfbc      	itt	lt
   1bed2:	f04f 0800 	movlt.w	r8, #0
   1bed6:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   1beda:	4630      	mov	r0, r6
   1bedc:	f004 fc05 	bl	206ea <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1bee0:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bee2:	4907      	ldr	r1, [pc, #28]	; (1bf00 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
   1bee4:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bee6:	4642      	mov	r2, r8
   1bee8:	464b      	mov	r3, r9
   1beea:	4630      	mov	r0, r6
	timer->period = period;
   1beec:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1bef0:	b002      	add	sp, #8
   1bef2:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bef6:	f7ff be53 	b.w	1bba0 <z_add_timeout>
}
   1befa:	b002      	add	sp, #8
   1befc:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   1bf00:	0001bdbd 	.word	0x0001bdbd

0001bf04 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1bf04:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1bf08:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1bf0a:	4b29      	ldr	r3, [pc, #164]	; (1bfb0 <z_impl_k_poll+0xac>)
   1bf0c:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   1bf0e:	2301      	movs	r3, #1
   1bf10:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   1bf14:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1bf18:	ea52 0307 	orrs.w	r3, r2, r7
{
   1bf1c:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1bf1e:	bf0c      	ite	eq
   1bf20:	2301      	moveq	r3, #1
   1bf22:	2300      	movne	r3, #0
   1bf24:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
   1bf28:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1bf2a:	f004 fcda 	bl	208e2 <register_events>
   1bf2e:	4681      	mov	r9, r0
	__asm__ volatile(
   1bf30:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bf34:	f3ef 8a11 	mrs	sl, BASEPRI
   1bf38:	f383 8812 	msr	BASEPRI_MAX, r3
   1bf3c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1bf40:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
   1bf44:	b964      	cbnz	r4, 1bf60 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1bf46:	4601      	mov	r1, r0
   1bf48:	4652      	mov	r2, sl
   1bf4a:	4640      	mov	r0, r8
   1bf4c:	f004 fc67 	bl	2081e <clear_event_registrations>
	__asm__ volatile(
   1bf50:	f38a 8811 	msr	BASEPRI, sl
   1bf54:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1bf58:	4620      	mov	r0, r4
   1bf5a:	b002      	add	sp, #8
   1bf5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1bf60:	2300      	movs	r3, #0
   1bf62:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1bf66:	ea56 0307 	orrs.w	r3, r6, r7
   1bf6a:	d106      	bne.n	1bf7a <z_impl_k_poll+0x76>
   1bf6c:	f38a 8811 	msr	BASEPRI, sl
   1bf70:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1bf74:	f06f 040a 	mvn.w	r4, #10
   1bf78:	e7ee      	b.n	1bf58 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1bf7a:	e9cd 6700 	strd	r6, r7, [sp]
   1bf7e:	4a0d      	ldr	r2, [pc, #52]	; (1bfb4 <z_impl_k_poll+0xb0>)
   1bf80:	480d      	ldr	r0, [pc, #52]	; (1bfb8 <z_impl_k_poll+0xb4>)
   1bf82:	4651      	mov	r1, sl
   1bf84:	f7ff fbc6 	bl	1b714 <z_pend_curr>
   1bf88:	4604      	mov	r4, r0
	__asm__ volatile(
   1bf8a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bf8e:	f3ef 8511 	mrs	r5, BASEPRI
   1bf92:	f383 8812 	msr	BASEPRI_MAX, r3
   1bf96:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1bf9a:	462a      	mov	r2, r5
   1bf9c:	4649      	mov	r1, r9
   1bf9e:	4640      	mov	r0, r8
   1bfa0:	f004 fc3d 	bl	2081e <clear_event_registrations>
	__asm__ volatile(
   1bfa4:	f385 8811 	msr	BASEPRI, r5
   1bfa8:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1bfac:	e7d4      	b.n	1bf58 <z_impl_k_poll+0x54>
   1bfae:	bf00      	nop
   1bfb0:	200020e0 	.word	0x200020e0
   1bfb4:	20000554 	.word	0x20000554
   1bfb8:	2000333e 	.word	0x2000333e

0001bfbc <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1bfbc:	b538      	push	{r3, r4, r5, lr}
   1bfbe:	4603      	mov	r3, r0
	__asm__ volatile(
   1bfc0:	f04f 0240 	mov.w	r2, #64	; 0x40
   1bfc4:	f3ef 8511 	mrs	r5, BASEPRI
   1bfc8:	f382 8812 	msr	BASEPRI_MAX, r2
   1bfcc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1bfd0:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1bfd2:	2101      	movs	r1, #1
   1bfd4:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1bfd6:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1bfd8:	4283      	cmp	r3, r0
   1bfda:	d106      	bne.n	1bfea <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1bfdc:	f385 8811 	msr	BASEPRI, r5
   1bfe0:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1bfe4:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1bfe6:	4620      	mov	r0, r4
   1bfe8:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1bfea:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1bfee:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1bff0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1bff2:	2300      	movs	r3, #0
	node->prev = NULL;
   1bff4:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1bff8:	f004 fcea 	bl	209d0 <signal_poll_event>
	z_reschedule(&lock, key);
   1bffc:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1bffe:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1c000:	4801      	ldr	r0, [pc, #4]	; (1c008 <z_impl_k_poll_signal_raise+0x4c>)
   1c002:	f7ff fa2d 	bl	1b460 <z_reschedule>
	return rc;
   1c006:	e7ee      	b.n	1bfe6 <z_impl_k_poll_signal_raise+0x2a>
   1c008:	2000333e 	.word	0x2000333e

0001c00c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1c00c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c00e:	4606      	mov	r6, r0
   1c010:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1c012:	f004 f8cd 	bl	201b0 <k_is_in_isr>
   1c016:	b980      	cbnz	r0, 1c03a <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1c018:	4b0b      	ldr	r3, [pc, #44]	; (1c048 <z_thread_aligned_alloc+0x3c>)
   1c01a:	689b      	ldr	r3, [r3, #8]
   1c01c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1c01e:	b184      	cbz	r4, 1c042 <z_thread_aligned_alloc+0x36>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1c020:	2204      	movs	r2, #4
   1c022:	18aa      	adds	r2, r5, r2
   1c024:	d209      	bcs.n	1c03a <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1c026:	2000      	movs	r0, #0
   1c028:	2100      	movs	r1, #0
   1c02a:	e9cd 0100 	strd	r0, r1, [sp]
   1c02e:	f046 0104 	orr.w	r1, r6, #4
   1c032:	4620      	mov	r0, r4
   1c034:	f004 f814 	bl	20060 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1c038:	b908      	cbnz	r0, 1c03e <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1c03a:	2400      	movs	r4, #0
	}

	return ret;
   1c03c:	e001      	b.n	1c042 <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
   1c03e:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1c040:	1d04      	adds	r4, r0, #4
}
   1c042:	4620      	mov	r0, r4
   1c044:	b002      	add	sp, #8
   1c046:	bd70      	pop	{r4, r5, r6, pc}
   1c048:	200020e0 	.word	0x200020e0

0001c04c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1c04c:	4a02      	ldr	r2, [pc, #8]	; (1c058 <boot_banner+0xc>)
   1c04e:	4903      	ldr	r1, [pc, #12]	; (1c05c <boot_banner+0x10>)
   1c050:	4803      	ldr	r0, [pc, #12]	; (1c060 <boot_banner+0x14>)
   1c052:	f002 bcda 	b.w	1ea0a <printk>
   1c056:	bf00      	nop
   1c058:	000214cc 	.word	0x000214cc
   1c05c:	000223ec 	.word	0x000223ec
   1c060:	000223fb 	.word	0x000223fb

0001c064 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1c064:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1c066:	4b09      	ldr	r3, [pc, #36]	; (1c08c <k_sys_work_q_init+0x28>)
   1c068:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1c06a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1c06c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1c06e:	9300      	str	r3, [sp, #0]
   1c070:	4907      	ldr	r1, [pc, #28]	; (1c090 <k_sys_work_q_init+0x2c>)
   1c072:	4808      	ldr	r0, [pc, #32]	; (1c094 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1c074:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1c078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c07c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1c080:	f7ff f93a 	bl	1b2f8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1c084:	4620      	mov	r0, r4
   1c086:	b004      	add	sp, #16
   1c088:	bd10      	pop	{r4, pc}
   1c08a:	bf00      	nop
   1c08c:	00022422 	.word	0x00022422
   1c090:	20005c40 	.word	0x20005c40
   1c094:	200018b8 	.word	0x200018b8

0001c098 <nrf_cc3xx_platform_init>:
   1c098:	b510      	push	{r4, lr}
   1c09a:	4c0c      	ldr	r4, [pc, #48]	; (1c0cc <nrf_cc3xx_platform_init+0x34>)
   1c09c:	6823      	ldr	r3, [r4, #0]
   1c09e:	b113      	cbz	r3, 1c0a6 <nrf_cc3xx_platform_init+0xe>
   1c0a0:	4b0b      	ldr	r3, [pc, #44]	; (1c0d0 <nrf_cc3xx_platform_init+0x38>)
   1c0a2:	681b      	ldr	r3, [r3, #0]
   1c0a4:	b92b      	cbnz	r3, 1c0b2 <nrf_cc3xx_platform_init+0x1a>
   1c0a6:	f000 fe73 	bl	1cd90 <CC_LibInit>
   1c0aa:	b930      	cbnz	r0, 1c0ba <nrf_cc3xx_platform_init+0x22>
   1c0ac:	4b08      	ldr	r3, [pc, #32]	; (1c0d0 <nrf_cc3xx_platform_init+0x38>)
   1c0ae:	2201      	movs	r2, #1
   1c0b0:	601a      	str	r2, [r3, #0]
   1c0b2:	2301      	movs	r3, #1
   1c0b4:	6023      	str	r3, [r4, #0]
   1c0b6:	2000      	movs	r0, #0
   1c0b8:	bd10      	pop	{r4, pc}
   1c0ba:	3801      	subs	r0, #1
   1c0bc:	2806      	cmp	r0, #6
   1c0be:	d901      	bls.n	1c0c4 <nrf_cc3xx_platform_init+0x2c>
   1c0c0:	4804      	ldr	r0, [pc, #16]	; (1c0d4 <nrf_cc3xx_platform_init+0x3c>)
   1c0c2:	bd10      	pop	{r4, pc}
   1c0c4:	4b04      	ldr	r3, [pc, #16]	; (1c0d8 <nrf_cc3xx_platform_init+0x40>)
   1c0c6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1c0ca:	bd10      	pop	{r4, pc}
   1c0cc:	20002120 	.word	0x20002120
   1c0d0:	20002124 	.word	0x20002124
   1c0d4:	ffff8ffe 	.word	0xffff8ffe
   1c0d8:	00021188 	.word	0x00021188

0001c0dc <nrf_cc3xx_platform_abort>:
   1c0dc:	f3bf 8f4f 	dsb	sy
   1c0e0:	4905      	ldr	r1, [pc, #20]	; (1c0f8 <nrf_cc3xx_platform_abort+0x1c>)
   1c0e2:	4b06      	ldr	r3, [pc, #24]	; (1c0fc <nrf_cc3xx_platform_abort+0x20>)
   1c0e4:	68ca      	ldr	r2, [r1, #12]
   1c0e6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1c0ea:	4313      	orrs	r3, r2
   1c0ec:	60cb      	str	r3, [r1, #12]
   1c0ee:	f3bf 8f4f 	dsb	sy
   1c0f2:	bf00      	nop
   1c0f4:	e7fd      	b.n	1c0f2 <nrf_cc3xx_platform_abort+0x16>
   1c0f6:	bf00      	nop
   1c0f8:	e000ed00 	.word	0xe000ed00
   1c0fc:	05fa0004 	.word	0x05fa0004

0001c100 <CC_PalAbort>:
   1c100:	b4f0      	push	{r4, r5, r6, r7}
   1c102:	4f09      	ldr	r7, [pc, #36]	; (1c128 <CC_PalAbort+0x28>)
   1c104:	4e09      	ldr	r6, [pc, #36]	; (1c12c <CC_PalAbort+0x2c>)
   1c106:	4c0a      	ldr	r4, [pc, #40]	; (1c130 <CC_PalAbort+0x30>)
   1c108:	4a0a      	ldr	r2, [pc, #40]	; (1c134 <CC_PalAbort+0x34>)
   1c10a:	4d0b      	ldr	r5, [pc, #44]	; (1c138 <CC_PalAbort+0x38>)
   1c10c:	490b      	ldr	r1, [pc, #44]	; (1c13c <CC_PalAbort+0x3c>)
   1c10e:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   1c112:	603b      	str	r3, [r7, #0]
   1c114:	6852      	ldr	r2, [r2, #4]
   1c116:	6033      	str	r3, [r6, #0]
   1c118:	6023      	str	r3, [r4, #0]
   1c11a:	2400      	movs	r4, #0
   1c11c:	602b      	str	r3, [r5, #0]
   1c11e:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   1c122:	bcf0      	pop	{r4, r5, r6, r7}
   1c124:	4710      	bx	r2
   1c126:	bf00      	nop
   1c128:	5002b400 	.word	0x5002b400
   1c12c:	5002b404 	.word	0x5002b404
   1c130:	5002b408 	.word	0x5002b408
   1c134:	2000055c 	.word	0x2000055c
   1c138:	5002b40c 	.word	0x5002b40c
   1c13c:	5002a000 	.word	0x5002a000

0001c140 <nrf_cc3xx_platform_set_abort>:
   1c140:	e9d0 1200 	ldrd	r1, r2, [r0]
   1c144:	4b01      	ldr	r3, [pc, #4]	; (1c14c <nrf_cc3xx_platform_set_abort+0xc>)
   1c146:	e9c3 1200 	strd	r1, r2, [r3]
   1c14a:	4770      	bx	lr
   1c14c:	2000055c 	.word	0x2000055c

0001c150 <nrf_cc3xx_platform_ctr_drbg_init>:
   1c150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c154:	4c15      	ldr	r4, [pc, #84]	; (1c1ac <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   1c156:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1c1b4 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   1c15a:	2800      	cmp	r0, #0
   1c15c:	bf18      	it	ne
   1c15e:	4604      	movne	r4, r0
   1c160:	b083      	sub	sp, #12
   1c162:	6820      	ldr	r0, [r4, #0]
   1c164:	4540      	cmp	r0, r8
   1c166:	d01d      	beq.n	1c1a4 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   1c168:	460d      	mov	r5, r1
   1c16a:	4620      	mov	r0, r4
   1c16c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   1c170:	f104 0904 	add.w	r9, r4, #4
   1c174:	4616      	mov	r6, r2
   1c176:	f504 778c 	add.w	r7, r4, #280	; 0x118
   1c17a:	f000 f8d3 	bl	1c324 <mbedtls_platform_zeroize>
   1c17e:	4648      	mov	r0, r9
   1c180:	f000 fcf2 	bl	1cb68 <cc_mbedtls_entropy_init>
   1c184:	4638      	mov	r0, r7
   1c186:	f000 fb1f 	bl	1c7c8 <cc_mbedtls_ctr_drbg_init>
   1c18a:	4909      	ldr	r1, [pc, #36]	; (1c1b0 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   1c18c:	9600      	str	r6, [sp, #0]
   1c18e:	464a      	mov	r2, r9
   1c190:	4638      	mov	r0, r7
   1c192:	462b      	mov	r3, r5
   1c194:	f000 fb2e 	bl	1c7f4 <cc_mbedtls_ctr_drbg_seed>
   1c198:	b908      	cbnz	r0, 1c19e <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   1c19a:	f8c4 8000 	str.w	r8, [r4]
   1c19e:	b003      	add	sp, #12
   1c1a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c1a4:	2000      	movs	r0, #0
   1c1a6:	b003      	add	sp, #12
   1c1a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c1ac:	20003340 	.word	0x20003340
   1c1b0:	0001cbe5 	.word	0x0001cbe5
   1c1b4:	5ac9bca5 	.word	0x5ac9bca5

0001c1b8 <nrf_cc3xx_platform_ctr_drbg_get>:
   1c1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c1ba:	4c0d      	ldr	r4, [pc, #52]	; (1c1f0 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   1c1bc:	4e0d      	ldr	r6, [pc, #52]	; (1c1f4 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   1c1be:	2800      	cmp	r0, #0
   1c1c0:	bf08      	it	eq
   1c1c2:	4620      	moveq	r0, r4
   1c1c4:	b083      	sub	sp, #12
   1c1c6:	6807      	ldr	r7, [r0, #0]
   1c1c8:	42b7      	cmp	r7, r6
   1c1ca:	d10e      	bne.n	1c1ea <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   1c1cc:	2600      	movs	r6, #0
   1c1ce:	461d      	mov	r5, r3
   1c1d0:	f500 708c 	add.w	r0, r0, #280	; 0x118
   1c1d4:	9600      	str	r6, [sp, #0]
   1c1d6:	4633      	mov	r3, r6
   1c1d8:	4614      	mov	r4, r2
   1c1da:	f000 fb57 	bl	1c88c <cc_mbedtls_ctr_drbg_random_with_add>
   1c1de:	2800      	cmp	r0, #0
   1c1e0:	bf18      	it	ne
   1c1e2:	4634      	movne	r4, r6
   1c1e4:	602c      	str	r4, [r5, #0]
   1c1e6:	b003      	add	sp, #12
   1c1e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c1ea:	4803      	ldr	r0, [pc, #12]	; (1c1f8 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   1c1ec:	e7fb      	b.n	1c1e6 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   1c1ee:	bf00      	nop
   1c1f0:	20003340 	.word	0x20003340
   1c1f4:	5ac9bca5 	.word	0x5ac9bca5
   1c1f8:	ffff8fe8 	.word	0xffff8fe8

0001c1fc <mutex_free>:
   1c1fc:	b510      	push	{r4, lr}
   1c1fe:	4604      	mov	r4, r0
   1c200:	b130      	cbz	r0, 1c210 <mutex_free+0x14>
   1c202:	6863      	ldr	r3, [r4, #4]
   1c204:	06db      	lsls	r3, r3, #27
   1c206:	d502      	bpl.n	1c20e <mutex_free+0x12>
   1c208:	2300      	movs	r3, #0
   1c20a:	6023      	str	r3, [r4, #0]
   1c20c:	6063      	str	r3, [r4, #4]
   1c20e:	bd10      	pop	{r4, pc}
   1c210:	4b02      	ldr	r3, [pc, #8]	; (1c21c <mutex_free+0x20>)
   1c212:	4803      	ldr	r0, [pc, #12]	; (1c220 <mutex_free+0x24>)
   1c214:	685b      	ldr	r3, [r3, #4]
   1c216:	4798      	blx	r3
   1c218:	e7f3      	b.n	1c202 <mutex_free+0x6>
   1c21a:	bf00      	nop
   1c21c:	2000055c 	.word	0x2000055c
   1c220:	000211a4 	.word	0x000211a4

0001c224 <mutex_unlock>:
   1c224:	b168      	cbz	r0, 1c242 <mutex_unlock+0x1e>
   1c226:	6843      	ldr	r3, [r0, #4]
   1c228:	b13b      	cbz	r3, 1c23a <mutex_unlock+0x16>
   1c22a:	06db      	lsls	r3, r3, #27
   1c22c:	d507      	bpl.n	1c23e <mutex_unlock+0x1a>
   1c22e:	f3bf 8f5f 	dmb	sy
   1c232:	2300      	movs	r3, #0
   1c234:	6003      	str	r3, [r0, #0]
   1c236:	4618      	mov	r0, r3
   1c238:	4770      	bx	lr
   1c23a:	4803      	ldr	r0, [pc, #12]	; (1c248 <mutex_unlock+0x24>)
   1c23c:	4770      	bx	lr
   1c23e:	4803      	ldr	r0, [pc, #12]	; (1c24c <mutex_unlock+0x28>)
   1c240:	4770      	bx	lr
   1c242:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1c246:	4770      	bx	lr
   1c248:	ffff8fea 	.word	0xffff8fea
   1c24c:	ffff8fe9 	.word	0xffff8fe9

0001c250 <mutex_init>:
   1c250:	b510      	push	{r4, lr}
   1c252:	4604      	mov	r4, r0
   1c254:	b120      	cbz	r0, 1c260 <mutex_init+0x10>
   1c256:	2200      	movs	r2, #0
   1c258:	2311      	movs	r3, #17
   1c25a:	6022      	str	r2, [r4, #0]
   1c25c:	6063      	str	r3, [r4, #4]
   1c25e:	bd10      	pop	{r4, pc}
   1c260:	4801      	ldr	r0, [pc, #4]	; (1c268 <mutex_init+0x18>)
   1c262:	f7ff ff4d 	bl	1c100 <CC_PalAbort>
   1c266:	e7f6      	b.n	1c256 <mutex_init+0x6>
   1c268:	000211cc 	.word	0x000211cc

0001c26c <mutex_lock>:
   1c26c:	b1c0      	cbz	r0, 1c2a0 <mutex_lock+0x34>
   1c26e:	6843      	ldr	r3, [r0, #4]
   1c270:	b1a3      	cbz	r3, 1c29c <mutex_lock+0x30>
   1c272:	06db      	lsls	r3, r3, #27
   1c274:	d510      	bpl.n	1c298 <mutex_lock+0x2c>
   1c276:	2201      	movs	r2, #1
   1c278:	f3bf 8f5b 	dmb	ish
   1c27c:	e850 3f00 	ldrex	r3, [r0]
   1c280:	e840 2100 	strex	r1, r2, [r0]
   1c284:	2900      	cmp	r1, #0
   1c286:	d1f9      	bne.n	1c27c <mutex_lock+0x10>
   1c288:	f3bf 8f5b 	dmb	ish
   1c28c:	2b01      	cmp	r3, #1
   1c28e:	d0f3      	beq.n	1c278 <mutex_lock+0xc>
   1c290:	f3bf 8f5f 	dmb	sy
   1c294:	2000      	movs	r0, #0
   1c296:	4770      	bx	lr
   1c298:	4803      	ldr	r0, [pc, #12]	; (1c2a8 <mutex_lock+0x3c>)
   1c29a:	4770      	bx	lr
   1c29c:	4803      	ldr	r0, [pc, #12]	; (1c2ac <mutex_lock+0x40>)
   1c29e:	4770      	bx	lr
   1c2a0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1c2a4:	4770      	bx	lr
   1c2a6:	bf00      	nop
   1c2a8:	ffff8fe9 	.word	0xffff8fe9
   1c2ac:	ffff8fea 	.word	0xffff8fea

0001c2b0 <nrf_cc3xx_platform_set_mutexes>:
   1c2b0:	b570      	push	{r4, r5, r6, lr}
   1c2b2:	e9d0 2300 	ldrd	r2, r3, [r0]
   1c2b6:	4c13      	ldr	r4, [pc, #76]	; (1c304 <nrf_cc3xx_platform_set_mutexes+0x54>)
   1c2b8:	4d13      	ldr	r5, [pc, #76]	; (1c308 <nrf_cc3xx_platform_set_mutexes+0x58>)
   1c2ba:	e9c4 2300 	strd	r2, r3, [r4]
   1c2be:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   1c2c2:	e9c4 6302 	strd	r6, r3, [r4, #8]
   1c2c6:	4b11      	ldr	r3, [pc, #68]	; (1c30c <nrf_cc3xx_platform_set_mutexes+0x5c>)
   1c2c8:	6808      	ldr	r0, [r1, #0]
   1c2ca:	6018      	str	r0, [r3, #0]
   1c2cc:	6848      	ldr	r0, [r1, #4]
   1c2ce:	6058      	str	r0, [r3, #4]
   1c2d0:	6888      	ldr	r0, [r1, #8]
   1c2d2:	6098      	str	r0, [r3, #8]
   1c2d4:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   1c2d8:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   1c2dc:	60de      	str	r6, [r3, #12]
   1c2de:	6118      	str	r0, [r3, #16]
   1c2e0:	06cb      	lsls	r3, r1, #27
   1c2e2:	d50d      	bpl.n	1c300 <nrf_cc3xx_platform_set_mutexes+0x50>
   1c2e4:	2300      	movs	r3, #0
   1c2e6:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   1c2ea:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   1c2ee:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1c2f2:	4790      	blx	r2
   1c2f4:	6823      	ldr	r3, [r4, #0]
   1c2f6:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   1c2fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c2fe:	4718      	bx	r3
   1c300:	bd70      	pop	{r4, r5, r6, pc}
   1c302:	bf00      	nop
   1c304:	2000056c 	.word	0x2000056c
   1c308:	20003340 	.word	0x20003340
   1c30c:	2000057c 	.word	0x2000057c

0001c310 <mbedtls_zeroize_internal>:
   1c310:	b138      	cbz	r0, 1c322 <mbedtls_zeroize_internal+0x12>
   1c312:	b131      	cbz	r1, 1c322 <mbedtls_zeroize_internal+0x12>
   1c314:	4401      	add	r1, r0
   1c316:	2200      	movs	r2, #0
   1c318:	4603      	mov	r3, r0
   1c31a:	3001      	adds	r0, #1
   1c31c:	4281      	cmp	r1, r0
   1c31e:	701a      	strb	r2, [r3, #0]
   1c320:	d1fa      	bne.n	1c318 <mbedtls_zeroize_internal+0x8>
   1c322:	4770      	bx	lr

0001c324 <mbedtls_platform_zeroize>:
   1c324:	b138      	cbz	r0, 1c336 <mbedtls_platform_zeroize+0x12>
   1c326:	b131      	cbz	r1, 1c336 <mbedtls_platform_zeroize+0x12>
   1c328:	4401      	add	r1, r0
   1c32a:	2200      	movs	r2, #0
   1c32c:	4603      	mov	r3, r0
   1c32e:	3001      	adds	r0, #1
   1c330:	4288      	cmp	r0, r1
   1c332:	701a      	strb	r2, [r3, #0]
   1c334:	d1fa      	bne.n	1c32c <mbedtls_platform_zeroize+0x8>
   1c336:	4770      	bx	lr

0001c338 <block_cipher_df>:
   1c338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c33c:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   1c340:	b0b1      	sub	sp, #196	; 0xc4
   1c342:	f200 812e 	bhi.w	1c5a2 <block_cipher_df+0x26a>
   1c346:	f8df 926c 	ldr.w	r9, [pc, #620]	; 1c5b4 <block_cipher_df+0x27c>
   1c34a:	4614      	mov	r4, r2
   1c34c:	460d      	mov	r5, r1
   1c34e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1c352:	2100      	movs	r1, #0
   1c354:	4682      	mov	sl, r0
   1c356:	4648      	mov	r0, r9
   1c358:	f003 fa5b 	bl	1f812 <memset>
   1c35c:	a813      	add	r0, sp, #76	; 0x4c
   1c35e:	f001 f9e5 	bl	1d72c <cc_mbedtls_aes_init>
   1c362:	2600      	movs	r6, #0
   1c364:	4629      	mov	r1, r5
   1c366:	2320      	movs	r3, #32
   1c368:	ba65      	rev16	r5, r4
   1c36a:	4622      	mov	r2, r4
   1c36c:	f109 0018 	add.w	r0, r9, #24
   1c370:	f8a9 5012 	strh.w	r5, [r9, #18]
   1c374:	f889 3017 	strb.w	r3, [r9, #23]
   1c378:	f8a9 6010 	strh.w	r6, [r9, #16]
   1c37c:	f003 fa3e 	bl	1f7fc <memcpy>
   1c380:	eb09 0304 	add.w	r3, r9, r4
   1c384:	2280      	movs	r2, #128	; 0x80
   1c386:	4d88      	ldr	r5, [pc, #544]	; (1c5a8 <block_cipher_df+0x270>)
   1c388:	761a      	strb	r2, [r3, #24]
   1c38a:	4b88      	ldr	r3, [pc, #544]	; (1c5ac <block_cipher_df+0x274>)
   1c38c:	9503      	str	r5, [sp, #12]
   1c38e:	9304      	str	r3, [sp, #16]
   1c390:	a813      	add	r0, sp, #76	; 0x4c
   1c392:	f103 3308 	add.w	r3, r3, #134744072	; 0x8080808
   1c396:	a903      	add	r1, sp, #12
   1c398:	f105 3508 	add.w	r5, r5, #134744072	; 0x8080808
   1c39c:	e9cd 5305 	strd	r5, r3, [sp, #20]
   1c3a0:	f001 f9da 	bl	1d758 <cc_mbedtls_aes_setkey_enc>
   1c3a4:	4680      	mov	r8, r0
   1c3a6:	2800      	cmp	r0, #0
   1c3a8:	f040 80da 	bne.w	1c560 <block_cipher_df+0x228>
   1c3ac:	f104 0319 	add.w	r3, r4, #25
   1c3b0:	9301      	str	r3, [sp, #4]
   1c3b2:	af07      	add	r7, sp, #28
   1c3b4:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   1c3b8:	2210      	movs	r2, #16
   1c3ba:	2100      	movs	r1, #0
   1c3bc:	4638      	mov	r0, r7
   1c3be:	f003 fa28 	bl	1f812 <memset>
   1c3c2:	4c7b      	ldr	r4, [pc, #492]	; (1c5b0 <block_cipher_df+0x278>)
   1c3c4:	9d01      	ldr	r5, [sp, #4]
   1c3c6:	f89d 601d 	ldrb.w	r6, [sp, #29]
   1c3ca:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   1c3ce:	f89d e01c 	ldrb.w	lr, [sp, #28]
   1c3d2:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   1c3d6:	f89d c01f 	ldrb.w	ip, [sp, #31]
   1c3da:	f89d 001e 	ldrb.w	r0, [sp, #30]
   1c3de:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   1c3e2:	404e      	eors	r6, r1
   1c3e4:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
   1c3e8:	f88d 601d 	strb.w	r6, [sp, #29]
   1c3ec:	ea8e 0303 	eor.w	r3, lr, r3
   1c3f0:	4050      	eors	r0, r2
   1c3f2:	ea8c 0101 	eor.w	r1, ip, r1
   1c3f6:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1c3fa:	f88d 301c 	strb.w	r3, [sp, #28]
   1c3fe:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
   1c402:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   1c406:	f814 6c0a 	ldrb.w	r6, [r4, #-10]
   1c40a:	f88d 001e 	strb.w	r0, [sp, #30]
   1c40e:	f88d 101f 	strb.w	r1, [sp, #31]
   1c412:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   1c416:	f814 1c09 	ldrb.w	r1, [r4, #-9]
   1c41a:	f89d e021 	ldrb.w	lr, [sp, #33]	; 0x21
   1c41e:	405a      	eors	r2, r3
   1c420:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1c424:	f88d 2020 	strb.w	r2, [sp, #32]
   1c428:	ea8c 0606 	eor.w	r6, ip, r6
   1c42c:	4048      	eors	r0, r1
   1c42e:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   1c432:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   1c436:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
   1c43a:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
   1c43e:	ea8e 0303 	eor.w	r3, lr, r3
   1c442:	f814 6c06 	ldrb.w	r6, [r4, #-6]
   1c446:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
   1c44a:	ea8c 0101 	eor.w	r1, ip, r1
   1c44e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1c452:	f814 cc07 	ldrb.w	ip, [r4, #-7]
   1c456:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   1c45a:	ea82 020c 	eor.w	r2, r2, ip
   1c45e:	4073      	eors	r3, r6
   1c460:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   1c464:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   1c468:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   1c46c:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
   1c470:	f89d e027 	ldrb.w	lr, [sp, #39]	; 0x27
   1c474:	f814 2c05 	ldrb.w	r2, [r4, #-5]
   1c478:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   1c47c:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   1c480:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1c484:	f89d c02a 	ldrb.w	ip, [sp, #42]	; 0x2a
   1c488:	ea8e 0202 	eor.w	r2, lr, r2
   1c48c:	4041      	eors	r1, r0
   1c48e:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   1c492:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   1c496:	4073      	eors	r3, r6
   1c498:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   1c49c:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
   1c4a0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1c4a4:	ea8c 0000 	eor.w	r0, ip, r0
   1c4a8:	4056      	eors	r6, r2
   1c4aa:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
   1c4ae:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
   1c4b2:	463b      	mov	r3, r7
   1c4b4:	463a      	mov	r2, r7
   1c4b6:	2101      	movs	r1, #1
   1c4b8:	a813      	add	r0, sp, #76	; 0x4c
   1c4ba:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
   1c4be:	f001 f965 	bl	1d78c <cc_mbedtls_aes_crypt_ecb>
   1c4c2:	2d10      	cmp	r5, #16
   1c4c4:	bf94      	ite	ls
   1c4c6:	1b6d      	subls	r5, r5, r5
   1c4c8:	3d10      	subhi	r5, #16
   1c4ca:	2800      	cmp	r0, #0
   1c4cc:	d167      	bne.n	1c59e <block_cipher_df+0x266>
   1c4ce:	3410      	adds	r4, #16
   1c4d0:	2d00      	cmp	r5, #0
   1c4d2:	f47f af78 	bne.w	1c3c6 <block_cipher_df+0x8e>
   1c4d6:	eb0b 0008 	add.w	r0, fp, r8
   1c4da:	2210      	movs	r2, #16
   1c4dc:	4639      	mov	r1, r7
   1c4de:	f003 f98d 	bl	1f7fc <memcpy>
   1c4e2:	f899 3003 	ldrb.w	r3, [r9, #3]
   1c4e6:	f108 0810 	add.w	r8, r8, #16
   1c4ea:	3301      	adds	r3, #1
   1c4ec:	f1b8 0f20 	cmp.w	r8, #32
   1c4f0:	f889 3003 	strb.w	r3, [r9, #3]
   1c4f4:	f47f af60 	bne.w	1c3b8 <block_cipher_df+0x80>
   1c4f8:	2280      	movs	r2, #128	; 0x80
   1c4fa:	4659      	mov	r1, fp
   1c4fc:	a813      	add	r0, sp, #76	; 0x4c
   1c4fe:	f001 f92b 	bl	1d758 <cc_mbedtls_aes_setkey_enc>
   1c502:	4680      	mov	r8, r0
   1c504:	bb78      	cbnz	r0, 1c566 <block_cipher_df+0x22e>
   1c506:	f10a 0520 	add.w	r5, sl, #32
   1c50a:	4654      	mov	r4, sl
   1c50c:	ab0f      	add	r3, sp, #60	; 0x3c
   1c50e:	461a      	mov	r2, r3
   1c510:	2101      	movs	r1, #1
   1c512:	a813      	add	r0, sp, #76	; 0x4c
   1c514:	f001 f93a 	bl	1d78c <cc_mbedtls_aes_crypt_ecb>
   1c518:	2210      	movs	r2, #16
   1c51a:	4680      	mov	r8, r0
   1c51c:	a90f      	add	r1, sp, #60	; 0x3c
   1c51e:	4620      	mov	r0, r4
   1c520:	4414      	add	r4, r2
   1c522:	f1b8 0f00 	cmp.w	r8, #0
   1c526:	d11e      	bne.n	1c566 <block_cipher_df+0x22e>
   1c528:	f003 f968 	bl	1f7fc <memcpy>
   1c52c:	42ac      	cmp	r4, r5
   1c52e:	d1ed      	bne.n	1c50c <block_cipher_df+0x1d4>
   1c530:	a813      	add	r0, sp, #76	; 0x4c
   1c532:	f001 f90b 	bl	1d74c <cc_mbedtls_aes_free>
   1c536:	481f      	ldr	r0, [pc, #124]	; (1c5b4 <block_cipher_df+0x27c>)
   1c538:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1c53c:	f7ff fef2 	bl	1c324 <mbedtls_platform_zeroize>
   1c540:	4658      	mov	r0, fp
   1c542:	2120      	movs	r1, #32
   1c544:	f7ff feee 	bl	1c324 <mbedtls_platform_zeroize>
   1c548:	a803      	add	r0, sp, #12
   1c54a:	2110      	movs	r1, #16
   1c54c:	f7ff feea 	bl	1c324 <mbedtls_platform_zeroize>
   1c550:	4638      	mov	r0, r7
   1c552:	2110      	movs	r1, #16
   1c554:	f7ff fee6 	bl	1c324 <mbedtls_platform_zeroize>
   1c558:	4640      	mov	r0, r8
   1c55a:	b031      	add	sp, #196	; 0xc4
   1c55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c560:	af07      	add	r7, sp, #28
   1c562:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   1c566:	a813      	add	r0, sp, #76	; 0x4c
   1c568:	f001 f8f0 	bl	1d74c <cc_mbedtls_aes_free>
   1c56c:	4811      	ldr	r0, [pc, #68]	; (1c5b4 <block_cipher_df+0x27c>)
   1c56e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1c572:	f7ff fed7 	bl	1c324 <mbedtls_platform_zeroize>
   1c576:	4658      	mov	r0, fp
   1c578:	2120      	movs	r1, #32
   1c57a:	f7ff fed3 	bl	1c324 <mbedtls_platform_zeroize>
   1c57e:	a803      	add	r0, sp, #12
   1c580:	2110      	movs	r1, #16
   1c582:	f7ff fecf 	bl	1c324 <mbedtls_platform_zeroize>
   1c586:	4638      	mov	r0, r7
   1c588:	2110      	movs	r1, #16
   1c58a:	f7ff fecb 	bl	1c324 <mbedtls_platform_zeroize>
   1c58e:	4650      	mov	r0, sl
   1c590:	2120      	movs	r1, #32
   1c592:	f7ff fec7 	bl	1c324 <mbedtls_platform_zeroize>
   1c596:	4640      	mov	r0, r8
   1c598:	b031      	add	sp, #196	; 0xc4
   1c59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c59e:	4680      	mov	r8, r0
   1c5a0:	e7e1      	b.n	1c566 <block_cipher_df+0x22e>
   1c5a2:	f06f 0837 	mvn.w	r8, #55	; 0x37
   1c5a6:	e7f6      	b.n	1c596 <block_cipher_df+0x25e>
   1c5a8:	03020100 	.word	0x03020100
   1c5ac:	07060504 	.word	0x07060504
   1c5b0:	20002148 	.word	0x20002148
   1c5b4:	20002138 	.word	0x20002138

0001c5b8 <ctr_drbg_update_internal>:
   1c5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c5bc:	b088      	sub	sp, #32
   1c5be:	4604      	mov	r4, r0
   1c5c0:	2220      	movs	r2, #32
   1c5c2:	460d      	mov	r5, r1
   1c5c4:	4668      	mov	r0, sp
   1c5c6:	2100      	movs	r1, #0
   1c5c8:	eb04 0802 	add.w	r8, r4, r2
   1c5cc:	f003 f921 	bl	1f812 <memset>
   1c5d0:	466e      	mov	r6, sp
   1c5d2:	7be2      	ldrb	r2, [r4, #15]
   1c5d4:	3201      	adds	r2, #1
   1c5d6:	b2d2      	uxtb	r2, r2
   1c5d8:	73e2      	strb	r2, [r4, #15]
   1c5da:	2a00      	cmp	r2, #0
   1c5dc:	d14d      	bne.n	1c67a <ctr_drbg_update_internal+0xc2>
   1c5de:	7ba2      	ldrb	r2, [r4, #14]
   1c5e0:	3201      	adds	r2, #1
   1c5e2:	b2d2      	uxtb	r2, r2
   1c5e4:	73a2      	strb	r2, [r4, #14]
   1c5e6:	2a00      	cmp	r2, #0
   1c5e8:	d147      	bne.n	1c67a <ctr_drbg_update_internal+0xc2>
   1c5ea:	7b63      	ldrb	r3, [r4, #13]
   1c5ec:	3301      	adds	r3, #1
   1c5ee:	b2db      	uxtb	r3, r3
   1c5f0:	7363      	strb	r3, [r4, #13]
   1c5f2:	2b00      	cmp	r3, #0
   1c5f4:	d141      	bne.n	1c67a <ctr_drbg_update_internal+0xc2>
   1c5f6:	7b23      	ldrb	r3, [r4, #12]
   1c5f8:	3301      	adds	r3, #1
   1c5fa:	b2db      	uxtb	r3, r3
   1c5fc:	7323      	strb	r3, [r4, #12]
   1c5fe:	2b00      	cmp	r3, #0
   1c600:	d13b      	bne.n	1c67a <ctr_drbg_update_internal+0xc2>
   1c602:	7ae3      	ldrb	r3, [r4, #11]
   1c604:	3301      	adds	r3, #1
   1c606:	b2db      	uxtb	r3, r3
   1c608:	72e3      	strb	r3, [r4, #11]
   1c60a:	2b00      	cmp	r3, #0
   1c60c:	d135      	bne.n	1c67a <ctr_drbg_update_internal+0xc2>
   1c60e:	7aa3      	ldrb	r3, [r4, #10]
   1c610:	3301      	adds	r3, #1
   1c612:	b2db      	uxtb	r3, r3
   1c614:	72a3      	strb	r3, [r4, #10]
   1c616:	2b00      	cmp	r3, #0
   1c618:	d12f      	bne.n	1c67a <ctr_drbg_update_internal+0xc2>
   1c61a:	7a63      	ldrb	r3, [r4, #9]
   1c61c:	3301      	adds	r3, #1
   1c61e:	b2db      	uxtb	r3, r3
   1c620:	7263      	strb	r3, [r4, #9]
   1c622:	bb53      	cbnz	r3, 1c67a <ctr_drbg_update_internal+0xc2>
   1c624:	7a23      	ldrb	r3, [r4, #8]
   1c626:	3301      	adds	r3, #1
   1c628:	b2db      	uxtb	r3, r3
   1c62a:	7223      	strb	r3, [r4, #8]
   1c62c:	bb2b      	cbnz	r3, 1c67a <ctr_drbg_update_internal+0xc2>
   1c62e:	79e3      	ldrb	r3, [r4, #7]
   1c630:	3301      	adds	r3, #1
   1c632:	b2db      	uxtb	r3, r3
   1c634:	71e3      	strb	r3, [r4, #7]
   1c636:	bb03      	cbnz	r3, 1c67a <ctr_drbg_update_internal+0xc2>
   1c638:	79a3      	ldrb	r3, [r4, #6]
   1c63a:	3301      	adds	r3, #1
   1c63c:	b2db      	uxtb	r3, r3
   1c63e:	71a3      	strb	r3, [r4, #6]
   1c640:	b9db      	cbnz	r3, 1c67a <ctr_drbg_update_internal+0xc2>
   1c642:	7963      	ldrb	r3, [r4, #5]
   1c644:	3301      	adds	r3, #1
   1c646:	b2db      	uxtb	r3, r3
   1c648:	7163      	strb	r3, [r4, #5]
   1c64a:	b9b3      	cbnz	r3, 1c67a <ctr_drbg_update_internal+0xc2>
   1c64c:	7923      	ldrb	r3, [r4, #4]
   1c64e:	3301      	adds	r3, #1
   1c650:	b2db      	uxtb	r3, r3
   1c652:	7123      	strb	r3, [r4, #4]
   1c654:	b98b      	cbnz	r3, 1c67a <ctr_drbg_update_internal+0xc2>
   1c656:	78e3      	ldrb	r3, [r4, #3]
   1c658:	3301      	adds	r3, #1
   1c65a:	b2db      	uxtb	r3, r3
   1c65c:	70e3      	strb	r3, [r4, #3]
   1c65e:	b963      	cbnz	r3, 1c67a <ctr_drbg_update_internal+0xc2>
   1c660:	78a3      	ldrb	r3, [r4, #2]
   1c662:	3301      	adds	r3, #1
   1c664:	b2db      	uxtb	r3, r3
   1c666:	70a3      	strb	r3, [r4, #2]
   1c668:	b93b      	cbnz	r3, 1c67a <ctr_drbg_update_internal+0xc2>
   1c66a:	7863      	ldrb	r3, [r4, #1]
   1c66c:	3301      	adds	r3, #1
   1c66e:	b2db      	uxtb	r3, r3
   1c670:	7063      	strb	r3, [r4, #1]
   1c672:	b913      	cbnz	r3, 1c67a <ctr_drbg_update_internal+0xc2>
   1c674:	7823      	ldrb	r3, [r4, #0]
   1c676:	3301      	adds	r3, #1
   1c678:	7023      	strb	r3, [r4, #0]
   1c67a:	4633      	mov	r3, r6
   1c67c:	4622      	mov	r2, r4
   1c67e:	2101      	movs	r1, #1
   1c680:	4640      	mov	r0, r8
   1c682:	f001 f883 	bl	1d78c <cc_mbedtls_aes_crypt_ecb>
   1c686:	4607      	mov	r7, r0
   1c688:	2800      	cmp	r0, #0
   1c68a:	d12b      	bne.n	1c6e4 <ctr_drbg_update_internal+0x12c>
   1c68c:	3610      	adds	r6, #16
   1c68e:	ab08      	add	r3, sp, #32
   1c690:	429e      	cmp	r6, r3
   1c692:	d19e      	bne.n	1c5d2 <ctr_drbg_update_internal+0x1a>
   1c694:	9e01      	ldr	r6, [sp, #4]
   1c696:	686a      	ldr	r2, [r5, #4]
   1c698:	9f00      	ldr	r7, [sp, #0]
   1c69a:	6829      	ldr	r1, [r5, #0]
   1c69c:	68ab      	ldr	r3, [r5, #8]
   1c69e:	4072      	eors	r2, r6
   1c6a0:	9e02      	ldr	r6, [sp, #8]
   1c6a2:	9201      	str	r2, [sp, #4]
   1c6a4:	4079      	eors	r1, r7
   1c6a6:	4073      	eors	r3, r6
   1c6a8:	9100      	str	r1, [sp, #0]
   1c6aa:	9e03      	ldr	r6, [sp, #12]
   1c6ac:	68e9      	ldr	r1, [r5, #12]
   1c6ae:	692a      	ldr	r2, [r5, #16]
   1c6b0:	9302      	str	r3, [sp, #8]
   1c6b2:	4071      	eors	r1, r6
   1c6b4:	9e04      	ldr	r6, [sp, #16]
   1c6b6:	696b      	ldr	r3, [r5, #20]
   1c6b8:	9103      	str	r1, [sp, #12]
   1c6ba:	4056      	eors	r6, r2
   1c6bc:	9a05      	ldr	r2, [sp, #20]
   1c6be:	9604      	str	r6, [sp, #16]
   1c6c0:	ea83 0102 	eor.w	r1, r3, r2
   1c6c4:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   1c6c8:	9d06      	ldr	r5, [sp, #24]
   1c6ca:	9105      	str	r1, [sp, #20]
   1c6cc:	4055      	eors	r5, r2
   1c6ce:	9a07      	ldr	r2, [sp, #28]
   1c6d0:	4640      	mov	r0, r8
   1c6d2:	4053      	eors	r3, r2
   1c6d4:	4669      	mov	r1, sp
   1c6d6:	2280      	movs	r2, #128	; 0x80
   1c6d8:	e9cd 5306 	strd	r5, r3, [sp, #24]
   1c6dc:	f001 f83c 	bl	1d758 <cc_mbedtls_aes_setkey_enc>
   1c6e0:	4607      	mov	r7, r0
   1c6e2:	b138      	cbz	r0, 1c6f4 <ctr_drbg_update_internal+0x13c>
   1c6e4:	4668      	mov	r0, sp
   1c6e6:	2120      	movs	r1, #32
   1c6e8:	f7ff fe1c 	bl	1c324 <mbedtls_platform_zeroize>
   1c6ec:	4638      	mov	r0, r7
   1c6ee:	b008      	add	sp, #32
   1c6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c6f4:	2210      	movs	r2, #16
   1c6f6:	4620      	mov	r0, r4
   1c6f8:	eb0d 0102 	add.w	r1, sp, r2
   1c6fc:	f003 f87e 	bl	1f7fc <memcpy>
   1c700:	e7f0      	b.n	1c6e4 <ctr_drbg_update_internal+0x12c>
   1c702:	bf00      	nop

0001c704 <mbedtls_ctr_drbg_reseed_internal>:
   1c704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c708:	4604      	mov	r4, r0
   1c70a:	6980      	ldr	r0, [r0, #24]
   1c70c:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   1c710:	d852      	bhi.n	1c7b8 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1c712:	461d      	mov	r5, r3
   1c714:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   1c718:	42ab      	cmp	r3, r5
   1c71a:	d34d      	bcc.n	1c7b8 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1c71c:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   1c720:	1a18      	subs	r0, r3, r0
   1c722:	4290      	cmp	r0, r2
   1c724:	4616      	mov	r6, r2
   1c726:	d347      	bcc.n	1c7b8 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1c728:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1c7c4 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   1c72c:	f44f 72c0 	mov.w	r2, #384	; 0x180
   1c730:	460f      	mov	r7, r1
   1c732:	4648      	mov	r0, r9
   1c734:	2100      	movs	r1, #0
   1c736:	f003 f86c 	bl	1f812 <memset>
   1c73a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1c73e:	69a2      	ldr	r2, [r4, #24]
   1c740:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1c744:	4649      	mov	r1, r9
   1c746:	4798      	blx	r3
   1c748:	2800      	cmp	r0, #0
   1c74a:	d138      	bne.n	1c7be <mbedtls_ctr_drbg_reseed_internal+0xba>
   1c74c:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1c750:	b13d      	cbz	r5, 1c762 <mbedtls_ctr_drbg_reseed_internal+0x5e>
   1c752:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   1c756:	462a      	mov	r2, r5
   1c758:	eb09 0108 	add.w	r1, r9, r8
   1c75c:	4798      	blx	r3
   1c75e:	bb70      	cbnz	r0, 1c7be <mbedtls_ctr_drbg_reseed_internal+0xba>
   1c760:	44a8      	add	r8, r5
   1c762:	b107      	cbz	r7, 1c766 <mbedtls_ctr_drbg_reseed_internal+0x62>
   1c764:	b9c6      	cbnz	r6, 1c798 <mbedtls_ctr_drbg_reseed_internal+0x94>
   1c766:	4917      	ldr	r1, [pc, #92]	; (1c7c4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1c768:	4642      	mov	r2, r8
   1c76a:	4608      	mov	r0, r1
   1c76c:	f7ff fde4 	bl	1c338 <block_cipher_df>
   1c770:	4605      	mov	r5, r0
   1c772:	b138      	cbz	r0, 1c784 <mbedtls_ctr_drbg_reseed_internal+0x80>
   1c774:	4813      	ldr	r0, [pc, #76]	; (1c7c4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1c776:	f44f 71c0 	mov.w	r1, #384	; 0x180
   1c77a:	f7ff fdd3 	bl	1c324 <mbedtls_platform_zeroize>
   1c77e:	4628      	mov	r0, r5
   1c780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1c784:	490f      	ldr	r1, [pc, #60]	; (1c7c4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1c786:	4620      	mov	r0, r4
   1c788:	f7ff ff16 	bl	1c5b8 <ctr_drbg_update_internal>
   1c78c:	4605      	mov	r5, r0
   1c78e:	2800      	cmp	r0, #0
   1c790:	d1f0      	bne.n	1c774 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1c792:	2301      	movs	r3, #1
   1c794:	6123      	str	r3, [r4, #16]
   1c796:	e7ed      	b.n	1c774 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1c798:	4639      	mov	r1, r7
   1c79a:	eb09 0008 	add.w	r0, r9, r8
   1c79e:	4632      	mov	r2, r6
   1c7a0:	f003 f82c 	bl	1f7fc <memcpy>
   1c7a4:	4907      	ldr	r1, [pc, #28]	; (1c7c4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1c7a6:	44b0      	add	r8, r6
   1c7a8:	4642      	mov	r2, r8
   1c7aa:	4608      	mov	r0, r1
   1c7ac:	f7ff fdc4 	bl	1c338 <block_cipher_df>
   1c7b0:	4605      	mov	r5, r0
   1c7b2:	2800      	cmp	r0, #0
   1c7b4:	d1de      	bne.n	1c774 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1c7b6:	e7e5      	b.n	1c784 <mbedtls_ctr_drbg_reseed_internal+0x80>
   1c7b8:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1c7bc:	e7df      	b.n	1c77e <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1c7be:	f06f 0533 	mvn.w	r5, #51	; 0x33
   1c7c2:	e7dc      	b.n	1c77e <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1c7c4:	200022d8 	.word	0x200022d8

0001c7c8 <cc_mbedtls_ctr_drbg_init>:
   1c7c8:	b510      	push	{r4, lr}
   1c7ca:	22a4      	movs	r2, #164	; 0xa4
   1c7cc:	4604      	mov	r4, r0
   1c7ce:	2100      	movs	r1, #0
   1c7d0:	f003 f81f 	bl	1f812 <memset>
   1c7d4:	4b06      	ldr	r3, [pc, #24]	; (1c7f0 <cc_mbedtls_ctr_drbg_init+0x28>)
   1c7d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c7da:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   1c7de:	6121      	str	r1, [r4, #16]
   1c7e0:	61e2      	str	r2, [r4, #28]
   1c7e2:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1c7e6:	681b      	ldr	r3, [r3, #0]
   1c7e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c7ec:	4718      	bx	r3
   1c7ee:	bf00      	nop
   1c7f0:	200005c0 	.word	0x200005c0

0001c7f4 <cc_mbedtls_ctr_drbg_seed>:
   1c7f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c7f8:	b085      	sub	sp, #20
   1c7fa:	4605      	mov	r5, r0
   1c7fc:	460f      	mov	r7, r1
   1c7fe:	4616      	mov	r6, r2
   1c800:	4668      	mov	r0, sp
   1c802:	2210      	movs	r2, #16
   1c804:	2100      	movs	r1, #0
   1c806:	4699      	mov	r9, r3
   1c808:	f003 f803 	bl	1f812 <memset>
   1c80c:	4b1d      	ldr	r3, [pc, #116]	; (1c884 <cc_mbedtls_ctr_drbg_seed+0x90>)
   1c80e:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   1c812:	681b      	ldr	r3, [r3, #0]
   1c814:	4640      	mov	r0, r8
   1c816:	4798      	blx	r3
   1c818:	b120      	cbz	r0, 1c824 <cc_mbedtls_ctr_drbg_seed+0x30>
   1c81a:	4604      	mov	r4, r0
   1c81c:	4620      	mov	r0, r4
   1c81e:	b005      	add	sp, #20
   1c820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c824:	f105 0420 	add.w	r4, r5, #32
   1c828:	4620      	mov	r0, r4
   1c82a:	f000 ff7f 	bl	1d72c <cc_mbedtls_aes_init>
   1c82e:	69aa      	ldr	r2, [r5, #24]
   1c830:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   1c834:	692e      	ldr	r6, [r5, #16]
   1c836:	b9e2      	cbnz	r2, 1c872 <cc_mbedtls_ctr_drbg_seed+0x7e>
   1c838:	2220      	movs	r2, #32
   1c83a:	2e00      	cmp	r6, #0
   1c83c:	61aa      	str	r2, [r5, #24]
   1c83e:	db1f      	blt.n	1c880 <cc_mbedtls_ctr_drbg_seed+0x8c>
   1c840:	4620      	mov	r0, r4
   1c842:	4669      	mov	r1, sp
   1c844:	2280      	movs	r2, #128	; 0x80
   1c846:	f000 ff87 	bl	1d758 <cc_mbedtls_aes_setkey_enc>
   1c84a:	4604      	mov	r4, r0
   1c84c:	b930      	cbnz	r0, 1c85c <cc_mbedtls_ctr_drbg_seed+0x68>
   1c84e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1c850:	4633      	mov	r3, r6
   1c852:	4649      	mov	r1, r9
   1c854:	4628      	mov	r0, r5
   1c856:	f7ff ff55 	bl	1c704 <mbedtls_ctr_drbg_reseed_internal>
   1c85a:	4604      	mov	r4, r0
   1c85c:	4b0a      	ldr	r3, [pc, #40]	; (1c888 <cc_mbedtls_ctr_drbg_seed+0x94>)
   1c85e:	4640      	mov	r0, r8
   1c860:	681b      	ldr	r3, [r3, #0]
   1c862:	4798      	blx	r3
   1c864:	2800      	cmp	r0, #0
   1c866:	bf18      	it	ne
   1c868:	4604      	movne	r4, r0
   1c86a:	4620      	mov	r0, r4
   1c86c:	b005      	add	sp, #20
   1c86e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c872:	2e00      	cmp	r6, #0
   1c874:	dae4      	bge.n	1c840 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1c876:	2a17      	cmp	r2, #23
   1c878:	d802      	bhi.n	1c880 <cc_mbedtls_ctr_drbg_seed+0x8c>
   1c87a:	1c53      	adds	r3, r2, #1
   1c87c:	085e      	lsrs	r6, r3, #1
   1c87e:	e7df      	b.n	1c840 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1c880:	2600      	movs	r6, #0
   1c882:	e7dd      	b.n	1c840 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1c884:	200005c4 	.word	0x200005c4
   1c888:	200005c8 	.word	0x200005c8

0001c88c <cc_mbedtls_ctr_drbg_random_with_add>:
   1c88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c890:	b08d      	sub	sp, #52	; 0x34
   1c892:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1c896:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   1c89a:	f200 80e4 	bhi.w	1ca66 <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   1c89e:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   1c8a2:	f200 80dd 	bhi.w	1ca60 <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   1c8a6:	4604      	mov	r4, r0
   1c8a8:	4615      	mov	r5, r2
   1c8aa:	460e      	mov	r6, r1
   1c8ac:	2220      	movs	r2, #32
   1c8ae:	2100      	movs	r1, #0
   1c8b0:	a804      	add	r0, sp, #16
   1c8b2:	461f      	mov	r7, r3
   1c8b4:	f002 ffad 	bl	1f812 <memset>
   1c8b8:	4b6c      	ldr	r3, [pc, #432]	; (1ca6c <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   1c8ba:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   1c8be:	681b      	ldr	r3, [r3, #0]
   1c8c0:	4648      	mov	r0, r9
   1c8c2:	4798      	blx	r3
   1c8c4:	4683      	mov	fp, r0
   1c8c6:	2800      	cmp	r0, #0
   1c8c8:	f040 8093 	bne.w	1c9f2 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1c8cc:	6922      	ldr	r2, [r4, #16]
   1c8ce:	69e3      	ldr	r3, [r4, #28]
   1c8d0:	429a      	cmp	r2, r3
   1c8d2:	f300 8092 	bgt.w	1c9fa <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   1c8d6:	6963      	ldr	r3, [r4, #20]
   1c8d8:	2b00      	cmp	r3, #0
   1c8da:	f040 808e 	bne.w	1c9fa <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   1c8de:	f1b8 0f00 	cmp.w	r8, #0
   1c8e2:	f040 80a9 	bne.w	1ca38 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   1c8e6:	f8df a188 	ldr.w	sl, [pc, #392]	; 1ca70 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1c8ea:	466f      	mov	r7, sp
   1c8ec:	2d00      	cmp	r5, #0
   1c8ee:	f000 8098 	beq.w	1ca22 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   1c8f2:	f104 0820 	add.w	r8, r4, #32
   1c8f6:	466f      	mov	r7, sp
   1c8f8:	e00e      	b.n	1c918 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   1c8fa:	2d10      	cmp	r5, #16
   1c8fc:	46ab      	mov	fp, r5
   1c8fe:	bf28      	it	cs
   1c900:	f04f 0b10 	movcs.w	fp, #16
   1c904:	4630      	mov	r0, r6
   1c906:	465a      	mov	r2, fp
   1c908:	4639      	mov	r1, r7
   1c90a:	f002 ff77 	bl	1f7fc <memcpy>
   1c90e:	ebb5 050b 	subs.w	r5, r5, fp
   1c912:	445e      	add	r6, fp
   1c914:	f000 8085 	beq.w	1ca22 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   1c918:	7be3      	ldrb	r3, [r4, #15]
   1c91a:	3301      	adds	r3, #1
   1c91c:	b2db      	uxtb	r3, r3
   1c91e:	73e3      	strb	r3, [r4, #15]
   1c920:	2b00      	cmp	r3, #0
   1c922:	d14d      	bne.n	1c9c0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1c924:	7ba3      	ldrb	r3, [r4, #14]
   1c926:	3301      	adds	r3, #1
   1c928:	b2db      	uxtb	r3, r3
   1c92a:	73a3      	strb	r3, [r4, #14]
   1c92c:	2b00      	cmp	r3, #0
   1c92e:	d147      	bne.n	1c9c0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1c930:	7b63      	ldrb	r3, [r4, #13]
   1c932:	3301      	adds	r3, #1
   1c934:	b2db      	uxtb	r3, r3
   1c936:	7363      	strb	r3, [r4, #13]
   1c938:	2b00      	cmp	r3, #0
   1c93a:	d141      	bne.n	1c9c0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1c93c:	7b23      	ldrb	r3, [r4, #12]
   1c93e:	3301      	adds	r3, #1
   1c940:	b2db      	uxtb	r3, r3
   1c942:	7323      	strb	r3, [r4, #12]
   1c944:	2b00      	cmp	r3, #0
   1c946:	d13b      	bne.n	1c9c0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1c948:	7ae3      	ldrb	r3, [r4, #11]
   1c94a:	3301      	adds	r3, #1
   1c94c:	b2db      	uxtb	r3, r3
   1c94e:	72e3      	strb	r3, [r4, #11]
   1c950:	2b00      	cmp	r3, #0
   1c952:	d135      	bne.n	1c9c0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1c954:	7aa3      	ldrb	r3, [r4, #10]
   1c956:	3301      	adds	r3, #1
   1c958:	b2db      	uxtb	r3, r3
   1c95a:	72a3      	strb	r3, [r4, #10]
   1c95c:	2b00      	cmp	r3, #0
   1c95e:	d12f      	bne.n	1c9c0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1c960:	7a63      	ldrb	r3, [r4, #9]
   1c962:	3301      	adds	r3, #1
   1c964:	b2db      	uxtb	r3, r3
   1c966:	7263      	strb	r3, [r4, #9]
   1c968:	bb53      	cbnz	r3, 1c9c0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1c96a:	7a23      	ldrb	r3, [r4, #8]
   1c96c:	3301      	adds	r3, #1
   1c96e:	b2db      	uxtb	r3, r3
   1c970:	7223      	strb	r3, [r4, #8]
   1c972:	bb2b      	cbnz	r3, 1c9c0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1c974:	79e3      	ldrb	r3, [r4, #7]
   1c976:	3301      	adds	r3, #1
   1c978:	b2db      	uxtb	r3, r3
   1c97a:	71e3      	strb	r3, [r4, #7]
   1c97c:	bb03      	cbnz	r3, 1c9c0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1c97e:	79a3      	ldrb	r3, [r4, #6]
   1c980:	3301      	adds	r3, #1
   1c982:	b2db      	uxtb	r3, r3
   1c984:	71a3      	strb	r3, [r4, #6]
   1c986:	b9db      	cbnz	r3, 1c9c0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1c988:	7963      	ldrb	r3, [r4, #5]
   1c98a:	3301      	adds	r3, #1
   1c98c:	b2db      	uxtb	r3, r3
   1c98e:	7163      	strb	r3, [r4, #5]
   1c990:	b9b3      	cbnz	r3, 1c9c0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1c992:	7923      	ldrb	r3, [r4, #4]
   1c994:	3301      	adds	r3, #1
   1c996:	b2db      	uxtb	r3, r3
   1c998:	7123      	strb	r3, [r4, #4]
   1c99a:	b98b      	cbnz	r3, 1c9c0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1c99c:	78e3      	ldrb	r3, [r4, #3]
   1c99e:	3301      	adds	r3, #1
   1c9a0:	b2db      	uxtb	r3, r3
   1c9a2:	70e3      	strb	r3, [r4, #3]
   1c9a4:	b963      	cbnz	r3, 1c9c0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1c9a6:	78a3      	ldrb	r3, [r4, #2]
   1c9a8:	3301      	adds	r3, #1
   1c9aa:	b2db      	uxtb	r3, r3
   1c9ac:	70a3      	strb	r3, [r4, #2]
   1c9ae:	b93b      	cbnz	r3, 1c9c0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1c9b0:	7863      	ldrb	r3, [r4, #1]
   1c9b2:	3301      	adds	r3, #1
   1c9b4:	b2db      	uxtb	r3, r3
   1c9b6:	7063      	strb	r3, [r4, #1]
   1c9b8:	b913      	cbnz	r3, 1c9c0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1c9ba:	7823      	ldrb	r3, [r4, #0]
   1c9bc:	3301      	adds	r3, #1
   1c9be:	7023      	strb	r3, [r4, #0]
   1c9c0:	463b      	mov	r3, r7
   1c9c2:	4622      	mov	r2, r4
   1c9c4:	2101      	movs	r1, #1
   1c9c6:	4640      	mov	r0, r8
   1c9c8:	f000 fee0 	bl	1d78c <cc_mbedtls_aes_crypt_ecb>
   1c9cc:	4683      	mov	fp, r0
   1c9ce:	2800      	cmp	r0, #0
   1c9d0:	d093      	beq.n	1c8fa <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   1c9d2:	f8da 3000 	ldr.w	r3, [sl]
   1c9d6:	4648      	mov	r0, r9
   1c9d8:	4798      	blx	r3
   1c9da:	2120      	movs	r1, #32
   1c9dc:	4603      	mov	r3, r0
   1c9de:	a804      	add	r0, sp, #16
   1c9e0:	2b00      	cmp	r3, #0
   1c9e2:	bf18      	it	ne
   1c9e4:	469b      	movne	fp, r3
   1c9e6:	f7ff fc9d 	bl	1c324 <mbedtls_platform_zeroize>
   1c9ea:	4638      	mov	r0, r7
   1c9ec:	2110      	movs	r1, #16
   1c9ee:	f7ff fc99 	bl	1c324 <mbedtls_platform_zeroize>
   1c9f2:	4658      	mov	r0, fp
   1c9f4:	b00d      	add	sp, #52	; 0x34
   1c9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c9fa:	4642      	mov	r2, r8
   1c9fc:	4639      	mov	r1, r7
   1c9fe:	2300      	movs	r3, #0
   1ca00:	4620      	mov	r0, r4
   1ca02:	f7ff fe7f 	bl	1c704 <mbedtls_ctr_drbg_reseed_internal>
   1ca06:	f8df a068 	ldr.w	sl, [pc, #104]	; 1ca70 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1ca0a:	2800      	cmp	r0, #0
   1ca0c:	f43f af6d 	beq.w	1c8ea <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   1ca10:	f8da 3000 	ldr.w	r3, [sl]
   1ca14:	4648      	mov	r0, r9
   1ca16:	4798      	blx	r3
   1ca18:	4683      	mov	fp, r0
   1ca1a:	2800      	cmp	r0, #0
   1ca1c:	f43f af65 	beq.w	1c8ea <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   1ca20:	e7e7      	b.n	1c9f2 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1ca22:	a904      	add	r1, sp, #16
   1ca24:	4620      	mov	r0, r4
   1ca26:	f7ff fdc7 	bl	1c5b8 <ctr_drbg_update_internal>
   1ca2a:	4683      	mov	fp, r0
   1ca2c:	2800      	cmp	r0, #0
   1ca2e:	d1d0      	bne.n	1c9d2 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1ca30:	6923      	ldr	r3, [r4, #16]
   1ca32:	3301      	adds	r3, #1
   1ca34:	6123      	str	r3, [r4, #16]
   1ca36:	e7cc      	b.n	1c9d2 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1ca38:	4642      	mov	r2, r8
   1ca3a:	4639      	mov	r1, r7
   1ca3c:	a804      	add	r0, sp, #16
   1ca3e:	f7ff fc7b 	bl	1c338 <block_cipher_df>
   1ca42:	4683      	mov	fp, r0
   1ca44:	b118      	cbz	r0, 1ca4e <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   1ca46:	f8df a028 	ldr.w	sl, [pc, #40]	; 1ca70 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1ca4a:	466f      	mov	r7, sp
   1ca4c:	e7c1      	b.n	1c9d2 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1ca4e:	a904      	add	r1, sp, #16
   1ca50:	4620      	mov	r0, r4
   1ca52:	f7ff fdb1 	bl	1c5b8 <ctr_drbg_update_internal>
   1ca56:	4683      	mov	fp, r0
   1ca58:	2800      	cmp	r0, #0
   1ca5a:	f43f af44 	beq.w	1c8e6 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1ca5e:	e7f2      	b.n	1ca46 <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   1ca60:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   1ca64:	e7c5      	b.n	1c9f2 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1ca66:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   1ca6a:	e7c2      	b.n	1c9f2 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1ca6c:	200005c4 	.word	0x200005c4
   1ca70:	200005c8 	.word	0x200005c8

0001ca74 <entropy_update>:
   1ca74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ca78:	2b20      	cmp	r3, #32
   1ca7a:	b08b      	sub	sp, #44	; 0x2c
   1ca7c:	461d      	mov	r5, r3
   1ca7e:	4606      	mov	r6, r0
   1ca80:	4689      	mov	r9, r1
   1ca82:	4690      	mov	r8, r2
   1ca84:	d826      	bhi.n	1cad4 <entropy_update+0x60>
   1ca86:	b2db      	uxtb	r3, r3
   1ca88:	af02      	add	r7, sp, #8
   1ca8a:	6831      	ldr	r1, [r6, #0]
   1ca8c:	f88d 9004 	strb.w	r9, [sp, #4]
   1ca90:	f88d 3005 	strb.w	r3, [sp, #5]
   1ca94:	f106 0904 	add.w	r9, r6, #4
   1ca98:	b921      	cbnz	r1, 1caa4 <entropy_update+0x30>
   1ca9a:	4648      	mov	r0, r9
   1ca9c:	f000 feba 	bl	1d814 <cc_mbedtls_sha256_starts>
   1caa0:	4604      	mov	r4, r0
   1caa2:	b940      	cbnz	r0, 1cab6 <entropy_update+0x42>
   1caa4:	2301      	movs	r3, #1
   1caa6:	6033      	str	r3, [r6, #0]
   1caa8:	2202      	movs	r2, #2
   1caaa:	a901      	add	r1, sp, #4
   1caac:	4648      	mov	r0, r9
   1caae:	f000 fec5 	bl	1d83c <cc_mbedtls_sha256_update>
   1cab2:	4604      	mov	r4, r0
   1cab4:	b138      	cbz	r0, 1cac6 <entropy_update+0x52>
   1cab6:	4638      	mov	r0, r7
   1cab8:	2120      	movs	r1, #32
   1caba:	f7ff fc33 	bl	1c324 <mbedtls_platform_zeroize>
   1cabe:	4620      	mov	r0, r4
   1cac0:	b00b      	add	sp, #44	; 0x2c
   1cac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cac6:	462a      	mov	r2, r5
   1cac8:	4641      	mov	r1, r8
   1caca:	4648      	mov	r0, r9
   1cacc:	f000 feb6 	bl	1d83c <cc_mbedtls_sha256_update>
   1cad0:	4604      	mov	r4, r0
   1cad2:	e7f0      	b.n	1cab6 <entropy_update+0x42>
   1cad4:	af02      	add	r7, sp, #8
   1cad6:	4619      	mov	r1, r3
   1cad8:	4610      	mov	r0, r2
   1cada:	2300      	movs	r3, #0
   1cadc:	463a      	mov	r2, r7
   1cade:	f000 ffad 	bl	1da3c <cc_mbedtls_sha256>
   1cae2:	4604      	mov	r4, r0
   1cae4:	2800      	cmp	r0, #0
   1cae6:	d1e6      	bne.n	1cab6 <entropy_update+0x42>
   1cae8:	2320      	movs	r3, #32
   1caea:	461d      	mov	r5, r3
   1caec:	46b8      	mov	r8, r7
   1caee:	e7cc      	b.n	1ca8a <entropy_update+0x16>

0001caf0 <entropy_gather_internal.part.0>:
   1caf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1caf2:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1caf6:	b0a7      	sub	sp, #156	; 0x9c
   1caf8:	2b00      	cmp	r3, #0
   1cafa:	bfd8      	it	le
   1cafc:	ae02      	addle	r6, sp, #8
   1cafe:	dd2c      	ble.n	1cb5a <entropy_gather_internal.part.0+0x6a>
   1cb00:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   1cb04:	4605      	mov	r5, r0
   1cb06:	2300      	movs	r3, #0
   1cb08:	ae02      	add	r6, sp, #8
   1cb0a:	9301      	str	r3, [sp, #4]
   1cb0c:	f1a4 0701 	sub.w	r7, r4, #1
   1cb10:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   1cb14:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   1cb18:	4631      	mov	r1, r6
   1cb1a:	ab01      	add	r3, sp, #4
   1cb1c:	2290      	movs	r2, #144	; 0x90
   1cb1e:	47a0      	blx	r4
   1cb20:	fab7 f787 	clz	r7, r7
   1cb24:	097f      	lsrs	r7, r7, #5
   1cb26:	4604      	mov	r4, r0
   1cb28:	b910      	cbnz	r0, 1cb30 <entropy_gather_internal.part.0+0x40>
   1cb2a:	9b01      	ldr	r3, [sp, #4]
   1cb2c:	b93b      	cbnz	r3, 1cb3e <entropy_gather_internal.part.0+0x4e>
   1cb2e:	b1a7      	cbz	r7, 1cb5a <entropy_gather_internal.part.0+0x6a>
   1cb30:	4630      	mov	r0, r6
   1cb32:	2190      	movs	r1, #144	; 0x90
   1cb34:	f7ff fbf6 	bl	1c324 <mbedtls_platform_zeroize>
   1cb38:	4620      	mov	r0, r4
   1cb3a:	b027      	add	sp, #156	; 0x9c
   1cb3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cb3e:	4601      	mov	r1, r0
   1cb40:	4632      	mov	r2, r6
   1cb42:	4628      	mov	r0, r5
   1cb44:	f7ff ff96 	bl	1ca74 <entropy_update>
   1cb48:	b950      	cbnz	r0, 1cb60 <entropy_gather_internal.part.0+0x70>
   1cb4a:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   1cb4e:	9a01      	ldr	r2, [sp, #4]
   1cb50:	4413      	add	r3, r2
   1cb52:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   1cb56:	2f00      	cmp	r7, #0
   1cb58:	d1ea      	bne.n	1cb30 <entropy_gather_internal.part.0+0x40>
   1cb5a:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1cb5e:	e7e7      	b.n	1cb30 <entropy_gather_internal.part.0+0x40>
   1cb60:	4604      	mov	r4, r0
   1cb62:	4620      	mov	r0, r4
   1cb64:	b027      	add	sp, #156	; 0x9c
   1cb66:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001cb68 <cc_mbedtls_entropy_init>:
   1cb68:	b570      	push	{r4, r5, r6, lr}
   1cb6a:	2500      	movs	r5, #0
   1cb6c:	4604      	mov	r4, r0
   1cb6e:	4629      	mov	r1, r5
   1cb70:	2214      	movs	r2, #20
   1cb72:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   1cb76:	30f8      	adds	r0, #248	; 0xf8
   1cb78:	f002 fe4b 	bl	1f812 <memset>
   1cb7c:	4b15      	ldr	r3, [pc, #84]	; (1cbd4 <cc_mbedtls_entropy_init+0x6c>)
   1cb7e:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   1cb82:	681b      	ldr	r3, [r3, #0]
   1cb84:	4630      	mov	r0, r6
   1cb86:	4798      	blx	r3
   1cb88:	4620      	mov	r0, r4
   1cb8a:	f840 5b04 	str.w	r5, [r0], #4
   1cb8e:	f000 fe27 	bl	1d7e0 <cc_mbedtls_sha256_init>
   1cb92:	4b11      	ldr	r3, [pc, #68]	; (1cbd8 <cc_mbedtls_entropy_init+0x70>)
   1cb94:	4630      	mov	r0, r6
   1cb96:	681b      	ldr	r3, [r3, #0]
   1cb98:	4798      	blx	r3
   1cb9a:	b9c8      	cbnz	r0, 1cbd0 <cc_mbedtls_entropy_init+0x68>
   1cb9c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1cba0:	42ab      	cmp	r3, r5
   1cba2:	dc0f      	bgt.n	1cbc4 <cc_mbedtls_entropy_init+0x5c>
   1cba4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1cba8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1cbac:	490b      	ldr	r1, [pc, #44]	; (1cbdc <cc_mbedtls_entropy_init+0x74>)
   1cbae:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   1cbb2:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
   1cbb6:	3301      	adds	r3, #1
   1cbb8:	2020      	movs	r0, #32
   1cbba:	2101      	movs	r1, #1
   1cbbc:	e9c2 0141 	strd	r0, r1, [r2, #260]	; 0x104
   1cbc0:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   1cbc4:	4b06      	ldr	r3, [pc, #24]	; (1cbe0 <cc_mbedtls_entropy_init+0x78>)
   1cbc6:	4630      	mov	r0, r6
   1cbc8:	681b      	ldr	r3, [r3, #0]
   1cbca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1cbce:	4718      	bx	r3
   1cbd0:	bd70      	pop	{r4, r5, r6, pc}
   1cbd2:	bf00      	nop
   1cbd4:	200005c0 	.word	0x200005c0
   1cbd8:	200005c4 	.word	0x200005c4
   1cbdc:	0001d631 	.word	0x0001d631
   1cbe0:	200005c8 	.word	0x200005c8

0001cbe4 <cc_mbedtls_entropy_func>:
   1cbe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cbe8:	2a20      	cmp	r2, #32
   1cbea:	b088      	sub	sp, #32
   1cbec:	d876      	bhi.n	1ccdc <cc_mbedtls_entropy_func+0xf8>
   1cbee:	4b3d      	ldr	r3, [pc, #244]	; (1cce4 <cc_mbedtls_entropy_func+0x100>)
   1cbf0:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   1cbf4:	681b      	ldr	r3, [r3, #0]
   1cbf6:	4604      	mov	r4, r0
   1cbf8:	4648      	mov	r0, r9
   1cbfa:	4617      	mov	r7, r2
   1cbfc:	4688      	mov	r8, r1
   1cbfe:	4798      	blx	r3
   1cc00:	4605      	mov	r5, r0
   1cc02:	bba0      	cbnz	r0, 1cc6e <cc_mbedtls_entropy_func+0x8a>
   1cc04:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1cc08:	f240 1601 	movw	r6, #257	; 0x101
   1cc0c:	e001      	b.n	1cc12 <cc_mbedtls_entropy_func+0x2e>
   1cc0e:	3e01      	subs	r6, #1
   1cc10:	d060      	beq.n	1ccd4 <cc_mbedtls_entropy_func+0xf0>
   1cc12:	4620      	mov	r0, r4
   1cc14:	b37b      	cbz	r3, 1cc76 <cc_mbedtls_entropy_func+0x92>
   1cc16:	f7ff ff6b 	bl	1caf0 <entropy_gather_internal.part.0>
   1cc1a:	4605      	mov	r5, r0
   1cc1c:	bb68      	cbnz	r0, 1cc7a <cc_mbedtls_entropy_func+0x96>
   1cc1e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1cc22:	2b00      	cmp	r3, #0
   1cc24:	ddf3      	ble.n	1cc0e <cc_mbedtls_entropy_func+0x2a>
   1cc26:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   1cc2a:	4290      	cmp	r0, r2
   1cc2c:	d3ef      	bcc.n	1cc0e <cc_mbedtls_entropy_func+0x2a>
   1cc2e:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1cc32:	2a01      	cmp	r2, #1
   1cc34:	d1eb      	bne.n	1cc0e <cc_mbedtls_entropy_func+0x2a>
   1cc36:	281f      	cmp	r0, #31
   1cc38:	d9e9      	bls.n	1cc0e <cc_mbedtls_entropy_func+0x2a>
   1cc3a:	466e      	mov	r6, sp
   1cc3c:	4629      	mov	r1, r5
   1cc3e:	2220      	movs	r2, #32
   1cc40:	4630      	mov	r0, r6
   1cc42:	f104 0a04 	add.w	sl, r4, #4
   1cc46:	f002 fde4 	bl	1f812 <memset>
   1cc4a:	4631      	mov	r1, r6
   1cc4c:	4650      	mov	r0, sl
   1cc4e:	f000 fe1f 	bl	1d890 <cc_mbedtls_sha256_finish>
   1cc52:	4605      	mov	r5, r0
   1cc54:	b198      	cbz	r0, 1cc7e <cc_mbedtls_entropy_func+0x9a>
   1cc56:	4630      	mov	r0, r6
   1cc58:	2120      	movs	r1, #32
   1cc5a:	f7ff fb63 	bl	1c324 <mbedtls_platform_zeroize>
   1cc5e:	4b22      	ldr	r3, [pc, #136]	; (1cce8 <cc_mbedtls_entropy_func+0x104>)
   1cc60:	4648      	mov	r0, r9
   1cc62:	681b      	ldr	r3, [r3, #0]
   1cc64:	4798      	blx	r3
   1cc66:	2800      	cmp	r0, #0
   1cc68:	bf18      	it	ne
   1cc6a:	f06f 051d 	mvnne.w	r5, #29
   1cc6e:	4628      	mov	r0, r5
   1cc70:	b008      	add	sp, #32
   1cc72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cc76:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   1cc7a:	466e      	mov	r6, sp
   1cc7c:	e7eb      	b.n	1cc56 <cc_mbedtls_entropy_func+0x72>
   1cc7e:	4650      	mov	r0, sl
   1cc80:	f000 fdc2 	bl	1d808 <cc_mbedtls_sha256_free>
   1cc84:	4650      	mov	r0, sl
   1cc86:	f000 fdab 	bl	1d7e0 <cc_mbedtls_sha256_init>
   1cc8a:	4629      	mov	r1, r5
   1cc8c:	4650      	mov	r0, sl
   1cc8e:	f000 fdc1 	bl	1d814 <cc_mbedtls_sha256_starts>
   1cc92:	4605      	mov	r5, r0
   1cc94:	2800      	cmp	r0, #0
   1cc96:	d1de      	bne.n	1cc56 <cc_mbedtls_entropy_func+0x72>
   1cc98:	4650      	mov	r0, sl
   1cc9a:	2220      	movs	r2, #32
   1cc9c:	4631      	mov	r1, r6
   1cc9e:	f000 fdcd 	bl	1d83c <cc_mbedtls_sha256_update>
   1cca2:	4605      	mov	r5, r0
   1cca4:	2800      	cmp	r0, #0
   1cca6:	d1d6      	bne.n	1cc56 <cc_mbedtls_entropy_func+0x72>
   1cca8:	4603      	mov	r3, r0
   1ccaa:	4632      	mov	r2, r6
   1ccac:	2120      	movs	r1, #32
   1ccae:	4630      	mov	r0, r6
   1ccb0:	f000 fec4 	bl	1da3c <cc_mbedtls_sha256>
   1ccb4:	4605      	mov	r5, r0
   1ccb6:	2800      	cmp	r0, #0
   1ccb8:	d1cd      	bne.n	1cc56 <cc_mbedtls_entropy_func+0x72>
   1ccba:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1ccbe:	2b00      	cmp	r3, #0
   1ccc0:	bfc4      	itt	gt
   1ccc2:	2300      	movgt	r3, #0
   1ccc4:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   1ccc8:	463a      	mov	r2, r7
   1ccca:	4640      	mov	r0, r8
   1cccc:	4631      	mov	r1, r6
   1ccce:	f002 fd95 	bl	1f7fc <memcpy>
   1ccd2:	e7c0      	b.n	1cc56 <cc_mbedtls_entropy_func+0x72>
   1ccd4:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1ccd8:	466e      	mov	r6, sp
   1ccda:	e7bc      	b.n	1cc56 <cc_mbedtls_entropy_func+0x72>
   1ccdc:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1cce0:	e7c5      	b.n	1cc6e <cc_mbedtls_entropy_func+0x8a>
   1cce2:	bf00      	nop
   1cce4:	200005c4 	.word	0x200005c4
   1cce8:	200005c8 	.word	0x200005c8

0001ccec <RndStartupTest.constprop.0>:
   1ccec:	b530      	push	{r4, r5, lr}
   1ccee:	b0c3      	sub	sp, #268	; 0x10c
   1ccf0:	22dc      	movs	r2, #220	; 0xdc
   1ccf2:	2100      	movs	r1, #0
   1ccf4:	a80b      	add	r0, sp, #44	; 0x2c
   1ccf6:	f002 fd8c 	bl	1f812 <memset>
   1ccfa:	2228      	movs	r2, #40	; 0x28
   1ccfc:	2100      	movs	r1, #0
   1ccfe:	a801      	add	r0, sp, #4
   1cd00:	f002 fd87 	bl	1f812 <memset>
   1cd04:	a801      	add	r0, sp, #4
   1cd06:	f000 fec1 	bl	1da8c <RNG_PLAT_SetUserRngParameters>
   1cd0a:	4604      	mov	r4, r0
   1cd0c:	b110      	cbz	r0, 1cd14 <RndStartupTest.constprop.0+0x28>
   1cd0e:	4620      	mov	r0, r4
   1cd10:	b043      	add	sp, #268	; 0x10c
   1cd12:	bd30      	pop	{r4, r5, pc}
   1cd14:	4d18      	ldr	r5, [pc, #96]	; (1cd78 <RndStartupTest.constprop.0+0x8c>)
   1cd16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cd1a:	6828      	ldr	r0, [r5, #0]
   1cd1c:	f000 f93c 	bl	1cf98 <CC_PalMutexLock>
   1cd20:	4604      	mov	r4, r0
   1cd22:	b9c0      	cbnz	r0, 1cd56 <RndStartupTest.constprop.0+0x6a>
   1cd24:	2000      	movs	r0, #0
   1cd26:	f000 f967 	bl	1cff8 <CC_PalPowerSaveModeSelect>
   1cd2a:	bb00      	cbnz	r0, 1cd6e <RndStartupTest.constprop.0+0x82>
   1cd2c:	4a13      	ldr	r2, [pc, #76]	; (1cd7c <RndStartupTest.constprop.0+0x90>)
   1cd2e:	a901      	add	r1, sp, #4
   1cd30:	a80b      	add	r0, sp, #44	; 0x2c
   1cd32:	f000 fc6f 	bl	1d614 <LLF_RND_RunTrngStartupTest>
   1cd36:	4604      	mov	r4, r0
   1cd38:	2001      	movs	r0, #1
   1cd3a:	f000 f95d 	bl	1cff8 <CC_PalPowerSaveModeSelect>
   1cd3e:	b990      	cbnz	r0, 1cd66 <RndStartupTest.constprop.0+0x7a>
   1cd40:	6828      	ldr	r0, [r5, #0]
   1cd42:	f000 f931 	bl	1cfa8 <CC_PalMutexUnlock>
   1cd46:	2800      	cmp	r0, #0
   1cd48:	d0e1      	beq.n	1cd0e <RndStartupTest.constprop.0+0x22>
   1cd4a:	480d      	ldr	r0, [pc, #52]	; (1cd80 <RndStartupTest.constprop.0+0x94>)
   1cd4c:	f7ff f9d8 	bl	1c100 <CC_PalAbort>
   1cd50:	4620      	mov	r0, r4
   1cd52:	b043      	add	sp, #268	; 0x10c
   1cd54:	bd30      	pop	{r4, r5, pc}
   1cd56:	480b      	ldr	r0, [pc, #44]	; (1cd84 <RndStartupTest.constprop.0+0x98>)
   1cd58:	f7ff f9d2 	bl	1c100 <CC_PalAbort>
   1cd5c:	2c01      	cmp	r4, #1
   1cd5e:	bf08      	it	eq
   1cd60:	2405      	moveq	r4, #5
   1cd62:	d0ed      	beq.n	1cd40 <RndStartupTest.constprop.0+0x54>
   1cd64:	e7de      	b.n	1cd24 <RndStartupTest.constprop.0+0x38>
   1cd66:	4808      	ldr	r0, [pc, #32]	; (1cd88 <RndStartupTest.constprop.0+0x9c>)
   1cd68:	f7ff f9ca 	bl	1c100 <CC_PalAbort>
   1cd6c:	e7e8      	b.n	1cd40 <RndStartupTest.constprop.0+0x54>
   1cd6e:	4807      	ldr	r0, [pc, #28]	; (1cd8c <RndStartupTest.constprop.0+0xa0>)
   1cd70:	f7ff f9c6 	bl	1c100 <CC_PalAbort>
   1cd74:	e7da      	b.n	1cd2c <RndStartupTest.constprop.0+0x40>
   1cd76:	bf00      	nop
   1cd78:	200005bc 	.word	0x200005bc
   1cd7c:	200024c0 	.word	0x200024c0
   1cd80:	00021248 	.word	0x00021248
   1cd84:	000211f0 	.word	0x000211f0
   1cd88:	00021228 	.word	0x00021228
   1cd8c:	00021208 	.word	0x00021208

0001cd90 <CC_LibInit>:
   1cd90:	b510      	push	{r4, lr}
   1cd92:	b082      	sub	sp, #8
   1cd94:	f000 f854 	bl	1ce40 <CC_HalInit>
   1cd98:	b128      	cbz	r0, 1cda6 <CC_LibInit+0x16>
   1cd9a:	f000 f8a3 	bl	1cee4 <CC_PalTerminate>
   1cd9e:	2403      	movs	r4, #3
   1cda0:	4620      	mov	r0, r4
   1cda2:	b002      	add	sp, #8
   1cda4:	bd10      	pop	{r4, pc}
   1cda6:	f000 f86f 	bl	1ce88 <CC_PalInit>
   1cdaa:	b9d0      	cbnz	r0, 1cde2 <CC_LibInit+0x52>
   1cdac:	f000 f924 	bl	1cff8 <CC_PalPowerSaveModeSelect>
   1cdb0:	b9d8      	cbnz	r0, 1cdea <CC_LibInit+0x5a>
   1cdb2:	4b1e      	ldr	r3, [pc, #120]	; (1ce2c <CC_LibInit+0x9c>)
   1cdb4:	681b      	ldr	r3, [r3, #0]
   1cdb6:	0e1b      	lsrs	r3, r3, #24
   1cdb8:	2bf0      	cmp	r3, #240	; 0xf0
   1cdba:	d10a      	bne.n	1cdd2 <CC_LibInit+0x42>
   1cdbc:	4a1c      	ldr	r2, [pc, #112]	; (1ce30 <CC_LibInit+0xa0>)
   1cdbe:	4b1d      	ldr	r3, [pc, #116]	; (1ce34 <CC_LibInit+0xa4>)
   1cdc0:	6812      	ldr	r2, [r2, #0]
   1cdc2:	429a      	cmp	r2, r3
   1cdc4:	d029      	beq.n	1ce1a <CC_LibInit+0x8a>
   1cdc6:	f000 f83d 	bl	1ce44 <CC_HalTerminate>
   1cdca:	2407      	movs	r4, #7
   1cdcc:	f000 f88a 	bl	1cee4 <CC_PalTerminate>
   1cdd0:	e7e6      	b.n	1cda0 <CC_LibInit+0x10>
   1cdd2:	f000 f837 	bl	1ce44 <CC_HalTerminate>
   1cdd6:	f000 f885 	bl	1cee4 <CC_PalTerminate>
   1cdda:	2406      	movs	r4, #6
   1cddc:	4620      	mov	r0, r4
   1cdde:	b002      	add	sp, #8
   1cde0:	bd10      	pop	{r4, pc}
   1cde2:	2404      	movs	r4, #4
   1cde4:	4620      	mov	r0, r4
   1cde6:	b002      	add	sp, #8
   1cde8:	bd10      	pop	{r4, pc}
   1cdea:	f000 f82b 	bl	1ce44 <CC_HalTerminate>
   1cdee:	f000 f879 	bl	1cee4 <CC_PalTerminate>
   1cdf2:	f7ff ff7b 	bl	1ccec <RndStartupTest.constprop.0>
   1cdf6:	4604      	mov	r4, r0
   1cdf8:	b958      	cbnz	r0, 1ce12 <CC_LibInit+0x82>
   1cdfa:	4602      	mov	r2, r0
   1cdfc:	4601      	mov	r1, r0
   1cdfe:	f7ff f9a7 	bl	1c150 <nrf_cc3xx_platform_ctr_drbg_init>
   1ce02:	b930      	cbnz	r0, 1ce12 <CC_LibInit+0x82>
   1ce04:	490c      	ldr	r1, [pc, #48]	; (1ce38 <CC_LibInit+0xa8>)
   1ce06:	ab01      	add	r3, sp, #4
   1ce08:	2268      	movs	r2, #104	; 0x68
   1ce0a:	f7ff f9d5 	bl	1c1b8 <nrf_cc3xx_platform_ctr_drbg_get>
   1ce0e:	2800      	cmp	r0, #0
   1ce10:	d0c6      	beq.n	1cda0 <CC_LibInit+0x10>
   1ce12:	2405      	movs	r4, #5
   1ce14:	4620      	mov	r0, r4
   1ce16:	b002      	add	sp, #8
   1ce18:	bd10      	pop	{r4, pc}
   1ce1a:	2001      	movs	r0, #1
   1ce1c:	f000 f8ec 	bl	1cff8 <CC_PalPowerSaveModeSelect>
   1ce20:	2800      	cmp	r0, #0
   1ce22:	d1e2      	bne.n	1cdea <CC_LibInit+0x5a>
   1ce24:	4b05      	ldr	r3, [pc, #20]	; (1ce3c <CC_LibInit+0xac>)
   1ce26:	6018      	str	r0, [r3, #0]
   1ce28:	e7e3      	b.n	1cdf2 <CC_LibInit+0x62>
   1ce2a:	bf00      	nop
   1ce2c:	5002b928 	.word	0x5002b928
   1ce30:	5002ba24 	.word	0x5002ba24
   1ce34:	20e00000 	.word	0x20e00000
   1ce38:	20002458 	.word	0x20002458
   1ce3c:	5002ba0c 	.word	0x5002ba0c

0001ce40 <CC_HalInit>:
   1ce40:	2000      	movs	r0, #0
   1ce42:	4770      	bx	lr

0001ce44 <CC_HalTerminate>:
   1ce44:	2000      	movs	r0, #0
   1ce46:	4770      	bx	lr

0001ce48 <CC_HalClearInterruptBit>:
   1ce48:	0543      	lsls	r3, r0, #21
   1ce4a:	d503      	bpl.n	1ce54 <CC_HalClearInterruptBit+0xc>
   1ce4c:	4b03      	ldr	r3, [pc, #12]	; (1ce5c <CC_HalClearInterruptBit+0x14>)
   1ce4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ce52:	601a      	str	r2, [r3, #0]
   1ce54:	4b02      	ldr	r3, [pc, #8]	; (1ce60 <CC_HalClearInterruptBit+0x18>)
   1ce56:	6018      	str	r0, [r3, #0]
   1ce58:	4770      	bx	lr
   1ce5a:	bf00      	nop
   1ce5c:	5002b108 	.word	0x5002b108
   1ce60:	5002ba08 	.word	0x5002ba08

0001ce64 <CC_HalMaskInterrupt>:
   1ce64:	4b01      	ldr	r3, [pc, #4]	; (1ce6c <CC_HalMaskInterrupt+0x8>)
   1ce66:	6018      	str	r0, [r3, #0]
   1ce68:	4770      	bx	lr
   1ce6a:	bf00      	nop
   1ce6c:	5002ba04 	.word	0x5002ba04

0001ce70 <CC_HalWaitInterrupt>:
   1ce70:	b108      	cbz	r0, 1ce76 <CC_HalWaitInterrupt+0x6>
   1ce72:	f000 b86f 	b.w	1cf54 <CC_PalWaitInterrupt>
   1ce76:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1ce7a:	4770      	bx	lr

0001ce7c <CC_HalWaitInterruptRND>:
   1ce7c:	b108      	cbz	r0, 1ce82 <CC_HalWaitInterruptRND+0x6>
   1ce7e:	f000 b84f 	b.w	1cf20 <CC_PalWaitInterruptRND>
   1ce82:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1ce86:	4770      	bx	lr

0001ce88 <CC_PalInit>:
   1ce88:	b510      	push	{r4, lr}
   1ce8a:	4811      	ldr	r0, [pc, #68]	; (1ced0 <CC_PalInit+0x48>)
   1ce8c:	f000 f870 	bl	1cf70 <CC_PalMutexCreate>
   1ce90:	b100      	cbz	r0, 1ce94 <CC_PalInit+0xc>
   1ce92:	bd10      	pop	{r4, pc}
   1ce94:	480f      	ldr	r0, [pc, #60]	; (1ced4 <CC_PalInit+0x4c>)
   1ce96:	f000 f86b 	bl	1cf70 <CC_PalMutexCreate>
   1ce9a:	2800      	cmp	r0, #0
   1ce9c:	d1f9      	bne.n	1ce92 <CC_PalInit+0xa>
   1ce9e:	4c0e      	ldr	r4, [pc, #56]	; (1ced8 <CC_PalInit+0x50>)
   1cea0:	4620      	mov	r0, r4
   1cea2:	f000 f865 	bl	1cf70 <CC_PalMutexCreate>
   1cea6:	2800      	cmp	r0, #0
   1cea8:	d1f3      	bne.n	1ce92 <CC_PalInit+0xa>
   1ceaa:	4b0c      	ldr	r3, [pc, #48]	; (1cedc <CC_PalInit+0x54>)
   1ceac:	480c      	ldr	r0, [pc, #48]	; (1cee0 <CC_PalInit+0x58>)
   1ceae:	601c      	str	r4, [r3, #0]
   1ceb0:	f000 f85e 	bl	1cf70 <CC_PalMutexCreate>
   1ceb4:	4601      	mov	r1, r0
   1ceb6:	2800      	cmp	r0, #0
   1ceb8:	d1eb      	bne.n	1ce92 <CC_PalInit+0xa>
   1ceba:	f000 f82d 	bl	1cf18 <CC_PalDmaInit>
   1cebe:	4604      	mov	r4, r0
   1cec0:	b108      	cbz	r0, 1cec6 <CC_PalInit+0x3e>
   1cec2:	4620      	mov	r0, r4
   1cec4:	bd10      	pop	{r4, pc}
   1cec6:	f000 f879 	bl	1cfbc <CC_PalPowerSaveModeInit>
   1ceca:	4620      	mov	r0, r4
   1cecc:	e7fa      	b.n	1cec4 <CC_PalInit+0x3c>
   1cece:	bf00      	nop
   1ced0:	200005b8 	.word	0x200005b8
   1ced4:	200005ac 	.word	0x200005ac
   1ced8:	200005b4 	.word	0x200005b4
   1cedc:	200005bc 	.word	0x200005bc
   1cee0:	200005b0 	.word	0x200005b0

0001cee4 <CC_PalTerminate>:
   1cee4:	b508      	push	{r3, lr}
   1cee6:	4808      	ldr	r0, [pc, #32]	; (1cf08 <CC_PalTerminate+0x24>)
   1cee8:	f000 f84c 	bl	1cf84 <CC_PalMutexDestroy>
   1ceec:	4807      	ldr	r0, [pc, #28]	; (1cf0c <CC_PalTerminate+0x28>)
   1ceee:	f000 f849 	bl	1cf84 <CC_PalMutexDestroy>
   1cef2:	4807      	ldr	r0, [pc, #28]	; (1cf10 <CC_PalTerminate+0x2c>)
   1cef4:	f000 f846 	bl	1cf84 <CC_PalMutexDestroy>
   1cef8:	4806      	ldr	r0, [pc, #24]	; (1cf14 <CC_PalTerminate+0x30>)
   1cefa:	f000 f843 	bl	1cf84 <CC_PalMutexDestroy>
   1cefe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1cf02:	f000 b80b 	b.w	1cf1c <CC_PalDmaTerminate>
   1cf06:	bf00      	nop
   1cf08:	200005b8 	.word	0x200005b8
   1cf0c:	200005ac 	.word	0x200005ac
   1cf10:	200005b4 	.word	0x200005b4
   1cf14:	200005b0 	.word	0x200005b0

0001cf18 <CC_PalDmaInit>:
   1cf18:	2000      	movs	r0, #0
   1cf1a:	4770      	bx	lr

0001cf1c <CC_PalDmaTerminate>:
   1cf1c:	4770      	bx	lr
   1cf1e:	bf00      	nop

0001cf20 <CC_PalWaitInterruptRND>:
   1cf20:	b410      	push	{r4}
   1cf22:	4c08      	ldr	r4, [pc, #32]	; (1cf44 <CC_PalWaitInterruptRND+0x24>)
   1cf24:	4602      	mov	r2, r0
   1cf26:	6823      	ldr	r3, [r4, #0]
   1cf28:	4213      	tst	r3, r2
   1cf2a:	d0fc      	beq.n	1cf26 <CC_PalWaitInterruptRND+0x6>
   1cf2c:	b121      	cbz	r1, 1cf38 <CC_PalWaitInterruptRND+0x18>
   1cf2e:	4b06      	ldr	r3, [pc, #24]	; (1cf48 <CC_PalWaitInterruptRND+0x28>)
   1cf30:	4806      	ldr	r0, [pc, #24]	; (1cf4c <CC_PalWaitInterruptRND+0x2c>)
   1cf32:	681b      	ldr	r3, [r3, #0]
   1cf34:	600b      	str	r3, [r1, #0]
   1cf36:	6003      	str	r3, [r0, #0]
   1cf38:	4b05      	ldr	r3, [pc, #20]	; (1cf50 <CC_PalWaitInterruptRND+0x30>)
   1cf3a:	601a      	str	r2, [r3, #0]
   1cf3c:	2000      	movs	r0, #0
   1cf3e:	bc10      	pop	{r4}
   1cf40:	4770      	bx	lr
   1cf42:	bf00      	nop
   1cf44:	5002ba00 	.word	0x5002ba00
   1cf48:	5002b104 	.word	0x5002b104
   1cf4c:	5002b108 	.word	0x5002b108
   1cf50:	5002ba08 	.word	0x5002ba08

0001cf54 <CC_PalWaitInterrupt>:
   1cf54:	4904      	ldr	r1, [pc, #16]	; (1cf68 <CC_PalWaitInterrupt+0x14>)
   1cf56:	4602      	mov	r2, r0
   1cf58:	680b      	ldr	r3, [r1, #0]
   1cf5a:	421a      	tst	r2, r3
   1cf5c:	d0fc      	beq.n	1cf58 <CC_PalWaitInterrupt+0x4>
   1cf5e:	4b03      	ldr	r3, [pc, #12]	; (1cf6c <CC_PalWaitInterrupt+0x18>)
   1cf60:	2000      	movs	r0, #0
   1cf62:	601a      	str	r2, [r3, #0]
   1cf64:	4770      	bx	lr
   1cf66:	bf00      	nop
   1cf68:	5002ba00 	.word	0x5002ba00
   1cf6c:	5002ba08 	.word	0x5002ba08

0001cf70 <CC_PalMutexCreate>:
   1cf70:	b508      	push	{r3, lr}
   1cf72:	4b03      	ldr	r3, [pc, #12]	; (1cf80 <CC_PalMutexCreate+0x10>)
   1cf74:	6802      	ldr	r2, [r0, #0]
   1cf76:	681b      	ldr	r3, [r3, #0]
   1cf78:	6810      	ldr	r0, [r2, #0]
   1cf7a:	4798      	blx	r3
   1cf7c:	2000      	movs	r0, #0
   1cf7e:	bd08      	pop	{r3, pc}
   1cf80:	2000056c 	.word	0x2000056c

0001cf84 <CC_PalMutexDestroy>:
   1cf84:	b508      	push	{r3, lr}
   1cf86:	4b03      	ldr	r3, [pc, #12]	; (1cf94 <CC_PalMutexDestroy+0x10>)
   1cf88:	6802      	ldr	r2, [r0, #0]
   1cf8a:	685b      	ldr	r3, [r3, #4]
   1cf8c:	6810      	ldr	r0, [r2, #0]
   1cf8e:	4798      	blx	r3
   1cf90:	2000      	movs	r0, #0
   1cf92:	bd08      	pop	{r3, pc}
   1cf94:	2000056c 	.word	0x2000056c

0001cf98 <CC_PalMutexLock>:
   1cf98:	4b02      	ldr	r3, [pc, #8]	; (1cfa4 <CC_PalMutexLock+0xc>)
   1cf9a:	6802      	ldr	r2, [r0, #0]
   1cf9c:	689b      	ldr	r3, [r3, #8]
   1cf9e:	6810      	ldr	r0, [r2, #0]
   1cfa0:	4718      	bx	r3
   1cfa2:	bf00      	nop
   1cfa4:	2000056c 	.word	0x2000056c

0001cfa8 <CC_PalMutexUnlock>:
   1cfa8:	b508      	push	{r3, lr}
   1cfaa:	4b03      	ldr	r3, [pc, #12]	; (1cfb8 <CC_PalMutexUnlock+0x10>)
   1cfac:	6802      	ldr	r2, [r0, #0]
   1cfae:	68db      	ldr	r3, [r3, #12]
   1cfb0:	6810      	ldr	r0, [r2, #0]
   1cfb2:	4798      	blx	r3
   1cfb4:	2000      	movs	r0, #0
   1cfb6:	bd08      	pop	{r3, pc}
   1cfb8:	2000056c 	.word	0x2000056c

0001cfbc <CC_PalPowerSaveModeInit>:
   1cfbc:	b570      	push	{r4, r5, r6, lr}
   1cfbe:	4c09      	ldr	r4, [pc, #36]	; (1cfe4 <CC_PalPowerSaveModeInit+0x28>)
   1cfc0:	4d09      	ldr	r5, [pc, #36]	; (1cfe8 <CC_PalPowerSaveModeInit+0x2c>)
   1cfc2:	6920      	ldr	r0, [r4, #16]
   1cfc4:	68ab      	ldr	r3, [r5, #8]
   1cfc6:	4798      	blx	r3
   1cfc8:	b118      	cbz	r0, 1cfd2 <CC_PalPowerSaveModeInit+0x16>
   1cfca:	4b08      	ldr	r3, [pc, #32]	; (1cfec <CC_PalPowerSaveModeInit+0x30>)
   1cfcc:	4808      	ldr	r0, [pc, #32]	; (1cff0 <CC_PalPowerSaveModeInit+0x34>)
   1cfce:	685b      	ldr	r3, [r3, #4]
   1cfd0:	4798      	blx	r3
   1cfd2:	4a08      	ldr	r2, [pc, #32]	; (1cff4 <CC_PalPowerSaveModeInit+0x38>)
   1cfd4:	68eb      	ldr	r3, [r5, #12]
   1cfd6:	6920      	ldr	r0, [r4, #16]
   1cfd8:	2100      	movs	r1, #0
   1cfda:	6011      	str	r1, [r2, #0]
   1cfdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1cfe0:	4718      	bx	r3
   1cfe2:	bf00      	nop
   1cfe4:	2000057c 	.word	0x2000057c
   1cfe8:	2000056c 	.word	0x2000056c
   1cfec:	2000055c 	.word	0x2000055c
   1cff0:	00021260 	.word	0x00021260
   1cff4:	200026e0 	.word	0x200026e0

0001cff8 <CC_PalPowerSaveModeSelect>:
   1cff8:	b570      	push	{r4, r5, r6, lr}
   1cffa:	4d1a      	ldr	r5, [pc, #104]	; (1d064 <CC_PalPowerSaveModeSelect+0x6c>)
   1cffc:	4e1a      	ldr	r6, [pc, #104]	; (1d068 <CC_PalPowerSaveModeSelect+0x70>)
   1cffe:	4604      	mov	r4, r0
   1d000:	68b2      	ldr	r2, [r6, #8]
   1d002:	6928      	ldr	r0, [r5, #16]
   1d004:	4790      	blx	r2
   1d006:	b9f0      	cbnz	r0, 1d046 <CC_PalPowerSaveModeSelect+0x4e>
   1d008:	b15c      	cbz	r4, 1d022 <CC_PalPowerSaveModeSelect+0x2a>
   1d00a:	4c18      	ldr	r4, [pc, #96]	; (1d06c <CC_PalPowerSaveModeSelect+0x74>)
   1d00c:	6823      	ldr	r3, [r4, #0]
   1d00e:	b1ab      	cbz	r3, 1d03c <CC_PalPowerSaveModeSelect+0x44>
   1d010:	2b01      	cmp	r3, #1
   1d012:	d01a      	beq.n	1d04a <CC_PalPowerSaveModeSelect+0x52>
   1d014:	3b01      	subs	r3, #1
   1d016:	6023      	str	r3, [r4, #0]
   1d018:	6928      	ldr	r0, [r5, #16]
   1d01a:	68f3      	ldr	r3, [r6, #12]
   1d01c:	4798      	blx	r3
   1d01e:	2000      	movs	r0, #0
   1d020:	bd70      	pop	{r4, r5, r6, pc}
   1d022:	4c12      	ldr	r4, [pc, #72]	; (1d06c <CC_PalPowerSaveModeSelect+0x74>)
   1d024:	6821      	ldr	r1, [r4, #0]
   1d026:	b939      	cbnz	r1, 1d038 <CC_PalPowerSaveModeSelect+0x40>
   1d028:	4b11      	ldr	r3, [pc, #68]	; (1d070 <CC_PalPowerSaveModeSelect+0x78>)
   1d02a:	4a12      	ldr	r2, [pc, #72]	; (1d074 <CC_PalPowerSaveModeSelect+0x7c>)
   1d02c:	2001      	movs	r0, #1
   1d02e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   1d032:	6813      	ldr	r3, [r2, #0]
   1d034:	2b00      	cmp	r3, #0
   1d036:	d1fc      	bne.n	1d032 <CC_PalPowerSaveModeSelect+0x3a>
   1d038:	3101      	adds	r1, #1
   1d03a:	6021      	str	r1, [r4, #0]
   1d03c:	68f3      	ldr	r3, [r6, #12]
   1d03e:	6928      	ldr	r0, [r5, #16]
   1d040:	4798      	blx	r3
   1d042:	2000      	movs	r0, #0
   1d044:	bd70      	pop	{r4, r5, r6, pc}
   1d046:	480c      	ldr	r0, [pc, #48]	; (1d078 <CC_PalPowerSaveModeSelect+0x80>)
   1d048:	bd70      	pop	{r4, r5, r6, pc}
   1d04a:	4a0a      	ldr	r2, [pc, #40]	; (1d074 <CC_PalPowerSaveModeSelect+0x7c>)
   1d04c:	6813      	ldr	r3, [r2, #0]
   1d04e:	2b00      	cmp	r3, #0
   1d050:	d1fc      	bne.n	1d04c <CC_PalPowerSaveModeSelect+0x54>
   1d052:	4a07      	ldr	r2, [pc, #28]	; (1d070 <CC_PalPowerSaveModeSelect+0x78>)
   1d054:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   1d058:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   1d05c:	f7ff ff02 	bl	1ce64 <CC_HalMaskInterrupt>
   1d060:	6823      	ldr	r3, [r4, #0]
   1d062:	e7d7      	b.n	1d014 <CC_PalPowerSaveModeSelect+0x1c>
   1d064:	2000057c 	.word	0x2000057c
   1d068:	2000056c 	.word	0x2000056c
   1d06c:	200026e0 	.word	0x200026e0
   1d070:	5002a000 	.word	0x5002a000
   1d074:	5002b910 	.word	0x5002b910
   1d078:	ffff8fe9 	.word	0xffff8fe9

0001d07c <mutex_init>:
   1d07c:	4b01      	ldr	r3, [pc, #4]	; (1d084 <mutex_init+0x8>)
   1d07e:	681b      	ldr	r3, [r3, #0]
   1d080:	4718      	bx	r3
   1d082:	bf00      	nop
   1d084:	2000056c 	.word	0x2000056c

0001d088 <mutex_lock>:
   1d088:	4b01      	ldr	r3, [pc, #4]	; (1d090 <mutex_lock+0x8>)
   1d08a:	689b      	ldr	r3, [r3, #8]
   1d08c:	4718      	bx	r3
   1d08e:	bf00      	nop
   1d090:	2000056c 	.word	0x2000056c

0001d094 <mutex_unlock>:
   1d094:	4b01      	ldr	r3, [pc, #4]	; (1d09c <mutex_unlock+0x8>)
   1d096:	68db      	ldr	r3, [r3, #12]
   1d098:	4718      	bx	r3
   1d09a:	bf00      	nop
   1d09c:	2000056c 	.word	0x2000056c

0001d0a0 <startTrngHW>:
   1d0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d0a4:	2800      	cmp	r0, #0
   1d0a6:	d07b      	beq.n	1d1a0 <startTrngHW+0x100>
   1d0a8:	460c      	mov	r4, r1
   1d0aa:	2900      	cmp	r1, #0
   1d0ac:	d078      	beq.n	1d1a0 <startTrngHW+0x100>
   1d0ae:	461d      	mov	r5, r3
   1d0b0:	2b00      	cmp	r3, #0
   1d0b2:	d075      	beq.n	1d1a0 <startTrngHW+0x100>
   1d0b4:	4606      	mov	r6, r0
   1d0b6:	b122      	cbz	r2, 1d0c2 <startTrngHW+0x22>
   1d0b8:	2201      	movs	r2, #1
   1d0ba:	2300      	movs	r3, #0
   1d0bc:	602a      	str	r2, [r5, #0]
   1d0be:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
   1d0c2:	682b      	ldr	r3, [r5, #0]
   1d0c4:	2b00      	cmp	r3, #0
   1d0c6:	d067      	beq.n	1d198 <startTrngHW+0xf8>
   1d0c8:	4629      	mov	r1, r5
   1d0ca:	4620      	mov	r0, r4
   1d0cc:	f000 fda4 	bl	1dc18 <LLF_RND_GetFastestRosc>
   1d0d0:	4607      	mov	r7, r0
   1d0d2:	2800      	cmp	r0, #0
   1d0d4:	d161      	bne.n	1d19a <startTrngHW+0xfa>
   1d0d6:	6828      	ldr	r0, [r5, #0]
   1d0d8:	4621      	mov	r1, r4
   1d0da:	f000 fd7f 	bl	1dbdc <LLF_RND_GetRoscSampleCnt>
   1d0de:	4607      	mov	r7, r0
   1d0e0:	2800      	cmp	r0, #0
   1d0e2:	d15a      	bne.n	1d19a <startTrngHW+0xfa>
   1d0e4:	682b      	ldr	r3, [r5, #0]
   1d0e6:	2b08      	cmp	r3, #8
   1d0e8:	d069      	beq.n	1d1be <startTrngHW+0x11e>
   1d0ea:	2b04      	cmp	r3, #4
   1d0ec:	d06a      	beq.n	1d1c4 <startTrngHW+0x124>
   1d0ee:	f1a3 0802 	sub.w	r8, r3, #2
   1d0f2:	fab8 f888 	clz	r8, r8
   1d0f6:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1d0fa:	4b34      	ldr	r3, [pc, #208]	; (1d1cc <startTrngHW+0x12c>)
   1d0fc:	4934      	ldr	r1, [pc, #208]	; (1d1d0 <startTrngHW+0x130>)
   1d0fe:	4a35      	ldr	r2, [pc, #212]	; (1d1d4 <startTrngHW+0x134>)
   1d100:	2001      	movs	r0, #1
   1d102:	6018      	str	r0, [r3, #0]
   1d104:	469c      	mov	ip, r3
   1d106:	6008      	str	r0, [r1, #0]
   1d108:	f8cc 0000 	str.w	r0, [ip]
   1d10c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d10e:	6013      	str	r3, [r2, #0]
   1d110:	6811      	ldr	r1, [r2, #0]
   1d112:	428b      	cmp	r3, r1
   1d114:	d1f8      	bne.n	1d108 <startTrngHW+0x68>
   1d116:	4b30      	ldr	r3, [pc, #192]	; (1d1d8 <startTrngHW+0x138>)
   1d118:	f04f 0900 	mov.w	r9, #0
   1d11c:	f8c3 9000 	str.w	r9, [r3]
   1d120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d124:	f7ff fe90 	bl	1ce48 <CC_HalClearInterruptBit>
   1d128:	4b2c      	ldr	r3, [pc, #176]	; (1d1dc <startTrngHW+0x13c>)
   1d12a:	f06f 021b 	mvn.w	r2, #27
   1d12e:	601a      	str	r2, [r3, #0]
   1d130:	4648      	mov	r0, r9
   1d132:	f7ff fe97 	bl	1ce64 <CC_HalMaskInterrupt>
   1d136:	4a2a      	ldr	r2, [pc, #168]	; (1d1e0 <startTrngHW+0x140>)
   1d138:	4b2a      	ldr	r3, [pc, #168]	; (1d1e4 <startTrngHW+0x144>)
   1d13a:	f8c2 8000 	str.w	r8, [r2]
   1d13e:	6818      	ldr	r0, [r3, #0]
   1d140:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1d144:	f7ff fe8e 	bl	1ce64 <CC_HalMaskInterrupt>
   1d148:	4b27      	ldr	r3, [pc, #156]	; (1d1e8 <startTrngHW+0x148>)
   1d14a:	220a      	movs	r2, #10
   1d14c:	601a      	str	r2, [r3, #0]
   1d14e:	9908      	ldr	r1, [sp, #32]
   1d150:	6923      	ldr	r3, [r4, #16]
   1d152:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1d154:	2901      	cmp	r1, #1
   1d156:	d027      	beq.n	1d1a8 <startTrngHW+0x108>
   1d158:	4924      	ldr	r1, [pc, #144]	; (1d1ec <startTrngHW+0x14c>)
   1d15a:	fba1 1303 	umull	r1, r3, r1, r3
   1d15e:	091b      	lsrs	r3, r3, #4
   1d160:	fb03 f302 	mul.w	r3, r3, r2
   1d164:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1d168:	4921      	ldr	r1, [pc, #132]	; (1d1f0 <startTrngHW+0x150>)
   1d16a:	4a1b      	ldr	r2, [pc, #108]	; (1d1d8 <startTrngHW+0x138>)
   1d16c:	03db      	lsls	r3, r3, #15
   1d16e:	099b      	lsrs	r3, r3, #6
   1d170:	600b      	str	r3, [r1, #0]
   1d172:	2301      	movs	r3, #1
   1d174:	6013      	str	r3, [r2, #0]
   1d176:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
   1d17a:	682a      	ldr	r2, [r5, #0]
   1d17c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1d180:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1d184:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   1d188:	682a      	ldr	r2, [r5, #0]
   1d18a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d18e:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   1d192:	4638      	mov	r0, r7
   1d194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d198:	4f16      	ldr	r7, [pc, #88]	; (1d1f4 <startTrngHW+0x154>)
   1d19a:	4638      	mov	r0, r7
   1d19c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d1a0:	4f15      	ldr	r7, [pc, #84]	; (1d1f8 <startTrngHW+0x158>)
   1d1a2:	4638      	mov	r0, r7
   1d1a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d1a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d1ac:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   1d1b0:	3101      	adds	r1, #1
   1d1b2:	d002      	beq.n	1d1ba <startTrngHW+0x11a>
   1d1b4:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   1d1b8:	e7ce      	b.n	1d158 <startTrngHW+0xb8>
   1d1ba:	2316      	movs	r3, #22
   1d1bc:	e7d0      	b.n	1d160 <startTrngHW+0xc0>
   1d1be:	f04f 0803 	mov.w	r8, #3
   1d1c2:	e79a      	b.n	1d0fa <startTrngHW+0x5a>
   1d1c4:	f04f 0802 	mov.w	r8, #2
   1d1c8:	e797      	b.n	1d0fa <startTrngHW+0x5a>
   1d1ca:	bf00      	nop
   1d1cc:	5002b1c4 	.word	0x5002b1c4
   1d1d0:	5002b140 	.word	0x5002b140
   1d1d4:	5002b130 	.word	0x5002b130
   1d1d8:	5002b12c 	.word	0x5002b12c
   1d1dc:	5002b100 	.word	0x5002b100
   1d1e0:	5002b10c 	.word	0x5002b10c
   1d1e4:	5002ba04 	.word	0x5002ba04
   1d1e8:	5002b138 	.word	0x5002b138
   1d1ec:	aaaaaaab 	.word	0xaaaaaaab
   1d1f0:	5002b1d8 	.word	0x5002b1d8
   1d1f4:	00f10c31 	.word	0x00f10c31
   1d1f8:	00f10c35 	.word	0x00f10c35

0001d1fc <LLF_RND_RepetitionCounterTest.part.0>:
   1d1fc:	b4f0      	push	{r4, r5, r6, r7}
   1d1fe:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   1d202:	2400      	movs	r4, #0
   1d204:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   1d208:	4626      	mov	r6, r4
   1d20a:	4627      	mov	r7, r4
   1d20c:	e006      	b.n	1d21c <LLF_RND_RepetitionCounterTest.part.0+0x20>
   1d20e:	429f      	cmp	r7, r3
   1d210:	d016      	beq.n	1d240 <LLF_RND_RepetitionCounterTest.part.0+0x44>
   1d212:	2601      	movs	r6, #1
   1d214:	4565      	cmp	r5, ip
   1d216:	d819      	bhi.n	1d24c <LLF_RND_RepetitionCounterTest.part.0+0x50>
   1d218:	462c      	mov	r4, r5
   1d21a:	461f      	mov	r7, r3
   1d21c:	0963      	lsrs	r3, r4, #5
   1d21e:	f004 011f 	and.w	r1, r4, #31
   1d222:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1d226:	291f      	cmp	r1, #31
   1d228:	fa23 f301 	lsr.w	r3, r3, r1
   1d22c:	f104 0501 	add.w	r5, r4, #1
   1d230:	bf18      	it	ne
   1d232:	f003 0301 	andne.w	r3, r3, #1
   1d236:	2c00      	cmp	r4, #0
   1d238:	d1e9      	bne.n	1d20e <LLF_RND_RepetitionCounterTest.part.0+0x12>
   1d23a:	2601      	movs	r6, #1
   1d23c:	4635      	mov	r5, r6
   1d23e:	e7eb      	b.n	1d218 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   1d240:	3601      	adds	r6, #1
   1d242:	4296      	cmp	r6, r2
   1d244:	d1e6      	bne.n	1d214 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   1d246:	4803      	ldr	r0, [pc, #12]	; (1d254 <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   1d248:	bcf0      	pop	{r4, r5, r6, r7}
   1d24a:	4770      	bx	lr
   1d24c:	2000      	movs	r0, #0
   1d24e:	bcf0      	pop	{r4, r5, r6, r7}
   1d250:	4770      	bx	lr
   1d252:	bf00      	nop
   1d254:	00f10c36 	.word	0x00f10c36

0001d258 <LLF_RND_AdaptiveProportionTest>:
   1d258:	2800      	cmp	r0, #0
   1d25a:	d061      	beq.n	1d320 <LLF_RND_AdaptiveProportionTest+0xc8>
   1d25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d260:	1e4c      	subs	r4, r1, #1
   1d262:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   1d266:	d227      	bcs.n	1d2b8 <LLF_RND_AdaptiveProportionTest+0x60>
   1d268:	b333      	cbz	r3, 1d2b8 <LLF_RND_AdaptiveProportionTest+0x60>
   1d26a:	b32a      	cbz	r2, 1d2b8 <LLF_RND_AdaptiveProportionTest+0x60>
   1d26c:	00cd      	lsls	r5, r1, #3
   1d26e:	2b01      	cmp	r3, #1
   1d270:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
   1d274:	d030      	beq.n	1d2d8 <LLF_RND_AdaptiveProportionTest+0x80>
   1d276:	2100      	movs	r1, #0
   1d278:	468c      	mov	ip, r1
   1d27a:	460f      	mov	r7, r1
   1d27c:	460e      	mov	r6, r1
   1d27e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   1d282:	094c      	lsrs	r4, r1, #5
   1d284:	f001 051f 	and.w	r5, r1, #31
   1d288:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   1d28c:	2d1f      	cmp	r5, #31
   1d28e:	fa24 f405 	lsr.w	r4, r4, r5
   1d292:	bf18      	it	ne
   1d294:	f004 0401 	andne.w	r4, r4, #1
   1d298:	b921      	cbnz	r1, 1d2a4 <LLF_RND_AdaptiveProportionTest+0x4c>
   1d29a:	2601      	movs	r6, #1
   1d29c:	46b4      	mov	ip, r6
   1d29e:	4631      	mov	r1, r6
   1d2a0:	4627      	mov	r7, r4
   1d2a2:	e7ee      	b.n	1d282 <LLF_RND_AdaptiveProportionTest+0x2a>
   1d2a4:	42b3      	cmp	r3, r6
   1d2a6:	d013      	beq.n	1d2d0 <LLF_RND_AdaptiveProportionTest+0x78>
   1d2a8:	42a7      	cmp	r7, r4
   1d2aa:	d101      	bne.n	1d2b0 <LLF_RND_AdaptiveProportionTest+0x58>
   1d2ac:	f10c 0c01 	add.w	ip, ip, #1
   1d2b0:	4546      	cmp	r6, r8
   1d2b2:	d104      	bne.n	1d2be <LLF_RND_AdaptiveProportionTest+0x66>
   1d2b4:	4562      	cmp	r2, ip
   1d2b6:	d202      	bcs.n	1d2be <LLF_RND_AdaptiveProportionTest+0x66>
   1d2b8:	481a      	ldr	r0, [pc, #104]	; (1d324 <LLF_RND_AdaptiveProportionTest+0xcc>)
   1d2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d2be:	463c      	mov	r4, r7
   1d2c0:	3101      	adds	r1, #1
   1d2c2:	458e      	cmp	lr, r1
   1d2c4:	f106 0601 	add.w	r6, r6, #1
   1d2c8:	d2ea      	bcs.n	1d2a0 <LLF_RND_AdaptiveProportionTest+0x48>
   1d2ca:	2000      	movs	r0, #0
   1d2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d2d0:	2600      	movs	r6, #0
   1d2d2:	f04f 0c01 	mov.w	ip, #1
   1d2d6:	e7f3      	b.n	1d2c0 <LLF_RND_AdaptiveProportionTest+0x68>
   1d2d8:	2600      	movs	r6, #0
   1d2da:	46b4      	mov	ip, r6
   1d2dc:	4637      	mov	r7, r6
   1d2de:	4634      	mov	r4, r6
   1d2e0:	0961      	lsrs	r1, r4, #5
   1d2e2:	f004 031f 	and.w	r3, r4, #31
   1d2e6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   1d2ea:	2b1f      	cmp	r3, #31
   1d2ec:	fa21 f103 	lsr.w	r1, r1, r3
   1d2f0:	bf18      	it	ne
   1d2f2:	f001 0101 	andne.w	r1, r1, #1
   1d2f6:	b13c      	cbz	r4, 1d308 <LLF_RND_AdaptiveProportionTest+0xb0>
   1d2f8:	b95f      	cbnz	r7, 1d312 <LLF_RND_AdaptiveProportionTest+0xba>
   1d2fa:	458c      	cmp	ip, r1
   1d2fc:	d001      	beq.n	1d302 <LLF_RND_AdaptiveProportionTest+0xaa>
   1d2fe:	4661      	mov	r1, ip
   1d300:	e008      	b.n	1d314 <LLF_RND_AdaptiveProportionTest+0xbc>
   1d302:	3601      	adds	r6, #1
   1d304:	4661      	mov	r1, ip
   1d306:	e005      	b.n	1d314 <LLF_RND_AdaptiveProportionTest+0xbc>
   1d308:	2601      	movs	r6, #1
   1d30a:	4634      	mov	r4, r6
   1d30c:	468c      	mov	ip, r1
   1d30e:	2701      	movs	r7, #1
   1d310:	e7e6      	b.n	1d2e0 <LLF_RND_AdaptiveProportionTest+0x88>
   1d312:	463e      	mov	r6, r7
   1d314:	42b2      	cmp	r2, r6
   1d316:	d3cf      	bcc.n	1d2b8 <LLF_RND_AdaptiveProportionTest+0x60>
   1d318:	3401      	adds	r4, #1
   1d31a:	42ac      	cmp	r4, r5
   1d31c:	d1f6      	bne.n	1d30c <LLF_RND_AdaptiveProportionTest+0xb4>
   1d31e:	e7d4      	b.n	1d2ca <LLF_RND_AdaptiveProportionTest+0x72>
   1d320:	4800      	ldr	r0, [pc, #0]	; (1d324 <LLF_RND_AdaptiveProportionTest+0xcc>)
   1d322:	4770      	bx	lr
   1d324:	00f10c37 	.word	0x00f10c37

0001d328 <getTrngSource>:
   1d328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d32c:	b08d      	sub	sp, #52	; 0x34
   1d32e:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   1d332:	4607      	mov	r7, r0
   1d334:	460c      	mov	r4, r1
   1d336:	2d00      	cmp	r5, #0
   1d338:	d14d      	bne.n	1d3d6 <getTrngSource+0xae>
   1d33a:	f8d1 a010 	ldr.w	sl, [r1, #16]
   1d33e:	601e      	str	r6, [r3, #0]
   1d340:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1d342:	2100      	movs	r1, #0
   1d344:	6019      	str	r1, [r3, #0]
   1d346:	2a00      	cmp	r2, #0
   1d348:	f000 8120 	beq.w	1d58c <getTrngSource+0x264>
   1d34c:	4a9b      	ldr	r2, [pc, #620]	; (1d5bc <getTrngSource+0x294>)
   1d34e:	4b9c      	ldr	r3, [pc, #624]	; (1d5c0 <getTrngSource+0x298>)
   1d350:	6811      	ldr	r1, [r2, #0]
   1d352:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1d354:	681b      	ldr	r3, [r3, #0]
   1d356:	429a      	cmp	r2, r3
   1d358:	d148      	bne.n	1d3ec <getTrngSource+0xc4>
   1d35a:	290a      	cmp	r1, #10
   1d35c:	d146      	bne.n	1d3ec <getTrngSource+0xc4>
   1d35e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
   1d362:	9304      	str	r3, [sp, #16]
   1d364:	4b97      	ldr	r3, [pc, #604]	; (1d5c4 <getTrngSource+0x29c>)
   1d366:	fba3 230a 	umull	r2, r3, r3, sl
   1d36a:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   1d36e:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   1d372:	f106 0208 	add.w	r2, r6, #8
   1d376:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   1d37a:	2304      	movs	r3, #4
   1d37c:	9203      	str	r2, [sp, #12]
   1d37e:	9302      	str	r3, [sp, #8]
   1d380:	46b8      	mov	r8, r7
   1d382:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1d384:	f8c3 a000 	str.w	sl, [r3]
   1d388:	f1ba 0f00 	cmp.w	sl, #0
   1d38c:	f000 80c4 	beq.w	1d518 <getTrngSource+0x1f0>
   1d390:	9e03      	ldr	r6, [sp, #12]
   1d392:	4655      	mov	r5, sl
   1d394:	f04f 0900 	mov.w	r9, #0
   1d398:	f000 fc4e 	bl	1dc38 <LLF_RND_TurnOffTrng>
   1d39c:	2300      	movs	r3, #0
   1d39e:	9305      	str	r3, [sp, #20]
   1d3a0:	f1b8 0f00 	cmp.w	r8, #0
   1d3a4:	f000 80e6 	beq.w	1d574 <getTrngSource+0x24c>
   1d3a8:	2c00      	cmp	r4, #0
   1d3aa:	f000 80e3 	beq.w	1d574 <getTrngSource+0x24c>
   1d3ae:	9b04      	ldr	r3, [sp, #16]
   1d3b0:	2b00      	cmp	r3, #0
   1d3b2:	f000 80dd 	beq.w	1d570 <getTrngSource+0x248>
   1d3b6:	a904      	add	r1, sp, #16
   1d3b8:	4620      	mov	r0, r4
   1d3ba:	f000 fc2d 	bl	1dc18 <LLF_RND_GetFastestRosc>
   1d3be:	b1b8      	cbz	r0, 1d3f0 <getTrngSource+0xc8>
   1d3c0:	4b81      	ldr	r3, [pc, #516]	; (1d5c8 <getTrngSource+0x2a0>)
   1d3c2:	4298      	cmp	r0, r3
   1d3c4:	f040 80a8 	bne.w	1d518 <getTrngSource+0x1f0>
   1d3c8:	9002      	str	r0, [sp, #8]
   1d3ca:	f000 fc35 	bl	1dc38 <LLF_RND_TurnOffTrng>
   1d3ce:	9802      	ldr	r0, [sp, #8]
   1d3d0:	b00d      	add	sp, #52	; 0x34
   1d3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3d6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1d3da:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   1d3de:	3001      	adds	r0, #1
   1d3e0:	bf14      	ite	ne
   1d3e2:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   1d3e6:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   1d3ea:	e7a8      	b.n	1d33e <getTrngSource+0x16>
   1d3ec:	4877      	ldr	r0, [pc, #476]	; (1d5cc <getTrngSource+0x2a4>)
   1d3ee:	e7eb      	b.n	1d3c8 <getTrngSource+0xa0>
   1d3f0:	9804      	ldr	r0, [sp, #16]
   1d3f2:	4621      	mov	r1, r4
   1d3f4:	f000 fbf2 	bl	1dbdc <LLF_RND_GetRoscSampleCnt>
   1d3f8:	2800      	cmp	r0, #0
   1d3fa:	d1e1      	bne.n	1d3c0 <getTrngSource+0x98>
   1d3fc:	9f04      	ldr	r7, [sp, #16]
   1d3fe:	2f08      	cmp	r7, #8
   1d400:	f000 80ba 	beq.w	1d578 <getTrngSource+0x250>
   1d404:	2f04      	cmp	r7, #4
   1d406:	f000 80b9 	beq.w	1d57c <getTrngSource+0x254>
   1d40a:	f1a7 0702 	sub.w	r7, r7, #2
   1d40e:	fab7 f787 	clz	r7, r7
   1d412:	097f      	lsrs	r7, r7, #5
   1d414:	496e      	ldr	r1, [pc, #440]	; (1d5d0 <getTrngSource+0x2a8>)
   1d416:	2301      	movs	r3, #1
   1d418:	600b      	str	r3, [r1, #0]
   1d41a:	f841 3c84 	str.w	r3, [r1, #-132]
   1d41e:	4619      	mov	r1, r3
   1d420:	4b6b      	ldr	r3, [pc, #428]	; (1d5d0 <getTrngSource+0x2a8>)
   1d422:	4867      	ldr	r0, [pc, #412]	; (1d5c0 <getTrngSource+0x298>)
   1d424:	6019      	str	r1, [r3, #0]
   1d426:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d428:	6003      	str	r3, [r0, #0]
   1d42a:	6800      	ldr	r0, [r0, #0]
   1d42c:	4283      	cmp	r3, r0
   1d42e:	d1f7      	bne.n	1d420 <getTrngSource+0xf8>
   1d430:	4a68      	ldr	r2, [pc, #416]	; (1d5d4 <getTrngSource+0x2ac>)
   1d432:	2300      	movs	r3, #0
   1d434:	6013      	str	r3, [r2, #0]
   1d436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d43a:	f7ff fd05 	bl	1ce48 <CC_HalClearInterruptBit>
   1d43e:	2300      	movs	r3, #0
   1d440:	4618      	mov	r0, r3
   1d442:	4b65      	ldr	r3, [pc, #404]	; (1d5d8 <getTrngSource+0x2b0>)
   1d444:	f06f 011b 	mvn.w	r1, #27
   1d448:	6019      	str	r1, [r3, #0]
   1d44a:	f7ff fd0b 	bl	1ce64 <CC_HalMaskInterrupt>
   1d44e:	4963      	ldr	r1, [pc, #396]	; (1d5dc <getTrngSource+0x2b4>)
   1d450:	4b63      	ldr	r3, [pc, #396]	; (1d5e0 <getTrngSource+0x2b8>)
   1d452:	600f      	str	r7, [r1, #0]
   1d454:	6818      	ldr	r0, [r3, #0]
   1d456:	4f5b      	ldr	r7, [pc, #364]	; (1d5c4 <getTrngSource+0x29c>)
   1d458:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1d45c:	f7ff fd02 	bl	1ce64 <CC_HalMaskInterrupt>
   1d460:	4b56      	ldr	r3, [pc, #344]	; (1d5bc <getTrngSource+0x294>)
   1d462:	4860      	ldr	r0, [pc, #384]	; (1d5e4 <getTrngSource+0x2bc>)
   1d464:	210a      	movs	r1, #10
   1d466:	6019      	str	r1, [r3, #0]
   1d468:	6921      	ldr	r1, [r4, #16]
   1d46a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d46c:	fba7 c101 	umull	ip, r1, r7, r1
   1d470:	0909      	lsrs	r1, r1, #4
   1d472:	fb03 f301 	mul.w	r3, r3, r1
   1d476:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1d47a:	03db      	lsls	r3, r3, #15
   1d47c:	099b      	lsrs	r3, r3, #6
   1d47e:	6003      	str	r3, [r0, #0]
   1d480:	4b54      	ldr	r3, [pc, #336]	; (1d5d4 <getTrngSource+0x2ac>)
   1d482:	2201      	movs	r2, #1
   1d484:	601a      	str	r2, [r3, #0]
   1d486:	9904      	ldr	r1, [sp, #16]
   1d488:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   1d48c:	020b      	lsls	r3, r1, #8
   1d48e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1d492:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1d496:	4313      	orrs	r3, r2
   1d498:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   1d49c:	a805      	add	r0, sp, #20
   1d49e:	f000 fb8d 	bl	1dbbc <LLF_RND_WaitRngInterrupt>
   1d4a2:	9b05      	ldr	r3, [sp, #20]
   1d4a4:	f003 031a 	and.w	r3, r3, #26
   1d4a8:	4303      	orrs	r3, r0
   1d4aa:	d135      	bne.n	1d518 <getTrngSource+0x1f0>
   1d4ac:	4a4e      	ldr	r2, [pc, #312]	; (1d5e8 <getTrngSource+0x2c0>)
   1d4ae:	4b4f      	ldr	r3, [pc, #316]	; (1d5ec <getTrngSource+0x2c4>)
   1d4b0:	6812      	ldr	r2, [r2, #0]
   1d4b2:	9206      	str	r2, [sp, #24]
   1d4b4:	681a      	ldr	r2, [r3, #0]
   1d4b6:	9207      	str	r2, [sp, #28]
   1d4b8:	685a      	ldr	r2, [r3, #4]
   1d4ba:	9208      	str	r2, [sp, #32]
   1d4bc:	689a      	ldr	r2, [r3, #8]
   1d4be:	9209      	str	r2, [sp, #36]	; 0x24
   1d4c0:	68da      	ldr	r2, [r3, #12]
   1d4c2:	920a      	str	r2, [sp, #40]	; 0x28
   1d4c4:	3310      	adds	r3, #16
   1d4c6:	fba7 2705 	umull	r2, r7, r7, r5
   1d4ca:	681b      	ldr	r3, [r3, #0]
   1d4cc:	930b      	str	r3, [sp, #44]	; 0x2c
   1d4ce:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   1d4d2:	d102      	bne.n	1d4da <getTrngSource+0x1b2>
   1d4d4:	f1bb 0f00 	cmp.w	fp, #0
   1d4d8:	d141      	bne.n	1d55e <getTrngSource+0x236>
   1d4da:	2218      	movs	r2, #24
   1d4dc:	4630      	mov	r0, r6
   1d4de:	eb0d 0102 	add.w	r1, sp, r2
   1d4e2:	f000 fb0f 	bl	1db04 <CC_PalMemCopyPlat>
   1d4e6:	3d18      	subs	r5, #24
   1d4e8:	3618      	adds	r6, #24
   1d4ea:	f109 0901 	add.w	r9, r9, #1
   1d4ee:	2d00      	cmp	r5, #0
   1d4f0:	f47f af52 	bne.w	1d398 <getTrngSource+0x70>
   1d4f4:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   1d4f8:	d85d      	bhi.n	1d5b6 <getTrngSource+0x28e>
   1d4fa:	9d03      	ldr	r5, [sp, #12]
   1d4fc:	6962      	ldr	r2, [r4, #20]
   1d4fe:	4651      	mov	r1, sl
   1d500:	4628      	mov	r0, r5
   1d502:	f7ff fe7b 	bl	1d1fc <LLF_RND_RepetitionCounterTest.part.0>
   1d506:	2800      	cmp	r0, #0
   1d508:	d04b      	beq.n	1d5a2 <getTrngSource+0x27a>
   1d50a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1d50c:	2300      	movs	r3, #0
   1d50e:	6013      	str	r3, [r2, #0]
   1d510:	4b2d      	ldr	r3, [pc, #180]	; (1d5c8 <getTrngSource+0x2a0>)
   1d512:	4298      	cmp	r0, r3
   1d514:	f43f af58 	beq.w	1d3c8 <getTrngSource+0xa0>
   1d518:	9d04      	ldr	r5, [sp, #16]
   1d51a:	2d08      	cmp	r5, #8
   1d51c:	d034      	beq.n	1d588 <getTrngSource+0x260>
   1d51e:	2200      	movs	r2, #0
   1d520:	ab04      	add	r3, sp, #16
   1d522:	006d      	lsls	r5, r5, #1
   1d524:	9200      	str	r2, [sp, #0]
   1d526:	4621      	mov	r1, r4
   1d528:	4640      	mov	r0, r8
   1d52a:	9504      	str	r5, [sp, #16]
   1d52c:	f7ff fdb8 	bl	1d0a0 <startTrngHW>
   1d530:	4b2f      	ldr	r3, [pc, #188]	; (1d5f0 <getTrngSource+0x2c8>)
   1d532:	4298      	cmp	r0, r3
   1d534:	d024      	beq.n	1d580 <getTrngSource+0x258>
   1d536:	2800      	cmp	r0, #0
   1d538:	f47f af46 	bne.w	1d3c8 <getTrngSource+0xa0>
   1d53c:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   1d540:	0a13      	lsrs	r3, r2, #8
   1d542:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1d546:	4313      	orrs	r3, r2
   1d548:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1d54c:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   1d550:	9b02      	ldr	r3, [sp, #8]
   1d552:	3b01      	subs	r3, #1
   1d554:	9302      	str	r3, [sp, #8]
   1d556:	f47f af14 	bne.w	1d382 <getTrngSource+0x5a>
   1d55a:	2000      	movs	r0, #0
   1d55c:	e734      	b.n	1d3c8 <getTrngSource+0xa0>
   1d55e:	4630      	mov	r0, r6
   1d560:	465a      	mov	r2, fp
   1d562:	a906      	add	r1, sp, #24
   1d564:	f000 face 	bl	1db04 <CC_PalMemCopyPlat>
   1d568:	eba5 050b 	sub.w	r5, r5, fp
   1d56c:	445e      	add	r6, fp
   1d56e:	e7bc      	b.n	1d4ea <getTrngSource+0x1c2>
   1d570:	481f      	ldr	r0, [pc, #124]	; (1d5f0 <getTrngSource+0x2c8>)
   1d572:	e725      	b.n	1d3c0 <getTrngSource+0x98>
   1d574:	481f      	ldr	r0, [pc, #124]	; (1d5f4 <getTrngSource+0x2cc>)
   1d576:	e723      	b.n	1d3c0 <getTrngSource+0x98>
   1d578:	2703      	movs	r7, #3
   1d57a:	e74b      	b.n	1d414 <getTrngSource+0xec>
   1d57c:	2702      	movs	r7, #2
   1d57e:	e749      	b.n	1d414 <getTrngSource+0xec>
   1d580:	6a23      	ldr	r3, [r4, #32]
   1d582:	2b00      	cmp	r3, #0
   1d584:	f43f af20 	beq.w	1d3c8 <getTrngSource+0xa0>
   1d588:	481b      	ldr	r0, [pc, #108]	; (1d5f8 <getTrngSource+0x2d0>)
   1d58a:	e71d      	b.n	1d3c8 <getTrngSource+0xa0>
   1d58c:	9500      	str	r5, [sp, #0]
   1d58e:	ab04      	add	r3, sp, #16
   1d590:	2201      	movs	r2, #1
   1d592:	4621      	mov	r1, r4
   1d594:	4638      	mov	r0, r7
   1d596:	f7ff fd83 	bl	1d0a0 <startTrngHW>
   1d59a:	2800      	cmp	r0, #0
   1d59c:	f43f aee2 	beq.w	1d364 <getTrngSource+0x3c>
   1d5a0:	e712      	b.n	1d3c8 <getTrngSource+0xa0>
   1d5a2:	69a2      	ldr	r2, [r4, #24]
   1d5a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1d5a8:	4651      	mov	r1, sl
   1d5aa:	4628      	mov	r0, r5
   1d5ac:	f7ff fe54 	bl	1d258 <LLF_RND_AdaptiveProportionTest>
   1d5b0:	2800      	cmp	r0, #0
   1d5b2:	d1aa      	bne.n	1d50a <getTrngSource+0x1e2>
   1d5b4:	e7d1      	b.n	1d55a <getTrngSource+0x232>
   1d5b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1d5b8:	601d      	str	r5, [r3, #0]
   1d5ba:	e7ad      	b.n	1d518 <getTrngSource+0x1f0>
   1d5bc:	5002b138 	.word	0x5002b138
   1d5c0:	5002b130 	.word	0x5002b130
   1d5c4:	aaaaaaab 	.word	0xaaaaaaab
   1d5c8:	00f10c02 	.word	0x00f10c02
   1d5cc:	00f10c30 	.word	0x00f10c30
   1d5d0:	5002b1c4 	.word	0x5002b1c4
   1d5d4:	5002b12c 	.word	0x5002b12c
   1d5d8:	5002b100 	.word	0x5002b100
   1d5dc:	5002b10c 	.word	0x5002b10c
   1d5e0:	5002ba04 	.word	0x5002ba04
   1d5e4:	5002b1d8 	.word	0x5002b1d8
   1d5e8:	5002b114 	.word	0x5002b114
   1d5ec:	5002b118 	.word	0x5002b118
   1d5f0:	00f10c31 	.word	0x00f10c31
   1d5f4:	00f10c35 	.word	0x00f10c35
   1d5f8:	00f10c32 	.word	0x00f10c32

0001d5fc <LLF_RND_GetTrngSource>:
   1d5fc:	b430      	push	{r4, r5}
   1d5fe:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1d602:	9d04      	ldr	r5, [sp, #16]
   1d604:	9402      	str	r4, [sp, #8]
   1d606:	2400      	movs	r4, #0
   1d608:	e9cd 5403 	strd	r5, r4, [sp, #12]
   1d60c:	bc30      	pop	{r4, r5}
   1d60e:	f7ff be8b 	b.w	1d328 <getTrngSource>
   1d612:	bf00      	nop

0001d614 <LLF_RND_RunTrngStartupTest>:
   1d614:	b510      	push	{r4, lr}
   1d616:	b086      	sub	sp, #24
   1d618:	ab05      	add	r3, sp, #20
   1d61a:	2401      	movs	r4, #1
   1d61c:	e9cd 2401 	strd	r2, r4, [sp, #4]
   1d620:	9300      	str	r3, [sp, #0]
   1d622:	2200      	movs	r2, #0
   1d624:	ab04      	add	r3, sp, #16
   1d626:	f7ff fe7f 	bl	1d328 <getTrngSource>
   1d62a:	b006      	add	sp, #24
   1d62c:	bd10      	pop	{r4, pc}
   1d62e:	bf00      	nop

0001d630 <mbedtls_hardware_poll>:
   1d630:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d632:	b089      	sub	sp, #36	; 0x24
   1d634:	9205      	str	r2, [sp, #20]
   1d636:	2900      	cmp	r1, #0
   1d638:	d064      	beq.n	1d704 <mbedtls_hardware_poll+0xd4>
   1d63a:	461c      	mov	r4, r3
   1d63c:	2b00      	cmp	r3, #0
   1d63e:	d061      	beq.n	1d704 <mbedtls_hardware_poll+0xd4>
   1d640:	4615      	mov	r5, r2
   1d642:	2a00      	cmp	r2, #0
   1d644:	d05e      	beq.n	1d704 <mbedtls_hardware_poll+0xd4>
   1d646:	4f31      	ldr	r7, [pc, #196]	; (1d70c <mbedtls_hardware_poll+0xdc>)
   1d648:	460e      	mov	r6, r1
   1d64a:	6838      	ldr	r0, [r7, #0]
   1d64c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d650:	f7ff fca2 	bl	1cf98 <CC_PalMutexLock>
   1d654:	2800      	cmp	r0, #0
   1d656:	d14b      	bne.n	1d6f0 <mbedtls_hardware_poll+0xc0>
   1d658:	2000      	movs	r0, #0
   1d65a:	f7ff fccd 	bl	1cff8 <CC_PalPowerSaveModeSelect>
   1d65e:	2800      	cmp	r0, #0
   1d660:	d142      	bne.n	1d6e8 <mbedtls_hardware_poll+0xb8>
   1d662:	482b      	ldr	r0, [pc, #172]	; (1d710 <mbedtls_hardware_poll+0xe0>)
   1d664:	f000 fa12 	bl	1da8c <RNG_PLAT_SetUserRngParameters>
   1d668:	b1d8      	cbz	r0, 1d6a2 <mbedtls_hardware_poll+0x72>
   1d66a:	2001      	movs	r0, #1
   1d66c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1d670:	f7ff fcc2 	bl	1cff8 <CC_PalPowerSaveModeSelect>
   1d674:	2800      	cmp	r0, #0
   1d676:	d133      	bne.n	1d6e0 <mbedtls_hardware_poll+0xb0>
   1d678:	4826      	ldr	r0, [pc, #152]	; (1d714 <mbedtls_hardware_poll+0xe4>)
   1d67a:	f44f 7108 	mov.w	r1, #544	; 0x220
   1d67e:	f7fe fe47 	bl	1c310 <mbedtls_zeroize_internal>
   1d682:	4825      	ldr	r0, [pc, #148]	; (1d718 <mbedtls_hardware_poll+0xe8>)
   1d684:	21dc      	movs	r1, #220	; 0xdc
   1d686:	f7fe fe43 	bl	1c310 <mbedtls_zeroize_internal>
   1d68a:	4821      	ldr	r0, [pc, #132]	; (1d710 <mbedtls_hardware_poll+0xe0>)
   1d68c:	2128      	movs	r1, #40	; 0x28
   1d68e:	f7fe fe3f 	bl	1c310 <mbedtls_zeroize_internal>
   1d692:	6838      	ldr	r0, [r7, #0]
   1d694:	f7ff fc88 	bl	1cfa8 <CC_PalMutexUnlock>
   1d698:	2800      	cmp	r0, #0
   1d69a:	d12d      	bne.n	1d6f8 <mbedtls_hardware_poll+0xc8>
   1d69c:	4630      	mov	r0, r6
   1d69e:	b009      	add	sp, #36	; 0x24
   1d6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d6a2:	491c      	ldr	r1, [pc, #112]	; (1d714 <mbedtls_hardware_poll+0xe4>)
   1d6a4:	9003      	str	r0, [sp, #12]
   1d6a6:	ab07      	add	r3, sp, #28
   1d6a8:	4602      	mov	r2, r0
   1d6aa:	9102      	str	r1, [sp, #8]
   1d6ac:	9300      	str	r3, [sp, #0]
   1d6ae:	4918      	ldr	r1, [pc, #96]	; (1d710 <mbedtls_hardware_poll+0xe0>)
   1d6b0:	4819      	ldr	r0, [pc, #100]	; (1d718 <mbedtls_hardware_poll+0xe8>)
   1d6b2:	9401      	str	r4, [sp, #4]
   1d6b4:	ab05      	add	r3, sp, #20
   1d6b6:	f7ff ffa1 	bl	1d5fc <LLF_RND_GetTrngSource>
   1d6ba:	4603      	mov	r3, r0
   1d6bc:	2800      	cmp	r0, #0
   1d6be:	d1d4      	bne.n	1d66a <mbedtls_hardware_poll+0x3a>
   1d6c0:	6822      	ldr	r2, [r4, #0]
   1d6c2:	42aa      	cmp	r2, r5
   1d6c4:	d3d1      	bcc.n	1d66a <mbedtls_hardware_poll+0x3a>
   1d6c6:	9907      	ldr	r1, [sp, #28]
   1d6c8:	4630      	mov	r0, r6
   1d6ca:	3108      	adds	r1, #8
   1d6cc:	462a      	mov	r2, r5
   1d6ce:	461e      	mov	r6, r3
   1d6d0:	f000 fa18 	bl	1db04 <CC_PalMemCopyPlat>
   1d6d4:	6025      	str	r5, [r4, #0]
   1d6d6:	2001      	movs	r0, #1
   1d6d8:	f7ff fc8e 	bl	1cff8 <CC_PalPowerSaveModeSelect>
   1d6dc:	2800      	cmp	r0, #0
   1d6de:	d0cb      	beq.n	1d678 <mbedtls_hardware_poll+0x48>
   1d6e0:	480e      	ldr	r0, [pc, #56]	; (1d71c <mbedtls_hardware_poll+0xec>)
   1d6e2:	f7fe fd0d 	bl	1c100 <CC_PalAbort>
   1d6e6:	e7c7      	b.n	1d678 <mbedtls_hardware_poll+0x48>
   1d6e8:	480d      	ldr	r0, [pc, #52]	; (1d720 <mbedtls_hardware_poll+0xf0>)
   1d6ea:	f7fe fd09 	bl	1c100 <CC_PalAbort>
   1d6ee:	e7b8      	b.n	1d662 <mbedtls_hardware_poll+0x32>
   1d6f0:	480c      	ldr	r0, [pc, #48]	; (1d724 <mbedtls_hardware_poll+0xf4>)
   1d6f2:	f7fe fd05 	bl	1c100 <CC_PalAbort>
   1d6f6:	e7af      	b.n	1d658 <mbedtls_hardware_poll+0x28>
   1d6f8:	480b      	ldr	r0, [pc, #44]	; (1d728 <mbedtls_hardware_poll+0xf8>)
   1d6fa:	f7fe fd01 	bl	1c100 <CC_PalAbort>
   1d6fe:	4630      	mov	r0, r6
   1d700:	b009      	add	sp, #36	; 0x24
   1d702:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d704:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1d708:	e7c8      	b.n	1d69c <mbedtls_hardware_poll+0x6c>
   1d70a:	bf00      	nop
   1d70c:	200005bc 	.word	0x200005bc
   1d710:	200029e0 	.word	0x200029e0
   1d714:	200027c0 	.word	0x200027c0
   1d718:	200026e4 	.word	0x200026e4
   1d71c:	00021228 	.word	0x00021228
   1d720:	00021208 	.word	0x00021208
   1d724:	000211f0 	.word	0x000211f0
   1d728:	00021280 	.word	0x00021280

0001d72c <cc_mbedtls_aes_init>:
   1d72c:	b510      	push	{r4, lr}
   1d72e:	4604      	mov	r4, r0
   1d730:	b130      	cbz	r0, 1d740 <cc_mbedtls_aes_init+0x14>
   1d732:	2200      	movs	r2, #0
   1d734:	2301      	movs	r3, #1
   1d736:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   1d73a:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   1d73e:	bd10      	pop	{r4, pc}
   1d740:	4801      	ldr	r0, [pc, #4]	; (1d748 <cc_mbedtls_aes_init+0x1c>)
   1d742:	f7fe fcdd 	bl	1c100 <CC_PalAbort>
   1d746:	e7f4      	b.n	1d732 <cc_mbedtls_aes_init+0x6>
   1d748:	00021298 	.word	0x00021298

0001d74c <cc_mbedtls_aes_free>:
   1d74c:	b118      	cbz	r0, 1d756 <cc_mbedtls_aes_free+0xa>
   1d74e:	2274      	movs	r2, #116	; 0x74
   1d750:	2100      	movs	r1, #0
   1d752:	f000 b9d9 	b.w	1db08 <CC_PalMemSetPlat>
   1d756:	4770      	bx	lr

0001d758 <cc_mbedtls_aes_setkey_enc>:
   1d758:	b190      	cbz	r0, 1d780 <cc_mbedtls_aes_setkey_enc+0x28>
   1d75a:	b1a1      	cbz	r1, 1d786 <cc_mbedtls_aes_setkey_enc+0x2e>
   1d75c:	b510      	push	{r4, lr}
   1d75e:	2a80      	cmp	r2, #128	; 0x80
   1d760:	f04f 0400 	mov.w	r4, #0
   1d764:	6384      	str	r4, [r0, #56]	; 0x38
   1d766:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   1d76a:	d106      	bne.n	1d77a <cc_mbedtls_aes_setkey_enc+0x22>
   1d76c:	6304      	str	r4, [r0, #48]	; 0x30
   1d76e:	2210      	movs	r2, #16
   1d770:	3010      	adds	r0, #16
   1d772:	f000 f9c7 	bl	1db04 <CC_PalMemCopyPlat>
   1d776:	4620      	mov	r0, r4
   1d778:	bd10      	pop	{r4, pc}
   1d77a:	f06f 001f 	mvn.w	r0, #31
   1d77e:	bd10      	pop	{r4, pc}
   1d780:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1d784:	4770      	bx	lr
   1d786:	f06f 001f 	mvn.w	r0, #31
   1d78a:	4770      	bx	lr

0001d78c <cc_mbedtls_aes_crypt_ecb>:
   1d78c:	b320      	cbz	r0, 1d7d8 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1d78e:	b31a      	cbz	r2, 1d7d8 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1d790:	b313      	cbz	r3, 1d7d8 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1d792:	2901      	cmp	r1, #1
   1d794:	d820      	bhi.n	1d7d8 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1d796:	b570      	push	{r4, r5, r6, lr}
   1d798:	4604      	mov	r4, r0
   1d79a:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1d79c:	b086      	sub	sp, #24
   1d79e:	d016      	beq.n	1d7ce <cc_mbedtls_aes_crypt_ecb+0x42>
   1d7a0:	2901      	cmp	r1, #1
   1d7a2:	d116      	bne.n	1d7d2 <cc_mbedtls_aes_crypt_ecb+0x46>
   1d7a4:	2100      	movs	r1, #0
   1d7a6:	2510      	movs	r5, #16
   1d7a8:	ae04      	add	r6, sp, #16
   1d7aa:	6361      	str	r1, [r4, #52]	; 0x34
   1d7ac:	4610      	mov	r0, r2
   1d7ae:	e9cd 5600 	strd	r5, r6, [sp]
   1d7b2:	aa02      	add	r2, sp, #8
   1d7b4:	4629      	mov	r1, r5
   1d7b6:	f000 fa4d 	bl	1dc54 <SetDataBuffersInfo>
   1d7ba:	b950      	cbnz	r0, 1d7d2 <cc_mbedtls_aes_crypt_ecb+0x46>
   1d7bc:	462b      	mov	r3, r5
   1d7be:	4632      	mov	r2, r6
   1d7c0:	a902      	add	r1, sp, #8
   1d7c2:	4620      	mov	r0, r4
   1d7c4:	f000 fcda 	bl	1e17c <ProcessAesDrv>
   1d7c8:	b918      	cbnz	r0, 1d7d2 <cc_mbedtls_aes_crypt_ecb+0x46>
   1d7ca:	b006      	add	sp, #24
   1d7cc:	bd70      	pop	{r4, r5, r6, pc}
   1d7ce:	2900      	cmp	r1, #0
   1d7d0:	d0e8      	beq.n	1d7a4 <cc_mbedtls_aes_crypt_ecb+0x18>
   1d7d2:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1d7d6:	e7f8      	b.n	1d7ca <cc_mbedtls_aes_crypt_ecb+0x3e>
   1d7d8:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1d7dc:	4770      	bx	lr
   1d7de:	bf00      	nop

0001d7e0 <cc_mbedtls_sha256_init>:
   1d7e0:	b510      	push	{r4, lr}
   1d7e2:	4604      	mov	r4, r0
   1d7e4:	b128      	cbz	r0, 1d7f2 <cc_mbedtls_sha256_init+0x12>
   1d7e6:	4620      	mov	r0, r4
   1d7e8:	21f0      	movs	r1, #240	; 0xf0
   1d7ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d7ee:	f000 b98d 	b.w	1db0c <CC_PalMemSetZeroPlat>
   1d7f2:	4804      	ldr	r0, [pc, #16]	; (1d804 <cc_mbedtls_sha256_init+0x24>)
   1d7f4:	f7fe fc84 	bl	1c100 <CC_PalAbort>
   1d7f8:	4620      	mov	r0, r4
   1d7fa:	21f0      	movs	r1, #240	; 0xf0
   1d7fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d800:	f000 b984 	b.w	1db0c <CC_PalMemSetZeroPlat>
   1d804:	000212ac 	.word	0x000212ac

0001d808 <cc_mbedtls_sha256_free>:
   1d808:	b110      	cbz	r0, 1d810 <cc_mbedtls_sha256_free+0x8>
   1d80a:	21f0      	movs	r1, #240	; 0xf0
   1d80c:	f7fe bd80 	b.w	1c310 <mbedtls_zeroize_internal>
   1d810:	4770      	bx	lr
   1d812:	bf00      	nop

0001d814 <cc_mbedtls_sha256_starts>:
   1d814:	b508      	push	{r3, lr}
   1d816:	b161      	cbz	r1, 1d832 <cc_mbedtls_sha256_starts+0x1e>
   1d818:	2901      	cmp	r1, #1
   1d81a:	d107      	bne.n	1d82c <cc_mbedtls_sha256_starts+0x18>
   1d81c:	2102      	movs	r1, #2
   1d81e:	f000 f85b 	bl	1d8d8 <mbedtls_sha_starts_internal>
   1d822:	2800      	cmp	r0, #0
   1d824:	bf18      	it	ne
   1d826:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   1d82a:	bd08      	pop	{r3, pc}
   1d82c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1d830:	bd08      	pop	{r3, pc}
   1d832:	2101      	movs	r1, #1
   1d834:	f000 f850 	bl	1d8d8 <mbedtls_sha_starts_internal>
   1d838:	e7f3      	b.n	1d822 <cc_mbedtls_sha256_starts+0xe>
   1d83a:	bf00      	nop

0001d83c <cc_mbedtls_sha256_update>:
   1d83c:	b570      	push	{r4, r5, r6, lr}
   1d83e:	188e      	adds	r6, r1, r2
   1d840:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   1d844:	b0a0      	sub	sp, #128	; 0x80
   1d846:	460b      	mov	r3, r1
   1d848:	4614      	mov	r4, r2
   1d84a:	4605      	mov	r5, r0
   1d84c:	d801      	bhi.n	1d852 <cc_mbedtls_sha256_update+0x16>
   1d84e:	2a80      	cmp	r2, #128	; 0x80
   1d850:	d90c      	bls.n	1d86c <cc_mbedtls_sha256_update+0x30>
   1d852:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1d856:	d917      	bls.n	1d888 <cc_mbedtls_sha256_update+0x4c>
   1d858:	4622      	mov	r2, r4
   1d85a:	4619      	mov	r1, r3
   1d85c:	4628      	mov	r0, r5
   1d85e:	f000 f87d 	bl	1d95c <mbedtls_sha_update_internal>
   1d862:	4604      	mov	r4, r0
   1d864:	b984      	cbnz	r4, 1d888 <cc_mbedtls_sha256_update+0x4c>
   1d866:	4620      	mov	r0, r4
   1d868:	b020      	add	sp, #128	; 0x80
   1d86a:	bd70      	pop	{r4, r5, r6, pc}
   1d86c:	4668      	mov	r0, sp
   1d86e:	f000 f949 	bl	1db04 <CC_PalMemCopyPlat>
   1d872:	4622      	mov	r2, r4
   1d874:	4669      	mov	r1, sp
   1d876:	4628      	mov	r0, r5
   1d878:	f000 f870 	bl	1d95c <mbedtls_sha_update_internal>
   1d87c:	2180      	movs	r1, #128	; 0x80
   1d87e:	4604      	mov	r4, r0
   1d880:	4668      	mov	r0, sp
   1d882:	f000 f943 	bl	1db0c <CC_PalMemSetZeroPlat>
   1d886:	e7ed      	b.n	1d864 <cc_mbedtls_sha256_update+0x28>
   1d888:	f06f 0436 	mvn.w	r4, #54	; 0x36
   1d88c:	e7eb      	b.n	1d866 <cc_mbedtls_sha256_update+0x2a>
   1d88e:	bf00      	nop

0001d890 <cc_mbedtls_sha256_finish>:
   1d890:	b570      	push	{r4, r5, r6, lr}
   1d892:	b1e8      	cbz	r0, 1d8d0 <cc_mbedtls_sha256_finish+0x40>
   1d894:	460e      	mov	r6, r1
   1d896:	b1d9      	cbz	r1, 1d8d0 <cc_mbedtls_sha256_finish+0x40>
   1d898:	4604      	mov	r4, r0
   1d89a:	f000 f831 	bl	1d900 <mbedtls_sha_finish_internal>
   1d89e:	4605      	mov	r5, r0
   1d8a0:	b9b0      	cbnz	r0, 1d8d0 <cc_mbedtls_sha256_finish+0x40>
   1d8a2:	6823      	ldr	r3, [r4, #0]
   1d8a4:	2b01      	cmp	r3, #1
   1d8a6:	d00b      	beq.n	1d8c0 <cc_mbedtls_sha256_finish+0x30>
   1d8a8:	2b02      	cmp	r3, #2
   1d8aa:	d001      	beq.n	1d8b0 <cc_mbedtls_sha256_finish+0x20>
   1d8ac:	4628      	mov	r0, r5
   1d8ae:	bd70      	pop	{r4, r5, r6, pc}
   1d8b0:	f104 0108 	add.w	r1, r4, #8
   1d8b4:	4630      	mov	r0, r6
   1d8b6:	221c      	movs	r2, #28
   1d8b8:	f000 f924 	bl	1db04 <CC_PalMemCopyPlat>
   1d8bc:	4628      	mov	r0, r5
   1d8be:	bd70      	pop	{r4, r5, r6, pc}
   1d8c0:	f104 0108 	add.w	r1, r4, #8
   1d8c4:	4630      	mov	r0, r6
   1d8c6:	2220      	movs	r2, #32
   1d8c8:	f000 f91c 	bl	1db04 <CC_PalMemCopyPlat>
   1d8cc:	4628      	mov	r0, r5
   1d8ce:	bd70      	pop	{r4, r5, r6, pc}
   1d8d0:	f06f 0536 	mvn.w	r5, #54	; 0x36
   1d8d4:	e7ea      	b.n	1d8ac <cc_mbedtls_sha256_finish+0x1c>
   1d8d6:	bf00      	nop

0001d8d8 <mbedtls_sha_starts_internal>:
   1d8d8:	b178      	cbz	r0, 1d8fa <mbedtls_sha_starts_internal+0x22>
   1d8da:	b538      	push	{r3, r4, r5, lr}
   1d8dc:	4604      	mov	r4, r0
   1d8de:	460d      	mov	r5, r1
   1d8e0:	21f0      	movs	r1, #240	; 0xf0
   1d8e2:	f000 f913 	bl	1db0c <CC_PalMemSetZeroPlat>
   1d8e6:	2340      	movs	r3, #64	; 0x40
   1d8e8:	6025      	str	r5, [r4, #0]
   1d8ea:	65e3      	str	r3, [r4, #92]	; 0x5c
   1d8ec:	4620      	mov	r0, r4
   1d8ee:	f000 f9e5 	bl	1dcbc <InitHashDrv>
   1d8f2:	3800      	subs	r0, #0
   1d8f4:	bf18      	it	ne
   1d8f6:	2001      	movne	r0, #1
   1d8f8:	bd38      	pop	{r3, r4, r5, pc}
   1d8fa:	2001      	movs	r0, #1
   1d8fc:	4770      	bx	lr
   1d8fe:	bf00      	nop

0001d900 <mbedtls_sha_finish_internal>:
   1d900:	b570      	push	{r4, r5, r6, lr}
   1d902:	6e05      	ldr	r5, [r0, #96]	; 0x60
   1d904:	b0a4      	sub	sp, #144	; 0x90
   1d906:	4604      	mov	r4, r0
   1d908:	ae04      	add	r6, sp, #16
   1d90a:	b9e5      	cbnz	r5, 1d946 <mbedtls_sha_finish_internal+0x46>
   1d90c:	2201      	movs	r2, #1
   1d90e:	2300      	movs	r3, #0
   1d910:	6062      	str	r2, [r4, #4]
   1d912:	4630      	mov	r0, r6
   1d914:	e9cd 3300 	strd	r3, r3, [sp]
   1d918:	aa02      	add	r2, sp, #8
   1d91a:	4629      	mov	r1, r5
   1d91c:	f000 f99a 	bl	1dc54 <SetDataBuffersInfo>
   1d920:	b110      	cbz	r0, 1d928 <mbedtls_sha_finish_internal+0x28>
   1d922:	2001      	movs	r0, #1
   1d924:	b024      	add	sp, #144	; 0x90
   1d926:	bd70      	pop	{r4, r5, r6, pc}
   1d928:	462a      	mov	r2, r5
   1d92a:	a902      	add	r1, sp, #8
   1d92c:	4620      	mov	r0, r4
   1d92e:	f000 f9ef 	bl	1dd10 <ProcessHashDrv>
   1d932:	2800      	cmp	r0, #0
   1d934:	d1f5      	bne.n	1d922 <mbedtls_sha_finish_internal+0x22>
   1d936:	4620      	mov	r0, r4
   1d938:	f000 fb18 	bl	1df6c <FinishHashDrv>
   1d93c:	2800      	cmp	r0, #0
   1d93e:	d1f0      	bne.n	1d922 <mbedtls_sha_finish_internal+0x22>
   1d940:	6620      	str	r0, [r4, #96]	; 0x60
   1d942:	b024      	add	sp, #144	; 0x90
   1d944:	bd70      	pop	{r4, r5, r6, pc}
   1d946:	2d80      	cmp	r5, #128	; 0x80
   1d948:	462a      	mov	r2, r5
   1d94a:	4630      	mov	r0, r6
   1d94c:	bf28      	it	cs
   1d94e:	2280      	movcs	r2, #128	; 0x80
   1d950:	f104 0164 	add.w	r1, r4, #100	; 0x64
   1d954:	f000 f8d6 	bl	1db04 <CC_PalMemCopyPlat>
   1d958:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1d95a:	e7d7      	b.n	1d90c <mbedtls_sha_finish_internal+0xc>

0001d95c <mbedtls_sha_update_internal>:
   1d95c:	2800      	cmp	r0, #0
   1d95e:	d054      	beq.n	1da0a <mbedtls_sha_update_internal+0xae>
   1d960:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d962:	4614      	mov	r4, r2
   1d964:	b0a5      	sub	sp, #148	; 0x94
   1d966:	b1b2      	cbz	r2, 1d996 <mbedtls_sha_update_internal+0x3a>
   1d968:	460e      	mov	r6, r1
   1d96a:	b351      	cbz	r1, 1d9c2 <mbedtls_sha_update_internal+0x66>
   1d96c:	4605      	mov	r5, r0
   1d96e:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   1d972:	1a1a      	subs	r2, r3, r0
   1d974:	fbb2 f7f3 	udiv	r7, r2, r3
   1d978:	fb03 2717 	mls	r7, r3, r7, r2
   1d97c:	42a7      	cmp	r7, r4
   1d97e:	bf28      	it	cs
   1d980:	4627      	movcs	r7, r4
   1d982:	2f00      	cmp	r7, #0
   1d984:	d143      	bne.n	1da0e <mbedtls_sha_update_internal+0xb2>
   1d986:	4283      	cmp	r3, r0
   1d988:	d008      	beq.n	1d99c <mbedtls_sha_update_internal+0x40>
   1d98a:	fbb4 f7f3 	udiv	r7, r4, r3
   1d98e:	fb03 f707 	mul.w	r7, r3, r7
   1d992:	b9cf      	cbnz	r7, 1d9c8 <mbedtls_sha_update_internal+0x6c>
   1d994:	bb6c      	cbnz	r4, 1d9f2 <mbedtls_sha_update_internal+0x96>
   1d996:	2000      	movs	r0, #0
   1d998:	b025      	add	sp, #148	; 0x94
   1d99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d99c:	2b80      	cmp	r3, #128	; 0x80
   1d99e:	bf28      	it	cs
   1d9a0:	2380      	movcs	r3, #128	; 0x80
   1d9a2:	461a      	mov	r2, r3
   1d9a4:	f105 0164 	add.w	r1, r5, #100	; 0x64
   1d9a8:	a804      	add	r0, sp, #16
   1d9aa:	f000 f8ab 	bl	1db04 <CC_PalMemCopyPlat>
   1d9ae:	2300      	movs	r3, #0
   1d9b0:	e9cd 3300 	strd	r3, r3, [sp]
   1d9b4:	a804      	add	r0, sp, #16
   1d9b6:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   1d9b8:	aa02      	add	r2, sp, #8
   1d9ba:	f000 f94b 	bl	1dc54 <SetDataBuffersInfo>
   1d9be:	2800      	cmp	r0, #0
   1d9c0:	d032      	beq.n	1da28 <mbedtls_sha_update_internal+0xcc>
   1d9c2:	2001      	movs	r0, #1
   1d9c4:	b025      	add	sp, #148	; 0x94
   1d9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d9c8:	2300      	movs	r3, #0
   1d9ca:	e9cd 3300 	strd	r3, r3, [sp]
   1d9ce:	aa02      	add	r2, sp, #8
   1d9d0:	4639      	mov	r1, r7
   1d9d2:	4630      	mov	r0, r6
   1d9d4:	f000 f93e 	bl	1dc54 <SetDataBuffersInfo>
   1d9d8:	2800      	cmp	r0, #0
   1d9da:	d1f2      	bne.n	1d9c2 <mbedtls_sha_update_internal+0x66>
   1d9dc:	a902      	add	r1, sp, #8
   1d9de:	463a      	mov	r2, r7
   1d9e0:	4628      	mov	r0, r5
   1d9e2:	f000 f995 	bl	1dd10 <ProcessHashDrv>
   1d9e6:	2800      	cmp	r0, #0
   1d9e8:	d1eb      	bne.n	1d9c2 <mbedtls_sha_update_internal+0x66>
   1d9ea:	1be4      	subs	r4, r4, r7
   1d9ec:	443e      	add	r6, r7
   1d9ee:	2c00      	cmp	r4, #0
   1d9f0:	d0d1      	beq.n	1d996 <mbedtls_sha_update_internal+0x3a>
   1d9f2:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1d9f4:	3019      	adds	r0, #25
   1d9f6:	4622      	mov	r2, r4
   1d9f8:	4631      	mov	r1, r6
   1d9fa:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1d9fe:	f000 f881 	bl	1db04 <CC_PalMemCopyPlat>
   1da02:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   1da04:	4422      	add	r2, r4
   1da06:	662a      	str	r2, [r5, #96]	; 0x60
   1da08:	e7c5      	b.n	1d996 <mbedtls_sha_update_internal+0x3a>
   1da0a:	2001      	movs	r0, #1
   1da0c:	4770      	bx	lr
   1da0e:	f105 0364 	add.w	r3, r5, #100	; 0x64
   1da12:	4418      	add	r0, r3
   1da14:	463a      	mov	r2, r7
   1da16:	f000 f875 	bl	1db04 <CC_PalMemCopyPlat>
   1da1a:	e9d5 3017 	ldrd	r3, r0, [r5, #92]	; 0x5c
   1da1e:	4438      	add	r0, r7
   1da20:	443e      	add	r6, r7
   1da22:	1be4      	subs	r4, r4, r7
   1da24:	6628      	str	r0, [r5, #96]	; 0x60
   1da26:	e7ae      	b.n	1d986 <mbedtls_sha_update_internal+0x2a>
   1da28:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1da2a:	a902      	add	r1, sp, #8
   1da2c:	4628      	mov	r0, r5
   1da2e:	f000 f96f 	bl	1dd10 <ProcessHashDrv>
   1da32:	2800      	cmp	r0, #0
   1da34:	d1c5      	bne.n	1d9c2 <mbedtls_sha_update_internal+0x66>
   1da36:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1da38:	6628      	str	r0, [r5, #96]	; 0x60
   1da3a:	e7a6      	b.n	1d98a <mbedtls_sha_update_internal+0x2e>

0001da3c <cc_mbedtls_sha256>:
   1da3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1da3e:	461c      	mov	r4, r3
   1da40:	4605      	mov	r5, r0
   1da42:	4811      	ldr	r0, [pc, #68]	; (1da88 <cc_mbedtls_sha256+0x4c>)
   1da44:	460e      	mov	r6, r1
   1da46:	4617      	mov	r7, r2
   1da48:	f7ff feca 	bl	1d7e0 <cc_mbedtls_sha256_init>
   1da4c:	4621      	mov	r1, r4
   1da4e:	480e      	ldr	r0, [pc, #56]	; (1da88 <cc_mbedtls_sha256+0x4c>)
   1da50:	f7ff fee0 	bl	1d814 <cc_mbedtls_sha256_starts>
   1da54:	4604      	mov	r4, r0
   1da56:	b120      	cbz	r0, 1da62 <cc_mbedtls_sha256+0x26>
   1da58:	480b      	ldr	r0, [pc, #44]	; (1da88 <cc_mbedtls_sha256+0x4c>)
   1da5a:	f7ff fed5 	bl	1d808 <cc_mbedtls_sha256_free>
   1da5e:	4620      	mov	r0, r4
   1da60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1da62:	4809      	ldr	r0, [pc, #36]	; (1da88 <cc_mbedtls_sha256+0x4c>)
   1da64:	4632      	mov	r2, r6
   1da66:	4629      	mov	r1, r5
   1da68:	f7ff fee8 	bl	1d83c <cc_mbedtls_sha256_update>
   1da6c:	4604      	mov	r4, r0
   1da6e:	2800      	cmp	r0, #0
   1da70:	d1f2      	bne.n	1da58 <cc_mbedtls_sha256+0x1c>
   1da72:	4639      	mov	r1, r7
   1da74:	4804      	ldr	r0, [pc, #16]	; (1da88 <cc_mbedtls_sha256+0x4c>)
   1da76:	f7ff ff0b 	bl	1d890 <cc_mbedtls_sha256_finish>
   1da7a:	4604      	mov	r4, r0
   1da7c:	4802      	ldr	r0, [pc, #8]	; (1da88 <cc_mbedtls_sha256+0x4c>)
   1da7e:	f7ff fec3 	bl	1d808 <cc_mbedtls_sha256_free>
   1da82:	4620      	mov	r0, r4
   1da84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1da86:	bf00      	nop
   1da88:	20002a08 	.word	0x20002a08

0001da8c <RNG_PLAT_SetUserRngParameters>:
   1da8c:	b530      	push	{r4, r5, lr}
   1da8e:	b083      	sub	sp, #12
   1da90:	231c      	movs	r3, #28
   1da92:	a901      	add	r1, sp, #4
   1da94:	4604      	mov	r4, r0
   1da96:	9301      	str	r3, [sp, #4]
   1da98:	f000 f83c 	bl	1db14 <CC_PalTrngParamGet>
   1da9c:	4605      	mov	r5, r0
   1da9e:	b938      	cbnz	r0, 1dab0 <RNG_PLAT_SetUserRngParameters+0x24>
   1daa0:	9b01      	ldr	r3, [sp, #4]
   1daa2:	2b1c      	cmp	r3, #28
   1daa4:	d007      	beq.n	1dab6 <RNG_PLAT_SetUserRngParameters+0x2a>
   1daa6:	4d15      	ldr	r5, [pc, #84]	; (1dafc <RNG_PLAT_SetUserRngParameters+0x70>)
   1daa8:	4620      	mov	r0, r4
   1daaa:	211c      	movs	r1, #28
   1daac:	f000 f82e 	bl	1db0c <CC_PalMemSetZeroPlat>
   1dab0:	4628      	mov	r0, r5
   1dab2:	b003      	add	sp, #12
   1dab4:	bd30      	pop	{r4, r5, pc}
   1dab6:	e9d4 3200 	ldrd	r3, r2, [r4]
   1daba:	2101      	movs	r1, #1
   1dabc:	3b00      	subs	r3, #0
   1dabe:	bf18      	it	ne
   1dac0:	2301      	movne	r3, #1
   1dac2:	61e1      	str	r1, [r4, #28]
   1dac4:	b10a      	cbz	r2, 1daca <RNG_PLAT_SetUserRngParameters+0x3e>
   1dac6:	f043 0302 	orr.w	r3, r3, #2
   1daca:	68a2      	ldr	r2, [r4, #8]
   1dacc:	b932      	cbnz	r2, 1dadc <RNG_PLAT_SetUserRngParameters+0x50>
   1dace:	68e2      	ldr	r2, [r4, #12]
   1dad0:	b942      	cbnz	r2, 1dae4 <RNG_PLAT_SetUserRngParameters+0x58>
   1dad2:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1dad6:	b97b      	cbnz	r3, 1daf8 <RNG_PLAT_SetUserRngParameters+0x6c>
   1dad8:	4d09      	ldr	r5, [pc, #36]	; (1db00 <RNG_PLAT_SetUserRngParameters+0x74>)
   1dada:	e7e5      	b.n	1daa8 <RNG_PLAT_SetUserRngParameters+0x1c>
   1dadc:	68e2      	ldr	r2, [r4, #12]
   1dade:	f043 0304 	orr.w	r3, r3, #4
   1dae2:	b13a      	cbz	r2, 1daf4 <RNG_PLAT_SetUserRngParameters+0x68>
   1dae4:	f043 0308 	orr.w	r3, r3, #8
   1dae8:	2200      	movs	r2, #0
   1daea:	4628      	mov	r0, r5
   1daec:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1daf0:	b003      	add	sp, #12
   1daf2:	bd30      	pop	{r4, r5, pc}
   1daf4:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1daf8:	4615      	mov	r5, r2
   1dafa:	e7d9      	b.n	1dab0 <RNG_PLAT_SetUserRngParameters+0x24>
   1dafc:	00f00c37 	.word	0x00f00c37
   1db00:	00f00c0e 	.word	0x00f00c0e

0001db04 <CC_PalMemCopyPlat>:
   1db04:	f001 be63 	b.w	1f7ce <memmove>

0001db08 <CC_PalMemSetPlat>:
   1db08:	f001 be83 	b.w	1f812 <memset>

0001db0c <CC_PalMemSetZeroPlat>:
   1db0c:	460a      	mov	r2, r1
   1db0e:	2100      	movs	r1, #0
   1db10:	f001 be7f 	b.w	1f812 <memset>

0001db14 <CC_PalTrngParamGet>:
   1db14:	b118      	cbz	r0, 1db1e <CC_PalTrngParamGet+0xa>
   1db16:	b111      	cbz	r1, 1db1e <CC_PalTrngParamGet+0xa>
   1db18:	680b      	ldr	r3, [r1, #0]
   1db1a:	2b1c      	cmp	r3, #28
   1db1c:	d001      	beq.n	1db22 <CC_PalTrngParamGet+0xe>
   1db1e:	2001      	movs	r0, #1
   1db20:	4770      	bx	lr
   1db22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1db26:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   1db2a:	3201      	adds	r2, #1
   1db2c:	bf14      	ite	ne
   1db2e:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   1db32:	f241 225c 	movweq	r2, #4700	; 0x125c
   1db36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1db3a:	6002      	str	r2, [r0, #0]
   1db3c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   1db40:	3201      	adds	r2, #1
   1db42:	bf14      	ite	ne
   1db44:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   1db48:	f641 1264 	movweq	r2, #6500	; 0x1964
   1db4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1db50:	6042      	str	r2, [r0, #4]
   1db52:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   1db56:	3201      	adds	r2, #1
   1db58:	bf14      	ite	ne
   1db5a:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   1db5e:	f640 62d8 	movweq	r2, #3800	; 0xed8
   1db62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1db66:	6082      	str	r2, [r0, #8]
   1db68:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   1db6c:	3201      	adds	r2, #1
   1db6e:	bf14      	ite	ne
   1db70:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   1db74:	f241 3288 	movweq	r2, #5000	; 0x1388
   1db78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1db7c:	60c2      	str	r2, [r0, #12]
   1db7e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   1db82:	3201      	adds	r2, #1
   1db84:	bf14      	ite	ne
   1db86:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   1db8a:	2290      	moveq	r2, #144	; 0x90
   1db8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1db90:	6102      	str	r2, [r0, #16]
   1db92:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   1db96:	3201      	adds	r2, #1
   1db98:	bf14      	ite	ne
   1db9a:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   1db9e:	2251      	moveq	r2, #81	; 0x51
   1dba0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1dba4:	6142      	str	r2, [r0, #20]
   1dba6:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   1dbaa:	3201      	adds	r2, #1
   1dbac:	bf14      	ite	ne
   1dbae:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   1dbb2:	f240 3337 	movweq	r3, #823	; 0x337
   1dbb6:	6183      	str	r3, [r0, #24]
   1dbb8:	2000      	movs	r0, #0
   1dbba:	4770      	bx	lr

0001dbbc <LLF_RND_WaitRngInterrupt>:
   1dbbc:	b508      	push	{r3, lr}
   1dbbe:	4601      	mov	r1, r0
   1dbc0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1dbc4:	f7ff f95a 	bl	1ce7c <CC_HalWaitInterruptRND>
   1dbc8:	4902      	ldr	r1, [pc, #8]	; (1dbd4 <LLF_RND_WaitRngInterrupt+0x18>)
   1dbca:	4a03      	ldr	r2, [pc, #12]	; (1dbd8 <LLF_RND_WaitRngInterrupt+0x1c>)
   1dbcc:	2300      	movs	r3, #0
   1dbce:	600b      	str	r3, [r1, #0]
   1dbd0:	6013      	str	r3, [r2, #0]
   1dbd2:	bd08      	pop	{r3, pc}
   1dbd4:	5002b1c8 	.word	0x5002b1c8
   1dbd8:	5002b12c 	.word	0x5002b12c

0001dbdc <LLF_RND_GetRoscSampleCnt>:
   1dbdc:	3801      	subs	r0, #1
   1dbde:	2807      	cmp	r0, #7
   1dbe0:	d805      	bhi.n	1dbee <LLF_RND_GetRoscSampleCnt+0x12>
   1dbe2:	e8df f000 	tbb	[pc, r0]
   1dbe6:	0e0a      	.short	0x0e0a
   1dbe8:	04041204 	.word	0x04041204
   1dbec:	0604      	.short	0x0604
   1dbee:	4809      	ldr	r0, [pc, #36]	; (1dc14 <LLF_RND_GetRoscSampleCnt+0x38>)
   1dbf0:	4770      	bx	lr
   1dbf2:	68cb      	ldr	r3, [r1, #12]
   1dbf4:	624b      	str	r3, [r1, #36]	; 0x24
   1dbf6:	2000      	movs	r0, #0
   1dbf8:	4770      	bx	lr
   1dbfa:	680b      	ldr	r3, [r1, #0]
   1dbfc:	624b      	str	r3, [r1, #36]	; 0x24
   1dbfe:	2000      	movs	r0, #0
   1dc00:	4770      	bx	lr
   1dc02:	684b      	ldr	r3, [r1, #4]
   1dc04:	624b      	str	r3, [r1, #36]	; 0x24
   1dc06:	2000      	movs	r0, #0
   1dc08:	4770      	bx	lr
   1dc0a:	688b      	ldr	r3, [r1, #8]
   1dc0c:	624b      	str	r3, [r1, #36]	; 0x24
   1dc0e:	2000      	movs	r0, #0
   1dc10:	4770      	bx	lr
   1dc12:	bf00      	nop
   1dc14:	00f10c31 	.word	0x00f10c31

0001dc18 <LLF_RND_GetFastestRosc>:
   1dc18:	680b      	ldr	r3, [r1, #0]
   1dc1a:	e002      	b.n	1dc22 <LLF_RND_GetFastestRosc+0xa>
   1dc1c:	2b08      	cmp	r3, #8
   1dc1e:	600b      	str	r3, [r1, #0]
   1dc20:	d806      	bhi.n	1dc30 <LLF_RND_GetFastestRosc+0x18>
   1dc22:	6a02      	ldr	r2, [r0, #32]
   1dc24:	4213      	tst	r3, r2
   1dc26:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1dc2a:	d0f7      	beq.n	1dc1c <LLF_RND_GetFastestRosc+0x4>
   1dc2c:	2000      	movs	r0, #0
   1dc2e:	4770      	bx	lr
   1dc30:	4800      	ldr	r0, [pc, #0]	; (1dc34 <LLF_RND_GetFastestRosc+0x1c>)
   1dc32:	4770      	bx	lr
   1dc34:	00f10c31 	.word	0x00f10c31

0001dc38 <LLF_RND_TurnOffTrng>:
   1dc38:	4904      	ldr	r1, [pc, #16]	; (1dc4c <LLF_RND_TurnOffTrng+0x14>)
   1dc3a:	4a05      	ldr	r2, [pc, #20]	; (1dc50 <LLF_RND_TurnOffTrng+0x18>)
   1dc3c:	2300      	movs	r3, #0
   1dc3e:	600b      	str	r3, [r1, #0]
   1dc40:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1dc44:	6013      	str	r3, [r2, #0]
   1dc46:	f7ff b8ff 	b.w	1ce48 <CC_HalClearInterruptBit>
   1dc4a:	bf00      	nop
   1dc4c:	5002b12c 	.word	0x5002b12c
   1dc50:	5002b1c4 	.word	0x5002b1c4

0001dc54 <SetDataBuffersInfo>:
   1dc54:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dc56:	b083      	sub	sp, #12
   1dc58:	2400      	movs	r4, #0
   1dc5a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1dc5e:	f88d 4007 	strb.w	r4, [sp, #7]
   1dc62:	d325      	bcc.n	1dcb0 <SetDataBuffersInfo+0x5c>
   1dc64:	460c      	mov	r4, r1
   1dc66:	4404      	add	r4, r0
   1dc68:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1dc6c:	4605      	mov	r5, r0
   1dc6e:	d81f      	bhi.n	1dcb0 <SetDataBuffersInfo+0x5c>
   1dc70:	4617      	mov	r7, r2
   1dc72:	461e      	mov	r6, r3
   1dc74:	2201      	movs	r2, #1
   1dc76:	f10d 0307 	add.w	r3, sp, #7
   1dc7a:	f000 fe7f 	bl	1e97c <CC_PalDataBufferAttrGet>
   1dc7e:	4604      	mov	r4, r0
   1dc80:	b9b0      	cbnz	r0, 1dcb0 <SetDataBuffersInfo+0x5c>
   1dc82:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1dc84:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1dc88:	603d      	str	r5, [r7, #0]
   1dc8a:	713b      	strb	r3, [r7, #4]
   1dc8c:	b192      	cbz	r2, 1dcb4 <SetDataBuffersInfo+0x60>
   1dc8e:	b14e      	cbz	r6, 1dca4 <SetDataBuffersInfo+0x50>
   1dc90:	4602      	mov	r2, r0
   1dc92:	9908      	ldr	r1, [sp, #32]
   1dc94:	f10d 0307 	add.w	r3, sp, #7
   1dc98:	4630      	mov	r0, r6
   1dc9a:	f000 fe6f 	bl	1e97c <CC_PalDataBufferAttrGet>
   1dc9e:	b938      	cbnz	r0, 1dcb0 <SetDataBuffersInfo+0x5c>
   1dca0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1dca4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1dca6:	4620      	mov	r0, r4
   1dca8:	6016      	str	r6, [r2, #0]
   1dcaa:	7113      	strb	r3, [r2, #4]
   1dcac:	b003      	add	sp, #12
   1dcae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dcb0:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   1dcb4:	4620      	mov	r0, r4
   1dcb6:	b003      	add	sp, #12
   1dcb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dcba:	bf00      	nop

0001dcbc <InitHashDrv>:
   1dcbc:	b1e8      	cbz	r0, 1dcfa <InitHashDrv+0x3e>
   1dcbe:	b510      	push	{r4, lr}
   1dcc0:	6804      	ldr	r4, [r0, #0]
   1dcc2:	2c01      	cmp	r4, #1
   1dcc4:	d004      	beq.n	1dcd0 <InitHashDrv+0x14>
   1dcc6:	2c02      	cmp	r4, #2
   1dcc8:	d010      	beq.n	1dcec <InitHashDrv+0x30>
   1dcca:	b144      	cbz	r4, 1dcde <InitHashDrv+0x22>
   1dccc:	480c      	ldr	r0, [pc, #48]	; (1dd00 <InitHashDrv+0x44>)
   1dcce:	bd10      	pop	{r4, pc}
   1dcd0:	490c      	ldr	r1, [pc, #48]	; (1dd04 <InitHashDrv+0x48>)
   1dcd2:	2220      	movs	r2, #32
   1dcd4:	3008      	adds	r0, #8
   1dcd6:	f7ff ff15 	bl	1db04 <CC_PalMemCopyPlat>
   1dcda:	2000      	movs	r0, #0
   1dcdc:	bd10      	pop	{r4, pc}
   1dcde:	490a      	ldr	r1, [pc, #40]	; (1dd08 <InitHashDrv+0x4c>)
   1dce0:	2214      	movs	r2, #20
   1dce2:	3008      	adds	r0, #8
   1dce4:	f7ff ff0e 	bl	1db04 <CC_PalMemCopyPlat>
   1dce8:	4620      	mov	r0, r4
   1dcea:	bd10      	pop	{r4, pc}
   1dcec:	4907      	ldr	r1, [pc, #28]	; (1dd0c <InitHashDrv+0x50>)
   1dcee:	2220      	movs	r2, #32
   1dcf0:	3008      	adds	r0, #8
   1dcf2:	f7ff ff07 	bl	1db04 <CC_PalMemCopyPlat>
   1dcf6:	2000      	movs	r0, #0
   1dcf8:	bd10      	pop	{r4, pc}
   1dcfa:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1dcfe:	4770      	bx	lr
   1dd00:	00f30001 	.word	0x00f30001
   1dd04:	000212f0 	.word	0x000212f0
   1dd08:	000212bc 	.word	0x000212bc
   1dd0c:	000212d0 	.word	0x000212d0

0001dd10 <ProcessHashDrv>:
   1dd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dd14:	2900      	cmp	r1, #0
   1dd16:	f000 80ef 	beq.w	1def8 <ProcessHashDrv+0x1e8>
   1dd1a:	4604      	mov	r4, r0
   1dd1c:	2800      	cmp	r0, #0
   1dd1e:	f000 80ef 	beq.w	1df00 <ProcessHashDrv+0x1f0>
   1dd22:	6803      	ldr	r3, [r0, #0]
   1dd24:	4617      	mov	r7, r2
   1dd26:	460e      	mov	r6, r1
   1dd28:	2b00      	cmp	r3, #0
   1dd2a:	f000 80b9 	beq.w	1dea0 <ProcessHashDrv+0x190>
   1dd2e:	3b01      	subs	r3, #1
   1dd30:	2b01      	cmp	r3, #1
   1dd32:	f200 80cd 	bhi.w	1ded0 <ProcessHashDrv+0x1c0>
   1dd36:	4874      	ldr	r0, [pc, #464]	; (1df08 <ProcessHashDrv+0x1f8>)
   1dd38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dd3c:	f04f 0802 	mov.w	r8, #2
   1dd40:	f7ff f92a 	bl	1cf98 <CC_PalMutexLock>
   1dd44:	2800      	cmp	r0, #0
   1dd46:	f040 80b5 	bne.w	1deb4 <ProcessHashDrv+0x1a4>
   1dd4a:	2000      	movs	r0, #0
   1dd4c:	f7ff f954 	bl	1cff8 <CC_PalPowerSaveModeSelect>
   1dd50:	4605      	mov	r5, r0
   1dd52:	2800      	cmp	r0, #0
   1dd54:	f040 80b8 	bne.w	1dec8 <ProcessHashDrv+0x1b8>
   1dd58:	4a6c      	ldr	r2, [pc, #432]	; (1df0c <ProcessHashDrv+0x1fc>)
   1dd5a:	6813      	ldr	r3, [r2, #0]
   1dd5c:	2b00      	cmp	r3, #0
   1dd5e:	d1fc      	bne.n	1dd5a <ProcessHashDrv+0x4a>
   1dd60:	486b      	ldr	r0, [pc, #428]	; (1df10 <ProcessHashDrv+0x200>)
   1dd62:	6803      	ldr	r3, [r0, #0]
   1dd64:	2b00      	cmp	r3, #0
   1dd66:	d1fc      	bne.n	1dd62 <ProcessHashDrv+0x52>
   1dd68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dd6c:	f7ff f86c 	bl	1ce48 <CC_HalClearInterruptBit>
   1dd70:	4b68      	ldr	r3, [pc, #416]	; (1df14 <ProcessHashDrv+0x204>)
   1dd72:	6818      	ldr	r0, [r3, #0]
   1dd74:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   1dd78:	f7ff f874 	bl	1ce64 <CC_HalMaskInterrupt>
   1dd7c:	4866      	ldr	r0, [pc, #408]	; (1df18 <ProcessHashDrv+0x208>)
   1dd7e:	4a67      	ldr	r2, [pc, #412]	; (1df1c <ProcessHashDrv+0x20c>)
   1dd80:	4967      	ldr	r1, [pc, #412]	; (1df20 <ProcessHashDrv+0x210>)
   1dd82:	2301      	movs	r3, #1
   1dd84:	6003      	str	r3, [r0, #0]
   1dd86:	2007      	movs	r0, #7
   1dd88:	6010      	str	r0, [r2, #0]
   1dd8a:	600b      	str	r3, [r1, #0]
   1dd8c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
   1dd90:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1dd92:	6013      	str	r3, [r2, #0]
   1dd94:	4b63      	ldr	r3, [pc, #396]	; (1df24 <ProcessHashDrv+0x214>)
   1dd96:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   1dd98:	6051      	str	r1, [r2, #4]
   1dd9a:	f8c3 8000 	str.w	r8, [r3]
   1dd9e:	6823      	ldr	r3, [r4, #0]
   1dda0:	b15b      	cbz	r3, 1ddba <ProcessHashDrv+0xaa>
   1dda2:	3b01      	subs	r3, #1
   1dda4:	2b01      	cmp	r3, #1
   1dda6:	d817      	bhi.n	1ddd8 <ProcessHashDrv+0xc8>
   1dda8:	4b5f      	ldr	r3, [pc, #380]	; (1df28 <ProcessHashDrv+0x218>)
   1ddaa:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1ddac:	601a      	str	r2, [r3, #0]
   1ddae:	6a22      	ldr	r2, [r4, #32]
   1ddb0:	f843 2c04 	str.w	r2, [r3, #-4]
   1ddb4:	69e2      	ldr	r2, [r4, #28]
   1ddb6:	f843 2c08 	str.w	r2, [r3, #-8]
   1ddba:	4b5c      	ldr	r3, [pc, #368]	; (1df2c <ProcessHashDrv+0x21c>)
   1ddbc:	69a2      	ldr	r2, [r4, #24]
   1ddbe:	601a      	str	r2, [r3, #0]
   1ddc0:	6962      	ldr	r2, [r4, #20]
   1ddc2:	f843 2c04 	str.w	r2, [r3, #-4]
   1ddc6:	6922      	ldr	r2, [r4, #16]
   1ddc8:	f843 2c08 	str.w	r2, [r3, #-8]
   1ddcc:	68e2      	ldr	r2, [r4, #12]
   1ddce:	f843 2c0c 	str.w	r2, [r3, #-12]
   1ddd2:	68a2      	ldr	r2, [r4, #8]
   1ddd4:	f843 2c10 	str.w	r2, [r3, #-16]
   1ddd8:	4a55      	ldr	r2, [pc, #340]	; (1df30 <ProcessHashDrv+0x220>)
   1ddda:	6813      	ldr	r3, [r2, #0]
   1dddc:	2b00      	cmp	r3, #0
   1ddde:	d1fc      	bne.n	1ddda <ProcessHashDrv+0xca>
   1dde0:	2f00      	cmp	r7, #0
   1dde2:	d059      	beq.n	1de98 <ProcessHashDrv+0x188>
   1dde4:	6863      	ldr	r3, [r4, #4]
   1dde6:	2b01      	cmp	r3, #1
   1dde8:	bf04      	itt	eq
   1ddea:	4a52      	ldreq	r2, [pc, #328]	; (1df34 <ProcessHashDrv+0x224>)
   1ddec:	6013      	streq	r3, [r2, #0]
   1ddee:	4a52      	ldr	r2, [pc, #328]	; (1df38 <ProcessHashDrv+0x228>)
   1ddf0:	4b52      	ldr	r3, [pc, #328]	; (1df3c <ProcessHashDrv+0x22c>)
   1ddf2:	6831      	ldr	r1, [r6, #0]
   1ddf4:	6011      	str	r1, [r2, #0]
   1ddf6:	2040      	movs	r0, #64	; 0x40
   1ddf8:	601f      	str	r7, [r3, #0]
   1ddfa:	f7ff f839 	bl	1ce70 <CC_HalWaitInterrupt>
   1ddfe:	4605      	mov	r5, r0
   1de00:	4a4b      	ldr	r2, [pc, #300]	; (1df30 <ProcessHashDrv+0x220>)
   1de02:	6813      	ldr	r3, [r2, #0]
   1de04:	2b00      	cmp	r3, #0
   1de06:	d1fc      	bne.n	1de02 <ProcessHashDrv+0xf2>
   1de08:	4a41      	ldr	r2, [pc, #260]	; (1df10 <ProcessHashDrv+0x200>)
   1de0a:	6813      	ldr	r3, [r2, #0]
   1de0c:	2b00      	cmp	r3, #0
   1de0e:	d1fc      	bne.n	1de0a <ProcessHashDrv+0xfa>
   1de10:	6823      	ldr	r3, [r4, #0]
   1de12:	b15b      	cbz	r3, 1de2c <ProcessHashDrv+0x11c>
   1de14:	3b01      	subs	r3, #1
   1de16:	2b01      	cmp	r3, #1
   1de18:	d817      	bhi.n	1de4a <ProcessHashDrv+0x13a>
   1de1a:	4a43      	ldr	r2, [pc, #268]	; (1df28 <ProcessHashDrv+0x218>)
   1de1c:	4b48      	ldr	r3, [pc, #288]	; (1df40 <ProcessHashDrv+0x230>)
   1de1e:	6812      	ldr	r2, [r2, #0]
   1de20:	6262      	str	r2, [r4, #36]	; 0x24
   1de22:	681a      	ldr	r2, [r3, #0]
   1de24:	6222      	str	r2, [r4, #32]
   1de26:	3b04      	subs	r3, #4
   1de28:	681b      	ldr	r3, [r3, #0]
   1de2a:	61e3      	str	r3, [r4, #28]
   1de2c:	4a3f      	ldr	r2, [pc, #252]	; (1df2c <ProcessHashDrv+0x21c>)
   1de2e:	4b45      	ldr	r3, [pc, #276]	; (1df44 <ProcessHashDrv+0x234>)
   1de30:	6812      	ldr	r2, [r2, #0]
   1de32:	61a2      	str	r2, [r4, #24]
   1de34:	681a      	ldr	r2, [r3, #0]
   1de36:	6162      	str	r2, [r4, #20]
   1de38:	f853 2c04 	ldr.w	r2, [r3, #-4]
   1de3c:	6122      	str	r2, [r4, #16]
   1de3e:	f853 2c08 	ldr.w	r2, [r3, #-8]
   1de42:	60e2      	str	r2, [r4, #12]
   1de44:	3b0c      	subs	r3, #12
   1de46:	681b      	ldr	r3, [r3, #0]
   1de48:	60a3      	str	r3, [r4, #8]
   1de4a:	4b3f      	ldr	r3, [pc, #252]	; (1df48 <ProcessHashDrv+0x238>)
   1de4c:	4a3f      	ldr	r2, [pc, #252]	; (1df4c <ProcessHashDrv+0x23c>)
   1de4e:	681b      	ldr	r3, [r3, #0]
   1de50:	64a3      	str	r3, [r4, #72]	; 0x48
   1de52:	6812      	ldr	r2, [r2, #0]
   1de54:	4b32      	ldr	r3, [pc, #200]	; (1df20 <ProcessHashDrv+0x210>)
   1de56:	64e2      	str	r2, [r4, #76]	; 0x4c
   1de58:	4836      	ldr	r0, [pc, #216]	; (1df34 <ProcessHashDrv+0x224>)
   1de5a:	493d      	ldr	r1, [pc, #244]	; (1df50 <ProcessHashDrv+0x240>)
   1de5c:	2201      	movs	r2, #1
   1de5e:	601a      	str	r2, [r3, #0]
   1de60:	2300      	movs	r3, #0
   1de62:	4a33      	ldr	r2, [pc, #204]	; (1df30 <ProcessHashDrv+0x220>)
   1de64:	6003      	str	r3, [r0, #0]
   1de66:	600b      	str	r3, [r1, #0]
   1de68:	6813      	ldr	r3, [r2, #0]
   1de6a:	2b00      	cmp	r3, #0
   1de6c:	d1fc      	bne.n	1de68 <ProcessHashDrv+0x158>
   1de6e:	4a2a      	ldr	r2, [pc, #168]	; (1df18 <ProcessHashDrv+0x208>)
   1de70:	6013      	str	r3, [r2, #0]
   1de72:	2d00      	cmp	r5, #0
   1de74:	d13a      	bne.n	1deec <ProcessHashDrv+0x1dc>
   1de76:	4b27      	ldr	r3, [pc, #156]	; (1df14 <ProcessHashDrv+0x204>)
   1de78:	6818      	ldr	r0, [r3, #0]
   1de7a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1de7e:	f7fe fff1 	bl	1ce64 <CC_HalMaskInterrupt>
   1de82:	2001      	movs	r0, #1
   1de84:	f7ff f8b8 	bl	1cff8 <CC_PalPowerSaveModeSelect>
   1de88:	bb60      	cbnz	r0, 1dee4 <ProcessHashDrv+0x1d4>
   1de8a:	481f      	ldr	r0, [pc, #124]	; (1df08 <ProcessHashDrv+0x1f8>)
   1de8c:	f7ff f88c 	bl	1cfa8 <CC_PalMutexUnlock>
   1de90:	bb10      	cbnz	r0, 1ded8 <ProcessHashDrv+0x1c8>
   1de92:	4628      	mov	r0, r5
   1de94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1de98:	4b2d      	ldr	r3, [pc, #180]	; (1df50 <ProcessHashDrv+0x240>)
   1de9a:	2204      	movs	r2, #4
   1de9c:	601a      	str	r2, [r3, #0]
   1de9e:	e7af      	b.n	1de00 <ProcessHashDrv+0xf0>
   1dea0:	4819      	ldr	r0, [pc, #100]	; (1df08 <ProcessHashDrv+0x1f8>)
   1dea2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dea6:	f04f 0801 	mov.w	r8, #1
   1deaa:	f7ff f875 	bl	1cf98 <CC_PalMutexLock>
   1deae:	2800      	cmp	r0, #0
   1deb0:	f43f af4b 	beq.w	1dd4a <ProcessHashDrv+0x3a>
   1deb4:	4827      	ldr	r0, [pc, #156]	; (1df54 <ProcessHashDrv+0x244>)
   1deb6:	f7fe f923 	bl	1c100 <CC_PalAbort>
   1deba:	2000      	movs	r0, #0
   1debc:	f7ff f89c 	bl	1cff8 <CC_PalPowerSaveModeSelect>
   1dec0:	4605      	mov	r5, r0
   1dec2:	2800      	cmp	r0, #0
   1dec4:	f43f af48 	beq.w	1dd58 <ProcessHashDrv+0x48>
   1dec8:	4823      	ldr	r0, [pc, #140]	; (1df58 <ProcessHashDrv+0x248>)
   1deca:	f7fe f919 	bl	1c100 <CC_PalAbort>
   1dece:	e743      	b.n	1dd58 <ProcessHashDrv+0x48>
   1ded0:	4d22      	ldr	r5, [pc, #136]	; (1df5c <ProcessHashDrv+0x24c>)
   1ded2:	4628      	mov	r0, r5
   1ded4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ded8:	4821      	ldr	r0, [pc, #132]	; (1df60 <ProcessHashDrv+0x250>)
   1deda:	f7fe f911 	bl	1c100 <CC_PalAbort>
   1dede:	4628      	mov	r0, r5
   1dee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dee4:	481f      	ldr	r0, [pc, #124]	; (1df64 <ProcessHashDrv+0x254>)
   1dee6:	f7fe f90b 	bl	1c100 <CC_PalAbort>
   1deea:	e7ce      	b.n	1de8a <ProcessHashDrv+0x17a>
   1deec:	f104 0008 	add.w	r0, r4, #8
   1def0:	2110      	movs	r1, #16
   1def2:	f7ff fe0b 	bl	1db0c <CC_PalMemSetZeroPlat>
   1def6:	e7be      	b.n	1de76 <ProcessHashDrv+0x166>
   1def8:	4d1b      	ldr	r5, [pc, #108]	; (1df68 <ProcessHashDrv+0x258>)
   1defa:	4628      	mov	r0, r5
   1defc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1df00:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   1df04:	e7c5      	b.n	1de92 <ProcessHashDrv+0x182>
   1df06:	bf00      	nop
   1df08:	200005b8 	.word	0x200005b8
   1df0c:	5002b91c 	.word	0x5002b91c
   1df10:	5002bc20 	.word	0x5002bc20
   1df14:	5002ba04 	.word	0x5002ba04
   1df18:	5002b818 	.word	0x5002b818
   1df1c:	5002b900 	.word	0x5002b900
   1df20:	5002b7c4 	.word	0x5002b7c4
   1df24:	5002b7c0 	.word	0x5002b7c0
   1df28:	5002b65c 	.word	0x5002b65c
   1df2c:	5002b650 	.word	0x5002b650
   1df30:	5002b910 	.word	0x5002b910
   1df34:	5002b684 	.word	0x5002b684
   1df38:	5002bc28 	.word	0x5002bc28
   1df3c:	5002bc2c 	.word	0x5002bc2c
   1df40:	5002b658 	.word	0x5002b658
   1df44:	5002b64c 	.word	0x5002b64c
   1df48:	5002b7cc 	.word	0x5002b7cc
   1df4c:	5002b7d0 	.word	0x5002b7d0
   1df50:	5002b7c8 	.word	0x5002b7c8
   1df54:	000211f0 	.word	0x000211f0
   1df58:	00021208 	.word	0x00021208
   1df5c:	00f30001 	.word	0x00f30001
   1df60:	00021248 	.word	0x00021248
   1df64:	00021228 	.word	0x00021228
   1df68:	00f30003 	.word	0x00f30003

0001df6c <FinishHashDrv>:
   1df6c:	2800      	cmp	r0, #0
   1df6e:	d03b      	beq.n	1dfe8 <FinishHashDrv+0x7c>
   1df70:	b4f0      	push	{r4, r5, r6, r7}
   1df72:	b082      	sub	sp, #8
   1df74:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1df76:	9301      	str	r3, [sp, #4]
   1df78:	6883      	ldr	r3, [r0, #8]
   1df7a:	fa93 fc83 	rev.w	ip, r3
   1df7e:	9b01      	ldr	r3, [sp, #4]
   1df80:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   1df84:	e9d0 7603 	ldrd	r7, r6, [r0, #12]
   1df88:	e9d0 5405 	ldrd	r5, r4, [r0, #20]
   1df8c:	ba1b      	rev	r3, r3
   1df8e:	6243      	str	r3, [r0, #36]	; 0x24
   1df90:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1df92:	9301      	str	r3, [sp, #4]
   1df94:	ba09      	rev	r1, r1
   1df96:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1df98:	61c1      	str	r1, [r0, #28]
   1df9a:	ba12      	rev	r2, r2
   1df9c:	6202      	str	r2, [r0, #32]
   1df9e:	ba3f      	rev	r7, r7
   1dfa0:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
   1dfa4:	ba36      	rev	r6, r6
   1dfa6:	ba2d      	rev	r5, r5
   1dfa8:	ba24      	rev	r4, r4
   1dfaa:	e9c0 c702 	strd	ip, r7, [r0, #8]
   1dfae:	e9c0 6504 	strd	r6, r5, [r0, #16]
   1dfb2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   1dfb4:	6b06      	ldr	r6, [r0, #48]	; 0x30
   1dfb6:	6b45      	ldr	r5, [r0, #52]	; 0x34
   1dfb8:	6184      	str	r4, [r0, #24]
   1dfba:	fa93 fc83 	rev.w	ip, r3
   1dfbe:	6b84      	ldr	r4, [r0, #56]	; 0x38
   1dfc0:	9b01      	ldr	r3, [sp, #4]
   1dfc2:	ba3f      	rev	r7, r7
   1dfc4:	ba36      	rev	r6, r6
   1dfc6:	ba2d      	rev	r5, r5
   1dfc8:	ba24      	rev	r4, r4
   1dfca:	ba09      	rev	r1, r1
   1dfcc:	ba12      	rev	r2, r2
   1dfce:	ba1b      	rev	r3, r3
   1dfd0:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
   1dfd4:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   1dfd8:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   1dfdc:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   1dfe0:	2000      	movs	r0, #0
   1dfe2:	b002      	add	sp, #8
   1dfe4:	bcf0      	pop	{r4, r5, r6, r7}
   1dfe6:	4770      	bx	lr
   1dfe8:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1dfec:	4770      	bx	lr
   1dfee:	bf00      	nop

0001dff0 <LoadAesKey>:
   1dff0:	2800      	cmp	r0, #0
   1dff2:	d03b      	beq.n	1e06c <LoadAesKey+0x7c>
   1dff4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   1dff8:	2b00      	cmp	r3, #0
   1dffa:	d02c      	beq.n	1e056 <LoadAesKey+0x66>
   1dffc:	2b03      	cmp	r3, #3
   1dffe:	b510      	push	{r4, lr}
   1e000:	d00f      	beq.n	1e022 <LoadAesKey+0x32>
   1e002:	481c      	ldr	r0, [pc, #112]	; (1e074 <LoadAesKey+0x84>)
   1e004:	4c1c      	ldr	r4, [pc, #112]	; (1e078 <LoadAesKey+0x88>)
   1e006:	6822      	ldr	r2, [r4, #0]
   1e008:	4b1c      	ldr	r3, [pc, #112]	; (1e07c <LoadAesKey+0x8c>)
   1e00a:	6812      	ldr	r2, [r2, #0]
   1e00c:	601a      	str	r2, [r3, #0]
   1e00e:	6822      	ldr	r2, [r4, #0]
   1e010:	6852      	ldr	r2, [r2, #4]
   1e012:	605a      	str	r2, [r3, #4]
   1e014:	6822      	ldr	r2, [r4, #0]
   1e016:	6892      	ldr	r2, [r2, #8]
   1e018:	609a      	str	r2, [r3, #8]
   1e01a:	6822      	ldr	r2, [r4, #0]
   1e01c:	68d2      	ldr	r2, [r2, #12]
   1e01e:	60da      	str	r2, [r3, #12]
   1e020:	bd10      	pop	{r4, pc}
   1e022:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1e024:	6c00      	ldr	r0, [r0, #64]	; 0x40
   1e026:	4c14      	ldr	r4, [pc, #80]	; (1e078 <LoadAesKey+0x88>)
   1e028:	f000 fba4 	bl	1e774 <kmu_validate_kdr_slot_and_size>
   1e02c:	2800      	cmp	r0, #0
   1e02e:	d1ea      	bne.n	1e006 <LoadAesKey+0x16>
   1e030:	6821      	ldr	r1, [r4, #0]
   1e032:	4a12      	ldr	r2, [pc, #72]	; (1e07c <LoadAesKey+0x8c>)
   1e034:	6809      	ldr	r1, [r1, #0]
   1e036:	6011      	str	r1, [r2, #0]
   1e038:	6821      	ldr	r1, [r4, #0]
   1e03a:	4b11      	ldr	r3, [pc, #68]	; (1e080 <LoadAesKey+0x90>)
   1e03c:	6849      	ldr	r1, [r1, #4]
   1e03e:	6019      	str	r1, [r3, #0]
   1e040:	6821      	ldr	r1, [r4, #0]
   1e042:	6889      	ldr	r1, [r1, #8]
   1e044:	6091      	str	r1, [r2, #8]
   1e046:	6822      	ldr	r2, [r4, #0]
   1e048:	68d2      	ldr	r2, [r2, #12]
   1e04a:	609a      	str	r2, [r3, #8]
   1e04c:	f000 fb9e 	bl	1e78c <kmu_use_kdr_key>
   1e050:	2800      	cmp	r0, #0
   1e052:	d1d8      	bne.n	1e006 <LoadAesKey+0x16>
   1e054:	bd10      	pop	{r4, pc}
   1e056:	4a09      	ldr	r2, [pc, #36]	; (1e07c <LoadAesKey+0x8c>)
   1e058:	6901      	ldr	r1, [r0, #16]
   1e05a:	6011      	str	r1, [r2, #0]
   1e05c:	6941      	ldr	r1, [r0, #20]
   1e05e:	6051      	str	r1, [r2, #4]
   1e060:	6981      	ldr	r1, [r0, #24]
   1e062:	6091      	str	r1, [r2, #8]
   1e064:	69c1      	ldr	r1, [r0, #28]
   1e066:	60d1      	str	r1, [r2, #12]
   1e068:	4618      	mov	r0, r3
   1e06a:	4770      	bx	lr
   1e06c:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   1e070:	4770      	bx	lr
   1e072:	bf00      	nop
   1e074:	00f10009 	.word	0x00f10009
   1e078:	200005a8 	.word	0x200005a8
   1e07c:	5002b400 	.word	0x5002b400
   1e080:	5002b404 	.word	0x5002b404

0001e084 <InitAes.part.0>:
   1e084:	4a32      	ldr	r2, [pc, #200]	; (1e150 <InitAes.part.0+0xcc>)
   1e086:	b510      	push	{r4, lr}
   1e088:	4604      	mov	r4, r0
   1e08a:	6813      	ldr	r3, [r2, #0]
   1e08c:	2b00      	cmp	r3, #0
   1e08e:	d1fc      	bne.n	1e08a <InitAes.part.0+0x6>
   1e090:	4a30      	ldr	r2, [pc, #192]	; (1e154 <InitAes.part.0+0xd0>)
   1e092:	6813      	ldr	r3, [r2, #0]
   1e094:	2b00      	cmp	r3, #0
   1e096:	d1fc      	bne.n	1e092 <InitAes.part.0+0xe>
   1e098:	4a2f      	ldr	r2, [pc, #188]	; (1e158 <InitAes.part.0+0xd4>)
   1e09a:	6813      	ldr	r3, [r2, #0]
   1e09c:	2b00      	cmp	r3, #0
   1e09e:	d1fc      	bne.n	1e09a <InitAes.part.0+0x16>
   1e0a0:	4a2e      	ldr	r2, [pc, #184]	; (1e15c <InitAes.part.0+0xd8>)
   1e0a2:	6813      	ldr	r3, [r2, #0]
   1e0a4:	2b00      	cmp	r3, #0
   1e0a6:	d1fc      	bne.n	1e0a2 <InitAes.part.0+0x1e>
   1e0a8:	4a2d      	ldr	r2, [pc, #180]	; (1e160 <InitAes.part.0+0xdc>)
   1e0aa:	6813      	ldr	r3, [r2, #0]
   1e0ac:	2b00      	cmp	r3, #0
   1e0ae:	d1fc      	bne.n	1e0aa <InitAes.part.0+0x26>
   1e0b0:	4a2c      	ldr	r2, [pc, #176]	; (1e164 <InitAes.part.0+0xe0>)
   1e0b2:	6813      	ldr	r3, [r2, #0]
   1e0b4:	2b00      	cmp	r3, #0
   1e0b6:	d1fc      	bne.n	1e0b2 <InitAes.part.0+0x2e>
   1e0b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e0bc:	f7fe fec4 	bl	1ce48 <CC_HalClearInterruptBit>
   1e0c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e0c2:	f023 0304 	bic.w	r3, r3, #4
   1e0c6:	2b03      	cmp	r3, #3
   1e0c8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1e0ca:	d036      	beq.n	1e13a <InitAes.part.0+0xb6>
   1e0cc:	2b01      	cmp	r3, #1
   1e0ce:	4b26      	ldr	r3, [pc, #152]	; (1e168 <InitAes.part.0+0xe4>)
   1e0d0:	6818      	ldr	r0, [r3, #0]
   1e0d2:	bf0c      	ite	eq
   1e0d4:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   1e0d8:	f020 0020 	bicne.w	r0, r0, #32
   1e0dc:	f7fe fec2 	bl	1ce64 <CC_HalMaskInterrupt>
   1e0e0:	4b22      	ldr	r3, [pc, #136]	; (1e16c <InitAes.part.0+0xe8>)
   1e0e2:	4a1b      	ldr	r2, [pc, #108]	; (1e150 <InitAes.part.0+0xcc>)
   1e0e4:	2101      	movs	r1, #1
   1e0e6:	6019      	str	r1, [r3, #0]
   1e0e8:	6813      	ldr	r3, [r2, #0]
   1e0ea:	2b00      	cmp	r3, #0
   1e0ec:	d1fc      	bne.n	1e0e8 <InitAes.part.0+0x64>
   1e0ee:	4a19      	ldr	r2, [pc, #100]	; (1e154 <InitAes.part.0+0xd0>)
   1e0f0:	6813      	ldr	r3, [r2, #0]
   1e0f2:	2b00      	cmp	r3, #0
   1e0f4:	d1fc      	bne.n	1e0f0 <InitAes.part.0+0x6c>
   1e0f6:	491e      	ldr	r1, [pc, #120]	; (1e170 <InitAes.part.0+0xec>)
   1e0f8:	4a15      	ldr	r2, [pc, #84]	; (1e150 <InitAes.part.0+0xcc>)
   1e0fa:	600b      	str	r3, [r1, #0]
   1e0fc:	6813      	ldr	r3, [r2, #0]
   1e0fe:	2b00      	cmp	r3, #0
   1e100:	d1fc      	bne.n	1e0fc <InitAes.part.0+0x78>
   1e102:	4a14      	ldr	r2, [pc, #80]	; (1e154 <InitAes.part.0+0xd0>)
   1e104:	6813      	ldr	r3, [r2, #0]
   1e106:	2b00      	cmp	r3, #0
   1e108:	d1fc      	bne.n	1e104 <InitAes.part.0+0x80>
   1e10a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1e10c:	f022 0104 	bic.w	r1, r2, #4
   1e110:	2903      	cmp	r1, #3
   1e112:	bf18      	it	ne
   1e114:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   1e116:	4917      	ldr	r1, [pc, #92]	; (1e174 <InitAes.part.0+0xf0>)
   1e118:	ea4f 0282 	mov.w	r2, r2, lsl #2
   1e11c:	bf18      	it	ne
   1e11e:	f003 0301 	andne.w	r3, r3, #1
   1e122:	f002 021c 	and.w	r2, r2, #28
   1e126:	4313      	orrs	r3, r2
   1e128:	600b      	str	r3, [r1, #0]
   1e12a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e12c:	2b07      	cmp	r3, #7
   1e12e:	d102      	bne.n	1e136 <InitAes.part.0+0xb2>
   1e130:	4b11      	ldr	r3, [pc, #68]	; (1e178 <InitAes.part.0+0xf4>)
   1e132:	2201      	movs	r2, #1
   1e134:	601a      	str	r2, [r3, #0]
   1e136:	2000      	movs	r0, #0
   1e138:	bd10      	pop	{r4, pc}
   1e13a:	2b01      	cmp	r3, #1
   1e13c:	4b0a      	ldr	r3, [pc, #40]	; (1e168 <InitAes.part.0+0xe4>)
   1e13e:	6818      	ldr	r0, [r3, #0]
   1e140:	bf0c      	ite	eq
   1e142:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   1e146:	f020 0010 	bicne.w	r0, r0, #16
   1e14a:	f7fe fe8b 	bl	1ce64 <CC_HalMaskInterrupt>
   1e14e:	e7c7      	b.n	1e0e0 <InitAes.part.0+0x5c>
   1e150:	5002b910 	.word	0x5002b910
   1e154:	5002b470 	.word	0x5002b470
   1e158:	5002bd20 	.word	0x5002bd20
   1e15c:	5002bc20 	.word	0x5002bc20
   1e160:	5002bd38 	.word	0x5002bd38
   1e164:	5002bc38 	.word	0x5002bc38
   1e168:	5002ba04 	.word	0x5002ba04
   1e16c:	5002b900 	.word	0x5002b900
   1e170:	5002b4bc 	.word	0x5002b4bc
   1e174:	5002b4c0 	.word	0x5002b4c0
   1e178:	5002b47c 	.word	0x5002b47c

0001e17c <ProcessAesDrv>:
   1e17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e180:	b087      	sub	sp, #28
   1e182:	2900      	cmp	r1, #0
   1e184:	f000 80a5 	beq.w	1e2d2 <ProcessAesDrv+0x156>
   1e188:	4616      	mov	r6, r2
   1e18a:	2a00      	cmp	r2, #0
   1e18c:	f000 80a1 	beq.w	1e2d2 <ProcessAesDrv+0x156>
   1e190:	4604      	mov	r4, r0
   1e192:	2800      	cmp	r0, #0
   1e194:	f000 813f 	beq.w	1e416 <ProcessAesDrv+0x29a>
   1e198:	461f      	mov	r7, r3
   1e19a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1e19c:	460d      	mov	r5, r1
   1e19e:	2b00      	cmp	r3, #0
   1e1a0:	d150      	bne.n	1e244 <ProcessAesDrv+0xc8>
   1e1a2:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   1e1a6:	d252      	bcs.n	1e24e <ProcessAesDrv+0xd2>
   1e1a8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1e1ac:	2b04      	cmp	r3, #4
   1e1ae:	f000 8109 	beq.w	1e3c4 <ProcessAesDrv+0x248>
   1e1b2:	f04f 0800 	mov.w	r8, #0
   1e1b6:	48aa      	ldr	r0, [pc, #680]	; (1e460 <ProcessAesDrv+0x2e4>)
   1e1b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e1bc:	f7fe feec 	bl	1cf98 <CC_PalMutexLock>
   1e1c0:	2800      	cmp	r0, #0
   1e1c2:	f040 80de 	bne.w	1e382 <ProcessAesDrv+0x206>
   1e1c6:	2000      	movs	r0, #0
   1e1c8:	f7fe ff16 	bl	1cff8 <CC_PalPowerSaveModeSelect>
   1e1cc:	2800      	cmp	r0, #0
   1e1ce:	f040 80e1 	bne.w	1e394 <ProcessAesDrv+0x218>
   1e1d2:	4ba4      	ldr	r3, [pc, #656]	; (1e464 <ProcessAesDrv+0x2e8>)
   1e1d4:	4aa4      	ldr	r2, [pc, #656]	; (1e468 <ProcessAesDrv+0x2ec>)
   1e1d6:	2101      	movs	r1, #1
   1e1d8:	6019      	str	r1, [r3, #0]
   1e1da:	6813      	ldr	r3, [r2, #0]
   1e1dc:	2b00      	cmp	r3, #0
   1e1de:	d1fc      	bne.n	1e1da <ProcessAesDrv+0x5e>
   1e1e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e1e2:	2b03      	cmp	r3, #3
   1e1e4:	dc39      	bgt.n	1e25a <ProcessAesDrv+0xde>
   1e1e6:	2b00      	cmp	r3, #0
   1e1e8:	da3a      	bge.n	1e260 <ProcessAesDrv+0xe4>
   1e1ea:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 1e4b4 <ProcessAesDrv+0x338>
   1e1ee:	4a9e      	ldr	r2, [pc, #632]	; (1e468 <ProcessAesDrv+0x2ec>)
   1e1f0:	6813      	ldr	r3, [r2, #0]
   1e1f2:	2b00      	cmp	r3, #0
   1e1f4:	d1fc      	bne.n	1e1f0 <ProcessAesDrv+0x74>
   1e1f6:	f1b8 0f00 	cmp.w	r8, #0
   1e1fa:	f040 80da 	bne.w	1e3b2 <ProcessAesDrv+0x236>
   1e1fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e200:	f023 0304 	bic.w	r3, r3, #4
   1e204:	2b03      	cmp	r3, #3
   1e206:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1e208:	d058      	beq.n	1e2bc <ProcessAesDrv+0x140>
   1e20a:	2b01      	cmp	r3, #1
   1e20c:	4b97      	ldr	r3, [pc, #604]	; (1e46c <ProcessAesDrv+0x2f0>)
   1e20e:	6818      	ldr	r0, [r3, #0]
   1e210:	bf0c      	ite	eq
   1e212:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   1e216:	f040 0020 	orrne.w	r0, r0, #32
   1e21a:	f7fe fe23 	bl	1ce64 <CC_HalMaskInterrupt>
   1e21e:	4b91      	ldr	r3, [pc, #580]	; (1e464 <ProcessAesDrv+0x2e8>)
   1e220:	2200      	movs	r2, #0
   1e222:	601a      	str	r2, [r3, #0]
   1e224:	2001      	movs	r0, #1
   1e226:	f7fe fee7 	bl	1cff8 <CC_PalPowerSaveModeSelect>
   1e22a:	2800      	cmp	r0, #0
   1e22c:	f040 80bd 	bne.w	1e3aa <ProcessAesDrv+0x22e>
   1e230:	488b      	ldr	r0, [pc, #556]	; (1e460 <ProcessAesDrv+0x2e4>)
   1e232:	f7fe feb9 	bl	1cfa8 <CC_PalMutexUnlock>
   1e236:	2800      	cmp	r0, #0
   1e238:	f040 80b0 	bne.w	1e39c <ProcessAesDrv+0x220>
   1e23c:	4648      	mov	r0, r9
   1e23e:	b007      	add	sp, #28
   1e240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e244:	2b01      	cmp	r3, #1
   1e246:	d1af      	bne.n	1e1a8 <ProcessAesDrv+0x2c>
   1e248:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   1e24c:	d3ac      	bcc.n	1e1a8 <ProcessAesDrv+0x2c>
   1e24e:	f8df 9268 	ldr.w	r9, [pc, #616]	; 1e4b8 <ProcessAesDrv+0x33c>
   1e252:	4648      	mov	r0, r9
   1e254:	b007      	add	sp, #28
   1e256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e25a:	3b06      	subs	r3, #6
   1e25c:	2b01      	cmp	r3, #1
   1e25e:	d8c4      	bhi.n	1e1ea <ProcessAesDrv+0x6e>
   1e260:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1e262:	2b01      	cmp	r3, #1
   1e264:	f200 80d4 	bhi.w	1e410 <ProcessAesDrv+0x294>
   1e268:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1e26a:	2b01      	cmp	r3, #1
   1e26c:	d837      	bhi.n	1e2de <ProcessAesDrv+0x162>
   1e26e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1e270:	2b01      	cmp	r3, #1
   1e272:	f200 8131 	bhi.w	1e4d8 <ProcessAesDrv+0x35c>
   1e276:	4620      	mov	r0, r4
   1e278:	f7ff ff04 	bl	1e084 <InitAes.part.0>
   1e27c:	4681      	mov	r9, r0
   1e27e:	2800      	cmp	r0, #0
   1e280:	d1b5      	bne.n	1e1ee <ProcessAesDrv+0x72>
   1e282:	4620      	mov	r0, r4
   1e284:	f7ff feb4 	bl	1dff0 <LoadAesKey>
   1e288:	4681      	mov	r9, r0
   1e28a:	2800      	cmp	r0, #0
   1e28c:	d1af      	bne.n	1e1ee <ProcessAesDrv+0x72>
   1e28e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e290:	2b07      	cmp	r3, #7
   1e292:	d8aa      	bhi.n	1e1ea <ProcessAesDrv+0x6e>
   1e294:	a201      	add	r2, pc, #4	; (adr r2, 1e29c <ProcessAesDrv+0x120>)
   1e296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e29a:	bf00      	nop
   1e29c:	0001e2f9 	.word	0x0001e2f9
   1e2a0:	0001e2e5 	.word	0x0001e2e5
   1e2a4:	0001e455 	.word	0x0001e455
   1e2a8:	0001e2e5 	.word	0x0001e2e5
   1e2ac:	0001e1eb 	.word	0x0001e1eb
   1e2b0:	0001e1eb 	.word	0x0001e1eb
   1e2b4:	0001e455 	.word	0x0001e455
   1e2b8:	0001e2e5 	.word	0x0001e2e5
   1e2bc:	2b01      	cmp	r3, #1
   1e2be:	4b6b      	ldr	r3, [pc, #428]	; (1e46c <ProcessAesDrv+0x2f0>)
   1e2c0:	6818      	ldr	r0, [r3, #0]
   1e2c2:	bf0c      	ite	eq
   1e2c4:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   1e2c8:	f040 0010 	orrne.w	r0, r0, #16
   1e2cc:	f7fe fdca 	bl	1ce64 <CC_HalMaskInterrupt>
   1e2d0:	e7a5      	b.n	1e21e <ProcessAesDrv+0xa2>
   1e2d2:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 1e4bc <ProcessAesDrv+0x340>
   1e2d6:	4648      	mov	r0, r9
   1e2d8:	b007      	add	sp, #28
   1e2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e2de:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 1e4c0 <ProcessAesDrv+0x344>
   1e2e2:	e784      	b.n	1e1ee <ProcessAesDrv+0x72>
   1e2e4:	4b62      	ldr	r3, [pc, #392]	; (1e470 <ProcessAesDrv+0x2f4>)
   1e2e6:	6822      	ldr	r2, [r4, #0]
   1e2e8:	601a      	str	r2, [r3, #0]
   1e2ea:	6862      	ldr	r2, [r4, #4]
   1e2ec:	605a      	str	r2, [r3, #4]
   1e2ee:	68a2      	ldr	r2, [r4, #8]
   1e2f0:	609a      	str	r2, [r3, #8]
   1e2f2:	68e2      	ldr	r2, [r4, #12]
   1e2f4:	60da      	str	r2, [r3, #12]
   1e2f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e2f8:	682a      	ldr	r2, [r5, #0]
   1e2fa:	f023 0304 	bic.w	r3, r3, #4
   1e2fe:	2b03      	cmp	r3, #3
   1e300:	d009      	beq.n	1e316 <ProcessAesDrv+0x19a>
   1e302:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1e304:	6833      	ldr	r3, [r6, #0]
   1e306:	2901      	cmp	r1, #1
   1e308:	bf07      	ittee	eq
   1e30a:	485a      	ldreq	r0, [pc, #360]	; (1e474 <ProcessAesDrv+0x2f8>)
   1e30c:	495a      	ldreq	r1, [pc, #360]	; (1e478 <ProcessAesDrv+0x2fc>)
   1e30e:	485b      	ldrne	r0, [pc, #364]	; (1e47c <ProcessAesDrv+0x300>)
   1e310:	495b      	ldrne	r1, [pc, #364]	; (1e480 <ProcessAesDrv+0x304>)
   1e312:	6003      	str	r3, [r0, #0]
   1e314:	600f      	str	r7, [r1, #0]
   1e316:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1e318:	2b01      	cmp	r3, #1
   1e31a:	bf0b      	itete	eq
   1e31c:	4b59      	ldreq	r3, [pc, #356]	; (1e484 <ProcessAesDrv+0x308>)
   1e31e:	4b5a      	ldrne	r3, [pc, #360]	; (1e488 <ProcessAesDrv+0x30c>)
   1e320:	495a      	ldreq	r1, [pc, #360]	; (1e48c <ProcessAesDrv+0x310>)
   1e322:	495b      	ldrne	r1, [pc, #364]	; (1e490 <ProcessAesDrv+0x314>)
   1e324:	600a      	str	r2, [r1, #0]
   1e326:	601f      	str	r7, [r3, #0]
   1e328:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e32a:	f023 0304 	bic.w	r3, r3, #4
   1e32e:	2b03      	cmp	r3, #3
   1e330:	d074      	beq.n	1e41c <ProcessAesDrv+0x2a0>
   1e332:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1e334:	2b01      	cmp	r3, #1
   1e336:	bf0c      	ite	eq
   1e338:	2080      	moveq	r0, #128	; 0x80
   1e33a:	2020      	movne	r0, #32
   1e33c:	f7fe fd98 	bl	1ce70 <CC_HalWaitInterrupt>
   1e340:	4681      	mov	r9, r0
   1e342:	2800      	cmp	r0, #0
   1e344:	f47f af53 	bne.w	1e1ee <ProcessAesDrv+0x72>
   1e348:	4b47      	ldr	r3, [pc, #284]	; (1e468 <ProcessAesDrv+0x2ec>)
   1e34a:	681a      	ldr	r2, [r3, #0]
   1e34c:	2a00      	cmp	r2, #0
   1e34e:	d1fc      	bne.n	1e34a <ProcessAesDrv+0x1ce>
   1e350:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e352:	3b01      	subs	r3, #1
   1e354:	4691      	mov	r9, r2
   1e356:	2b06      	cmp	r3, #6
   1e358:	d810      	bhi.n	1e37c <ProcessAesDrv+0x200>
   1e35a:	e8df f003 	tbb	[pc, r3]
   1e35e:	7d04      	.short	0x7d04
   1e360:	7d0f0f04 	.word	0x7d0f0f04
   1e364:	04          	.byte	0x04
   1e365:	00          	.byte	0x00
   1e366:	4a42      	ldr	r2, [pc, #264]	; (1e470 <ProcessAesDrv+0x2f4>)
   1e368:	4b4a      	ldr	r3, [pc, #296]	; (1e494 <ProcessAesDrv+0x318>)
   1e36a:	6812      	ldr	r2, [r2, #0]
   1e36c:	6022      	str	r2, [r4, #0]
   1e36e:	681a      	ldr	r2, [r3, #0]
   1e370:	6062      	str	r2, [r4, #4]
   1e372:	685a      	ldr	r2, [r3, #4]
   1e374:	60a2      	str	r2, [r4, #8]
   1e376:	3308      	adds	r3, #8
   1e378:	681b      	ldr	r3, [r3, #0]
   1e37a:	60e3      	str	r3, [r4, #12]
   1e37c:	2301      	movs	r3, #1
   1e37e:	65a3      	str	r3, [r4, #88]	; 0x58
   1e380:	e735      	b.n	1e1ee <ProcessAesDrv+0x72>
   1e382:	4845      	ldr	r0, [pc, #276]	; (1e498 <ProcessAesDrv+0x31c>)
   1e384:	f7fd febc 	bl	1c100 <CC_PalAbort>
   1e388:	2000      	movs	r0, #0
   1e38a:	f7fe fe35 	bl	1cff8 <CC_PalPowerSaveModeSelect>
   1e38e:	2800      	cmp	r0, #0
   1e390:	f43f af1f 	beq.w	1e1d2 <ProcessAesDrv+0x56>
   1e394:	4841      	ldr	r0, [pc, #260]	; (1e49c <ProcessAesDrv+0x320>)
   1e396:	f7fd feb3 	bl	1c100 <CC_PalAbort>
   1e39a:	e71a      	b.n	1e1d2 <ProcessAesDrv+0x56>
   1e39c:	4840      	ldr	r0, [pc, #256]	; (1e4a0 <ProcessAesDrv+0x324>)
   1e39e:	f7fd feaf 	bl	1c100 <CC_PalAbort>
   1e3a2:	4648      	mov	r0, r9
   1e3a4:	b007      	add	sp, #28
   1e3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3aa:	483e      	ldr	r0, [pc, #248]	; (1e4a4 <ProcessAesDrv+0x328>)
   1e3ac:	f7fd fea8 	bl	1c100 <CC_PalAbort>
   1e3b0:	e73e      	b.n	1e230 <ProcessAesDrv+0xb4>
   1e3b2:	2304      	movs	r3, #4
   1e3b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   1e3b8:	2120      	movs	r1, #32
   1e3ba:	f104 0010 	add.w	r0, r4, #16
   1e3be:	f7ff fba5 	bl	1db0c <CC_PalMemSetZeroPlat>
   1e3c2:	e71c      	b.n	1e1fe <ProcessAesDrv+0x82>
   1e3c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1e3c6:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1e3c8:	f000 f9c8 	bl	1e75c <kmu_validate_slot_and_size>
   1e3cc:	b9e8      	cbnz	r0, 1e40a <ProcessAesDrv+0x28e>
   1e3ce:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1e4c4 <ProcessAesDrv+0x348>
   1e3d2:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 1e4c8 <ProcessAesDrv+0x34c>
   1e3d6:	f8d8 3000 	ldr.w	r3, [r8]
   1e3da:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 1e4cc <ProcessAesDrv+0x350>
   1e3de:	681b      	ldr	r3, [r3, #0]
   1e3e0:	f8cb 3000 	str.w	r3, [fp]
   1e3e4:	f8d8 3000 	ldr.w	r3, [r8]
   1e3e8:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 1e4d0 <ProcessAesDrv+0x354>
   1e3ec:	685b      	ldr	r3, [r3, #4]
   1e3ee:	f8ca 3000 	str.w	r3, [sl]
   1e3f2:	f8d8 3000 	ldr.w	r3, [r8]
   1e3f6:	4a2c      	ldr	r2, [pc, #176]	; (1e4a8 <ProcessAesDrv+0x32c>)
   1e3f8:	689b      	ldr	r3, [r3, #8]
   1e3fa:	f8c9 3000 	str.w	r3, [r9]
   1e3fe:	f8d8 3000 	ldr.w	r3, [r8]
   1e402:	68db      	ldr	r3, [r3, #12]
   1e404:	6013      	str	r3, [r2, #0]
   1e406:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1e408:	b171      	cbz	r1, 1e428 <ProcessAesDrv+0x2ac>
   1e40a:	f04f 0801 	mov.w	r8, #1
   1e40e:	e6d2      	b.n	1e1b6 <ProcessAesDrv+0x3a>
   1e410:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 1e4d4 <ProcessAesDrv+0x358>
   1e414:	e6eb      	b.n	1e1ee <ProcessAesDrv+0x72>
   1e416:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   1e41a:	e70f      	b.n	1e23c <ProcessAesDrv+0xc0>
   1e41c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1e41e:	2b01      	cmp	r3, #1
   1e420:	bf0c      	ite	eq
   1e422:	2040      	moveq	r0, #64	; 0x40
   1e424:	2010      	movne	r0, #16
   1e426:	e789      	b.n	1e33c <ProcessAesDrv+0x1c0>
   1e428:	f104 0310 	add.w	r3, r4, #16
   1e42c:	4618      	mov	r0, r3
   1e42e:	9305      	str	r3, [sp, #20]
   1e430:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   1e434:	e9cd 3200 	strd	r3, r2, [sp]
   1e438:	9002      	str	r0, [sp, #8]
   1e43a:	2010      	movs	r0, #16
   1e43c:	9003      	str	r0, [sp, #12]
   1e43e:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   1e442:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1e444:	f000 f9ae 	bl	1e7a4 <kmu_derive_cmac>
   1e448:	2800      	cmp	r0, #0
   1e44a:	d148      	bne.n	1e4de <ProcessAesDrv+0x362>
   1e44c:	2300      	movs	r3, #0
   1e44e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   1e452:	e7da      	b.n	1e40a <ProcessAesDrv+0x28e>
   1e454:	4b15      	ldr	r3, [pc, #84]	; (1e4ac <ProcessAesDrv+0x330>)
   1e456:	e746      	b.n	1e2e6 <ProcessAesDrv+0x16a>
   1e458:	4a14      	ldr	r2, [pc, #80]	; (1e4ac <ProcessAesDrv+0x330>)
   1e45a:	4b15      	ldr	r3, [pc, #84]	; (1e4b0 <ProcessAesDrv+0x334>)
   1e45c:	e785      	b.n	1e36a <ProcessAesDrv+0x1ee>
   1e45e:	bf00      	nop
   1e460:	200005b8 	.word	0x200005b8
   1e464:	5002b810 	.word	0x5002b810
   1e468:	5002b910 	.word	0x5002b910
   1e46c:	5002ba04 	.word	0x5002ba04
   1e470:	5002b440 	.word	0x5002b440
   1e474:	5002bd28 	.word	0x5002bd28
   1e478:	5002bd2c 	.word	0x5002bd2c
   1e47c:	5002bd30 	.word	0x5002bd30
   1e480:	5002bd34 	.word	0x5002bd34
   1e484:	5002bc2c 	.word	0x5002bc2c
   1e488:	5002bc34 	.word	0x5002bc34
   1e48c:	5002bc28 	.word	0x5002bc28
   1e490:	5002bc30 	.word	0x5002bc30
   1e494:	5002b444 	.word	0x5002b444
   1e498:	000211f0 	.word	0x000211f0
   1e49c:	00021208 	.word	0x00021208
   1e4a0:	00021248 	.word	0x00021248
   1e4a4:	00021228 	.word	0x00021228
   1e4a8:	5002b40c 	.word	0x5002b40c
   1e4ac:	5002b460 	.word	0x5002b460
   1e4b0:	5002b464 	.word	0x5002b464
   1e4b4:	00f10001 	.word	0x00f10001
   1e4b8:	00f10005 	.word	0x00f10005
   1e4bc:	00f1000b 	.word	0x00f1000b
   1e4c0:	00f10003 	.word	0x00f10003
   1e4c4:	200005a8 	.word	0x200005a8
   1e4c8:	5002b400 	.word	0x5002b400
   1e4cc:	5002b404 	.word	0x5002b404
   1e4d0:	5002b408 	.word	0x5002b408
   1e4d4:	00f10002 	.word	0x00f10002
   1e4d8:	f8df 9038 	ldr.w	r9, [pc, #56]	; 1e514 <ProcessAesDrv+0x398>
   1e4dc:	e687      	b.n	1e1ee <ProcessAesDrv+0x72>
   1e4de:	f8d8 3000 	ldr.w	r3, [r8]
   1e4e2:	4a0b      	ldr	r2, [pc, #44]	; (1e510 <ProcessAesDrv+0x394>)
   1e4e4:	681b      	ldr	r3, [r3, #0]
   1e4e6:	f8cb 3000 	str.w	r3, [fp]
   1e4ea:	f8d8 3000 	ldr.w	r3, [r8]
   1e4ee:	685b      	ldr	r3, [r3, #4]
   1e4f0:	f8ca 3000 	str.w	r3, [sl]
   1e4f4:	f8d8 3000 	ldr.w	r3, [r8]
   1e4f8:	689b      	ldr	r3, [r3, #8]
   1e4fa:	f8c9 3000 	str.w	r3, [r9]
   1e4fe:	f8d8 3000 	ldr.w	r3, [r8]
   1e502:	68db      	ldr	r3, [r3, #12]
   1e504:	6013      	str	r3, [r2, #0]
   1e506:	9805      	ldr	r0, [sp, #20]
   1e508:	2110      	movs	r1, #16
   1e50a:	f7ff faff 	bl	1db0c <CC_PalMemSetZeroPlat>
   1e50e:	e79d      	b.n	1e44c <ProcessAesDrv+0x2d0>
   1e510:	5002b40c 	.word	0x5002b40c
   1e514:	00f10004 	.word	0x00f10004

0001e518 <FinishAesDrv>:
   1e518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e51c:	b301      	cbz	r1, 1e560 <FinishAesDrv+0x48>
   1e51e:	b1fa      	cbz	r2, 1e560 <FinishAesDrv+0x48>
   1e520:	4604      	mov	r4, r0
   1e522:	2800      	cmp	r0, #0
   1e524:	d07a      	beq.n	1e61c <FinishAesDrv+0x104>
   1e526:	461d      	mov	r5, r3
   1e528:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1e52a:	2b07      	cmp	r3, #7
   1e52c:	460e      	mov	r6, r1
   1e52e:	d01b      	beq.n	1e568 <FinishAesDrv+0x50>
   1e530:	b95d      	cbnz	r5, 1e54a <FinishAesDrv+0x32>
   1e532:	2b03      	cmp	r3, #3
   1e534:	d110      	bne.n	1e558 <FinishAesDrv+0x40>
   1e536:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1e538:	b973      	cbnz	r3, 1e558 <FinishAesDrv+0x40>
   1e53a:	f100 0364 	add.w	r3, r0, #100	; 0x64
   1e53e:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   1e542:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   1e546:	600b      	str	r3, [r1, #0]
   1e548:	2510      	movs	r5, #16
   1e54a:	462b      	mov	r3, r5
   1e54c:	4631      	mov	r1, r6
   1e54e:	4620      	mov	r0, r4
   1e550:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e554:	f7ff be12 	b.w	1e17c <ProcessAesDrv>
   1e558:	462f      	mov	r7, r5
   1e55a:	4638      	mov	r0, r7
   1e55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e560:	4f66      	ldr	r7, [pc, #408]	; (1e6fc <FinishAesDrv+0x1e4>)
   1e562:	4638      	mov	r0, r7
   1e564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e568:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1e56a:	2b00      	cmp	r3, #0
   1e56c:	d159      	bne.n	1e622 <FinishAesDrv+0x10a>
   1e56e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1e572:	d25b      	bcs.n	1e62c <FinishAesDrv+0x114>
   1e574:	b915      	cbnz	r5, 1e57c <FinishAesDrv+0x64>
   1e576:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1e578:	2b00      	cmp	r3, #0
   1e57a:	d157      	bne.n	1e62c <FinishAesDrv+0x114>
   1e57c:	4860      	ldr	r0, [pc, #384]	; (1e700 <FinishAesDrv+0x1e8>)
   1e57e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e582:	f7fe fd09 	bl	1cf98 <CC_PalMutexLock>
   1e586:	2800      	cmp	r0, #0
   1e588:	f040 8097 	bne.w	1e6ba <FinishAesDrv+0x1a2>
   1e58c:	2000      	movs	r0, #0
   1e58e:	f7fe fd33 	bl	1cff8 <CC_PalPowerSaveModeSelect>
   1e592:	2800      	cmp	r0, #0
   1e594:	f040 808d 	bne.w	1e6b2 <FinishAesDrv+0x19a>
   1e598:	4b5a      	ldr	r3, [pc, #360]	; (1e704 <FinishAesDrv+0x1ec>)
   1e59a:	4a5b      	ldr	r2, [pc, #364]	; (1e708 <FinishAesDrv+0x1f0>)
   1e59c:	2101      	movs	r1, #1
   1e59e:	6019      	str	r1, [r3, #0]
   1e5a0:	6813      	ldr	r3, [r2, #0]
   1e5a2:	2b00      	cmp	r3, #0
   1e5a4:	d1fc      	bne.n	1e5a0 <FinishAesDrv+0x88>
   1e5a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e5a8:	2b03      	cmp	r3, #3
   1e5aa:	dd20      	ble.n	1e5ee <FinishAesDrv+0xd6>
   1e5ac:	3b06      	subs	r3, #6
   1e5ae:	2b01      	cmp	r3, #1
   1e5b0:	d81f      	bhi.n	1e5f2 <FinishAesDrv+0xda>
   1e5b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1e5b4:	2b01      	cmp	r3, #1
   1e5b6:	d83b      	bhi.n	1e630 <FinishAesDrv+0x118>
   1e5b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1e5ba:	2b01      	cmp	r3, #1
   1e5bc:	f200 8085 	bhi.w	1e6ca <FinishAesDrv+0x1b2>
   1e5c0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1e5c2:	2b01      	cmp	r3, #1
   1e5c4:	f200 8083 	bhi.w	1e6ce <FinishAesDrv+0x1b6>
   1e5c8:	4620      	mov	r0, r4
   1e5ca:	f7ff fd5b 	bl	1e084 <InitAes.part.0>
   1e5ce:	4607      	mov	r7, r0
   1e5d0:	b980      	cbnz	r0, 1e5f4 <FinishAesDrv+0xdc>
   1e5d2:	4620      	mov	r0, r4
   1e5d4:	f7ff fd0c 	bl	1dff0 <LoadAesKey>
   1e5d8:	4607      	mov	r7, r0
   1e5da:	b958      	cbnz	r0, 1e5f4 <FinishAesDrv+0xdc>
   1e5dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e5de:	2b07      	cmp	r3, #7
   1e5e0:	d807      	bhi.n	1e5f2 <FinishAesDrv+0xda>
   1e5e2:	e8df f003 	tbb	[pc, r3]
   1e5e6:	2730      	.short	0x2730
   1e5e8:	06062755 	.word	0x06062755
   1e5ec:	2755      	.short	0x2755
   1e5ee:	2b00      	cmp	r3, #0
   1e5f0:	dadf      	bge.n	1e5b2 <FinishAesDrv+0x9a>
   1e5f2:	4f46      	ldr	r7, [pc, #280]	; (1e70c <FinishAesDrv+0x1f4>)
   1e5f4:	4a44      	ldr	r2, [pc, #272]	; (1e708 <FinishAesDrv+0x1f0>)
   1e5f6:	6813      	ldr	r3, [r2, #0]
   1e5f8:	2b00      	cmp	r3, #0
   1e5fa:	d1fc      	bne.n	1e5f6 <FinishAesDrv+0xde>
   1e5fc:	4a41      	ldr	r2, [pc, #260]	; (1e704 <FinishAesDrv+0x1ec>)
   1e5fe:	2001      	movs	r0, #1
   1e600:	6013      	str	r3, [r2, #0]
   1e602:	f7fe fcf9 	bl	1cff8 <CC_PalPowerSaveModeSelect>
   1e606:	2800      	cmp	r0, #0
   1e608:	d15b      	bne.n	1e6c2 <FinishAesDrv+0x1aa>
   1e60a:	483d      	ldr	r0, [pc, #244]	; (1e700 <FinishAesDrv+0x1e8>)
   1e60c:	f7fe fccc 	bl	1cfa8 <CC_PalMutexUnlock>
   1e610:	2800      	cmp	r0, #0
   1e612:	d0a2      	beq.n	1e55a <FinishAesDrv+0x42>
   1e614:	483e      	ldr	r0, [pc, #248]	; (1e710 <FinishAesDrv+0x1f8>)
   1e616:	f7fd fd73 	bl	1c100 <CC_PalAbort>
   1e61a:	e79e      	b.n	1e55a <FinishAesDrv+0x42>
   1e61c:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   1e620:	e79b      	b.n	1e55a <FinishAesDrv+0x42>
   1e622:	2b01      	cmp	r3, #1
   1e624:	d1a6      	bne.n	1e574 <FinishAesDrv+0x5c>
   1e626:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1e62a:	d3a3      	bcc.n	1e574 <FinishAesDrv+0x5c>
   1e62c:	4f39      	ldr	r7, [pc, #228]	; (1e714 <FinishAesDrv+0x1fc>)
   1e62e:	e794      	b.n	1e55a <FinishAesDrv+0x42>
   1e630:	4f39      	ldr	r7, [pc, #228]	; (1e718 <FinishAesDrv+0x200>)
   1e632:	e7df      	b.n	1e5f4 <FinishAesDrv+0xdc>
   1e634:	4b39      	ldr	r3, [pc, #228]	; (1e71c <FinishAesDrv+0x204>)
   1e636:	6822      	ldr	r2, [r4, #0]
   1e638:	601a      	str	r2, [r3, #0]
   1e63a:	6862      	ldr	r2, [r4, #4]
   1e63c:	605a      	str	r2, [r3, #4]
   1e63e:	68a2      	ldr	r2, [r4, #8]
   1e640:	609a      	str	r2, [r3, #8]
   1e642:	68e2      	ldr	r2, [r4, #12]
   1e644:	60da      	str	r2, [r3, #12]
   1e646:	4936      	ldr	r1, [pc, #216]	; (1e720 <FinishAesDrv+0x208>)
   1e648:	4a36      	ldr	r2, [pc, #216]	; (1e724 <FinishAesDrv+0x20c>)
   1e64a:	2301      	movs	r3, #1
   1e64c:	600b      	str	r3, [r1, #0]
   1e64e:	6015      	str	r5, [r2, #0]
   1e650:	2d00      	cmp	r5, #0
   1e652:	d13e      	bne.n	1e6d2 <FinishAesDrv+0x1ba>
   1e654:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1e656:	b90a      	cbnz	r2, 1e65c <FinishAesDrv+0x144>
   1e658:	4a33      	ldr	r2, [pc, #204]	; (1e728 <FinishAesDrv+0x210>)
   1e65a:	6013      	str	r3, [r2, #0]
   1e65c:	4b2a      	ldr	r3, [pc, #168]	; (1e708 <FinishAesDrv+0x1f0>)
   1e65e:	681f      	ldr	r7, [r3, #0]
   1e660:	2f00      	cmp	r7, #0
   1e662:	d1fc      	bne.n	1e65e <FinishAesDrv+0x146>
   1e664:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e666:	3b01      	subs	r3, #1
   1e668:	2b06      	cmp	r3, #6
   1e66a:	d8c3      	bhi.n	1e5f4 <FinishAesDrv+0xdc>
   1e66c:	a201      	add	r2, pc, #4	; (adr r2, 1e674 <FinishAesDrv+0x15c>)
   1e66e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e672:	bf00      	nop
   1e674:	0001e695 	.word	0x0001e695
   1e678:	0001e6ad 	.word	0x0001e6ad
   1e67c:	0001e695 	.word	0x0001e695
   1e680:	0001e5f5 	.word	0x0001e5f5
   1e684:	0001e5f5 	.word	0x0001e5f5
   1e688:	0001e6ad 	.word	0x0001e6ad
   1e68c:	0001e695 	.word	0x0001e695
   1e690:	4b26      	ldr	r3, [pc, #152]	; (1e72c <FinishAesDrv+0x214>)
   1e692:	e7d0      	b.n	1e636 <FinishAesDrv+0x11e>
   1e694:	4a21      	ldr	r2, [pc, #132]	; (1e71c <FinishAesDrv+0x204>)
   1e696:	4b26      	ldr	r3, [pc, #152]	; (1e730 <FinishAesDrv+0x218>)
   1e698:	6812      	ldr	r2, [r2, #0]
   1e69a:	6022      	str	r2, [r4, #0]
   1e69c:	681a      	ldr	r2, [r3, #0]
   1e69e:	6062      	str	r2, [r4, #4]
   1e6a0:	685a      	ldr	r2, [r3, #4]
   1e6a2:	60a2      	str	r2, [r4, #8]
   1e6a4:	3308      	adds	r3, #8
   1e6a6:	681b      	ldr	r3, [r3, #0]
   1e6a8:	60e3      	str	r3, [r4, #12]
   1e6aa:	e7a3      	b.n	1e5f4 <FinishAesDrv+0xdc>
   1e6ac:	4a1f      	ldr	r2, [pc, #124]	; (1e72c <FinishAesDrv+0x214>)
   1e6ae:	4b21      	ldr	r3, [pc, #132]	; (1e734 <FinishAesDrv+0x21c>)
   1e6b0:	e7f2      	b.n	1e698 <FinishAesDrv+0x180>
   1e6b2:	4821      	ldr	r0, [pc, #132]	; (1e738 <FinishAesDrv+0x220>)
   1e6b4:	f7fd fd24 	bl	1c100 <CC_PalAbort>
   1e6b8:	e76e      	b.n	1e598 <FinishAesDrv+0x80>
   1e6ba:	4820      	ldr	r0, [pc, #128]	; (1e73c <FinishAesDrv+0x224>)
   1e6bc:	f7fd fd20 	bl	1c100 <CC_PalAbort>
   1e6c0:	e764      	b.n	1e58c <FinishAesDrv+0x74>
   1e6c2:	481f      	ldr	r0, [pc, #124]	; (1e740 <FinishAesDrv+0x228>)
   1e6c4:	f7fd fd1c 	bl	1c100 <CC_PalAbort>
   1e6c8:	e79f      	b.n	1e60a <FinishAesDrv+0xf2>
   1e6ca:	4f1e      	ldr	r7, [pc, #120]	; (1e744 <FinishAesDrv+0x22c>)
   1e6cc:	e792      	b.n	1e5f4 <FinishAesDrv+0xdc>
   1e6ce:	4f1e      	ldr	r7, [pc, #120]	; (1e748 <FinishAesDrv+0x230>)
   1e6d0:	e790      	b.n	1e5f4 <FinishAesDrv+0xdc>
   1e6d2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1e6d4:	6833      	ldr	r3, [r6, #0]
   1e6d6:	2a01      	cmp	r2, #1
   1e6d8:	d00a      	beq.n	1e6f0 <FinishAesDrv+0x1d8>
   1e6da:	491c      	ldr	r1, [pc, #112]	; (1e74c <FinishAesDrv+0x234>)
   1e6dc:	4a1c      	ldr	r2, [pc, #112]	; (1e750 <FinishAesDrv+0x238>)
   1e6de:	600b      	str	r3, [r1, #0]
   1e6e0:	2010      	movs	r0, #16
   1e6e2:	6015      	str	r5, [r2, #0]
   1e6e4:	f7fe fbc4 	bl	1ce70 <CC_HalWaitInterrupt>
   1e6e8:	4607      	mov	r7, r0
   1e6ea:	2800      	cmp	r0, #0
   1e6ec:	d0b6      	beq.n	1e65c <FinishAesDrv+0x144>
   1e6ee:	e781      	b.n	1e5f4 <FinishAesDrv+0xdc>
   1e6f0:	4918      	ldr	r1, [pc, #96]	; (1e754 <FinishAesDrv+0x23c>)
   1e6f2:	4a19      	ldr	r2, [pc, #100]	; (1e758 <FinishAesDrv+0x240>)
   1e6f4:	600b      	str	r3, [r1, #0]
   1e6f6:	2040      	movs	r0, #64	; 0x40
   1e6f8:	6015      	str	r5, [r2, #0]
   1e6fa:	e7f3      	b.n	1e6e4 <FinishAesDrv+0x1cc>
   1e6fc:	00f1000b 	.word	0x00f1000b
   1e700:	200005b8 	.word	0x200005b8
   1e704:	5002b810 	.word	0x5002b810
   1e708:	5002b910 	.word	0x5002b910
   1e70c:	00f10001 	.word	0x00f10001
   1e710:	00021248 	.word	0x00021248
   1e714:	00f10005 	.word	0x00f10005
   1e718:	00f10002 	.word	0x00f10002
   1e71c:	5002b440 	.word	0x5002b440
   1e720:	5002b47c 	.word	0x5002b47c
   1e724:	5002b4bc 	.word	0x5002b4bc
   1e728:	5002b524 	.word	0x5002b524
   1e72c:	5002b460 	.word	0x5002b460
   1e730:	5002b444 	.word	0x5002b444
   1e734:	5002b464 	.word	0x5002b464
   1e738:	00021208 	.word	0x00021208
   1e73c:	000211f0 	.word	0x000211f0
   1e740:	00021228 	.word	0x00021228
   1e744:	00f10003 	.word	0x00f10003
   1e748:	00f10004 	.word	0x00f10004
   1e74c:	5002bc30 	.word	0x5002bc30
   1e750:	5002bc34 	.word	0x5002bc34
   1e754:	5002bc28 	.word	0x5002bc28
   1e758:	5002bc2c 	.word	0x5002bc2c

0001e75c <kmu_validate_slot_and_size>:
   1e75c:	b921      	cbnz	r1, 1e768 <kmu_validate_slot_and_size+0xc>
   1e75e:	4b03      	ldr	r3, [pc, #12]	; (1e76c <kmu_validate_slot_and_size+0x10>)
   1e760:	2800      	cmp	r0, #0
   1e762:	bf18      	it	ne
   1e764:	4618      	movne	r0, r3
   1e766:	4770      	bx	lr
   1e768:	4801      	ldr	r0, [pc, #4]	; (1e770 <kmu_validate_slot_and_size+0x14>)
   1e76a:	4770      	bx	lr
   1e76c:	00f70001 	.word	0x00f70001
   1e770:	00f70003 	.word	0x00f70003

0001e774 <kmu_validate_kdr_slot_and_size>:
   1e774:	b921      	cbnz	r1, 1e780 <kmu_validate_kdr_slot_and_size+0xc>
   1e776:	4b03      	ldr	r3, [pc, #12]	; (1e784 <kmu_validate_kdr_slot_and_size+0x10>)
   1e778:	2800      	cmp	r0, #0
   1e77a:	bf18      	it	ne
   1e77c:	4618      	movne	r0, r3
   1e77e:	4770      	bx	lr
   1e780:	4801      	ldr	r0, [pc, #4]	; (1e788 <kmu_validate_kdr_slot_and_size+0x14>)
   1e782:	4770      	bx	lr
   1e784:	00f70001 	.word	0x00f70001
   1e788:	00f70003 	.word	0x00f70003

0001e78c <kmu_use_kdr_key>:
   1e78c:	4903      	ldr	r1, [pc, #12]	; (1e79c <kmu_use_kdr_key+0x10>)
   1e78e:	4b04      	ldr	r3, [pc, #16]	; (1e7a0 <kmu_use_kdr_key+0x14>)
   1e790:	2000      	movs	r0, #0
   1e792:	2201      	movs	r2, #1
   1e794:	6008      	str	r0, [r1, #0]
   1e796:	601a      	str	r2, [r3, #0]
   1e798:	4770      	bx	lr
   1e79a:	bf00      	nop
   1e79c:	5002ba38 	.word	0x5002ba38
   1e7a0:	5002b478 	.word	0x5002b478

0001e7a4 <kmu_derive_cmac>:
   1e7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e7a8:	b0cd      	sub	sp, #308	; 0x134
   1e7aa:	e9dd 8558 	ldrd	r8, r5, [sp, #352]	; 0x160
   1e7ae:	460f      	mov	r7, r1
   1e7b0:	2100      	movs	r1, #0
   1e7b2:	460c      	mov	r4, r1
   1e7b4:	4681      	mov	r9, r0
   1e7b6:	4616      	mov	r6, r2
   1e7b8:	a80e      	add	r0, sp, #56	; 0x38
   1e7ba:	2274      	movs	r2, #116	; 0x74
   1e7bc:	469b      	mov	fp, r3
   1e7be:	f001 f828 	bl	1f812 <memset>
   1e7c2:	4621      	mov	r1, r4
   1e7c4:	2280      	movs	r2, #128	; 0x80
   1e7c6:	a82c      	add	r0, sp, #176	; 0xb0
   1e7c8:	942b      	str	r4, [sp, #172]	; 0xac
   1e7ca:	f001 f822 	bl	1f812 <memset>
   1e7ce:	2384      	movs	r3, #132	; 0x84
   1e7d0:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1e7d4:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   1e7d8:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   1e7dc:	9305      	str	r3, [sp, #20]
   1e7de:	d860      	bhi.n	1e8a2 <kmu_derive_cmac+0xfe>
   1e7e0:	ab05      	add	r3, sp, #20
   1e7e2:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
   1e7e6:	9301      	str	r3, [sp, #4]
   1e7e8:	9502      	str	r5, [sp, #8]
   1e7ea:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   1e7ee:	4659      	mov	r1, fp
   1e7f0:	4630      	mov	r0, r6
   1e7f2:	f8cd a000 	str.w	sl, [sp]
   1e7f6:	f000 f865 	bl	1e8c4 <UtilCmacBuildDataForDerivation>
   1e7fa:	2800      	cmp	r0, #0
   1e7fc:	d14c      	bne.n	1e898 <kmu_derive_cmac+0xf4>
   1e7fe:	2303      	movs	r3, #3
   1e800:	f88d 3013 	strb.w	r3, [sp, #19]
   1e804:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1e808:	901c      	str	r0, [sp, #112]	; 0x70
   1e80a:	2200      	movs	r2, #0
   1e80c:	2110      	movs	r1, #16
   1e80e:	a80e      	add	r0, sp, #56	; 0x38
   1e810:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   1e814:	2607      	movs	r6, #7
   1e816:	2301      	movs	r3, #1
   1e818:	2401      	movs	r4, #1
   1e81a:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   1e81e:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   1e822:	971a      	str	r7, [sp, #104]	; 0x68
   1e824:	961b      	str	r6, [sp, #108]	; 0x6c
   1e826:	9426      	str	r4, [sp, #152]	; 0x98
   1e828:	f10d 0920 	add.w	r9, sp, #32
   1e82c:	f7ff f96e 	bl	1db0c <CC_PalMemSetZeroPlat>
   1e830:	2110      	movs	r1, #16
   1e832:	e9cd 1900 	strd	r1, r9, [sp]
   1e836:	ab0a      	add	r3, sp, #40	; 0x28
   1e838:	9905      	ldr	r1, [sp, #20]
   1e83a:	4650      	mov	r0, sl
   1e83c:	aa06      	add	r2, sp, #24
   1e83e:	f7ff fa09 	bl	1dc54 <SetDataBuffersInfo>
   1e842:	4607      	mov	r7, r0
   1e844:	b150      	cbz	r0, 1e85c <kmu_derive_cmac+0xb8>
   1e846:	e01e      	b.n	1e886 <kmu_derive_cmac+0xe2>
   1e848:	f7ff f95c 	bl	1db04 <CC_PalMemCopyPlat>
   1e84c:	2110      	movs	r1, #16
   1e84e:	a80e      	add	r0, sp, #56	; 0x38
   1e850:	f7ff f95c 	bl	1db0c <CC_PalMemSetZeroPlat>
   1e854:	3401      	adds	r4, #1
   1e856:	1bad      	subs	r5, r5, r6
   1e858:	b2e4      	uxtb	r4, r4
   1e85a:	d027      	beq.n	1e8ac <kmu_derive_cmac+0x108>
   1e85c:	9b05      	ldr	r3, [sp, #20]
   1e85e:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   1e862:	2d10      	cmp	r5, #16
   1e864:	464a      	mov	r2, r9
   1e866:	a906      	add	r1, sp, #24
   1e868:	a80e      	add	r0, sp, #56	; 0x38
   1e86a:	462e      	mov	r6, r5
   1e86c:	bf28      	it	cs
   1e86e:	2610      	movcs	r6, #16
   1e870:	f7ff fe52 	bl	1e518 <FinishAesDrv>
   1e874:	4603      	mov	r3, r0
   1e876:	4632      	mov	r2, r6
   1e878:	eb08 0007 	add.w	r0, r8, r7
   1e87c:	a90e      	add	r1, sp, #56	; 0x38
   1e87e:	4437      	add	r7, r6
   1e880:	2b00      	cmp	r3, #0
   1e882:	d0e1      	beq.n	1e848 <kmu_derive_cmac+0xa4>
   1e884:	461f      	mov	r7, r3
   1e886:	a80e      	add	r0, sp, #56	; 0x38
   1e888:	2274      	movs	r2, #116	; 0x74
   1e88a:	2100      	movs	r1, #0
   1e88c:	f7ff f93c 	bl	1db08 <CC_PalMemSetPlat>
   1e890:	4638      	mov	r0, r7
   1e892:	b04d      	add	sp, #308	; 0x134
   1e894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e898:	4f08      	ldr	r7, [pc, #32]	; (1e8bc <kmu_derive_cmac+0x118>)
   1e89a:	4638      	mov	r0, r7
   1e89c:	b04d      	add	sp, #308	; 0x134
   1e89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8a2:	4f07      	ldr	r7, [pc, #28]	; (1e8c0 <kmu_derive_cmac+0x11c>)
   1e8a4:	4638      	mov	r0, r7
   1e8a6:	b04d      	add	sp, #308	; 0x134
   1e8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8ac:	a80e      	add	r0, sp, #56	; 0x38
   1e8ae:	2274      	movs	r2, #116	; 0x74
   1e8b0:	2100      	movs	r1, #0
   1e8b2:	462f      	mov	r7, r5
   1e8b4:	f7ff f928 	bl	1db08 <CC_PalMemSetPlat>
   1e8b8:	e7ea      	b.n	1e890 <kmu_derive_cmac+0xec>
   1e8ba:	bf00      	nop
   1e8bc:	00f1000e 	.word	0x00f1000e
   1e8c0:	00f1000f 	.word	0x00f1000f

0001e8c4 <UtilCmacBuildDataForDerivation>:
   1e8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e8c8:	b082      	sub	sp, #8
   1e8ca:	2600      	movs	r6, #0
   1e8cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1e8ce:	9601      	str	r6, [sp, #4]
   1e8d0:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1e8d4:	d83c      	bhi.n	1e950 <UtilCmacBuildDataForDerivation+0x8c>
   1e8d6:	00ee      	lsls	r6, r5, #3
   1e8d8:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   1e8dc:	f101 35ff 	add.w	r5, r1, #4294967295	; 0xffffffff
   1e8e0:	461f      	mov	r7, r3
   1e8e2:	bf34      	ite	cc
   1e8e4:	2303      	movcc	r3, #3
   1e8e6:	2304      	movcs	r3, #4
   1e8e8:	2d3f      	cmp	r5, #63	; 0x3f
   1e8ea:	460c      	mov	r4, r1
   1e8ec:	9300      	str	r3, [sp, #0]
   1e8ee:	d82f      	bhi.n	1e950 <UtilCmacBuildDataForDerivation+0x8c>
   1e8f0:	b370      	cbz	r0, 1e950 <UtilCmacBuildDataForDerivation+0x8c>
   1e8f2:	4690      	mov	r8, r2
   1e8f4:	b117      	cbz	r7, 1e8fc <UtilCmacBuildDataForDerivation+0x38>
   1e8f6:	b35a      	cbz	r2, 1e950 <UtilCmacBuildDataForDerivation+0x8c>
   1e8f8:	2f40      	cmp	r7, #64	; 0x40
   1e8fa:	d829      	bhi.n	1e950 <UtilCmacBuildDataForDerivation+0x8c>
   1e8fc:	9a08      	ldr	r2, [sp, #32]
   1e8fe:	b33a      	cbz	r2, 1e950 <UtilCmacBuildDataForDerivation+0x8c>
   1e900:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e902:	6811      	ldr	r1, [r2, #0]
   1e904:	b321      	cbz	r1, 1e950 <UtilCmacBuildDataForDerivation+0x8c>
   1e906:	19e2      	adds	r2, r4, r7
   1e908:	4413      	add	r3, r2
   1e90a:	4299      	cmp	r1, r3
   1e90c:	d320      	bcc.n	1e950 <UtilCmacBuildDataForDerivation+0x8c>
   1e90e:	9b08      	ldr	r3, [sp, #32]
   1e910:	4622      	mov	r2, r4
   1e912:	4601      	mov	r1, r0
   1e914:	1c58      	adds	r0, r3, #1
   1e916:	f7ff f8f5 	bl	1db04 <CC_PalMemCopyPlat>
   1e91a:	9b08      	ldr	r3, [sp, #32]
   1e91c:	4423      	add	r3, r4
   1e91e:	2200      	movs	r2, #0
   1e920:	3402      	adds	r4, #2
   1e922:	705a      	strb	r2, [r3, #1]
   1e924:	bb07      	cbnz	r7, 1e968 <UtilCmacBuildDataForDerivation+0xa4>
   1e926:	2eff      	cmp	r6, #255	; 0xff
   1e928:	9600      	str	r6, [sp, #0]
   1e92a:	d915      	bls.n	1e958 <UtilCmacBuildDataForDerivation+0x94>
   1e92c:	9b08      	ldr	r3, [sp, #32]
   1e92e:	0235      	lsls	r5, r6, #8
   1e930:	b2ad      	uxth	r5, r5
   1e932:	1918      	adds	r0, r3, r4
   1e934:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   1e938:	2202      	movs	r2, #2
   1e93a:	a901      	add	r1, sp, #4
   1e93c:	9501      	str	r5, [sp, #4]
   1e93e:	f7ff f8e1 	bl	1db04 <CC_PalMemCopyPlat>
   1e942:	3402      	adds	r4, #2
   1e944:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e946:	2000      	movs	r0, #0
   1e948:	601c      	str	r4, [r3, #0]
   1e94a:	b002      	add	sp, #8
   1e94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e950:	4809      	ldr	r0, [pc, #36]	; (1e978 <UtilCmacBuildDataForDerivation+0xb4>)
   1e952:	b002      	add	sp, #8
   1e954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e958:	9b08      	ldr	r3, [sp, #32]
   1e95a:	2201      	movs	r2, #1
   1e95c:	1918      	adds	r0, r3, r4
   1e95e:	4669      	mov	r1, sp
   1e960:	f7ff f8d0 	bl	1db04 <CC_PalMemCopyPlat>
   1e964:	3401      	adds	r4, #1
   1e966:	e7ed      	b.n	1e944 <UtilCmacBuildDataForDerivation+0x80>
   1e968:	9b08      	ldr	r3, [sp, #32]
   1e96a:	4641      	mov	r1, r8
   1e96c:	1918      	adds	r0, r3, r4
   1e96e:	463a      	mov	r2, r7
   1e970:	f7ff f8c8 	bl	1db04 <CC_PalMemCopyPlat>
   1e974:	443c      	add	r4, r7
   1e976:	e7d6      	b.n	1e926 <UtilCmacBuildDataForDerivation+0x62>
   1e978:	80000006 	.word	0x80000006

0001e97c <CC_PalDataBufferAttrGet>:
   1e97c:	2000      	movs	r0, #0
   1e97e:	7018      	strb	r0, [r3, #0]
   1e980:	4770      	bx	lr
   1e982:	bf00      	nop

0001e984 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1e984:	4770      	bx	lr

0001e986 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1e986:	4603      	mov	r3, r0
   1e988:	b140      	cbz	r0, 1e99c <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1e98a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1e98c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1e990:	2a02      	cmp	r2, #2
   1e992:	d006      	beq.n	1e9a2 <sys_notify_validate+0x1c>
   1e994:	2a03      	cmp	r2, #3
   1e996:	d004      	beq.n	1e9a2 <sys_notify_validate+0x1c>
   1e998:	2a01      	cmp	r2, #1
   1e99a:	d005      	beq.n	1e9a8 <sys_notify_validate+0x22>
		return -EINVAL;
   1e99c:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1e9a0:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1e9a2:	681a      	ldr	r2, [r3, #0]
   1e9a4:	2a00      	cmp	r2, #0
   1e9a6:	d0f9      	beq.n	1e99c <sys_notify_validate+0x16>
		notify->result = 0;
   1e9a8:	2000      	movs	r0, #0
   1e9aa:	6098      	str	r0, [r3, #8]
   1e9ac:	4770      	bx	lr

0001e9ae <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1e9ae:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1e9b0:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1e9b4:	2a02      	cmp	r2, #2
{
   1e9b6:	b510      	push	{r4, lr}
   1e9b8:	4603      	mov	r3, r0
	notify->result = res;
   1e9ba:	6081      	str	r1, [r0, #8]
	switch (method) {
   1e9bc:	d00a      	beq.n	1e9d4 <sys_notify_finalize+0x26>
   1e9be:	2a03      	cmp	r2, #3
   1e9c0:	d10b      	bne.n	1e9da <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1e9c2:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1e9c4:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1e9c6:	2200      	movs	r2, #0
   1e9c8:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1e9ca:	b108      	cbz	r0, 1e9d0 <sys_notify_finalize+0x22>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1e9cc:	f7fd faf6 	bl	1bfbc <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1e9d0:	4620      	mov	r0, r4
   1e9d2:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1e9d4:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1e9d6:	2400      	movs	r4, #0
		break;
   1e9d8:	e7f5      	b.n	1e9c6 <sys_notify_finalize+0x18>
	switch (method) {
   1e9da:	2400      	movs	r4, #0
   1e9dc:	4620      	mov	r0, r4
   1e9de:	e7f2      	b.n	1e9c6 <sys_notify_finalize+0x18>

0001e9e0 <arch_printk_char_out>:
}
   1e9e0:	2000      	movs	r0, #0
   1e9e2:	4770      	bx	lr

0001e9e4 <str_out>:
{
   1e9e4:	b530      	push	{r4, r5, lr}
   1e9e6:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1e9e8:	680c      	ldr	r4, [r1, #0]
   1e9ea:	1c55      	adds	r5, r2, #1
   1e9ec:	b114      	cbz	r4, 1e9f4 <str_out+0x10>
   1e9ee:	684b      	ldr	r3, [r1, #4]
   1e9f0:	4293      	cmp	r3, r2
   1e9f2:	dc01      	bgt.n	1e9f8 <str_out+0x14>
		ctx->count++;
   1e9f4:	608d      	str	r5, [r1, #8]
}
   1e9f6:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1e9f8:	3b01      	subs	r3, #1
   1e9fa:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1e9fc:	bf08      	it	eq
   1e9fe:	2200      	moveq	r2, #0
   1ea00:	608d      	str	r5, [r1, #8]
   1ea02:	bf0c      	ite	eq
   1ea04:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1ea06:	54a0      	strbne	r0, [r4, r2]
   1ea08:	e7f5      	b.n	1e9f6 <str_out+0x12>

0001ea0a <printk>:
{
   1ea0a:	b40f      	push	{r0, r1, r2, r3}
   1ea0c:	b507      	push	{r0, r1, r2, lr}
   1ea0e:	a904      	add	r1, sp, #16
   1ea10:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1ea14:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1ea16:	f7f5 fb29 	bl	1406c <vprintk>
}
   1ea1a:	b003      	add	sp, #12
   1ea1c:	f85d eb04 	ldr.w	lr, [sp], #4
   1ea20:	b004      	add	sp, #16
   1ea22:	4770      	bx	lr

0001ea24 <snprintk>:
{
   1ea24:	b40c      	push	{r2, r3}
   1ea26:	b507      	push	{r0, r1, r2, lr}
   1ea28:	ab04      	add	r3, sp, #16
   1ea2a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1ea2e:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1ea30:	f7f5 fb2a 	bl	14088 <vsnprintk>
}
   1ea34:	b003      	add	sp, #12
   1ea36:	f85d eb04 	ldr.w	lr, [sp], #4
   1ea3a:	b002      	add	sp, #8
   1ea3c:	4770      	bx	lr

0001ea3e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1ea3e:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1ea40:	f013 0307 	ands.w	r3, r3, #7
   1ea44:	d105      	bne.n	1ea52 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1ea46:	6803      	ldr	r3, [r0, #0]
   1ea48:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1ea4a:	bf0c      	ite	eq
   1ea4c:	2000      	moveq	r0, #0
   1ea4e:	2003      	movne	r0, #3
   1ea50:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1ea52:	2b02      	cmp	r3, #2
   1ea54:	d105      	bne.n	1ea62 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1ea56:	8b43      	ldrh	r3, [r0, #26]
   1ea58:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1ea5a:	bf14      	ite	ne
   1ea5c:	2000      	movne	r0, #0
   1ea5e:	2004      	moveq	r0, #4
   1ea60:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1ea62:	2b01      	cmp	r3, #1
   1ea64:	d105      	bne.n	1ea72 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1ea66:	6803      	ldr	r3, [r0, #0]
   1ea68:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1ea6a:	bf0c      	ite	eq
   1ea6c:	2000      	moveq	r0, #0
   1ea6e:	2005      	movne	r0, #5
   1ea70:	4770      	bx	lr
	int evt = EVT_NOP;
   1ea72:	2000      	movs	r0, #0
}
   1ea74:	4770      	bx	lr

0001ea76 <notify_one>:
{
   1ea76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ea7a:	460d      	mov	r5, r1
   1ea7c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1ea7e:	4619      	mov	r1, r3
   1ea80:	1d28      	adds	r0, r5, #4
{
   1ea82:	4690      	mov	r8, r2
   1ea84:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1ea86:	f7ff ff92 	bl	1e9ae <sys_notify_finalize>
	if (cb) {
   1ea8a:	4604      	mov	r4, r0
   1ea8c:	b138      	cbz	r0, 1ea9e <notify_one+0x28>
		cb(mgr, cli, state, res);
   1ea8e:	4633      	mov	r3, r6
   1ea90:	4642      	mov	r2, r8
   1ea92:	4629      	mov	r1, r5
   1ea94:	4638      	mov	r0, r7
   1ea96:	46a4      	mov	ip, r4
}
   1ea98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1ea9c:	4760      	bx	ip
}
   1ea9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001eaa2 <transition_complete>:
{
   1eaa2:	b410      	push	{r4}
	__asm__ volatile(
   1eaa4:	f04f 0440 	mov.w	r4, #64	; 0x40
   1eaa8:	f3ef 8211 	mrs	r2, BASEPRI
   1eaac:	f384 8812 	msr	BASEPRI_MAX, r4
   1eab0:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1eab4:	6141      	str	r1, [r0, #20]
}
   1eab6:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1eab8:	2101      	movs	r1, #1
   1eaba:	f7f5 baf9 	b.w	140b0 <process_event>

0001eabe <validate_args>:
{
   1eabe:	b510      	push	{r4, lr}
   1eac0:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1eac2:	b140      	cbz	r0, 1ead6 <validate_args+0x18>
   1eac4:	b139      	cbz	r1, 1ead6 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1eac6:	1d08      	adds	r0, r1, #4
   1eac8:	f7ff ff5d 	bl	1e986 <sys_notify_validate>
	if ((rv == 0)
   1eacc:	b928      	cbnz	r0, 1eada <validate_args+0x1c>
	    && ((cli->notify.flags
   1eace:	68a3      	ldr	r3, [r4, #8]
   1ead0:	f033 0303 	bics.w	r3, r3, #3
   1ead4:	d001      	beq.n	1eada <validate_args+0x1c>
		rv = -EINVAL;
   1ead6:	f06f 0015 	mvn.w	r0, #21
}
   1eada:	bd10      	pop	{r4, pc}

0001eadc <onoff_manager_init>:
{
   1eadc:	b538      	push	{r3, r4, r5, lr}
   1eade:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1eae0:	4605      	mov	r5, r0
   1eae2:	b158      	cbz	r0, 1eafc <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1eae4:	b151      	cbz	r1, 1eafc <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1eae6:	680b      	ldr	r3, [r1, #0]
   1eae8:	b143      	cbz	r3, 1eafc <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1eaea:	684b      	ldr	r3, [r1, #4]
   1eaec:	b133      	cbz	r3, 1eafc <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1eaee:	221c      	movs	r2, #28
   1eaf0:	2100      	movs	r1, #0
   1eaf2:	f000 fe8e 	bl	1f812 <memset>
   1eaf6:	612c      	str	r4, [r5, #16]
	return 0;
   1eaf8:	2000      	movs	r0, #0
}
   1eafa:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1eafc:	f06f 0015 	mvn.w	r0, #21
   1eb00:	e7fb      	b.n	1eafa <onoff_manager_init+0x1e>

0001eb02 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1eb02:	b570      	push	{r4, r5, r6, lr}
   1eb04:	4604      	mov	r4, r0
   1eb06:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1eb08:	f7ff ffd9 	bl	1eabe <validate_args>

	if (rv < 0) {
   1eb0c:	1e05      	subs	r5, r0, #0
   1eb0e:	db31      	blt.n	1eb74 <onoff_request+0x72>
   1eb10:	f04f 0340 	mov.w	r3, #64	; 0x40
   1eb14:	f3ef 8111 	mrs	r1, BASEPRI
   1eb18:	f383 8812 	msr	BASEPRI_MAX, r3
   1eb1c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1eb20:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1eb22:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1eb24:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1eb28:	42ab      	cmp	r3, r5
   1eb2a:	f000 0207 	and.w	r2, r0, #7
   1eb2e:	d02e      	beq.n	1eb8e <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1eb30:	2a02      	cmp	r2, #2
   1eb32:	d10e      	bne.n	1eb52 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1eb34:	3301      	adds	r3, #1
   1eb36:	8363      	strh	r3, [r4, #26]
	rv = state;
   1eb38:	4615      	mov	r5, r2
		notify = true;
   1eb3a:	2301      	movs	r3, #1
	__asm__ volatile(
   1eb3c:	f381 8811 	msr	BASEPRI, r1
   1eb40:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1eb44:	b1b3      	cbz	r3, 1eb74 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1eb46:	2300      	movs	r3, #0
   1eb48:	4631      	mov	r1, r6
   1eb4a:	4620      	mov	r0, r4
   1eb4c:	f7ff ff93 	bl	1ea76 <notify_one>
   1eb50:	e010      	b.n	1eb74 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1eb52:	0783      	lsls	r3, r0, #30
   1eb54:	d001      	beq.n	1eb5a <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1eb56:	2a06      	cmp	r2, #6
   1eb58:	d10e      	bne.n	1eb78 <onoff_request+0x76>
	parent->next = child;
   1eb5a:	2300      	movs	r3, #0
   1eb5c:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   1eb5e:	6863      	ldr	r3, [r4, #4]
   1eb60:	b993      	cbnz	r3, 1eb88 <onoff_request+0x86>
	list->head = node;
   1eb62:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1eb66:	4615      	mov	r5, r2
   1eb68:	b962      	cbnz	r2, 1eb84 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1eb6a:	460a      	mov	r2, r1
   1eb6c:	4620      	mov	r0, r4
   1eb6e:	2102      	movs	r1, #2
   1eb70:	f7f5 fa9e 	bl	140b0 <process_event>
		}
	}

	return rv;
}
   1eb74:	4628      	mov	r0, r5
   1eb76:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1eb78:	2a05      	cmp	r2, #5
   1eb7a:	bf0c      	ite	eq
   1eb7c:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1eb80:	f06f 0504 	mvnne.w	r5, #4
   1eb84:	2300      	movs	r3, #0
   1eb86:	e7d9      	b.n	1eb3c <onoff_request+0x3a>
	parent->next = child;
   1eb88:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1eb8a:	6066      	str	r6, [r4, #4]
}
   1eb8c:	e7eb      	b.n	1eb66 <onoff_request+0x64>
		rv = -EAGAIN;
   1eb8e:	f06f 050a 	mvn.w	r5, #10
   1eb92:	e7f7      	b.n	1eb84 <onoff_request+0x82>

0001eb94 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1eb94:	4604      	mov	r4, r0
   1eb96:	b508      	push	{r3, lr}
   1eb98:	4608      	mov	r0, r1
   1eb9a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1eb9c:	461a      	mov	r2, r3
   1eb9e:	47a0      	blx	r4
	return z_impl_z_current_get();
   1eba0:	f7fc ff1a 	bl	1b9d8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1eba4:	f7f7 fb6c 	bl	16280 <z_impl_k_thread_abort>

0001eba8 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1eba8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1ebac:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   1ebae:	0840      	lsrs	r0, r0, #1
   1ebb0:	4770      	bx	lr

0001ebb2 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1ebb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ebb4:	4603      	mov	r3, r0
   1ebb6:	460c      	mov	r4, r1
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   1ebb8:	f7ff fff6 	bl	1eba8 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1ebbc:	fab0 f080 	clz	r0, r0
   1ebc0:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1ebc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   1ebc8:	00ca      	lsls	r2, r1, #3
   1ebca:	f8dc 6010 	ldr.w	r6, [ip, #16]
   1ebce:	1d17      	adds	r7, r2, #4
   1ebd0:	b28d      	uxth	r5, r1
   1ebd2:	3206      	adds	r2, #6
   1ebd4:	b956      	cbnz	r6, 1ebec <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   1ebd6:	2101      	movs	r1, #1
   1ebd8:	fa01 f000 	lsl.w	r0, r1, r0
   1ebdc:	68d9      	ldr	r1, [r3, #12]
   1ebde:	4301      	orrs	r1, r0
   1ebe0:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1ebe2:	f8cc 4010 	str.w	r4, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   1ebe6:	53dd      	strh	r5, [r3, r7]
   1ebe8:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   1ebea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   1ebec:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1ebee:	3104      	adds	r1, #4
   1ebf0:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1ebf2:	53d8      	strh	r0, [r3, r7]
   1ebf4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1ebf8:	529e      	strh	r6, [r3, r2]
   1ebfa:	80c5      	strh	r5, [r0, #6]
   1ebfc:	525d      	strh	r5, [r3, r1]
   1ebfe:	e7f4      	b.n	1ebea <free_list_add+0x38>

0001ec00 <free_list_remove_bidx>:
{
   1ec00:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1ec02:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1ec06:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   1ec08:	4299      	cmp	r1, r3
   1ec0a:	f102 0104 	add.w	r1, r2, #4
   1ec0e:	d10a      	bne.n	1ec26 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1ec10:	2301      	movs	r3, #1
   1ec12:	fa03 f202 	lsl.w	r2, r3, r2
   1ec16:	68c3      	ldr	r3, [r0, #12]
   1ec18:	ea23 0302 	bic.w	r3, r3, r2
   1ec1c:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1ec1e:	2300      	movs	r3, #0
   1ec20:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1ec24:	bd10      	pop	{r4, pc}
   1ec26:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   1ec28:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1ec2c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1ec30:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1ec34:	80cb      	strh	r3, [r1, #6]
   1ec36:	8082      	strh	r2, [r0, #4]
}
   1ec38:	e7f4      	b.n	1ec24 <free_list_remove_bidx+0x24>

0001ec3a <free_list_remove>:
{
   1ec3a:	b510      	push	{r4, lr}
   1ec3c:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1ec3e:	f7ff ffb3 	bl	1eba8 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1ec42:	fab0 f280 	clz	r2, r0
}
   1ec46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		free_list_remove_bidx(h, c, bidx);
   1ec4a:	f1c2 021f 	rsb	r2, r2, #31
   1ec4e:	4618      	mov	r0, r3
   1ec50:	f7ff bfd6 	b.w	1ec00 <free_list_remove_bidx>

0001ec54 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1ec54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ec58:	fab1 f581 	clz	r5, r1
   1ec5c:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1ec60:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   1ec64:	4603      	mov	r3, r0
	if (b->next) {
   1ec66:	693a      	ldr	r2, [r7, #16]
{
   1ec68:	460e      	mov	r6, r1
	if (b->next) {
   1ec6a:	b1ca      	cbz	r2, 1eca0 <alloc_chunk+0x4c>
   1ec6c:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1ec70:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   1ec72:	4618      	mov	r0, r3
   1ec74:	4621      	mov	r1, r4
   1ec76:	f7ff ff97 	bl	1eba8 <chunk_size>
   1ec7a:	42b0      	cmp	r0, r6
   1ec7c:	d307      	bcc.n	1ec8e <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   1ec7e:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1ec80:	4621      	mov	r1, r4
   1ec82:	4618      	mov	r0, r3
   1ec84:	f7ff ffbc 	bl	1ec00 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1ec88:	4620      	mov	r0, r4
   1ec8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1ec8e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   1ec92:	f1b8 0801 	subs.w	r8, r8, #1
   1ec96:	88e1      	ldrh	r1, [r4, #6]
			b->next = next_free_chunk(h, c);
   1ec98:	6139      	str	r1, [r7, #16]
		} while (--i && b->next != first);
   1ec9a:	d001      	beq.n	1eca0 <alloc_chunk+0x4c>
   1ec9c:	428a      	cmp	r2, r1
   1ec9e:	d1e7      	bne.n	1ec70 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1eca0:	68d9      	ldr	r1, [r3, #12]
   1eca2:	f1c5 0520 	rsb	r5, r5, #32
   1eca6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1ecaa:	40ac      	lsls	r4, r5
	if (bmask != 0U) {
   1ecac:	400c      	ands	r4, r1
   1ecae:	d0eb      	beq.n	1ec88 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   1ecb0:	fa94 f2a4 	rbit	r2, r4
   1ecb4:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1ecb8:	1d11      	adds	r1, r2, #4
   1ecba:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   1ecbe:	e7df      	b.n	1ec80 <alloc_chunk+0x2c>

0001ecc0 <merge_chunks>:
{
   1ecc0:	b538      	push	{r3, r4, r5, lr}
   1ecc2:	4603      	mov	r3, r0
   1ecc4:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1ecc6:	f7ff ff6f 	bl	1eba8 <chunk_size>
   1ecca:	4611      	mov	r1, r2
   1eccc:	4604      	mov	r4, r0
   1ecce:	4618      	mov	r0, r3
   1ecd0:	f7ff ff6a 	bl	1eba8 <chunk_size>
   1ecd4:	4404      	add	r4, r0
		((uint16_t *)cmem)[f] = val;
   1ecd6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1ecda:	0061      	lsls	r1, r4, #1
		((uint16_t *)cmem)[f] = val;
   1ecdc:	8069      	strh	r1, [r5, #2]
	return c + chunk_size(h, c);
   1ecde:	4618      	mov	r0, r3
   1ece0:	4611      	mov	r1, r2
   1ece2:	f7ff ff61 	bl	1eba8 <chunk_size>
	void *cmem = &buf[c];
   1ece6:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   1ece8:	f823 4032 	strh.w	r4, [r3, r2, lsl #3]
}
   1ecec:	bd38      	pop	{r3, r4, r5, pc}

0001ecee <split_chunks>:
{
   1ecee:	b538      	push	{r3, r4, r5, lr}
   1ecf0:	4603      	mov	r3, r0
   1ecf2:	460c      	mov	r4, r1
	chunksz_t sz0 = chunk_size(h, lc);
   1ecf4:	f7ff ff58 	bl	1eba8 <chunk_size>
	chunksz_t lsz = rc - lc;
   1ecf8:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   1ecfa:	1aa5      	subs	r5, r4, r2
   1ecfc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1ed00:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1ed02:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1ed04:	8060      	strh	r0, [r4, #2]
   1ed06:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1ed0a:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1ed0c:	8044      	strh	r4, [r0, #2]
   1ed0e:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1ed12:	4618      	mov	r0, r3
   1ed14:	4611      	mov	r1, r2
   1ed16:	f7ff ff47 	bl	1eba8 <chunk_size>
	void *cmem = &buf[c];
   1ed1a:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   1ed1c:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
}
   1ed20:	bd38      	pop	{r3, r4, r5, pc}

0001ed22 <free_chunk>:
{
   1ed22:	b538      	push	{r3, r4, r5, lr}
   1ed24:	4605      	mov	r5, r0
   1ed26:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   1ed28:	f7ff ff3e 	bl	1eba8 <chunk_size>
   1ed2c:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1ed2e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1ed32:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1ed34:	07da      	lsls	r2, r3, #31
   1ed36:	d40a      	bmi.n	1ed4e <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1ed38:	4628      	mov	r0, r5
   1ed3a:	f7ff ff7e 	bl	1ec3a <free_list_remove>
	return c + chunk_size(h, c);
   1ed3e:	4621      	mov	r1, r4
   1ed40:	4628      	mov	r0, r5
   1ed42:	f7ff ff31 	bl	1eba8 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1ed46:	1822      	adds	r2, r4, r0
   1ed48:	4628      	mov	r0, r5
   1ed4a:	f7ff ffb9 	bl	1ecc0 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1ed4e:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1ed52:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1ed54:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1ed58:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1ed5a:	07db      	lsls	r3, r3, #31
   1ed5c:	d40c      	bmi.n	1ed78 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1ed5e:	4628      	mov	r0, r5
   1ed60:	f7ff ff6b 	bl	1ec3a <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1ed64:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1ed68:	4622      	mov	r2, r4
   1ed6a:	1a61      	subs	r1, r4, r1
   1ed6c:	4628      	mov	r0, r5
   1ed6e:	f7ff ffa7 	bl	1ecc0 <merge_chunks>
   1ed72:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1ed76:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1ed78:	4621      	mov	r1, r4
   1ed7a:	4628      	mov	r0, r5
}
   1ed7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1ed80:	f7ff bf17 	b.w	1ebb2 <free_list_add>

0001ed84 <sys_heap_free>:
	if (mem == NULL) {
   1ed84:	b161      	cbz	r1, 1eda0 <sys_heap_free+0x1c>
	struct z_heap *h = heap->heap;
   1ed86:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1ed88:	3904      	subs	r1, #4
   1ed8a:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   1ed8c:	f021 0307 	bic.w	r3, r1, #7
   1ed90:	4403      	add	r3, r0
	free_chunk(h, c);
   1ed92:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1ed94:	885a      	ldrh	r2, [r3, #2]
   1ed96:	f022 0201 	bic.w	r2, r2, #1
   1ed9a:	805a      	strh	r2, [r3, #2]
   1ed9c:	f7ff bfc1 	b.w	1ed22 <free_chunk>
}
   1eda0:	4770      	bx	lr

0001eda2 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1eda2:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1eda4:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1eda6:	b909      	cbnz	r1, 1edac <sys_heap_alloc+0xa>
		return NULL;
   1eda8:	2000      	movs	r0, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return chunk_mem(h, c);
}
   1edaa:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1edac:	68ab      	ldr	r3, [r5, #8]
   1edae:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1edb2:	d9f9      	bls.n	1eda8 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1edb4:	310b      	adds	r1, #11
   1edb6:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1edb8:	4621      	mov	r1, r4
   1edba:	4628      	mov	r0, r5
   1edbc:	f7ff ff4a 	bl	1ec54 <alloc_chunk>
	if (c == 0U) {
   1edc0:	4606      	mov	r6, r0
   1edc2:	2800      	cmp	r0, #0
   1edc4:	d0f0      	beq.n	1eda8 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1edc6:	4601      	mov	r1, r0
   1edc8:	4628      	mov	r0, r5
   1edca:	f7ff feed 	bl	1eba8 <chunk_size>
   1edce:	42a0      	cmp	r0, r4
   1edd0:	d908      	bls.n	1ede4 <sys_heap_alloc+0x42>
		split_chunks(h, c, c + chunk_sz);
   1edd2:	4434      	add	r4, r6
   1edd4:	4628      	mov	r0, r5
   1edd6:	4622      	mov	r2, r4
   1edd8:	f7ff ff89 	bl	1ecee <split_chunks>
		free_list_add(h, c + chunk_sz);
   1eddc:	4621      	mov	r1, r4
   1edde:	4628      	mov	r0, r5
   1ede0:	f7ff fee7 	bl	1ebb2 <free_list_add>
	void *cmem = &buf[c];
   1ede4:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1ede8:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1edea:	8853      	ldrh	r3, [r2, #2]
   1edec:	f043 0301 	orr.w	r3, r3, #1
   1edf0:	8053      	strh	r3, [r2, #2]
   1edf2:	3004      	adds	r0, #4
	return chunk_mem(h, c);
   1edf4:	e7d9      	b.n	1edaa <sys_heap_alloc+0x8>

0001edf6 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1edf6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1edfa:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1edfc:	424a      	negs	r2, r1
   1edfe:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   1ee02:	ea31 0202 	bics.w	r2, r1, r2
{
   1ee06:	4603      	mov	r3, r0
	if (align != rew) {
   1ee08:	d00a      	beq.n	1ee20 <sys_heap_aligned_alloc+0x2a>
		return false;
   1ee0a:	2f04      	cmp	r7, #4
   1ee0c:	463a      	mov	r2, r7
   1ee0e:	46b9      	mov	r9, r7
   1ee10:	bf28      	it	cs
   1ee12:	2204      	movcs	r2, #4
		align -= rew;
   1ee14:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1ee16:	b974      	cbnz	r4, 1ee36 <sys_heap_aligned_alloc+0x40>
		return NULL;
   1ee18:	2500      	movs	r5, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   1ee1a:	4628      	mov	r0, r5
   1ee1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1ee20:	2904      	cmp	r1, #4
   1ee22:	d804      	bhi.n	1ee2e <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   1ee24:	4621      	mov	r1, r4
}
   1ee26:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1ee2a:	f7ff bfba 	b.w	1eda2 <sys_heap_alloc>
		rew = 0;
   1ee2e:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   1ee32:	2204      	movs	r2, #4
   1ee34:	e7ef      	b.n	1ee16 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   1ee36:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   1ee38:	68b3      	ldr	r3, [r6, #8]
   1ee3a:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1ee3e:	d9eb      	bls.n	1ee18 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1ee40:	f104 010b 	add.w	r1, r4, #11
   1ee44:	4439      	add	r1, r7
   1ee46:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1ee48:	08c9      	lsrs	r1, r1, #3
   1ee4a:	4630      	mov	r0, r6
   1ee4c:	f7ff ff02 	bl	1ec54 <alloc_chunk>
	if (c0 == 0) {
   1ee50:	4680      	mov	r8, r0
   1ee52:	2800      	cmp	r0, #0
   1ee54:	d0e0      	beq.n	1ee18 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1ee56:	f109 0504 	add.w	r5, r9, #4
   1ee5a:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   1ee5e:	1e7b      	subs	r3, r7, #1
   1ee60:	4435      	add	r5, r6
   1ee62:	441d      	add	r5, r3
   1ee64:	427f      	negs	r7, r7
   1ee66:	403d      	ands	r5, r7
   1ee68:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1ee6c:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1ee6e:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1ee70:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1ee72:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1ee74:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1ee78:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1ee7a:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1ee7e:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1ee82:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1ee86:	d208      	bcs.n	1ee9a <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   1ee88:	4601      	mov	r1, r0
   1ee8a:	463a      	mov	r2, r7
   1ee8c:	4630      	mov	r0, r6
   1ee8e:	f7ff ff2e 	bl	1ecee <split_chunks>
		free_list_add(h, c0);
   1ee92:	4641      	mov	r1, r8
   1ee94:	4630      	mov	r0, r6
   1ee96:	f7ff fe8c 	bl	1ebb2 <free_list_add>
	return c + chunk_size(h, c);
   1ee9a:	4639      	mov	r1, r7
   1ee9c:	4630      	mov	r0, r6
   1ee9e:	f7ff fe83 	bl	1eba8 <chunk_size>
   1eea2:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1eea4:	4284      	cmp	r4, r0
   1eea6:	d207      	bcs.n	1eeb8 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   1eea8:	4630      	mov	r0, r6
   1eeaa:	4622      	mov	r2, r4
   1eeac:	f7ff ff1f 	bl	1ecee <split_chunks>
		free_list_add(h, c_end);
   1eeb0:	4621      	mov	r1, r4
   1eeb2:	4630      	mov	r0, r6
   1eeb4:	f7ff fe7d 	bl	1ebb2 <free_list_add>
	void *cmem = &buf[c];
   1eeb8:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1eebc:	8873      	ldrh	r3, [r6, #2]
   1eebe:	f043 0301 	orr.w	r3, r3, #1
   1eec2:	8073      	strh	r3, [r6, #2]
   1eec4:	e7a9      	b.n	1ee1a <sys_heap_aligned_alloc+0x24>

0001eec6 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1eec6:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1eec8:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1eeca:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1eecc:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1eed0:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1eed4:	1ad2      	subs	r2, r2, r3
{
   1eed6:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1eed8:	08d4      	lsrs	r4, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1eeda:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   1eedc:	fab4 f084 	clz	r0, r4
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1eee0:	f1c0 0024 	rsb	r0, r0, #36	; 0x24
   1eee4:	0080      	lsls	r0, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1eee6:	1dc1      	adds	r1, r0, #7
	h->avail_buckets = 0;
   1eee8:	2500      	movs	r5, #0
	h->end_chunk = heap_sz;
   1eeea:	609c      	str	r4, [r3, #8]
	h->avail_buckets = 0;
   1eeec:	60dd      	str	r5, [r3, #12]
   1eeee:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1eef0:	f103 0610 	add.w	r6, r3, #16
   1eef4:	4418      	add	r0, r3
   1eef6:	4286      	cmp	r6, r0
   1eef8:	d118      	bne.n	1ef2c <sys_heap_init+0x66>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1eefa:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1eefc:	f040 0001 	orr.w	r0, r0, #1
   1ef00:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   1ef02:	eb03 06c1 	add.w	r6, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1ef06:	1a60      	subs	r0, r4, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1ef08:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   1ef0a:	801d      	strh	r5, [r3, #0]
   1ef0c:	8077      	strh	r7, [r6, #2]
   1ef0e:	189e      	adds	r6, r3, r2
   1ef10:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   1ef14:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		((uint16_t *)cmem)[f] = val;
   1ef18:	8075      	strh	r5, [r6, #2]
   1ef1a:	5298      	strh	r0, [r3, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1ef1c:	8862      	ldrh	r2, [r4, #2]
   1ef1e:	f042 0201 	orr.w	r2, r2, #1
   1ef22:	8062      	strh	r2, [r4, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   1ef24:	4618      	mov	r0, r3
}
   1ef26:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   1ef28:	f7ff be43 	b.w	1ebb2 <free_list_add>
		h->buckets[i].next = 0;
   1ef2c:	f846 5b04 	str.w	r5, [r6], #4
	for (int i = 0; i < nb_buckets; i++) {
   1ef30:	e7e1      	b.n	1eef6 <sys_heap_init+0x30>

0001ef32 <encode_uint>:
{
   1ef32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef36:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   1ef38:	78d3      	ldrb	r3, [r2, #3]
{
   1ef3a:	4614      	mov	r4, r2
	switch (specifier) {
   1ef3c:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1ef3e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   1ef42:	4606      	mov	r6, r0
   1ef44:	460f      	mov	r7, r1
   1ef46:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   1ef48:	d02d      	beq.n	1efa6 <encode_uint+0x74>
   1ef4a:	d828      	bhi.n	1ef9e <encode_uint+0x6c>
		return 16;
   1ef4c:	2b58      	cmp	r3, #88	; 0x58
   1ef4e:	bf14      	ite	ne
   1ef50:	250a      	movne	r5, #10
   1ef52:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
   1ef54:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   1ef58:	46aa      	mov	sl, r5
   1ef5a:	f04f 0b00 	mov.w	fp, #0
   1ef5e:	4652      	mov	r2, sl
   1ef60:	465b      	mov	r3, fp
   1ef62:	4630      	mov	r0, r6
   1ef64:	4639      	mov	r1, r7
   1ef66:	f7e1 f8cb 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ef6a:	2a09      	cmp	r2, #9
   1ef6c:	b2d3      	uxtb	r3, r2
   1ef6e:	d81f      	bhi.n	1efb0 <encode_uint+0x7e>
   1ef70:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1ef72:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ef74:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   1ef76:	bf08      	it	eq
   1ef78:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ef7a:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   1ef7e:	d301      	bcc.n	1ef84 <encode_uint+0x52>
   1ef80:	45c8      	cmp	r8, r9
   1ef82:	d812      	bhi.n	1efaa <encode_uint+0x78>
	if (conv->flag_hash) {
   1ef84:	7823      	ldrb	r3, [r4, #0]
   1ef86:	069b      	lsls	r3, r3, #26
   1ef88:	d505      	bpl.n	1ef96 <encode_uint+0x64>
		if (radix == 8) {
   1ef8a:	2d08      	cmp	r5, #8
   1ef8c:	d116      	bne.n	1efbc <encode_uint+0x8a>
			conv->altform_0 = true;
   1ef8e:	78a3      	ldrb	r3, [r4, #2]
   1ef90:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1ef94:	70a3      	strb	r3, [r4, #2]
}
   1ef96:	4640      	mov	r0, r8
   1ef98:	b003      	add	sp, #12
   1ef9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1ef9e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1efa2:	2b70      	cmp	r3, #112	; 0x70
   1efa4:	e7d3      	b.n	1ef4e <encode_uint+0x1c>
	switch (specifier) {
   1efa6:	2508      	movs	r5, #8
   1efa8:	e7d4      	b.n	1ef54 <encode_uint+0x22>
		value /= radix;
   1efaa:	4606      	mov	r6, r0
   1efac:	460f      	mov	r7, r1
   1efae:	e7d6      	b.n	1ef5e <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1efb0:	9a01      	ldr	r2, [sp, #4]
   1efb2:	2a19      	cmp	r2, #25
   1efb4:	bf94      	ite	ls
   1efb6:	3337      	addls	r3, #55	; 0x37
   1efb8:	3357      	addhi	r3, #87	; 0x57
   1efba:	e7da      	b.n	1ef72 <encode_uint+0x40>
		} else if (radix == 16) {
   1efbc:	2d10      	cmp	r5, #16
   1efbe:	d1ea      	bne.n	1ef96 <encode_uint+0x64>
			conv->altform_0c = true;
   1efc0:	78a3      	ldrb	r3, [r4, #2]
   1efc2:	f043 0310 	orr.w	r3, r3, #16
   1efc6:	e7e5      	b.n	1ef94 <encode_uint+0x62>

0001efc8 <outs>:
{
   1efc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1efcc:	4607      	mov	r7, r0
   1efce:	4688      	mov	r8, r1
   1efd0:	4615      	mov	r5, r2
   1efd2:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1efd4:	4614      	mov	r4, r2
   1efd6:	42b4      	cmp	r4, r6
   1efd8:	eba4 0005 	sub.w	r0, r4, r5
   1efdc:	d302      	bcc.n	1efe4 <outs+0x1c>
   1efde:	b93e      	cbnz	r6, 1eff0 <outs+0x28>
   1efe0:	7823      	ldrb	r3, [r4, #0]
   1efe2:	b12b      	cbz	r3, 1eff0 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1efe4:	f814 0b01 	ldrb.w	r0, [r4], #1
   1efe8:	4641      	mov	r1, r8
   1efea:	47b8      	blx	r7
		if (rc < 0) {
   1efec:	2800      	cmp	r0, #0
   1efee:	daf2      	bge.n	1efd6 <outs+0xe>
}
   1eff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001eff4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1eff4:	4770      	bx	lr

0001eff6 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1eff6:	2300      	movs	r3, #0
	list->head = NULL;
   1eff8:	e9c0 3300 	strd	r3, r3, [r0]
}
   1effc:	4770      	bx	lr

0001effe <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1effe:	6803      	ldr	r3, [r0, #0]
   1f000:	b923      	cbnz	r3, 1f00c <log_list_add_tail+0xe>
		list->head = msg;
   1f002:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1f004:	2300      	movs	r3, #0
	list->tail = msg;
   1f006:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1f008:	600b      	str	r3, [r1, #0]
}
   1f00a:	4770      	bx	lr
		list->tail->next = msg;
   1f00c:	6843      	ldr	r3, [r0, #4]
   1f00e:	6019      	str	r1, [r3, #0]
   1f010:	e7f8      	b.n	1f004 <log_list_add_tail+0x6>

0001f012 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1f012:	6800      	ldr	r0, [r0, #0]
   1f014:	4770      	bx	lr

0001f016 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   1f016:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   1f018:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   1f01a:	b108      	cbz	r0, 1f020 <log_list_head_get+0xa>
		list->head = list->head->next;
   1f01c:	6802      	ldr	r2, [r0, #0]
   1f01e:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   1f020:	4770      	bx	lr

0001f022 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1f022:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1f024:	f7f5 ffda 	bl	14fdc <log_msg_chunk_alloc>

	if (msg != NULL) {
   1f028:	b118      	cbz	r0, 1f032 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1f02a:	2301      	movs	r3, #1
   1f02c:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1f02e:	2300      	movs	r3, #0
   1f030:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   1f032:	bd08      	pop	{r3, pc}

0001f034 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1f034:	f000 bf5d 	b.w	1fef2 <sys_clock_cycle_get_32>

0001f038 <dummy_timestamp>:
   1f038:	2000      	movs	r0, #0
   1f03a:	4770      	bx	lr

0001f03c <z_log_get_s_mask>:
{
   1f03c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f03e:	4605      	mov	r5, r0
	uint32_t mask = 0U;
   1f040:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   1f042:	4603      	mov	r3, r0
	bool arm = false;
   1f044:	4602      	mov	r2, r0
				mask |= BIT(arg);
   1f046:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   1f048:	f815 4b01 	ldrb.w	r4, [r5], #1
   1f04c:	b10c      	cbz	r4, 1f052 <z_log_get_s_mask+0x16>
   1f04e:	428b      	cmp	r3, r1
   1f050:	d300      	bcc.n	1f054 <z_log_get_s_mask+0x18>
}
   1f052:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   1f054:	2c25      	cmp	r4, #37	; 0x25
   1f056:	d102      	bne.n	1f05e <z_log_get_s_mask+0x22>
			arm = !arm;
   1f058:	f082 0201 	eor.w	r2, r2, #1
   1f05c:	e7f4      	b.n	1f048 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   1f05e:	2a00      	cmp	r2, #0
   1f060:	d0f2      	beq.n	1f048 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1f062:	f044 0620 	orr.w	r6, r4, #32
   1f066:	3e61      	subs	r6, #97	; 0x61
   1f068:	2e19      	cmp	r6, #25
   1f06a:	d8ed      	bhi.n	1f048 <z_log_get_s_mask+0xc>
			if (curr == 's') {
   1f06c:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   1f06e:	bf04      	itt	eq
   1f070:	fa07 f203 	lsleq.w	r2, r7, r3
   1f074:	4310      	orreq	r0, r2
			arg++;
   1f076:	3301      	adds	r3, #1
			arm = false;
   1f078:	2200      	movs	r2, #0
   1f07a:	e7e5      	b.n	1f048 <z_log_get_s_mask+0xc>

0001f07c <log_0>:
{
   1f07c:	b538      	push	{r3, r4, r5, lr}
   1f07e:	4605      	mov	r5, r0
   1f080:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1f082:	f7ff ffce 	bl	1f022 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1f086:	b128      	cbz	r0, 1f094 <log_0+0x18>
		msg->str = str;
   1f088:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1f08a:	4621      	mov	r1, r4
}
   1f08c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1f090:	f7f5 bea4 	b.w	14ddc <msg_finalize>
}
   1f094:	bd38      	pop	{r3, r4, r5, pc}

0001f096 <log_1>:
{
   1f096:	b570      	push	{r4, r5, r6, lr}
   1f098:	4606      	mov	r6, r0
   1f09a:	460d      	mov	r5, r1
   1f09c:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1f09e:	f7ff ffc0 	bl	1f022 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1f0a2:	b158      	cbz	r0, 1f0bc <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1f0a4:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   1f0a6:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1f0a8:	2101      	movs	r1, #1
   1f0aa:	f361 1207 	bfi	r2, r1, #4, #4
   1f0ae:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1f0b0:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   1f0b2:	4621      	mov	r1, r4
}
   1f0b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1f0b8:	f7f5 be90 	b.w	14ddc <msg_finalize>
}
   1f0bc:	bd70      	pop	{r4, r5, r6, pc}

0001f0be <log_2>:
{
   1f0be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f0c2:	4680      	mov	r8, r0
   1f0c4:	460f      	mov	r7, r1
   1f0c6:	4616      	mov	r6, r2
   1f0c8:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1f0ca:	f7ff ffaa 	bl	1f022 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1f0ce:	b168      	cbz	r0, 1f0ec <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1f0d0:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1f0d2:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1f0d6:	2202      	movs	r2, #2
   1f0d8:	f362 1307 	bfi	r3, r2, #4, #4
   1f0dc:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1f0de:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   1f0e2:	4629      	mov	r1, r5
}
   1f0e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1f0e8:	f7f5 be78 	b.w	14ddc <msg_finalize>
}
   1f0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f0f0 <log_3>:
{
   1f0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f0f4:	4680      	mov	r8, r0
   1f0f6:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1f0fa:	460f      	mov	r7, r1
   1f0fc:	4616      	mov	r6, r2
   1f0fe:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1f100:	f7ff ff8f 	bl	1f022 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1f104:	b170      	cbz	r0, 1f124 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1f106:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1f108:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1f10c:	2203      	movs	r2, #3
   1f10e:	f362 1307 	bfi	r3, r2, #4, #4
   1f112:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1f114:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   1f118:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   1f11a:	4649      	mov	r1, r9
}
   1f11c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1f120:	f7f5 be5c 	b.w	14ddc <msg_finalize>
}
   1f124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001f128 <log_n>:
{
   1f128:	b510      	push	{r4, lr}
   1f12a:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1f12c:	f000 f8ae 	bl	1f28c <log_msg_create_n>
		if (msg == NULL) {
   1f130:	b120      	cbz	r0, 1f13c <log_n+0x14>
		msg_finalize(msg, src_level);
   1f132:	4621      	mov	r1, r4
}
   1f134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1f138:	f7f5 be50 	b.w	14ddc <msg_finalize>
}
   1f13c:	bd10      	pop	{r4, pc}

0001f13e <log_hexdump>:
{
   1f13e:	b510      	push	{r4, lr}
   1f140:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   1f142:	f000 f8f7 	bl	1f334 <log_msg_hexdump_create>
		if (msg == NULL) {
   1f146:	b120      	cbz	r0, 1f152 <log_hexdump+0x14>
		msg_finalize(msg, src_level);
   1f148:	4621      	mov	r1, r4
}
   1f14a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1f14e:	f7f5 be45 	b.w	14ddc <msg_finalize>
}
   1f152:	bd10      	pop	{r4, pc}

0001f154 <z_log_get_tag>:
}
   1f154:	2000      	movs	r0, #0
   1f156:	4770      	bx	lr

0001f158 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1f158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f15c:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1f15e:	8903      	ldrh	r3, [r0, #8]
{
   1f160:	f89d 7020 	ldrb.w	r7, [sp, #32]
   1f164:	460e      	mov	r6, r1
   1f166:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1f168:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   1f16c:	42a2      	cmp	r2, r4
   1f16e:	d803      	bhi.n	1f178 <log_msg_hexdump_data_op+0x20>
		*length = 0;
   1f170:	2300      	movs	r3, #0
   1f172:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1f174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1f178:	680b      	ldr	r3, [r1, #0]
   1f17a:	4423      	add	r3, r4
   1f17c:	4293      	cmp	r3, r2
		*length = available_len - offset;
   1f17e:	bf84      	itt	hi
   1f180:	1b13      	subhi	r3, r2, r4
   1f182:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1f184:	2a0c      	cmp	r2, #12
	req_len = *length;
   1f186:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1f18a:	d92a      	bls.n	1f1e2 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   1f18c:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1f18e:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1f192:	d82d      	bhi.n	1f1f0 <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   1f194:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1f196:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1f198:	454a      	cmp	r2, r9
   1f19a:	bf28      	it	cs
   1f19c:	464a      	movcs	r2, r9
   1f19e:	4615      	mov	r5, r2
		if (put_op) {
   1f1a0:	4420      	add	r0, r4
   1f1a2:	b317      	cbz	r7, 1f1ea <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1f1a4:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   1f1a6:	f000 fb29 	bl	1f7fc <memcpy>
		req_len -= cpy_len;
   1f1aa:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1f1ae:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   1f1b0:	f1b9 0f00 	cmp.w	r9, #0
   1f1b4:	d0de      	beq.n	1f174 <log_msg_hexdump_data_op+0x1c>
   1f1b6:	f1b8 0f00 	cmp.w	r8, #0
   1f1ba:	d0db      	beq.n	1f174 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1f1bc:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1f1c0:	454d      	cmp	r5, r9
   1f1c2:	bf28      	it	cs
   1f1c4:	464d      	movcs	r5, r9
		if (put_op) {
   1f1c6:	1d20      	adds	r0, r4, #4
   1f1c8:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
   1f1ca:	462a      	mov	r2, r5
		if (put_op) {
   1f1cc:	b1bf      	cbz	r7, 1f1fe <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   1f1ce:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   1f1d0:	f000 fb14 	bl	1f7fc <memcpy>
		req_len -= cpy_len;
   1f1d4:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1f1d8:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   1f1dc:	442e      	add	r6, r5
		offset = 0;
   1f1de:	2400      	movs	r4, #0
   1f1e0:	e7e6      	b.n	1f1b0 <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   1f1e2:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1f1e4:	f04f 0800 	mov.w	r8, #0
   1f1e8:	e7d6      	b.n	1f198 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1f1ea:	4601      	mov	r1, r0
   1f1ec:	4630      	mov	r0, r6
   1f1ee:	e7da      	b.n	1f1a6 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   1f1f0:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1f1f2:	2c1b      	cmp	r4, #27
   1f1f4:	d9dc      	bls.n	1f1b0 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   1f1f6:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1f1fa:	3c1c      	subs	r4, #28
   1f1fc:	e7f9      	b.n	1f1f2 <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1f1fe:	4601      	mov	r1, r0
   1f200:	4630      	mov	r0, r6
   1f202:	e7e5      	b.n	1f1d0 <log_msg_hexdump_data_op+0x78>

0001f204 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1f204:	3004      	adds	r0, #4
   1f206:	f3bf 8f5b 	dmb	ish
   1f20a:	e850 3f00 	ldrex	r3, [r0]
   1f20e:	3301      	adds	r3, #1
   1f210:	e840 3200 	strex	r2, r3, [r0]
   1f214:	2a00      	cmp	r2, #0
   1f216:	d1f8      	bne.n	1f20a <log_msg_get+0x6>
   1f218:	f3bf 8f5b 	dmb	ish
}
   1f21c:	4770      	bx	lr

0001f21e <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1f21e:	7a40      	ldrb	r0, [r0, #9]
}
   1f220:	0900      	lsrs	r0, r0, #4
   1f222:	4770      	bx	lr

0001f224 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1f224:	7a43      	ldrb	r3, [r0, #9]
   1f226:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1f22a:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1f22e:	d216      	bcs.n	1f25e <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1f230:	2a03      	cmp	r2, #3
   1f232:	d803      	bhi.n	1f23c <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1f234:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1f238:	6948      	ldr	r0, [r1, #20]
   1f23a:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1f23c:	2901      	cmp	r1, #1
   1f23e:	d803      	bhi.n	1f248 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1f240:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1f244:	6988      	ldr	r0, [r1, #24]
   1f246:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1f248:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1f24a:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1f24c:	2906      	cmp	r1, #6
   1f24e:	d803      	bhi.n	1f258 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1f250:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1f254:	6848      	ldr	r0, [r1, #4]
   1f256:	4770      	bx	lr
		cont = cont->next;
   1f258:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1f25a:	3907      	subs	r1, #7
		cont = cont->next;
   1f25c:	e7f6      	b.n	1f24c <log_msg_arg_get+0x28>
		return 0;
   1f25e:	2000      	movs	r0, #0
}
   1f260:	4770      	bx	lr

0001f262 <log_msg_put>:
{
   1f262:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1f264:	1d02      	adds	r2, r0, #4
   1f266:	f3bf 8f5b 	dmb	ish
   1f26a:	e852 1f00 	ldrex	r1, [r2]
   1f26e:	3901      	subs	r1, #1
   1f270:	e842 1c00 	strex	ip, r1, [r2]
   1f274:	f1bc 0f00 	cmp.w	ip, #0
   1f278:	d1f7      	bne.n	1f26a <log_msg_put+0x8>
   1f27a:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1f27e:	685b      	ldr	r3, [r3, #4]
   1f280:	b90b      	cbnz	r3, 1f286 <log_msg_put+0x24>
		msg_free(msg);
   1f282:	f7f5 bebf 	b.w	15004 <msg_free>
}
   1f286:	4770      	bx	lr

0001f288 <log_msg_str_get>:
}
   1f288:	6900      	ldr	r0, [r0, #16]
   1f28a:	4770      	bx	lr

0001f28c <log_msg_create_n>:
{
   1f28c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f290:	4681      	mov	r9, r0
   1f292:	4688      	mov	r8, r1
   1f294:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1f296:	f7f5 fea1 	bl	14fdc <log_msg_chunk_alloc>
	if (msg != NULL) {
   1f29a:	4604      	mov	r4, r0
   1f29c:	b330      	cbz	r0, 1f2ec <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1f29e:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1f2a0:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1f2a2:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1f2a4:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1f2a6:	8107      	strh	r7, [r0, #8]
   1f2a8:	d909      	bls.n	1f2be <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1f2aa:	2202      	movs	r2, #2
   1f2ac:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1f2ae:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   1f2b2:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1f2b6:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   1f2b8:	f1ba 0f00 	cmp.w	sl, #0
   1f2bc:	dc0e      	bgt.n	1f2dc <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   1f2be:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   1f2c0:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1f2c4:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1f2c8:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1f2ca:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1f2cc:	d818      	bhi.n	1f300 <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1f2ce:	00aa      	lsls	r2, r5, #2
   1f2d0:	4641      	mov	r1, r8
   1f2d2:	f104 0014 	add.w	r0, r4, #20
   1f2d6:	f000 fa91 	bl	1f7fc <memcpy>
	while (nargs != 0U) {
   1f2da:	e007      	b.n	1f2ec <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1f2dc:	f7f5 fe7e 	bl	14fdc <log_msg_chunk_alloc>
		if (cont == NULL) {
   1f2e0:	4606      	mov	r6, r0
   1f2e2:	b930      	cbnz	r0, 1f2f2 <log_msg_create_n+0x66>
			msg_free(msg);
   1f2e4:	4620      	mov	r0, r4
   1f2e6:	f7f5 fe8d 	bl	15004 <msg_free>
			return NULL;
   1f2ea:	4634      	mov	r4, r6
}
   1f2ec:	4620      	mov	r0, r4
   1f2ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1f2f2:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1f2f6:	f1aa 0a07 	sub.w	sl, sl, #7
   1f2fa:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   1f2fc:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1f2fe:	e7db      	b.n	1f2b8 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1f300:	4641      	mov	r1, r8
   1f302:	2208      	movs	r2, #8
   1f304:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1f308:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1f30a:	f000 fa77 	bl	1f7fc <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1f30e:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1f310:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1f314:	2d07      	cmp	r5, #7
   1f316:	462e      	mov	r6, r5
   1f318:	bf28      	it	cs
   1f31a:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1f31c:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1f320:	4641      	mov	r1, r8
   1f322:	1d38      	adds	r0, r7, #4
   1f324:	464a      	mov	r2, r9
   1f326:	f000 fa69 	bl	1f7fc <memcpy>
	while (nargs != 0U) {
   1f32a:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   1f32c:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   1f32e:	44c8      	add	r8, r9
	while (nargs != 0U) {
   1f330:	d1f0      	bne.n	1f314 <log_msg_create_n+0x88>
   1f332:	e7db      	b.n	1f2ec <log_msg_create_n+0x60>

0001f334 <log_msg_hexdump_create>:
{
   1f334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1f338:	f643 75ff 	movw	r5, #16383	; 0x3fff
   1f33c:	4295      	cmp	r5, r2
{
   1f33e:	4680      	mov	r8, r0
   1f340:	460e      	mov	r6, r1
   1f342:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1f344:	bf28      	it	cs
   1f346:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   1f348:	f7f5 fe48 	bl	14fdc <log_msg_chunk_alloc>
	if (msg == NULL) {
   1f34c:	4604      	mov	r4, r0
   1f34e:	b380      	cbz	r0, 1f3b2 <log_msg_hexdump_create+0x7e>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1f350:	8902      	ldrh	r2, [r0, #8]
	msg->str = str;
   1f352:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
   1f356:	2301      	movs	r3, #1
   1f358:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1f35a:	00ab      	lsls	r3, r5, #2
   1f35c:	f043 0301 	orr.w	r3, r3, #1
   1f360:	f002 0202 	and.w	r2, r2, #2
   1f364:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1f366:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1f368:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1f36a:	f100 0814 	add.w	r8, r0, #20
   1f36e:	d917      	bls.n	1f3a0 <log_msg_hexdump_create+0x6c>
		(void)memcpy(msg->payload.ext.data.bytes,
   1f370:	2208      	movs	r2, #8
   1f372:	4631      	mov	r1, r6
   1f374:	3018      	adds	r0, #24
   1f376:	f000 fa41 	bl	1f7fc <memcpy>
		msg->hdr.params.generic.ext = 1;
   1f37a:	7a22      	ldrb	r2, [r4, #8]
		msg->payload.ext.next = NULL;
   1f37c:	2300      	movs	r3, #0
		msg->hdr.params.generic.ext = 1;
   1f37e:	f042 0202 	orr.w	r2, r2, #2
		msg->payload.ext.next = NULL;
   1f382:	6163      	str	r3, [r4, #20]
		msg->hdr.params.generic.ext = 1;
   1f384:	7222      	strb	r2, [r4, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1f386:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1f388:	3d08      	subs	r5, #8
	while (length > 0) {
   1f38a:	4699      	mov	r9, r3
   1f38c:	b18d      	cbz	r5, 1f3b2 <log_msg_hexdump_create+0x7e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1f38e:	f7f5 fe25 	bl	14fdc <log_msg_chunk_alloc>
		if (cont == NULL) {
   1f392:	4607      	mov	r7, r0
   1f394:	b980      	cbnz	r0, 1f3b8 <log_msg_hexdump_create+0x84>
			msg_free(msg);
   1f396:	4620      	mov	r0, r4
   1f398:	f7f5 fe34 	bl	15004 <msg_free>
			return NULL;
   1f39c:	463c      	mov	r4, r7
   1f39e:	e008      	b.n	1f3b2 <log_msg_hexdump_create+0x7e>
		(void)memcpy(msg->payload.single.bytes, data, length);
   1f3a0:	462a      	mov	r2, r5
   1f3a2:	4631      	mov	r1, r6
   1f3a4:	4640      	mov	r0, r8
   1f3a6:	f000 fa29 	bl	1f7fc <memcpy>
		msg->hdr.params.generic.ext = 0;
   1f3aa:	7a23      	ldrb	r3, [r4, #8]
   1f3ac:	f36f 0341 	bfc	r3, #1, #1
   1f3b0:	7223      	strb	r3, [r4, #8]
}
   1f3b2:	4620      	mov	r0, r4
   1f3b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   1f3b8:	2d1c      	cmp	r5, #28
   1f3ba:	462f      	mov	r7, r5
   1f3bc:	bf28      	it	cs
   1f3be:	271c      	movcs	r7, #28
		*prev_cont = cont;
   1f3c0:	f8c8 0000 	str.w	r0, [r8]
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   1f3c4:	4631      	mov	r1, r6
		cont->next = NULL;
   1f3c6:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   1f3ca:	4680      	mov	r8, r0
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   1f3cc:	463a      	mov	r2, r7
   1f3ce:	3004      	adds	r0, #4
   1f3d0:	f000 fa14 	bl	1f7fc <memcpy>
		data += chunk_length;
   1f3d4:	443e      	add	r6, r7
		length -= chunk_length;
   1f3d6:	1bed      	subs	r5, r5, r7
   1f3d8:	e7d8      	b.n	1f38c <log_msg_hexdump_create+0x58>

0001f3da <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   1f3da:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1f3dc:	2400      	movs	r4, #0
   1f3de:	9400      	str	r4, [sp, #0]
   1f3e0:	f7ff feba 	bl	1f158 <log_msg_hexdump_data_op>
}
   1f3e4:	b002      	add	sp, #8
   1f3e6:	bd10      	pop	{r4, pc}

0001f3e8 <buffer_write>:
{
   1f3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f3ea:	4606      	mov	r6, r0
   1f3ec:	460d      	mov	r5, r1
   1f3ee:	4614      	mov	r4, r2
   1f3f0:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1f3f2:	4621      	mov	r1, r4
   1f3f4:	4628      	mov	r0, r5
   1f3f6:	463a      	mov	r2, r7
   1f3f8:	47b0      	blx	r6
	} while (len != 0);
   1f3fa:	1a24      	subs	r4, r4, r0
		buf += processed;
   1f3fc:	4405      	add	r5, r0
	} while (len != 0);
   1f3fe:	d1f8      	bne.n	1f3f2 <buffer_write+0xa>
}
   1f400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f402 <std_print>:
{
   1f402:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f406:	b08e      	sub	sp, #56	; 0x38
   1f408:	af0e      	add	r7, sp, #56	; 0x38
   1f40a:	4680      	mov	r8, r0
   1f40c:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1f40e:	f7ff ff3b 	bl	1f288 <log_msg_str_get>
   1f412:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   1f414:	4640      	mov	r0, r8
   1f416:	f7ff ff02 	bl	1f21e <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1f41a:	0083      	lsls	r3, r0, #2
   1f41c:	3307      	adds	r3, #7
   1f41e:	f023 0307 	bic.w	r3, r3, #7
   1f422:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   1f426:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1f428:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1f42a:	f04f 0900 	mov.w	r9, #0
   1f42e:	45d1      	cmp	r9, sl
   1f430:	d116      	bne.n	1f460 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1f432:	4640      	mov	r0, r8
   1f434:	f7ff fef3 	bl	1f21e <log_msg_nargs_get>
   1f438:	280f      	cmp	r0, #15
   1f43a:	d81e      	bhi.n	1f47a <std_print+0x78>
   1f43c:	e8df f010 	tbh	[pc, r0, lsl #1]
   1f440:	00200019 	.word	0x00200019
   1f444:	002d0026 	.word	0x002d0026
   1f448:	00410036 	.word	0x00410036
   1f44c:	005d004e 	.word	0x005d004e
   1f450:	0081006e 	.word	0x0081006e
   1f454:	00ad0096 	.word	0x00ad0096
   1f458:	00e100c6 	.word	0x00e100c6
   1f45c:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   1f460:	4649      	mov	r1, r9
   1f462:	4640      	mov	r0, r8
   1f464:	f7ff fede 	bl	1f224 <log_msg_arg_get>
   1f468:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   1f46c:	f109 0901 	add.w	r9, r9, #1
   1f470:	e7dd      	b.n	1f42e <std_print+0x2c>
		print_formatted(output, str);
   1f472:	4631      	mov	r1, r6
   1f474:	4628      	mov	r0, r5
   1f476:	f7f5 fe03 	bl	15080 <print_formatted>
}
   1f47a:	46bd      	mov	sp, r7
   1f47c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   1f480:	6822      	ldr	r2, [r4, #0]
   1f482:	4631      	mov	r1, r6
   1f484:	4628      	mov	r0, r5
   1f486:	f7f5 fdfb 	bl	15080 <print_formatted>
		break;
   1f48a:	e7f6      	b.n	1f47a <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   1f48c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f490:	4631      	mov	r1, r6
   1f492:	4628      	mov	r0, r5
   1f494:	f7f5 fdf4 	bl	15080 <print_formatted>
		break;
   1f498:	e7ef      	b.n	1f47a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   1f49a:	68a3      	ldr	r3, [r4, #8]
   1f49c:	9300      	str	r3, [sp, #0]
   1f49e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f4a2:	4631      	mov	r1, r6
   1f4a4:	4628      	mov	r0, r5
   1f4a6:	f7f5 fdeb 	bl	15080 <print_formatted>
		break;
   1f4aa:	e7e6      	b.n	1f47a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f4ac:	68e3      	ldr	r3, [r4, #12]
   1f4ae:	9301      	str	r3, [sp, #4]
   1f4b0:	68a3      	ldr	r3, [r4, #8]
   1f4b2:	9300      	str	r3, [sp, #0]
   1f4b4:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f4b8:	4631      	mov	r1, r6
   1f4ba:	4628      	mov	r0, r5
   1f4bc:	f7f5 fde0 	bl	15080 <print_formatted>
		break;
   1f4c0:	e7db      	b.n	1f47a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f4c2:	6923      	ldr	r3, [r4, #16]
   1f4c4:	9302      	str	r3, [sp, #8]
   1f4c6:	68e3      	ldr	r3, [r4, #12]
   1f4c8:	9301      	str	r3, [sp, #4]
   1f4ca:	68a3      	ldr	r3, [r4, #8]
   1f4cc:	9300      	str	r3, [sp, #0]
   1f4ce:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f4d2:	4631      	mov	r1, r6
   1f4d4:	4628      	mov	r0, r5
   1f4d6:	f7f5 fdd3 	bl	15080 <print_formatted>
		break;
   1f4da:	e7ce      	b.n	1f47a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f4dc:	6963      	ldr	r3, [r4, #20]
   1f4de:	9303      	str	r3, [sp, #12]
   1f4e0:	6923      	ldr	r3, [r4, #16]
   1f4e2:	9302      	str	r3, [sp, #8]
   1f4e4:	68e3      	ldr	r3, [r4, #12]
   1f4e6:	9301      	str	r3, [sp, #4]
   1f4e8:	68a3      	ldr	r3, [r4, #8]
   1f4ea:	9300      	str	r3, [sp, #0]
   1f4ec:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f4f0:	4631      	mov	r1, r6
   1f4f2:	4628      	mov	r0, r5
   1f4f4:	f7f5 fdc4 	bl	15080 <print_formatted>
		break;
   1f4f8:	e7bf      	b.n	1f47a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f4fa:	69a3      	ldr	r3, [r4, #24]
   1f4fc:	9304      	str	r3, [sp, #16]
   1f4fe:	6963      	ldr	r3, [r4, #20]
   1f500:	9303      	str	r3, [sp, #12]
   1f502:	6923      	ldr	r3, [r4, #16]
   1f504:	9302      	str	r3, [sp, #8]
   1f506:	68e3      	ldr	r3, [r4, #12]
   1f508:	9301      	str	r3, [sp, #4]
   1f50a:	68a3      	ldr	r3, [r4, #8]
   1f50c:	9300      	str	r3, [sp, #0]
   1f50e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f512:	4631      	mov	r1, r6
   1f514:	4628      	mov	r0, r5
   1f516:	f7f5 fdb3 	bl	15080 <print_formatted>
		break;
   1f51a:	e7ae      	b.n	1f47a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f51c:	69e3      	ldr	r3, [r4, #28]
   1f51e:	9305      	str	r3, [sp, #20]
   1f520:	69a3      	ldr	r3, [r4, #24]
   1f522:	9304      	str	r3, [sp, #16]
   1f524:	6963      	ldr	r3, [r4, #20]
   1f526:	9303      	str	r3, [sp, #12]
   1f528:	6923      	ldr	r3, [r4, #16]
   1f52a:	9302      	str	r3, [sp, #8]
   1f52c:	68e3      	ldr	r3, [r4, #12]
   1f52e:	9301      	str	r3, [sp, #4]
   1f530:	68a3      	ldr	r3, [r4, #8]
   1f532:	9300      	str	r3, [sp, #0]
   1f534:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f538:	4631      	mov	r1, r6
   1f53a:	4628      	mov	r0, r5
   1f53c:	f7f5 fda0 	bl	15080 <print_formatted>
		break;
   1f540:	e79b      	b.n	1f47a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f542:	6a23      	ldr	r3, [r4, #32]
   1f544:	9306      	str	r3, [sp, #24]
   1f546:	69e3      	ldr	r3, [r4, #28]
   1f548:	9305      	str	r3, [sp, #20]
   1f54a:	69a3      	ldr	r3, [r4, #24]
   1f54c:	9304      	str	r3, [sp, #16]
   1f54e:	6963      	ldr	r3, [r4, #20]
   1f550:	9303      	str	r3, [sp, #12]
   1f552:	6923      	ldr	r3, [r4, #16]
   1f554:	9302      	str	r3, [sp, #8]
   1f556:	68e3      	ldr	r3, [r4, #12]
   1f558:	9301      	str	r3, [sp, #4]
   1f55a:	68a3      	ldr	r3, [r4, #8]
   1f55c:	9300      	str	r3, [sp, #0]
   1f55e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f562:	4631      	mov	r1, r6
   1f564:	4628      	mov	r0, r5
   1f566:	f7f5 fd8b 	bl	15080 <print_formatted>
		break;
   1f56a:	e786      	b.n	1f47a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f56c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f56e:	9307      	str	r3, [sp, #28]
   1f570:	6a23      	ldr	r3, [r4, #32]
   1f572:	9306      	str	r3, [sp, #24]
   1f574:	69e3      	ldr	r3, [r4, #28]
   1f576:	9305      	str	r3, [sp, #20]
   1f578:	69a3      	ldr	r3, [r4, #24]
   1f57a:	9304      	str	r3, [sp, #16]
   1f57c:	6963      	ldr	r3, [r4, #20]
   1f57e:	9303      	str	r3, [sp, #12]
   1f580:	6923      	ldr	r3, [r4, #16]
   1f582:	9302      	str	r3, [sp, #8]
   1f584:	68e3      	ldr	r3, [r4, #12]
   1f586:	9301      	str	r3, [sp, #4]
   1f588:	68a3      	ldr	r3, [r4, #8]
   1f58a:	9300      	str	r3, [sp, #0]
   1f58c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f590:	4631      	mov	r1, r6
   1f592:	4628      	mov	r0, r5
   1f594:	f7f5 fd74 	bl	15080 <print_formatted>
		break;
   1f598:	e76f      	b.n	1f47a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f59a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f59c:	9308      	str	r3, [sp, #32]
   1f59e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f5a0:	9307      	str	r3, [sp, #28]
   1f5a2:	6a23      	ldr	r3, [r4, #32]
   1f5a4:	9306      	str	r3, [sp, #24]
   1f5a6:	69e3      	ldr	r3, [r4, #28]
   1f5a8:	9305      	str	r3, [sp, #20]
   1f5aa:	69a3      	ldr	r3, [r4, #24]
   1f5ac:	9304      	str	r3, [sp, #16]
   1f5ae:	6963      	ldr	r3, [r4, #20]
   1f5b0:	9303      	str	r3, [sp, #12]
   1f5b2:	6923      	ldr	r3, [r4, #16]
   1f5b4:	9302      	str	r3, [sp, #8]
   1f5b6:	68e3      	ldr	r3, [r4, #12]
   1f5b8:	9301      	str	r3, [sp, #4]
   1f5ba:	68a3      	ldr	r3, [r4, #8]
   1f5bc:	9300      	str	r3, [sp, #0]
   1f5be:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f5c2:	4631      	mov	r1, r6
   1f5c4:	4628      	mov	r0, r5
   1f5c6:	f7f5 fd5b 	bl	15080 <print_formatted>
		break;
   1f5ca:	e756      	b.n	1f47a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f5cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1f5ce:	9309      	str	r3, [sp, #36]	; 0x24
   1f5d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f5d2:	9308      	str	r3, [sp, #32]
   1f5d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f5d6:	9307      	str	r3, [sp, #28]
   1f5d8:	6a23      	ldr	r3, [r4, #32]
   1f5da:	9306      	str	r3, [sp, #24]
   1f5dc:	69e3      	ldr	r3, [r4, #28]
   1f5de:	9305      	str	r3, [sp, #20]
   1f5e0:	69a3      	ldr	r3, [r4, #24]
   1f5e2:	9304      	str	r3, [sp, #16]
   1f5e4:	6963      	ldr	r3, [r4, #20]
   1f5e6:	9303      	str	r3, [sp, #12]
   1f5e8:	6923      	ldr	r3, [r4, #16]
   1f5ea:	9302      	str	r3, [sp, #8]
   1f5ec:	68e3      	ldr	r3, [r4, #12]
   1f5ee:	9301      	str	r3, [sp, #4]
   1f5f0:	68a3      	ldr	r3, [r4, #8]
   1f5f2:	9300      	str	r3, [sp, #0]
   1f5f4:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f5f8:	4631      	mov	r1, r6
   1f5fa:	4628      	mov	r0, r5
   1f5fc:	f7f5 fd40 	bl	15080 <print_formatted>
		break;
   1f600:	e73b      	b.n	1f47a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f602:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f604:	930a      	str	r3, [sp, #40]	; 0x28
   1f606:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1f608:	9309      	str	r3, [sp, #36]	; 0x24
   1f60a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f60c:	9308      	str	r3, [sp, #32]
   1f60e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f610:	9307      	str	r3, [sp, #28]
   1f612:	6a23      	ldr	r3, [r4, #32]
   1f614:	9306      	str	r3, [sp, #24]
   1f616:	69e3      	ldr	r3, [r4, #28]
   1f618:	9305      	str	r3, [sp, #20]
   1f61a:	69a3      	ldr	r3, [r4, #24]
   1f61c:	9304      	str	r3, [sp, #16]
   1f61e:	6963      	ldr	r3, [r4, #20]
   1f620:	9303      	str	r3, [sp, #12]
   1f622:	6923      	ldr	r3, [r4, #16]
   1f624:	9302      	str	r3, [sp, #8]
   1f626:	68e3      	ldr	r3, [r4, #12]
   1f628:	9301      	str	r3, [sp, #4]
   1f62a:	68a3      	ldr	r3, [r4, #8]
   1f62c:	9300      	str	r3, [sp, #0]
   1f62e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f632:	4631      	mov	r1, r6
   1f634:	4628      	mov	r0, r5
   1f636:	f7f5 fd23 	bl	15080 <print_formatted>
		break;
   1f63a:	e71e      	b.n	1f47a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f63c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f63e:	930b      	str	r3, [sp, #44]	; 0x2c
   1f640:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f642:	930a      	str	r3, [sp, #40]	; 0x28
   1f644:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1f646:	9309      	str	r3, [sp, #36]	; 0x24
   1f648:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f64a:	9308      	str	r3, [sp, #32]
   1f64c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f64e:	9307      	str	r3, [sp, #28]
   1f650:	6a23      	ldr	r3, [r4, #32]
   1f652:	9306      	str	r3, [sp, #24]
   1f654:	69e3      	ldr	r3, [r4, #28]
   1f656:	9305      	str	r3, [sp, #20]
   1f658:	69a3      	ldr	r3, [r4, #24]
   1f65a:	9304      	str	r3, [sp, #16]
   1f65c:	6963      	ldr	r3, [r4, #20]
   1f65e:	9303      	str	r3, [sp, #12]
   1f660:	6923      	ldr	r3, [r4, #16]
   1f662:	9302      	str	r3, [sp, #8]
   1f664:	68e3      	ldr	r3, [r4, #12]
   1f666:	9301      	str	r3, [sp, #4]
   1f668:	68a3      	ldr	r3, [r4, #8]
   1f66a:	9300      	str	r3, [sp, #0]
   1f66c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f670:	4631      	mov	r1, r6
   1f672:	4628      	mov	r0, r5
   1f674:	f7f5 fd04 	bl	15080 <print_formatted>
		break;
   1f678:	e6ff      	b.n	1f47a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f67a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1f67c:	930c      	str	r3, [sp, #48]	; 0x30
   1f67e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f680:	930b      	str	r3, [sp, #44]	; 0x2c
   1f682:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f684:	930a      	str	r3, [sp, #40]	; 0x28
   1f686:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1f688:	9309      	str	r3, [sp, #36]	; 0x24
   1f68a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f68c:	9308      	str	r3, [sp, #32]
   1f68e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f690:	9307      	str	r3, [sp, #28]
   1f692:	6a23      	ldr	r3, [r4, #32]
   1f694:	9306      	str	r3, [sp, #24]
   1f696:	69e3      	ldr	r3, [r4, #28]
   1f698:	9305      	str	r3, [sp, #20]
   1f69a:	69a3      	ldr	r3, [r4, #24]
   1f69c:	9304      	str	r3, [sp, #16]
   1f69e:	6963      	ldr	r3, [r4, #20]
   1f6a0:	9303      	str	r3, [sp, #12]
   1f6a2:	6923      	ldr	r3, [r4, #16]
   1f6a4:	9302      	str	r3, [sp, #8]
   1f6a6:	68e3      	ldr	r3, [r4, #12]
   1f6a8:	9301      	str	r3, [sp, #4]
   1f6aa:	68a3      	ldr	r3, [r4, #8]
   1f6ac:	9300      	str	r3, [sp, #0]
   1f6ae:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f6b2:	4631      	mov	r1, r6
   1f6b4:	4628      	mov	r0, r5
   1f6b6:	f7f5 fce3 	bl	15080 <print_formatted>
}
   1f6ba:	e6de      	b.n	1f47a <std_print+0x78>

0001f6bc <log_output_flush>:
		     output->control_block->offset,
   1f6bc:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   1f6be:	6881      	ldr	r1, [r0, #8]
{
   1f6c0:	b510      	push	{r4, lr}
   1f6c2:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1f6c4:	e9d2 2300 	ldrd	r2, r3, [r2]
   1f6c8:	6800      	ldr	r0, [r0, #0]
   1f6ca:	f7ff fe8d 	bl	1f3e8 <buffer_write>
	output->control_block->offset = 0;
   1f6ce:	6863      	ldr	r3, [r4, #4]
   1f6d0:	2200      	movs	r2, #0
   1f6d2:	601a      	str	r2, [r3, #0]
}
   1f6d4:	bd10      	pop	{r4, pc}

0001f6d6 <out_func>:
{
   1f6d6:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1f6d8:	684b      	ldr	r3, [r1, #4]
   1f6da:	681a      	ldr	r2, [r3, #0]
   1f6dc:	68cb      	ldr	r3, [r1, #12]
   1f6de:	429a      	cmp	r2, r3
{
   1f6e0:	4605      	mov	r5, r0
   1f6e2:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1f6e4:	d102      	bne.n	1f6ec <out_func+0x16>
		log_output_flush(out_ctx);
   1f6e6:	4608      	mov	r0, r1
   1f6e8:	f7ff ffe8 	bl	1f6bc <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1f6ec:	6863      	ldr	r3, [r4, #4]
   1f6ee:	f3bf 8f5b 	dmb	ish
   1f6f2:	e853 2f00 	ldrex	r2, [r3]
   1f6f6:	1c51      	adds	r1, r2, #1
   1f6f8:	e843 1000 	strex	r0, r1, [r3]
   1f6fc:	2800      	cmp	r0, #0
   1f6fe:	d1f8      	bne.n	1f6f2 <out_func+0x1c>
   1f700:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   1f704:	68a3      	ldr	r3, [r4, #8]
   1f706:	549d      	strb	r5, [r3, r2]
}
   1f708:	2000      	movs	r0, #0
   1f70a:	bd38      	pop	{r3, r4, r5, pc}

0001f70c <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1f70c:	2200      	movs	r2, #0
   1f70e:	e9c0 2200 	strd	r2, r2, [r0]
   1f712:	6082      	str	r2, [r0, #8]
}
   1f714:	4770      	bx	lr

0001f716 <abort_function>:
{
   1f716:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   1f718:	2000      	movs	r0, #0
   1f71a:	f7f5 f96f 	bl	149fc <sys_reboot>

0001f71e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1f71e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1f720:	6800      	ldr	r0, [r0, #0]
   1f722:	f7f6 b96b 	b.w	159fc <z_arm_fatal_error>

0001f726 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1f726:	2100      	movs	r1, #0
   1f728:	2001      	movs	r0, #1
   1f72a:	f7f6 b967 	b.w	159fc <z_arm_fatal_error>

0001f72e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1f72e:	b508      	push	{r3, lr}
	handler();
   1f730:	f7f6 f9f6 	bl	15b20 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1f734:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1f738:	f7f6 bad2 	b.w	15ce0 <z_arm_exc_exit>

0001f73c <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1f73c:	3901      	subs	r1, #1
   1f73e:	4603      	mov	r3, r0
   1f740:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1f744:	b90a      	cbnz	r2, 1f74a <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1f746:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1f748:	4770      	bx	lr
		*d = *s;
   1f74a:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1f74e:	e7f7      	b.n	1f740 <strcpy+0x4>

0001f750 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
   1f750:	b570      	push	{r4, r5, r6, lr}
   1f752:	3901      	subs	r1, #1
   1f754:	4605      	mov	r5, r0
   1f756:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1f758:	b142      	cbz	r2, 1f76c <strncpy+0x1c>
   1f75a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1f75e:	1e56      	subs	r6, r2, #1
   1f760:	b92b      	cbnz	r3, 1f76e <strncpy+0x1e>
   1f762:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1f764:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   1f768:	42a2      	cmp	r2, r4
   1f76a:	d1fb      	bne.n	1f764 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   1f76c:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   1f76e:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   1f772:	4632      	mov	r2, r6
   1f774:	e7ef      	b.n	1f756 <strncpy+0x6>

0001f776 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1f776:	4603      	mov	r3, r0
	size_t n = 0;
   1f778:	2000      	movs	r0, #0

	while (*s != '\0') {
   1f77a:	5c1a      	ldrb	r2, [r3, r0]
   1f77c:	b902      	cbnz	r2, 1f780 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1f77e:	4770      	bx	lr
		n++;
   1f780:	3001      	adds	r0, #1
   1f782:	e7fa      	b.n	1f77a <strlen+0x4>

0001f784 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1f784:	4603      	mov	r3, r0
	size_t n = 0;
   1f786:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1f788:	5c1a      	ldrb	r2, [r3, r0]
   1f78a:	b10a      	cbz	r2, 1f790 <strnlen+0xc>
   1f78c:	4288      	cmp	r0, r1
   1f78e:	d100      	bne.n	1f792 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1f790:	4770      	bx	lr
		n++;
   1f792:	3001      	adds	r0, #1
   1f794:	e7f8      	b.n	1f788 <strnlen+0x4>

0001f796 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1f796:	1e43      	subs	r3, r0, #1
   1f798:	3901      	subs	r1, #1
   1f79a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1f79e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1f7a2:	4282      	cmp	r2, r0
   1f7a4:	d101      	bne.n	1f7aa <strcmp+0x14>
   1f7a6:	2a00      	cmp	r2, #0
   1f7a8:	d1f7      	bne.n	1f79a <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1f7aa:	1a10      	subs	r0, r2, r0
   1f7ac:	4770      	bx	lr

0001f7ae <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1f7ae:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1f7b0:	b15a      	cbz	r2, 1f7ca <memcmp+0x1c>
   1f7b2:	3901      	subs	r1, #1
   1f7b4:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1f7b6:	f810 2b01 	ldrb.w	r2, [r0], #1
   1f7ba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1f7be:	42a0      	cmp	r0, r4
   1f7c0:	d001      	beq.n	1f7c6 <memcmp+0x18>
   1f7c2:	429a      	cmp	r2, r3
   1f7c4:	d0f7      	beq.n	1f7b6 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1f7c6:	1ad0      	subs	r0, r2, r3
}
   1f7c8:	bd10      	pop	{r4, pc}
		return 0;
   1f7ca:	4610      	mov	r0, r2
   1f7cc:	e7fc      	b.n	1f7c8 <memcmp+0x1a>

0001f7ce <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   1f7ce:	1a43      	subs	r3, r0, r1
   1f7d0:	4293      	cmp	r3, r2
{
   1f7d2:	b510      	push	{r4, lr}
   1f7d4:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   1f7d8:	d308      	bcc.n	1f7ec <memmove+0x1e>
   1f7da:	3901      	subs	r1, #1
	char *dest = d;
   1f7dc:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   1f7de:	429a      	cmp	r2, r3
   1f7e0:	d00b      	beq.n	1f7fa <memmove+0x2c>
			*dest = *src;
   1f7e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1f7e6:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   1f7ea:	e7f8      	b.n	1f7de <memmove+0x10>
   1f7ec:	440a      	add	r2, r1
			dest[n] = src[n];
   1f7ee:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1f7f2:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   1f7f6:	428a      	cmp	r2, r1
   1f7f8:	d1f9      	bne.n	1f7ee <memmove+0x20>
		}
	}

	return d;
}
   1f7fa:	bd10      	pop	{r4, pc}

0001f7fc <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   1f7fc:	b510      	push	{r4, lr}
   1f7fe:	1e43      	subs	r3, r0, #1
   1f800:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   1f802:	4291      	cmp	r1, r2
   1f804:	d100      	bne.n	1f808 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1f806:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   1f808:	f811 4b01 	ldrb.w	r4, [r1], #1
   1f80c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1f810:	e7f7      	b.n	1f802 <memcpy+0x6>

0001f812 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1f812:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   1f814:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   1f816:	4603      	mov	r3, r0
	while (n > 0) {
   1f818:	4293      	cmp	r3, r2
   1f81a:	d100      	bne.n	1f81e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1f81c:	4770      	bx	lr
		*(d_byte++) = c_byte;
   1f81e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1f822:	e7f9      	b.n	1f818 <memset+0x6>

0001f824 <_stdout_hook_default>:
}
   1f824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f828:	4770      	bx	lr

0001f82a <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   1f82a:	b084      	sub	sp, #16
   1f82c:	ab04      	add	r3, sp, #16
   1f82e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1f832:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1f836:	2b06      	cmp	r3, #6
   1f838:	d108      	bne.n	1f84c <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1f83a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f83e:	2201      	movs	r2, #1
   1f840:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1f844:	f3bf 8f4f 	dsb	sy
        __WFE();
   1f848:	bf20      	wfe
    while (true)
   1f84a:	e7fd      	b.n	1f848 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   1f84c:	b004      	add	sp, #16
   1f84e:	4770      	bx	lr

0001f850 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1f850:	b084      	sub	sp, #16
   1f852:	ab04      	add	r3, sp, #16
   1f854:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1f858:	2300      	movs	r3, #0
   1f85a:	f383 8811 	msr	BASEPRI, r3
   1f85e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1f862:	b004      	add	sp, #16
   1f864:	4770      	bx	lr

0001f866 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1f866:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1f868:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1f86a:	2106      	movs	r1, #6
{
   1f86c:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1f86e:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1f872:	f7fa fa73 	bl	19d5c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1f876:	b918      	cbnz	r0, 1f880 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1f878:	79a3      	ldrb	r3, [r4, #6]
   1f87a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1f87e:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1f880:	bd10      	pop	{r4, pc}

0001f882 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f882:	f3bf 8f5b 	dmb	ish
   1f886:	6800      	ldr	r0, [r0, #0]
   1f888:	f3bf 8f5b 	dmb	ish
}
   1f88c:	4770      	bx	lr

0001f88e <is_adv_using_rand_addr>:
{
   1f88e:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   1f890:	f7f8 f8fe 	bl	17a90 <bt_le_adv_lookup_legacy>
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
   1f894:	b120      	cbz	r0, 1f8a0 <is_adv_using_rand_addr+0x12>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1f896:	3010      	adds	r0, #16
   1f898:	f7ff fff3 	bl	1f882 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1f89c:	f3c0 1080 	ubfx	r0, r0, #6, #1
}
   1f8a0:	bd08      	pop	{r3, pc}

0001f8a2 <bt_lookup_id_addr>:
}
   1f8a2:	4608      	mov	r0, r1
   1f8a4:	4770      	bx	lr

0001f8a6 <bt_id_set_private_addr>:
{
   1f8a6:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1f8a8:	2106      	movs	r1, #6
   1f8aa:	4668      	mov	r0, sp
   1f8ac:	f7fa fa56 	bl	19d5c <bt_rand>
	if (err) {
   1f8b0:	b940      	cbnz	r0, 1f8c4 <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1f8b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1f8b6:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1f8b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1f8bc:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1f8c0:	f7f7 fdbc 	bl	1743c <set_random_address>
}
   1f8c4:	b003      	add	sp, #12
   1f8c6:	f85d fb04 	ldr.w	pc, [sp], #4

0001f8ca <bt_id_set_adv_private_addr>:
{
   1f8ca:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1f8cc:	2106      	movs	r1, #6
   1f8ce:	4668      	mov	r0, sp
   1f8d0:	f7fa fa44 	bl	19d5c <bt_rand>
	if (err) {
   1f8d4:	b940      	cbnz	r0, 1f8e8 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1f8d6:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   1f8da:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1f8dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1f8e0:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   1f8e4:	f7f7 fdaa 	bl	1743c <set_random_address>
}
   1f8e8:	b003      	add	sp, #12
   1f8ea:	f85d fb04 	ldr.w	pc, [sp], #4

0001f8ee <bt_id_scan_random_addr_check>:
{
   1f8ee:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   1f8f0:	f7f8 f8ce 	bl	17a90 <bt_le_adv_lookup_legacy>
	if (!adv) {
   1f8f4:	b110      	cbz	r0, 1f8fc <bt_id_scan_random_addr_check+0xe>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1f8f6:	3010      	adds	r0, #16
   1f8f8:	f7ff ffc3 	bl	1f882 <atomic_get>
}
   1f8fc:	2001      	movs	r0, #1
   1f8fe:	bd08      	pop	{r3, pc}

0001f900 <get_adv_channel_map>:
{
   1f900:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1f902:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1f906:	bf0c      	ite	eq
   1f908:	2007      	moveq	r0, #7
   1f90a:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1f90c:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1f90e:	bf48      	it	mi
   1f910:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1f914:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1f916:	bf48      	it	mi
   1f918:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1f91c:	4770      	bx	lr

0001f91e <atomic_and>:
{
   1f91e:	4603      	mov	r3, r0
}
   1f920:	f3bf 8f5b 	dmb	ish
   1f924:	e853 0f00 	ldrex	r0, [r3]
   1f928:	ea00 0201 	and.w	r2, r0, r1
   1f92c:	e843 2c00 	strex	ip, r2, [r3]
   1f930:	f1bc 0f00 	cmp.w	ip, #0
   1f934:	d1f6      	bne.n	1f924 <atomic_and+0x6>
   1f936:	f3bf 8f5b 	dmb	ish
   1f93a:	4770      	bx	lr

0001f93c <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f93c:	2301      	movs	r3, #1
{
   1f93e:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f940:	fa03 f101 	lsl.w	r1, r3, r1
{
   1f944:	4604      	mov	r4, r0
	if (val) {
   1f946:	b162      	cbz	r2, 1f962 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f948:	f3bf 8f5b 	dmb	ish
   1f94c:	e854 3f00 	ldrex	r3, [r4]
   1f950:	430b      	orrs	r3, r1
   1f952:	e844 3200 	strex	r2, r3, [r4]
   1f956:	2a00      	cmp	r2, #0
   1f958:	d1f8      	bne.n	1f94c <atomic_set_bit_to+0x10>
   1f95a:	f3bf 8f5b 	dmb	ish
	}
}
   1f95e:	bc10      	pop	{r4}
   1f960:	4770      	bx	lr
   1f962:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1f964:	43c9      	mvns	r1, r1
   1f966:	f7ff bfda 	b.w	1f91e <atomic_and>

0001f96a <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   1f96a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f96e:	b087      	sub	sp, #28
   1f970:	4605      	mov	r5, r0
   1f972:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   1f976:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   1f97a:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   1f97e:	460c      	mov	r4, r1
   1f980:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   1f982:	2100      	movs	r1, #0
   1f984:	2210      	movs	r2, #16
   1f986:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   1f988:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   1f98a:	f7ff ff42 	bl	1f812 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   1f98e:	b186      	cbz	r6, 1f9b2 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   1f990:	f7f7 fd36 	bl	17400 <bt_get_name>
   1f994:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1f996:	2c00      	cmp	r4, #0
   1f998:	d139      	bne.n	1fa0e <le_adv_update.constprop.0+0xa4>
   1f99a:	2f00      	cmp	r7, #0
   1f99c:	d142      	bne.n	1fa24 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   1f99e:	4658      	mov	r0, fp
   1f9a0:	f7ff fee9 	bl	1f776 <strlen>
   1f9a4:	2309      	movs	r3, #9
   1f9a6:	f88d 3000 	strb.w	r3, [sp]
   1f9aa:	f88d 0001 	strb.w	r0, [sp, #1]
   1f9ae:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   1f9b2:	2e01      	cmp	r6, #1
			d_len = 2;
   1f9b4:	bf0c      	ite	eq
   1f9b6:	2202      	moveq	r2, #2
		d_len = 1;
   1f9b8:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1f9ba:	a902      	add	r1, sp, #8
   1f9bc:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   1f9c0:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   1f9c4:	bf04      	itt	eq
   1f9c6:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   1f9ca:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1f9cc:	f7f7 ffee 	bl	179ac <hci_set_ad>
		if (err) {
   1f9d0:	4604      	mov	r4, r0
   1f9d2:	b978      	cbnz	r0, 1f9f4 <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   1f9d4:	f1ba 0f00 	cmp.w	sl, #0
   1f9d8:	d126      	bne.n	1fa28 <le_adv_update.constprop.0+0xbe>
   1f9da:	3510      	adds	r5, #16
   1f9dc:	f3bf 8f5b 	dmb	ish
   1f9e0:	e855 3f00 	ldrex	r3, [r5]
   1f9e4:	f043 0304 	orr.w	r3, r3, #4
   1f9e8:	e845 3200 	strex	r2, r3, [r5]
   1f9ec:	2a00      	cmp	r2, #0
   1f9ee:	d1f7      	bne.n	1f9e0 <le_adv_update.constprop.0+0x76>
   1f9f0:	f3bf 8f5b 	dmb	ish
}
   1f9f4:	4620      	mov	r0, r4
   1f9f6:	b007      	add	sp, #28
   1f9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1f9fc:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1fa00:	3a08      	subs	r2, #8
   1fa02:	2a01      	cmp	r2, #1
   1fa04:	d925      	bls.n	1fa52 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   1fa06:	3301      	adds	r3, #1
   1fa08:	4598      	cmp	r8, r3
   1fa0a:	d1f7      	bne.n	1f9fc <le_adv_update.constprop.0+0x92>
   1fa0c:	e7c5      	b.n	1f99a <le_adv_update.constprop.0+0x30>
   1fa0e:	2300      	movs	r3, #0
   1fa10:	e7fa      	b.n	1fa08 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1fa12:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   1fa16:	3a08      	subs	r2, #8
   1fa18:	2a01      	cmp	r2, #1
   1fa1a:	d91a      	bls.n	1fa52 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   1fa1c:	3301      	adds	r3, #1
   1fa1e:	4599      	cmp	r9, r3
   1fa20:	d1f7      	bne.n	1fa12 <le_adv_update.constprop.0+0xa8>
   1fa22:	e7bc      	b.n	1f99e <le_adv_update.constprop.0+0x34>
   1fa24:	2300      	movs	r3, #0
   1fa26:	e7fa      	b.n	1fa1e <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   1fa28:	2e02      	cmp	r6, #2
   1fa2a:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   1fa2e:	bf08      	it	eq
   1fa30:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1fa32:	a902      	add	r1, sp, #8
			d_len = 2;
   1fa34:	bf08      	it	eq
   1fa36:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1fa38:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   1fa3c:	bf08      	it	eq
   1fa3e:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   1fa42:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1fa46:	f7f7 ffb1 	bl	179ac <hci_set_ad>
		if (err) {
   1fa4a:	2800      	cmp	r0, #0
   1fa4c:	d0c5      	beq.n	1f9da <le_adv_update.constprop.0+0x70>
   1fa4e:	4604      	mov	r4, r0
   1fa50:	e7d0      	b.n	1f9f4 <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   1fa52:	f06f 0415 	mvn.w	r4, #21
   1fa56:	e7cd      	b.n	1f9f4 <le_adv_update.constprop.0+0x8a>

0001fa58 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   1fa58:	6843      	ldr	r3, [r0, #4]
   1fa5a:	f013 0008 	ands.w	r0, r3, #8
   1fa5e:	d00a      	beq.n	1fa76 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   1fa60:	035a      	lsls	r2, r3, #13
   1fa62:	d407      	bmi.n	1fa74 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   1fa64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
   1fa68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		return ADV_NAME_TYPE_SD;
   1fa6c:	bf0c      	ite	eq
   1fa6e:	2001      	moveq	r0, #1
   1fa70:	2002      	movne	r0, #2
   1fa72:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   1fa74:	2001      	movs	r0, #1
}
   1fa76:	4770      	bx	lr

0001fa78 <bt_le_adv_set_enable_legacy>:
{
   1fa78:	b570      	push	{r4, r5, r6, lr}
   1fa7a:	4606      	mov	r6, r0
   1fa7c:	b086      	sub	sp, #24
   1fa7e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1fa80:	f242 000a 	movw	r0, #8202	; 0x200a
   1fa84:	2101      	movs	r1, #1
   1fa86:	f7f6 ffd5 	bl	16a34 <bt_hci_cmd_create>
	if (!buf) {
   1fa8a:	4604      	mov	r4, r0
   1fa8c:	b1b0      	cbz	r0, 1fabc <bt_le_adv_set_enable_legacy+0x44>
	if (enable) {
   1fa8e:	3008      	adds	r0, #8
   1fa90:	b195      	cbz	r5, 1fab8 <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   1fa92:	2101      	movs	r1, #1
   1fa94:	f000 f86d 	bl	1fb72 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1fa98:	f106 0210 	add.w	r2, r6, #16
   1fa9c:	a903      	add	r1, sp, #12
   1fa9e:	4620      	mov	r0, r4
   1faa0:	9500      	str	r5, [sp, #0]
   1faa2:	2306      	movs	r3, #6
   1faa4:	f7f6 ffb4 	bl	16a10 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1faa8:	2200      	movs	r2, #0
   1faaa:	4621      	mov	r1, r4
   1faac:	f242 000a 	movw	r0, #8202	; 0x200a
   1fab0:	f7f6 fff8 	bl	16aa4 <bt_hci_cmd_send_sync>
}
   1fab4:	b006      	add	sp, #24
   1fab6:	bd70      	pop	{r4, r5, r6, pc}
   1fab8:	4629      	mov	r1, r5
   1faba:	e7eb      	b.n	1fa94 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1fabc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1fac0:	e7f8      	b.n	1fab4 <bt_le_adv_set_enable_legacy+0x3c>

0001fac2 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   1fac2:	3018      	adds	r0, #24
   1fac4:	f000 bce5 	b.w	20492 <k_work_cancel_delayable>

0001fac8 <atomic_and>:
{
   1fac8:	4603      	mov	r3, r0
}
   1faca:	f3bf 8f5b 	dmb	ish
   1face:	e853 0f00 	ldrex	r0, [r3]
   1fad2:	ea00 0201 	and.w	r2, r0, r1
   1fad6:	e843 2c00 	strex	ip, r2, [r3]
   1fada:	f1bc 0f00 	cmp.w	ip, #0
   1fade:	d1f6      	bne.n	1face <atomic_and+0x6>
   1fae0:	f3bf 8f5b 	dmb	ish
   1fae4:	4770      	bx	lr

0001fae6 <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   1fae6:	f7f8 b95f 	b.w	17da8 <bt_le_scan_set_enable_legacy>

0001faea <fixed_data_unref>:
}
   1faea:	4770      	bx	lr

0001faec <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1faec:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1faee:	6849      	ldr	r1, [r1, #4]
   1faf0:	6809      	ldr	r1, [r1, #0]
   1faf2:	f7f8 bb6f 	b.w	181d4 <net_buf_alloc_len>

0001faf6 <net_buf_get>:
{
   1faf6:	b570      	push	{r4, r5, r6, lr}
   1faf8:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1fafa:	f7fb fa85 	bl	1b008 <z_impl_k_queue_get>
	if (!buf) {
   1fafe:	4605      	mov	r5, r0
   1fb00:	b128      	cbz	r0, 1fb0e <net_buf_get+0x18>
   1fb02:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1fb04:	7963      	ldrb	r3, [r4, #5]
   1fb06:	f013 0301 	ands.w	r3, r3, #1
   1fb0a:	d102      	bne.n	1fb12 <net_buf_get+0x1c>
	frag->frags = NULL;
   1fb0c:	6023      	str	r3, [r4, #0]
}
   1fb0e:	4628      	mov	r0, r5
   1fb10:	bd70      	pop	{r4, r5, r6, pc}
   1fb12:	2300      	movs	r3, #0
   1fb14:	2200      	movs	r2, #0
   1fb16:	4630      	mov	r0, r6
   1fb18:	f7fb fa76 	bl	1b008 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1fb1c:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1fb1e:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1fb20:	f023 0301 	bic.w	r3, r3, #1
   1fb24:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1fb26:	4604      	mov	r4, r0
   1fb28:	e7ec      	b.n	1fb04 <net_buf_get+0xe>

0001fb2a <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1fb2a:	6883      	ldr	r3, [r0, #8]
   1fb2c:	440b      	add	r3, r1
   1fb2e:	6003      	str	r3, [r0, #0]
}
   1fb30:	4770      	bx	lr

0001fb32 <net_buf_put>:
{
   1fb32:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1fb34:	460a      	mov	r2, r1
   1fb36:	6814      	ldr	r4, [r2, #0]
   1fb38:	b914      	cbnz	r4, 1fb40 <net_buf_put+0xe>
}
   1fb3a:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1fb3c:	f000 bbcd 	b.w	202da <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1fb40:	7953      	ldrb	r3, [r2, #5]
   1fb42:	f043 0301 	orr.w	r3, r3, #1
   1fb46:	7153      	strb	r3, [r2, #5]
   1fb48:	4622      	mov	r2, r4
   1fb4a:	e7f4      	b.n	1fb36 <net_buf_put+0x4>

0001fb4c <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1fb4c:	7902      	ldrb	r2, [r0, #4]
   1fb4e:	3201      	adds	r2, #1
   1fb50:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1fb52:	4770      	bx	lr

0001fb54 <net_buf_simple_add>:
	return buf->data + buf->len;
   1fb54:	8883      	ldrh	r3, [r0, #4]
   1fb56:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1fb58:	4419      	add	r1, r3
   1fb5a:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1fb5c:	18d0      	adds	r0, r2, r3
   1fb5e:	4770      	bx	lr

0001fb60 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1fb60:	b430      	push	{r4, r5}
   1fb62:	8884      	ldrh	r4, [r0, #4]
   1fb64:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1fb66:	18a3      	adds	r3, r4, r2
   1fb68:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1fb6a:	1928      	adds	r0, r5, r4
}
   1fb6c:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1fb6e:	f7ff be45 	b.w	1f7fc <memcpy>

0001fb72 <net_buf_simple_add_u8>:
   1fb72:	8883      	ldrh	r3, [r0, #4]
   1fb74:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1fb76:	b510      	push	{r4, lr}
	buf->len += len;
   1fb78:	1c5c      	adds	r4, r3, #1
   1fb7a:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1fb7c:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1fb7e:	18d0      	adds	r0, r2, r3
   1fb80:	bd10      	pop	{r4, pc}

0001fb82 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1fb82:	8882      	ldrh	r2, [r0, #4]
   1fb84:	1a52      	subs	r2, r2, r1
{
   1fb86:	4603      	mov	r3, r0
	buf->len -= len;
   1fb88:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1fb8a:	6800      	ldr	r0, [r0, #0]
   1fb8c:	4408      	add	r0, r1
   1fb8e:	6018      	str	r0, [r3, #0]
}
   1fb90:	4770      	bx	lr

0001fb92 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1fb92:	4603      	mov	r3, r0
	void *data = buf->data;
   1fb94:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1fb96:	889a      	ldrh	r2, [r3, #4]
   1fb98:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1fb9a:	4401      	add	r1, r0
	buf->len -= len;
   1fb9c:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1fb9e:	6019      	str	r1, [r3, #0]

	return data;
}
   1fba0:	4770      	bx	lr

0001fba2 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1fba2:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   1fba4:	6803      	ldr	r3, [r0, #0]
   1fba6:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1fba8:	2101      	movs	r1, #1
   1fbaa:	f7ff ffea 	bl	1fb82 <net_buf_simple_pull>

	return val;
}
   1fbae:	4620      	mov	r0, r4
   1fbb0:	bd10      	pop	{r4, pc}

0001fbb2 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1fbb2:	6802      	ldr	r2, [r0, #0]
   1fbb4:	6880      	ldr	r0, [r0, #8]
}
   1fbb6:	1a10      	subs	r0, r2, r0
   1fbb8:	4770      	bx	lr

0001fbba <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1fbba:	6902      	ldr	r2, [r0, #16]
   1fbbc:	b2cb      	uxtb	r3, r1
   1fbbe:	210c      	movs	r1, #12
   1fbc0:	fb03 2101 	mla	r1, r3, r1, r2
   1fbc4:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   1fbc6:	f000 0007 	and.w	r0, r0, #7
   1fbca:	4770      	bx	lr

0001fbcc <set_off_state>:
	__asm__ volatile(
   1fbcc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fbd0:	f3ef 8211 	mrs	r2, BASEPRI
   1fbd4:	f383 8812 	msr	BASEPRI_MAX, r3
   1fbd8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1fbdc:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1fbde:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1fbe2:	d001      	beq.n	1fbe8 <set_off_state+0x1c>
   1fbe4:	428b      	cmp	r3, r1
   1fbe6:	d107      	bne.n	1fbf8 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1fbe8:	2301      	movs	r3, #1
   1fbea:	6003      	str	r3, [r0, #0]
	int err = 0;
   1fbec:	2000      	movs	r0, #0
	__asm__ volatile(
   1fbee:	f382 8811 	msr	BASEPRI, r2
   1fbf2:	f3bf 8f6f 	isb	sy
}
   1fbf6:	4770      	bx	lr
		err = -EPERM;
   1fbf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fbfc:	e7f7      	b.n	1fbee <set_off_state+0x22>

0001fbfe <set_starting_state>:
{
   1fbfe:	b510      	push	{r4, lr}
	__asm__ volatile(
   1fc00:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fc04:	f3ef 8211 	mrs	r2, BASEPRI
   1fc08:	f383 8812 	msr	BASEPRI_MAX, r3
   1fc0c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1fc10:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1fc12:	f003 0407 	and.w	r4, r3, #7
   1fc16:	2c01      	cmp	r4, #1
   1fc18:	d106      	bne.n	1fc28 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1fc1a:	6001      	str	r1, [r0, #0]
	int err = 0;
   1fc1c:	2000      	movs	r0, #0
	__asm__ volatile(
   1fc1e:	f382 8811 	msr	BASEPRI, r2
   1fc22:	f3bf 8f6f 	isb	sy
}
   1fc26:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1fc28:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1fc2c:	428b      	cmp	r3, r1
		err = -EALREADY;
   1fc2e:	bf14      	ite	ne
   1fc30:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1fc34:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   1fc38:	e7f1      	b.n	1fc1e <set_starting_state+0x20>

0001fc3a <set_on_state>:
	__asm__ volatile(
   1fc3a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fc3e:	f3ef 8211 	mrs	r2, BASEPRI
   1fc42:	f383 8812 	msr	BASEPRI_MAX, r3
   1fc46:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1fc4a:	6803      	ldr	r3, [r0, #0]
   1fc4c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1fc50:	f043 0302 	orr.w	r3, r3, #2
   1fc54:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1fc56:	f382 8811 	msr	BASEPRI, r2
   1fc5a:	f3bf 8f6f 	isb	sy
}
   1fc5e:	4770      	bx	lr

0001fc60 <onoff_started_callback>:
	return &data->mgr[type];
   1fc60:	6900      	ldr	r0, [r0, #16]
{
   1fc62:	b410      	push	{r4}
	return &data->mgr[type];
   1fc64:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1fc66:	241c      	movs	r4, #28
   1fc68:	fb03 0004 	mla	r0, r3, r4, r0
   1fc6c:	2100      	movs	r1, #0
}
   1fc6e:	bc10      	pop	{r4}
	notify(mgr, 0);
   1fc70:	4710      	bx	r2

0001fc72 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1fc72:	2000      	movs	r0, #0
   1fc74:	f7fa b922 	b.w	19ebc <nrfx_clock_start>

0001fc78 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1fc78:	2000      	movs	r0, #0
   1fc7a:	f000 b96b 	b.w	1ff54 <nrfx_clock_stop>

0001fc7e <blocking_start_callback>:
{
   1fc7e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1fc80:	f7fb b9f6 	b.w	1b070 <z_impl_k_sem_give>

0001fc84 <api_stop>:
{
   1fc84:	b538      	push	{r3, r4, r5, lr}
   1fc86:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
   1fc88:	240c      	movs	r4, #12
   1fc8a:	434c      	muls	r4, r1
{
   1fc8c:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   1fc8e:	6900      	ldr	r0, [r0, #16]
   1fc90:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1fc94:	2180      	movs	r1, #128	; 0x80
   1fc96:	4418      	add	r0, r3
   1fc98:	f7ff ff98 	bl	1fbcc <set_off_state>
	if (err < 0) {
   1fc9c:	2800      	cmp	r0, #0
   1fc9e:	db04      	blt.n	1fcaa <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   1fca0:	6869      	ldr	r1, [r5, #4]
   1fca2:	440c      	add	r4, r1
   1fca4:	6863      	ldr	r3, [r4, #4]
   1fca6:	4798      	blx	r3
	return 0;
   1fca8:	2000      	movs	r0, #0
}
   1fcaa:	bd38      	pop	{r3, r4, r5, pc}

0001fcac <api_start>:
{
   1fcac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fcb0:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   1fcb2:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1fcb4:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   1fcb6:	434c      	muls	r4, r1
{
   1fcb8:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1fcba:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1fcbe:	2180      	movs	r1, #128	; 0x80
   1fcc0:	4428      	add	r0, r5
{
   1fcc2:	4690      	mov	r8, r2
   1fcc4:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   1fcc6:	f7ff ff9a 	bl	1fbfe <set_starting_state>
	if (err < 0) {
   1fcca:	2800      	cmp	r0, #0
   1fccc:	db06      	blt.n	1fcdc <api_start+0x30>
	subdata->cb = cb;
   1fcce:	4425      	add	r5, r4
	subdata->user_data = user_data;
   1fcd0:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1fcd4:	6873      	ldr	r3, [r6, #4]
   1fcd6:	591b      	ldr	r3, [r3, r4]
   1fcd8:	4798      	blx	r3
	return 0;
   1fcda:	2000      	movs	r0, #0
}
   1fcdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fce0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fce0:	6843      	ldr	r3, [r0, #4]
   1fce2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1fce4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1fce8:	600b      	str	r3, [r1, #0]
}
   1fcea:	2000      	movs	r0, #0
   1fcec:	4770      	bx	lr

0001fcee <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fcee:	6843      	ldr	r3, [r0, #4]
   1fcf0:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1fcf2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1fcf6:	4042      	eors	r2, r0
   1fcf8:	400a      	ands	r2, r1
   1fcfa:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1fcfc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1fd00:	2000      	movs	r0, #0
   1fd02:	4770      	bx	lr

0001fd04 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fd04:	6843      	ldr	r3, [r0, #4]
   1fd06:	685b      	ldr	r3, [r3, #4]
}
   1fd08:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1fd0a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1fd0e:	4770      	bx	lr

0001fd10 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fd10:	6843      	ldr	r3, [r0, #4]
   1fd12:	685b      	ldr	r3, [r3, #4]
}
   1fd14:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1fd16:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1fd1a:	4770      	bx	lr

0001fd1c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fd1c:	6843      	ldr	r3, [r0, #4]
   1fd1e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1fd20:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1fd24:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1fd26:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1fd2a:	2000      	movs	r0, #0
   1fd2c:	4770      	bx	lr

0001fd2e <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1fd2e:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
   1fd30:	6858      	ldr	r0, [r3, #4]
{
   1fd32:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   1fd34:	b158      	cbz	r0, 1fd4e <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1fd36:	2400      	movs	r4, #0
   1fd38:	4281      	cmp	r1, r0
   1fd3a:	d113      	bne.n	1fd64 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1fd3c:	6808      	ldr	r0, [r1, #0]
   1fd3e:	b95c      	cbnz	r4, 1fd58 <gpio_nrfx_manage_callback+0x2a>
   1fd40:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   1fd42:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1fd44:	42a1      	cmp	r1, r4
   1fd46:	d100      	bne.n	1fd4a <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1fd48:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1fd4a:	2000      	movs	r0, #0
   1fd4c:	6008      	str	r0, [r1, #0]
	if (set) {
   1fd4e:	b972      	cbnz	r2, 1fd6e <gpio_nrfx_manage_callback+0x40>
	return 0;
   1fd50:	2000      	movs	r0, #0
}
   1fd52:	bd30      	pop	{r4, r5, pc}
   1fd54:	4628      	mov	r0, r5
   1fd56:	e7ef      	b.n	1fd38 <gpio_nrfx_manage_callback+0xa>
   1fd58:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1fd5a:	6898      	ldr	r0, [r3, #8]
   1fd5c:	4281      	cmp	r1, r0
	list->tail = node;
   1fd5e:	bf08      	it	eq
   1fd60:	609c      	streq	r4, [r3, #8]
}
   1fd62:	e7f2      	b.n	1fd4a <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1fd64:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1fd66:	4604      	mov	r4, r0
   1fd68:	2d00      	cmp	r5, #0
   1fd6a:	d1f3      	bne.n	1fd54 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1fd6c:	b13a      	cbz	r2, 1fd7e <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1fd6e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1fd70:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1fd72:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   1fd74:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1fd76:	2800      	cmp	r0, #0
   1fd78:	d1ea      	bne.n	1fd50 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1fd7a:	6099      	str	r1, [r3, #8]
}
   1fd7c:	e7e9      	b.n	1fd52 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1fd7e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1fd82:	e7e6      	b.n	1fd52 <gpio_nrfx_manage_callback+0x24>

0001fd84 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1fd84:	6843      	ldr	r3, [r0, #4]
   1fd86:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1fd88:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1fd8c:	05d1      	lsls	r1, r2, #23
   1fd8e:	d518      	bpl.n	1fdc2 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fd90:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1fd94:	b1aa      	cbz	r2, 1fdc2 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1fd96:	f04f 0140 	mov.w	r1, #64	; 0x40
   1fd9a:	f3ef 8211 	mrs	r2, BASEPRI
   1fd9e:	f381 8812 	msr	BASEPRI_MAX, r1
   1fda2:	f3bf 8f6f 	isb	sy
   1fda6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1fdaa:	b131      	cbz	r1, 1fdba <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fdac:	2100      	movs	r1, #0
   1fdae:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1fdb2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fdb6:	2101      	movs	r1, #1
   1fdb8:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1fdba:	f382 8811 	msr	BASEPRI, r2
   1fdbe:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1fdc2:	6842      	ldr	r2, [r0, #4]
   1fdc4:	6852      	ldr	r2, [r2, #4]
   1fdc6:	06d2      	lsls	r2, r2, #27
   1fdc8:	d515      	bpl.n	1fdf6 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
   1fdca:	f04f 0140 	mov.w	r1, #64	; 0x40
   1fdce:	f3ef 8211 	mrs	r2, BASEPRI
   1fdd2:	f381 8812 	msr	BASEPRI_MAX, r1
   1fdd6:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fdda:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1fdde:	b111      	cbz	r1, 1fde6 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1fde0:	2100      	movs	r1, #0
   1fde2:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1fde6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1fdea:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   1fdee:	f382 8811 	msr	BASEPRI, r2
   1fdf2:	f3bf 8f6f 	isb	sy
}
   1fdf6:	4770      	bx	lr

0001fdf8 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   1fdf8:	6902      	ldr	r2, [r0, #16]
{
   1fdfa:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1fdfc:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1fe00:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1fe04:	2000      	movs	r0, #0
   1fe06:	4770      	bx	lr

0001fe08 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1fe08:	6843      	ldr	r3, [r0, #4]
   1fe0a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1fe0c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1fe10:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1fe14:	4770      	bx	lr

0001fe16 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1fe16:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1fe18:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fe1a:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1fe1e:	b940      	cbnz	r0, 1fe32 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1fe20:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1fe22:	0792      	lsls	r2, r2, #30
   1fe24:	d406      	bmi.n	1fe34 <is_tx_ready+0x1e>
   1fe26:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   1fe2a:	3800      	subs	r0, #0
   1fe2c:	bf18      	it	ne
   1fe2e:	2001      	movne	r0, #1
   1fe30:	4770      	bx	lr
   1fe32:	2001      	movs	r0, #1
}
   1fe34:	4770      	bx	lr

0001fe36 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1fe36:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1fe38:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1fe3a:	681b      	ldr	r3, [r3, #0]
   1fe3c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1fe40:	b148      	cbz	r0, 1fe56 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   1fe42:	7c52      	ldrb	r2, [r2, #17]
   1fe44:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fe46:	2000      	movs	r0, #0
   1fe48:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1fe4c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fe50:	2201      	movs	r2, #1
   1fe52:	601a      	str	r2, [r3, #0]
	return 0;
   1fe54:	4770      	bx	lr
		return -1;
   1fe56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1fe5a:	4770      	bx	lr

0001fe5c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1fe5c:	b510      	push	{r4, lr}
   1fe5e:	2200      	movs	r2, #0
   1fe60:	4604      	mov	r4, r0
   1fe62:	2101      	movs	r1, #1
   1fe64:	2002      	movs	r0, #2
   1fe66:	f7f5 fe33 	bl	15ad0 <z_arm_irq_priority_set>
   1fe6a:	2002      	movs	r0, #2
   1fe6c:	f7f5 fdfe 	bl	15a6c <arch_irq_enable>
   1fe70:	4620      	mov	r0, r4
   1fe72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fe76:	f7f8 becf 	b.w	18c18 <uarte_instance_init.isra.0>

0001fe7a <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1fe7a:	b510      	push	{r4, lr}
   1fe7c:	2200      	movs	r2, #0
   1fe7e:	4604      	mov	r4, r0
   1fe80:	2101      	movs	r1, #1
   1fe82:	2028      	movs	r0, #40	; 0x28
   1fe84:	f7f5 fe24 	bl	15ad0 <z_arm_irq_priority_set>
   1fe88:	2028      	movs	r0, #40	; 0x28
   1fe8a:	f7f5 fdef 	bl	15a6c <arch_irq_enable>
   1fe8e:	4620      	mov	r0, r4
   1fe90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fe94:	f7f8 bec0 	b.w	18c18 <uarte_instance_init.isra.0>

0001fe98 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   1fe98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1fe9a:	460f      	mov	r7, r1
   1fe9c:	4616      	mov	r6, r2
	}

#else
	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   1fe9e:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   1fea2:	2400      	movs	r4, #0
	int res = -EINVAL;
   1fea4:	f06f 0015 	mvn.w	r0, #21
	/** This is a call from a secure app, in which case entropy is
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   1fea8:	42a6      	cmp	r6, r4
   1feaa:	d801      	bhi.n	1feb0 <entropy_cc3xx_rng_get_entropy+0x18>
		offset += chunk_size;
	}
#endif

	return res;
}
   1feac:	b003      	add	sp, #12
   1feae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1feb0:	1b33      	subs	r3, r6, r4
   1feb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1feb6:	bf38      	it	cc
   1feb8:	461d      	movcc	r5, r3
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
   1feba:	462a      	mov	r2, r5
   1febc:	ab01      	add	r3, sp, #4
   1febe:	1939      	adds	r1, r7, r4
   1fec0:	2000      	movs	r0, #0
   1fec2:	f7fc f979 	bl	1c1b8 <nrf_cc3xx_platform_ctr_drbg_get>
		if (olen != chunk_size) {
   1fec6:	9b01      	ldr	r3, [sp, #4]
   1fec8:	42ab      	cmp	r3, r5
   1feca:	d103      	bne.n	1fed4 <entropy_cc3xx_rng_get_entropy+0x3c>
		if (res != 0) {
   1fecc:	2800      	cmp	r0, #0
   1fece:	d1ed      	bne.n	1feac <entropy_cc3xx_rng_get_entropy+0x14>
		offset += chunk_size;
   1fed0:	442c      	add	r4, r5
   1fed2:	e7e9      	b.n	1fea8 <entropy_cc3xx_rng_get_entropy+0x10>
			return -EINVAL;
   1fed4:	f06f 0015 	mvn.w	r0, #21
   1fed8:	e7e8      	b.n	1feac <entropy_cc3xx_rng_get_entropy+0x14>

0001feda <entropy_cc3xx_rng_init>:
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   1feda:	2200      	movs	r2, #0
{
   1fedc:	b508      	push	{r3, lr}
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   1fede:	4611      	mov	r1, r2
   1fee0:	4610      	mov	r0, r2
   1fee2:	f7fc f935 	bl	1c150 <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
   1fee6:	2800      	cmp	r0, #0
			return -EINVAL;
		}
	#endif

	return 0;
}
   1fee8:	bf18      	it	ne
   1feea:	f06f 0015 	mvnne.w	r0, #21
   1feee:	bd08      	pop	{r3, pc}

0001fef0 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1fef0:	4770      	bx	lr

0001fef2 <sys_clock_cycle_get_32>:
{
   1fef2:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   1fef4:	f7f9 f922 	bl	1913c <z_nrf_rtc_timer_read>
}
   1fef8:	bd08      	pop	{r3, pc}

0001fefa <rand_prio_high_vector_get>:
   1fefa:	f7f9 bb29 	b.w	19550 <rand_prio_low_vector_get>

0001fefe <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1fefe:	4668      	mov	r0, sp
   1ff00:	f020 0107 	bic.w	r1, r0, #7
   1ff04:	468d      	mov	sp, r1
   1ff06:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   1ff08:	f7e2 fccc 	bl	28a4 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   1ff0c:	f7f5 fdfa 	bl	15b04 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1ff10:	f7f5 fee6 	bl	15ce0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1ff14:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1ff18:	4685      	mov	sp, r0
   1ff1a:	4770      	bx	lr

0001ff1c <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1ff1c:	4668      	mov	r0, sp
   1ff1e:	f020 0107 	bic.w	r1, r0, #7
   1ff22:	468d      	mov	sp, r1
   1ff24:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   1ff26:	f7e2 fc3f 	bl	27a8 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   1ff2a:	f7f5 fdeb 	bl	15b04 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1ff2e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1ff32:	4685      	mov	sp, r0
   1ff34:	4770      	bx	lr

0001ff36 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1ff36:	4668      	mov	r0, sp
   1ff38:	f020 0107 	bic.w	r1, r0, #7
   1ff3c:	468d      	mov	sp, r1
   1ff3e:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   1ff40:	f7ef fdf7 	bl	fb32 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   1ff44:	f7f5 fdde 	bl	15b04 <_arch_isr_direct_pm>
   1ff48:	f7f5 feca 	bl	15ce0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1ff4c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1ff50:	4685      	mov	sp, r0
   1ff52:	4770      	bx	lr

0001ff54 <nrfx_clock_stop>:
	switch (domain) {
   1ff54:	2801      	cmp	r0, #1
   1ff56:	d101      	bne.n	1ff5c <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   1ff58:	f7e3 babc 	b.w	34d4 <mpsl_clock_hfclk_release>
}
   1ff5c:	4770      	bx	lr

0001ff5e <nrfx_clock_enable>:
}
   1ff5e:	4770      	bx	lr

0001ff60 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   1ff60:	f7e3 b8d6 	b.w	3110 <MPSL_IRQ_CLOCK_Handler>

0001ff64 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   1ff64:	f7fc b898 	b.w	1c098 <nrf_cc3xx_platform_init>

0001ff68 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   1ff68:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1ff6a:	f7f5 fc5f 	bl	1582c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   1ff6e:	f7f5 fd11 	bl	15994 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   1ff72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   1ff76:	f7fc b88f 	b.w	1c098 <nrf_cc3xx_platform_init>

0001ff7a <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1ff7a:	4700      	bx	r0

0001ff7c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1ff7c:	f000 bbf9 	b.w	20772 <z_impl_k_busy_wait>

0001ff80 <nrf_gpio_reconfigure>:
{
   1ff80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ff82:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ff84:	a801      	add	r0, sp, #4
{
   1ff86:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   1ff8a:	4617      	mov	r7, r2
   1ff8c:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ff8e:	f7fa f901 	bl	1a194 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1ff92:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1ff94:	2f00      	cmp	r7, #0
   1ff96:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1ff9a:	bf14      	ite	ne
   1ff9c:	2302      	movne	r3, #2
   1ff9e:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1ffa0:	2900      	cmp	r1, #0
   1ffa2:	bf18      	it	ne
   1ffa4:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1ffa8:	2d00      	cmp	r5, #0
   1ffaa:	bf14      	ite	ne
   1ffac:	f04f 0c0c 	movne.w	ip, #12
   1ffb0:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1ffb4:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1ffb6:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1ffba:	bf14      	ite	ne
   1ffbc:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   1ffc0:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1ffc4:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1ffc6:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1ffca:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1ffce:	bf14      	ite	ne
   1ffd0:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   1ffd4:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1ffd8:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   1ffdc:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1ffe0:	b101      	cbz	r1, 1ffe4 <nrf_gpio_reconfigure+0x64>
   1ffe2:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1ffe4:	b10f      	cbz	r7, 1ffea <nrf_gpio_reconfigure+0x6a>
   1ffe6:	783f      	ldrb	r7, [r7, #0]
   1ffe8:	007f      	lsls	r7, r7, #1
   1ffea:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1ffec:	b10d      	cbz	r5, 1fff2 <nrf_gpio_reconfigure+0x72>
   1ffee:	782d      	ldrb	r5, [r5, #0]
   1fff0:	00ad      	lsls	r5, r5, #2
   1fff2:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1fff4:	b10c      	cbz	r4, 1fffa <nrf_gpio_reconfigure+0x7a>
   1fff6:	7822      	ldrb	r2, [r4, #0]
   1fff8:	0214      	lsls	r4, r2, #8
   1fffa:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   1fffc:	b10e      	cbz	r6, 20002 <nrf_gpio_reconfigure+0x82>
   1fffe:	7836      	ldrb	r6, [r6, #0]
   20000:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   20002:	432c      	orrs	r4, r5
   20004:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   20006:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   2000a:	b003      	add	sp, #12
   2000c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002000e <nrf_gpio_cfg_sense_set>:
{
   2000e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   20010:	f10d 030f 	add.w	r3, sp, #15
   20014:	9301      	str	r3, [sp, #4]
   20016:	2300      	movs	r3, #0
{
   20018:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2001c:	9300      	str	r3, [sp, #0]
   2001e:	461a      	mov	r2, r3
   20020:	4619      	mov	r1, r3
   20022:	f7ff ffad 	bl	1ff80 <nrf_gpio_reconfigure>
}
   20026:	b005      	add	sp, #20
   20028:	f85d fb04 	ldr.w	pc, [sp], #4

0002002c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2002c:	f7fa bbfc 	b.w	1a828 <_DoInit>

00020030 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   20030:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   20032:	f7ff fffb 	bl	2002c <SEGGER_RTT_Init>

	return 0;
}
   20036:	2000      	movs	r0, #0
   20038:	bd08      	pop	{r3, pc}

0002003a <z_device_state_init>:
}
   2003a:	4770      	bx	lr

0002003c <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2003c:	b138      	cbz	r0, 2004e <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2003e:	68c3      	ldr	r3, [r0, #12]
   20040:	8818      	ldrh	r0, [r3, #0]
   20042:	f3c0 0008 	ubfx	r0, r0, #0, #9
   20046:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   2004a:	4258      	negs	r0, r3
   2004c:	4158      	adcs	r0, r3
}
   2004e:	4770      	bx	lr

00020050 <k_heap_init>:
{
   20050:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   20052:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   20056:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2005a:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2005c:	f7fe bf33 	b.w	1eec6 <sys_heap_init>

00020060 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   20060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20064:	b087      	sub	sp, #28
   20066:	4604      	mov	r4, r0
   20068:	460e      	mov	r6, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2006a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   2006e:	4617      	mov	r7, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20070:	f000 fb83 	bl	2077a <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   20074:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20078:	4605      	mov	r5, r0
   2007a:	4688      	mov	r8, r1
	__asm__ volatile(
   2007c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20080:	f3ef 8b11 	mrs	fp, BASEPRI
   20084:	f383 8812 	msr	BASEPRI_MAX, r3
   20088:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2008c:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   20090:	463a      	mov	r2, r7
   20092:	4631      	mov	r1, r6
   20094:	4620      	mov	r0, r4
   20096:	f7fe feae 	bl	1edf6 <sys_heap_aligned_alloc>
   2009a:	9005      	str	r0, [sp, #20]
		now = sys_clock_tick_get();
   2009c:	f7fb fe74 	bl	1bd88 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   200a0:	9b05      	ldr	r3, [sp, #20]
   200a2:	b13b      	cbz	r3, 200b4 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   200a4:	f38b 8811 	msr	BASEPRI, fp
   200a8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   200ac:	4618      	mov	r0, r3
   200ae:	b007      	add	sp, #28
   200b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   200b4:	1a2a      	subs	r2, r5, r0
   200b6:	9202      	str	r2, [sp, #8]
   200b8:	eb68 0201 	sbc.w	r2, r8, r1
   200bc:	9203      	str	r2, [sp, #12]
   200be:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   200c2:	2901      	cmp	r1, #1
   200c4:	f172 0200 	sbcs.w	r2, r2, #0
   200c8:	dbec      	blt.n	200a4 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   200ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   200ce:	4659      	mov	r1, fp
   200d0:	e9cd 2300 	strd	r2, r3, [sp]
   200d4:	4648      	mov	r0, r9
   200d6:	4652      	mov	r2, sl
   200d8:	f7fb fb1c 	bl	1b714 <z_pend_curr>
	__asm__ volatile(
   200dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   200e0:	f3ef 8b11 	mrs	fp, BASEPRI
   200e4:	f383 8812 	msr	BASEPRI_MAX, r3
   200e8:	f3bf 8f6f 	isb	sy
   200ec:	e7d0      	b.n	20090 <k_heap_aligned_alloc+0x30>

000200ee <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   200ee:	b538      	push	{r3, r4, r5, lr}
   200f0:	4604      	mov	r4, r0
   200f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   200f6:	f3ef 8511 	mrs	r5, BASEPRI
   200fa:	f383 8812 	msr	BASEPRI_MAX, r3
   200fe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   20102:	f7fe fe3f 	bl	1ed84 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   20106:	f104 000c 	add.w	r0, r4, #12
   2010a:	f000 fac1 	bl	20690 <z_unpend_all>
   2010e:	b130      	cbz	r0, 2011e <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   20110:	4629      	mov	r1, r5
   20112:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   20116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2011a:	f7fb b9a1 	b.w	1b460 <z_reschedule>
	__asm__ volatile(
   2011e:	f385 8811 	msr	BASEPRI, r5
   20122:	f3bf 8f6f 	isb	sy
}
   20126:	bd38      	pop	{r3, r4, r5, pc}

00020128 <k_mem_slab_init>:
{
   20128:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2012a:	2400      	movs	r4, #0
   2012c:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2012e:	ea41 0402 	orr.w	r4, r1, r2
   20132:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   20136:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   2013a:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2013c:	d10c      	bne.n	20158 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   2013e:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   20140:	42a3      	cmp	r3, r4
   20142:	d103      	bne.n	2014c <k_mem_slab_init+0x24>
   20144:	e9c0 0000 	strd	r0, r0, [r0]
}
   20148:	2000      	movs	r0, #0
}
   2014a:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2014c:	6945      	ldr	r5, [r0, #20]
   2014e:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   20150:	3401      	adds	r4, #1
		slab->free_list = p;
   20152:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   20154:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   20156:	e7f3      	b.n	20140 <k_mem_slab_init+0x18>
		return -EINVAL;
   20158:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2015c:	e7f5      	b.n	2014a <k_mem_slab_init+0x22>

0002015e <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2015e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20160:	4604      	mov	r4, r0
   20162:	460d      	mov	r5, r1
	__asm__ volatile(
   20164:	f04f 0340 	mov.w	r3, #64	; 0x40
   20168:	f3ef 8611 	mrs	r6, BASEPRI
   2016c:	f383 8812 	msr	BASEPRI_MAX, r3
   20170:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   20174:	6947      	ldr	r7, [r0, #20]
   20176:	b977      	cbnz	r7, 20196 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   20178:	f000 fa72 	bl	20660 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   2017c:	b158      	cbz	r0, 20196 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2017e:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   20180:	6142      	str	r2, [r0, #20]
   20182:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   20184:	f000 f9f8 	bl	20578 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   20188:	4631      	mov	r1, r6
   2018a:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2018e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   20192:	f7fb b965 	b.w	1b460 <z_reschedule>
	**(char ***) mem = slab->free_list;
   20196:	682b      	ldr	r3, [r5, #0]
   20198:	6962      	ldr	r2, [r4, #20]
   2019a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2019c:	682b      	ldr	r3, [r5, #0]
   2019e:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   201a0:	69a3      	ldr	r3, [r4, #24]
   201a2:	3b01      	subs	r3, #1
   201a4:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   201a6:	f386 8811 	msr	BASEPRI, r6
   201aa:	f3bf 8f6f 	isb	sy
}
   201ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000201b0 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   201b0:	f3ef 8005 	mrs	r0, IPSR
}
   201b4:	3800      	subs	r0, #0
   201b6:	bf18      	it	ne
   201b8:	2001      	movne	r0, #1
   201ba:	4770      	bx	lr

000201bc <z_impl_k_thread_name_set>:
}
   201bc:	f06f 0057 	mvn.w	r0, #87	; 0x57
   201c0:	4770      	bx	lr

000201c2 <k_thread_name_get>:
}
   201c2:	2000      	movs	r0, #0
   201c4:	4770      	bx	lr

000201c6 <z_impl_k_thread_start>:
	z_sched_start(thread);
   201c6:	f7fb ba49 	b.w	1b65c <z_sched_start>

000201ca <z_pm_save_idle_exit>:
{
   201ca:	b508      	push	{r3, lr}
	pm_system_resume();
   201cc:	f7f5 fa6a 	bl	156a4 <pm_system_resume>
}
   201d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   201d4:	f7ff be8c 	b.w	1fef0 <sys_clock_idle_exit>

000201d8 <z_impl_k_mutex_init>:
{
   201d8:	4603      	mov	r3, r0
	mutex->owner = NULL;
   201da:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   201dc:	e9c3 0002 	strd	r0, r0, [r3, #8]
   201e0:	e9c3 3300 	strd	r3, r3, [r3]
}
   201e4:	4770      	bx	lr

000201e6 <queue_insert>:
{
   201e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   201ea:	4699      	mov	r9, r3
   201ec:	4604      	mov	r4, r0
   201ee:	f89d 3020 	ldrb.w	r3, [sp, #32]
   201f2:	460d      	mov	r5, r1
   201f4:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   201f6:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   201fa:	f04f 0240 	mov.w	r2, #64	; 0x40
   201fe:	f3ef 8711 	mrs	r7, BASEPRI
   20202:	f382 8812 	msr	BASEPRI_MAX, r2
   20206:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2020a:	b103      	cbz	r3, 2020e <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   2020c:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2020e:	4630      	mov	r0, r6
   20210:	f000 fa26 	bl	20660 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   20214:	b158      	cbz	r0, 2022e <queue_insert+0x48>
   20216:	2400      	movs	r4, #0
   20218:	67c4      	str	r4, [r0, #124]	; 0x7c
   2021a:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2021e:	f000 f9ab 	bl	20578 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   20222:	4630      	mov	r0, r6
   20224:	4639      	mov	r1, r7
   20226:	f7fb f91b 	bl	1b460 <z_reschedule>
	return 0;
   2022a:	2000      	movs	r0, #0
   2022c:	e00c      	b.n	20248 <queue_insert+0x62>
	if (alloc) {
   2022e:	f1b9 0f00 	cmp.w	r9, #0
   20232:	d01b      	beq.n	2026c <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   20234:	2108      	movs	r1, #8
   20236:	f7fb fee9 	bl	1c00c <z_thread_aligned_alloc>
		if (anode == NULL) {
   2023a:	b938      	cbnz	r0, 2024c <queue_insert+0x66>
	__asm__ volatile(
   2023c:	f387 8811 	msr	BASEPRI, r7
   20240:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   20244:	f06f 000b 	mvn.w	r0, #11
}
   20248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2024c:	2301      	movs	r3, #1
		anode->data = data;
   2024e:	f8c0 8004 	str.w	r8, [r0, #4]
   20252:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   20254:	6803      	ldr	r3, [r0, #0]
   20256:	f003 0203 	and.w	r2, r3, #3
   2025a:	b95d      	cbnz	r5, 20274 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2025c:	6823      	ldr	r3, [r4, #0]
   2025e:	4313      	orrs	r3, r2
   20260:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20262:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   20264:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20266:	b973      	cbnz	r3, 20286 <queue_insert+0xa0>
	list->tail = node;
   20268:	6060      	str	r0, [r4, #4]
}
   2026a:	e00c      	b.n	20286 <queue_insert+0xa0>
	node->next_and_flags = flags;
   2026c:	f8c8 9000 	str.w	r9, [r8]
}
   20270:	4640      	mov	r0, r8
   20272:	e7ef      	b.n	20254 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20274:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   20276:	f033 0303 	bics.w	r3, r3, #3
   2027a:	d110      	bne.n	2029e <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2027c:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2027e:	6862      	ldr	r2, [r4, #4]
   20280:	b93a      	cbnz	r2, 20292 <queue_insert+0xac>
	list->head = node;
   20282:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   20286:	2104      	movs	r1, #4
   20288:	f104 0010 	add.w	r0, r4, #16
   2028c:	f000 fbfc 	bl	20a88 <z_handle_obj_poll_events>
   20290:	e7c7      	b.n	20222 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20292:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20294:	f003 0303 	and.w	r3, r3, #3
   20298:	4303      	orrs	r3, r0
   2029a:	6013      	str	r3, [r2, #0]
   2029c:	e7e4      	b.n	20268 <queue_insert+0x82>
   2029e:	4313      	orrs	r3, r2
   202a0:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   202a2:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   202a4:	f003 0303 	and.w	r3, r3, #3
   202a8:	4303      	orrs	r3, r0
   202aa:	602b      	str	r3, [r5, #0]
}
   202ac:	e7eb      	b.n	20286 <queue_insert+0xa0>

000202ae <z_queue_node_peek>:
{
   202ae:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   202b0:	4604      	mov	r4, r0
   202b2:	b130      	cbz	r0, 202c2 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   202b4:	6802      	ldr	r2, [r0, #0]
   202b6:	0793      	lsls	r3, r2, #30
   202b8:	d003      	beq.n	202c2 <z_queue_node_peek+0x14>
		ret = anode->data;
   202ba:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   202bc:	b109      	cbz	r1, 202c2 <z_queue_node_peek+0x14>
			k_free(anode);
   202be:	f000 fbf1 	bl	20aa4 <k_free>
}
   202c2:	4620      	mov	r0, r4
   202c4:	bd10      	pop	{r4, pc}

000202c6 <k_queue_prepend>:
{
   202c6:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   202c8:	2300      	movs	r3, #0
{
   202ca:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   202cc:	9300      	str	r3, [sp, #0]
   202ce:	4619      	mov	r1, r3
   202d0:	f7ff ff89 	bl	201e6 <queue_insert>
}
   202d4:	b003      	add	sp, #12
   202d6:	f85d fb04 	ldr.w	pc, [sp], #4

000202da <k_queue_append_list>:
{
   202da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   202de:	4605      	mov	r5, r0
   202e0:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   202e2:	460c      	mov	r4, r1
   202e4:	b391      	cbz	r1, 2034c <k_queue_append_list+0x72>
   202e6:	b38a      	cbz	r2, 2034c <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   202e8:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   202ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   202f0:	f3ef 8811 	mrs	r8, BASEPRI
   202f4:	f383 8812 	msr	BASEPRI_MAX, r3
   202f8:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   202fc:	4638      	mov	r0, r7
   202fe:	f000 f9af 	bl	20660 <z_unpend_first_thread>
   20302:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   20306:	b920      	cbnz	r0, 20312 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   20308:	686b      	ldr	r3, [r5, #4]
   2030a:	b9cb      	cbnz	r3, 20340 <k_queue_append_list+0x66>
	list->head = node;
   2030c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2030e:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   20310:	e00a      	b.n	20328 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   20312:	6144      	str	r4, [r0, #20]
   20314:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   20318:	f000 f92e 	bl	20578 <z_ready_thread>
		head = *(void **)head;
   2031c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2031e:	4638      	mov	r0, r7
   20320:	f000 f99e 	bl	20660 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   20324:	2c00      	cmp	r4, #0
   20326:	d1ee      	bne.n	20306 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   20328:	2104      	movs	r1, #4
   2032a:	f105 0010 	add.w	r0, r5, #16
   2032e:	f000 fbab 	bl	20a88 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   20332:	4638      	mov	r0, r7
   20334:	4641      	mov	r1, r8
   20336:	f7fb f893 	bl	1b460 <z_reschedule>
	return 0;
   2033a:	2000      	movs	r0, #0
}
   2033c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20340:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20342:	f001 0103 	and.w	r1, r1, #3
   20346:	430c      	orrs	r4, r1
   20348:	601c      	str	r4, [r3, #0]
}
   2034a:	e7e0      	b.n	2030e <k_queue_append_list+0x34>
		return -EINVAL;
   2034c:	f06f 0015 	mvn.w	r0, #21
   20350:	e7f4      	b.n	2033c <k_queue_append_list+0x62>

00020352 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   20352:	b15a      	cbz	r2, 2036c <z_impl_k_sem_init+0x1a>
   20354:	428a      	cmp	r2, r1
   20356:	d309      	bcc.n	2036c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   20358:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2035c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   20360:	e9c0 0000 	strd	r0, r0, [r0]
   20364:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   20368:	2000      	movs	r0, #0
   2036a:	4770      	bx	lr
		return -EINVAL;
   2036c:	f06f 0015 	mvn.w	r0, #21
}
   20370:	4770      	bx	lr

00020372 <notify_queue_locked>:
	if (queue != NULL) {
   20372:	b120      	cbz	r0, 2037e <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   20374:	2200      	movs	r2, #0
   20376:	4611      	mov	r1, r2
   20378:	3088      	adds	r0, #136	; 0x88
   2037a:	f000 b999 	b.w	206b0 <z_sched_wake>
}
   2037e:	4770      	bx	lr

00020380 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   20380:	68c3      	ldr	r3, [r0, #12]
{
   20382:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   20384:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   20388:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2038c:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   2038e:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   20390:	d502      	bpl.n	20398 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   20392:	3010      	adds	r0, #16
   20394:	f000 f9a9 	bl	206ea <z_abort_timeout>
}
   20398:	4620      	mov	r0, r4
   2039a:	bd10      	pop	{r4, pc}

0002039c <cancel_async_locked>:
{
   2039c:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2039e:	68c0      	ldr	r0, [r0, #12]
{
   203a0:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   203a2:	0784      	lsls	r4, r0, #30
   203a4:	f3c0 0140 	ubfx	r1, r0, #1, #1
   203a8:	d416      	bmi.n	203d8 <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   203aa:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   203ae:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   203b0:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   203b2:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   203b4:	d510      	bpl.n	203d8 <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   203b6:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   203ba:	b168      	cbz	r0, 203d8 <cancel_async_locked+0x3c>
   203bc:	4283      	cmp	r3, r0
   203be:	d11d      	bne.n	203fc <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   203c0:	6818      	ldr	r0, [r3, #0]
   203c2:	b999      	cbnz	r1, 203ec <cancel_async_locked+0x50>
   203c4:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   203c8:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   203cc:	428b      	cmp	r3, r1
   203ce:	d101      	bne.n	203d4 <cancel_async_locked+0x38>
	list->tail = node;
   203d0:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   203d4:	2200      	movs	r2, #0
   203d6:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   203d8:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   203da:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   203de:	bf1e      	ittt	ne
   203e0:	f042 0202 	orrne.w	r2, r2, #2
   203e4:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   203e6:	f002 000f 	andne.w	r0, r2, #15
}
   203ea:	bd10      	pop	{r4, pc}
   203ec:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   203ee:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   203f2:	4283      	cmp	r3, r0
	list->tail = node;
   203f4:	bf08      	it	eq
   203f6:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   203fa:	e7eb      	b.n	203d4 <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   203fc:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   203fe:	6800      	ldr	r0, [r0, #0]
   20400:	e7db      	b.n	203ba <cancel_async_locked+0x1e>

00020402 <work_timeout>:
{
   20402:	b513      	push	{r0, r1, r4, lr}
   20404:	f04f 0340 	mov.w	r3, #64	; 0x40
   20408:	f3ef 8411 	mrs	r4, BASEPRI
   2040c:	f383 8812 	msr	BASEPRI_MAX, r3
   20410:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   20414:	2300      	movs	r3, #0
   20416:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   20418:	f850 3c04 	ldr.w	r3, [r0, #-4]
	*flagp &= ~BIT(bit);
   2041c:	f023 0208 	bic.w	r2, r3, #8
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   20420:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   20422:	f840 2c04 	str.w	r2, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   20426:	d505      	bpl.n	20434 <work_timeout+0x32>
		queue = dw->queue;
   20428:	6983      	ldr	r3, [r0, #24]
   2042a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2042c:	a901      	add	r1, sp, #4
   2042e:	3810      	subs	r0, #16
   20430:	f7fa ff0c 	bl	1b24c <submit_to_queue_locked>
	__asm__ volatile(
   20434:	f384 8811 	msr	BASEPRI, r4
   20438:	f3bf 8f6f 	isb	sy
}
   2043c:	b002      	add	sp, #8
   2043e:	bd10      	pop	{r4, pc}

00020440 <k_work_submit_to_queue>:
{
   20440:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20442:	9001      	str	r0, [sp, #4]
   20444:	4608      	mov	r0, r1
	__asm__ volatile(
   20446:	f04f 0340 	mov.w	r3, #64	; 0x40
   2044a:	f3ef 8511 	mrs	r5, BASEPRI
   2044e:	f383 8812 	msr	BASEPRI_MAX, r3
   20452:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   20456:	a901      	add	r1, sp, #4
   20458:	f7fa fef8 	bl	1b24c <submit_to_queue_locked>
   2045c:	4604      	mov	r4, r0
	__asm__ volatile(
   2045e:	f385 8811 	msr	BASEPRI, r5
   20462:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   20466:	2800      	cmp	r0, #0
   20468:	dd04      	ble.n	20474 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   2046a:	f7fb fabb 	bl	1b9e4 <z_impl_k_is_preempt_thread>
   2046e:	b108      	cbz	r0, 20474 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   20470:	f7fb fa0a 	bl	1b888 <z_impl_k_yield>
}
   20474:	4620      	mov	r0, r4
   20476:	b003      	add	sp, #12
   20478:	bd30      	pop	{r4, r5, pc}

0002047a <k_work_init_delayable>:
{
   2047a:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   2047c:	2230      	movs	r2, #48	; 0x30
{
   2047e:	4604      	mov	r4, r0
   20480:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   20482:	2100      	movs	r1, #0
   20484:	f7ff f9c5 	bl	1f812 <memset>
   20488:	f44f 7380 	mov.w	r3, #256	; 0x100
   2048c:	6065      	str	r5, [r4, #4]
   2048e:	60e3      	str	r3, [r4, #12]
}
   20490:	bd38      	pop	{r3, r4, r5, pc}

00020492 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   20492:	b538      	push	{r3, r4, r5, lr}
   20494:	4604      	mov	r4, r0
	__asm__ volatile(
   20496:	f04f 0340 	mov.w	r3, #64	; 0x40
   2049a:	f3ef 8511 	mrs	r5, BASEPRI
   2049e:	f383 8812 	msr	BASEPRI_MAX, r3
   204a2:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   204a6:	f7ff ff6b 	bl	20380 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   204aa:	4620      	mov	r0, r4
   204ac:	f7ff ff76 	bl	2039c <cancel_async_locked>
	__asm__ volatile(
   204b0:	f385 8811 	msr	BASEPRI, r5
   204b4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   204b8:	bd38      	pop	{r3, r4, r5, pc}

000204ba <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   204ba:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   204be:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   204c0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   204c2:	2300      	movs	r3, #0
	node->prev = NULL;
   204c4:	e9c0 3300 	strd	r3, r3, [r0]
}
   204c8:	4770      	bx	lr

000204ca <unpend_thread_no_timeout>:
{
   204ca:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   204cc:	f7ff fff5 	bl	204ba <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   204d0:	7b43      	ldrb	r3, [r0, #13]
   204d2:	f023 0302 	bic.w	r3, r3, #2
   204d6:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   204d8:	2300      	movs	r3, #0
   204da:	6083      	str	r3, [r0, #8]
}
   204dc:	bd08      	pop	{r3, pc}

000204de <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   204de:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   204e2:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   204e6:	4283      	cmp	r3, r0
		return b2 - b1;
   204e8:	bf14      	ite	ne
   204ea:	1ac0      	subne	r0, r0, r3
	return 0;
   204ec:	2000      	moveq	r0, #0
}
   204ee:	4770      	bx	lr

000204f0 <z_unpend_thread_no_timeout>:
{
   204f0:	b508      	push	{r3, lr}
	__asm__ volatile(
   204f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   204f6:	f3ef 8111 	mrs	r1, BASEPRI
   204fa:	f383 8812 	msr	BASEPRI_MAX, r3
   204fe:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   20502:	f7ff ffe2 	bl	204ca <unpend_thread_no_timeout>
	__asm__ volatile(
   20506:	f381 8811 	msr	BASEPRI, r1
   2050a:	f3bf 8f6f 	isb	sy
}
   2050e:	bd08      	pop	{r3, pc}

00020510 <z_unpend_thread>:
{
   20510:	b510      	push	{r4, lr}
	__asm__ volatile(
   20512:	f04f 0340 	mov.w	r3, #64	; 0x40
   20516:	f3ef 8411 	mrs	r4, BASEPRI
   2051a:	f383 8812 	msr	BASEPRI_MAX, r3
   2051e:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   20522:	f7ff ffd2 	bl	204ca <unpend_thread_no_timeout>
	__asm__ volatile(
   20526:	f384 8811 	msr	BASEPRI, r4
   2052a:	f3bf 8f6f 	isb	sy
}
   2052e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20532:	3018      	adds	r0, #24
   20534:	f000 b8d9 	b.w	206ea <z_abort_timeout>

00020538 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   20538:	4603      	mov	r3, r0
   2053a:	b920      	cbnz	r0, 20546 <z_reschedule_irqlock+0xe>
   2053c:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   20540:	b90a      	cbnz	r2, 20546 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   20542:	f7f5 bb0d 	b.w	15b60 <arch_swap>
   20546:	f383 8811 	msr	BASEPRI, r3
   2054a:	f3bf 8f6f 	isb	sy
}
   2054e:	4770      	bx	lr

00020550 <z_reschedule_unlocked>:
	__asm__ volatile(
   20550:	f04f 0340 	mov.w	r3, #64	; 0x40
   20554:	f3ef 8011 	mrs	r0, BASEPRI
   20558:	f383 8812 	msr	BASEPRI_MAX, r3
   2055c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   20560:	f7ff bfea 	b.w	20538 <z_reschedule_irqlock>

00020564 <z_priq_dumb_best>:
{
   20564:	4603      	mov	r3, r0
	return list->head == list;
   20566:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20568:	4283      	cmp	r3, r0
   2056a:	d003      	beq.n	20574 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   2056c:	2800      	cmp	r0, #0
   2056e:	bf38      	it	cc
   20570:	2000      	movcc	r0, #0
   20572:	4770      	bx	lr
	struct k_thread *thread = NULL;
   20574:	2000      	movs	r0, #0
}
   20576:	4770      	bx	lr

00020578 <z_ready_thread>:
{
   20578:	b510      	push	{r4, lr}
   2057a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2057e:	f3ef 8411 	mrs	r4, BASEPRI
   20582:	f383 8812 	msr	BASEPRI_MAX, r3
   20586:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2058a:	f7fb f82f 	bl	1b5ec <ready_thread>
	__asm__ volatile(
   2058e:	f384 8811 	msr	BASEPRI, r4
   20592:	f3bf 8f6f 	isb	sy
}
   20596:	bd10      	pop	{r4, pc}

00020598 <z_thread_timeout>:
{
   20598:	b510      	push	{r4, lr}
   2059a:	4601      	mov	r1, r0
	__asm__ volatile(
   2059c:	f04f 0340 	mov.w	r3, #64	; 0x40
   205a0:	f3ef 8411 	mrs	r4, BASEPRI
   205a4:	f383 8812 	msr	BASEPRI_MAX, r3
   205a8:	f3bf 8f6f 	isb	sy
		if (!killed) {
   205ac:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   205b0:	f013 0f28 	tst.w	r3, #40	; 0x28
   205b4:	d10d      	bne.n	205d2 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   205b6:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   205ba:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   205bc:	b10b      	cbz	r3, 205c2 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   205be:	f7ff ff84 	bl	204ca <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   205c2:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   205c6:	f023 0314 	bic.w	r3, r3, #20
   205ca:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   205ce:	f7fb f80d 	bl	1b5ec <ready_thread>
	__asm__ volatile(
   205d2:	f384 8811 	msr	BASEPRI, r4
   205d6:	f3bf 8f6f 	isb	sy
}
   205da:	bd10      	pop	{r4, pc}

000205dc <add_to_waitq_locked>:
{
   205dc:	b538      	push	{r3, r4, r5, lr}
   205de:	4604      	mov	r4, r0
   205e0:	460d      	mov	r5, r1
	unready_thread(thread);
   205e2:	f7fb f859 	bl	1b698 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   205e6:	7b63      	ldrb	r3, [r4, #13]
   205e8:	f043 0302 	orr.w	r3, r3, #2
   205ec:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   205ee:	b1b5      	cbz	r5, 2061e <add_to_waitq_locked+0x42>
	return list->head == list;
   205f0:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   205f2:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   205f4:	429d      	cmp	r5, r3
   205f6:	bf08      	it	eq
   205f8:	2300      	moveq	r3, #0
   205fa:	2b00      	cmp	r3, #0
   205fc:	bf38      	it	cc
   205fe:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20600:	b19b      	cbz	r3, 2062a <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   20602:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   20606:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   2060a:	4291      	cmp	r1, r2
   2060c:	d008      	beq.n	20620 <add_to_waitq_locked+0x44>
		return b2 - b1;
   2060e:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   20610:	2a00      	cmp	r2, #0
   20612:	dd05      	ble.n	20620 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   20614:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   20616:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2061a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2061c:	605c      	str	r4, [r3, #4]
}
   2061e:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   20620:	686a      	ldr	r2, [r5, #4]
   20622:	4293      	cmp	r3, r2
   20624:	d001      	beq.n	2062a <add_to_waitq_locked+0x4e>
   20626:	681b      	ldr	r3, [r3, #0]
   20628:	e7ea      	b.n	20600 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   2062a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2062c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   20630:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20632:	606c      	str	r4, [r5, #4]
   20634:	e7f3      	b.n	2061e <add_to_waitq_locked+0x42>

00020636 <z_unpend1_no_timeout>:
{
   20636:	b510      	push	{r4, lr}
	__asm__ volatile(
   20638:	f04f 0340 	mov.w	r3, #64	; 0x40
   2063c:	f3ef 8411 	mrs	r4, BASEPRI
   20640:	f383 8812 	msr	BASEPRI_MAX, r3
   20644:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   20648:	f7ff ff8c 	bl	20564 <z_priq_dumb_best>
		if (thread != NULL) {
   2064c:	4601      	mov	r1, r0
   2064e:	b108      	cbz	r0, 20654 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   20650:	f7ff ff3b 	bl	204ca <unpend_thread_no_timeout>
	__asm__ volatile(
   20654:	f384 8811 	msr	BASEPRI, r4
   20658:	f3bf 8f6f 	isb	sy
}
   2065c:	4608      	mov	r0, r1
   2065e:	bd10      	pop	{r4, pc}

00020660 <z_unpend_first_thread>:
{
   20660:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   20662:	f04f 0340 	mov.w	r3, #64	; 0x40
   20666:	f3ef 8511 	mrs	r5, BASEPRI
   2066a:	f383 8812 	msr	BASEPRI_MAX, r3
   2066e:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   20672:	f7ff ff77 	bl	20564 <z_priq_dumb_best>
		if (thread != NULL) {
   20676:	4604      	mov	r4, r0
   20678:	b120      	cbz	r0, 20684 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   2067a:	f7ff ff26 	bl	204ca <unpend_thread_no_timeout>
   2067e:	3018      	adds	r0, #24
   20680:	f000 f833 	bl	206ea <z_abort_timeout>
	__asm__ volatile(
   20684:	f385 8811 	msr	BASEPRI, r5
   20688:	f3bf 8f6f 	isb	sy
}
   2068c:	4620      	mov	r0, r4
   2068e:	bd38      	pop	{r3, r4, r5, pc}

00020690 <z_unpend_all>:
{
   20690:	b538      	push	{r3, r4, r5, lr}
   20692:	4605      	mov	r5, r0
	int need_sched = 0;
   20694:	2000      	movs	r0, #0
	return list->head == list;
   20696:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20698:	42a5      	cmp	r5, r4
   2069a:	d000      	beq.n	2069e <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2069c:	b904      	cbnz	r4, 206a0 <z_unpend_all+0x10>
}
   2069e:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   206a0:	4620      	mov	r0, r4
   206a2:	f7ff ff35 	bl	20510 <z_unpend_thread>
		z_ready_thread(thread);
   206a6:	4620      	mov	r0, r4
   206a8:	f7ff ff66 	bl	20578 <z_ready_thread>
		need_sched = 1;
   206ac:	2001      	movs	r0, #1
   206ae:	e7f2      	b.n	20696 <z_unpend_all+0x6>

000206b0 <z_sched_wake>:
{
   206b0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   206b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   206b6:	f3ef 8511 	mrs	r5, BASEPRI
   206ba:	f383 8812 	msr	BASEPRI_MAX, r3
   206be:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   206c2:	f7ff ff4f 	bl	20564 <z_priq_dumb_best>
		if (thread != NULL) {
   206c6:	4604      	mov	r4, r0
   206c8:	b150      	cbz	r0, 206e0 <z_sched_wake+0x30>
   206ca:	67c1      	str	r1, [r0, #124]	; 0x7c
   206cc:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   206ce:	f7ff fefc 	bl	204ca <unpend_thread_no_timeout>
   206d2:	3018      	adds	r0, #24
   206d4:	f000 f809 	bl	206ea <z_abort_timeout>
			ready_thread(thread);
   206d8:	4620      	mov	r0, r4
   206da:	f7fa ff87 	bl	1b5ec <ready_thread>
			ret = true;
   206de:	2001      	movs	r0, #1
	__asm__ volatile(
   206e0:	f385 8811 	msr	BASEPRI, r5
   206e4:	f3bf 8f6f 	isb	sy
}
   206e8:	bd38      	pop	{r3, r4, r5, pc}

000206ea <z_abort_timeout>:
{
   206ea:	b510      	push	{r4, lr}
	__asm__ volatile(
   206ec:	f04f 0240 	mov.w	r2, #64	; 0x40
   206f0:	f3ef 8411 	mrs	r4, BASEPRI
   206f4:	f382 8812 	msr	BASEPRI_MAX, r2
   206f8:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   206fc:	6803      	ldr	r3, [r0, #0]
   206fe:	b13b      	cbz	r3, 20710 <z_abort_timeout+0x26>
			remove_timeout(to);
   20700:	f7fb fa08 	bl	1bb14 <remove_timeout>
			ret = 0;
   20704:	2000      	movs	r0, #0
	__asm__ volatile(
   20706:	f384 8811 	msr	BASEPRI, r4
   2070a:	f3bf 8f6f 	isb	sy
}
   2070e:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   20710:	f06f 0015 	mvn.w	r0, #21
   20714:	e7f7      	b.n	20706 <z_abort_timeout+0x1c>

00020716 <z_get_next_timeout_expiry>:
{
   20716:	b510      	push	{r4, lr}
	__asm__ volatile(
   20718:	f04f 0340 	mov.w	r3, #64	; 0x40
   2071c:	f3ef 8411 	mrs	r4, BASEPRI
   20720:	f383 8812 	msr	BASEPRI_MAX, r3
   20724:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   20728:	f7fb fa0e 	bl	1bb48 <next_timeout>
	__asm__ volatile(
   2072c:	f384 8811 	msr	BASEPRI, r4
   20730:	f3bf 8f6f 	isb	sy
}
   20734:	bd10      	pop	{r4, pc}

00020736 <z_set_timeout_expiry>:
{
   20736:	b570      	push	{r4, r5, r6, lr}
   20738:	4604      	mov	r4, r0
   2073a:	460d      	mov	r5, r1
	__asm__ volatile(
   2073c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20740:	f3ef 8611 	mrs	r6, BASEPRI
   20744:	f383 8812 	msr	BASEPRI_MAX, r3
   20748:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   2074c:	f7fb f9fc 	bl	1bb48 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   20750:	2801      	cmp	r0, #1
   20752:	dd05      	ble.n	20760 <z_set_timeout_expiry+0x2a>
   20754:	42a0      	cmp	r0, r4
   20756:	db03      	blt.n	20760 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   20758:	4629      	mov	r1, r5
   2075a:	4620      	mov	r0, r4
   2075c:	f7f8 fe60 	bl	19420 <sys_clock_set_timeout>
	__asm__ volatile(
   20760:	f386 8811 	msr	BASEPRI, r6
   20764:	f3bf 8f6f 	isb	sy
}
   20768:	bd70      	pop	{r4, r5, r6, pc}

0002076a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2076a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2076c:	f7fb fb0c 	bl	1bd88 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   20770:	bd08      	pop	{r3, pc}

00020772 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   20772:	b108      	cbz	r0, 20778 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   20774:	f7f5 bebc 	b.w	164f0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   20778:	4770      	bx	lr

0002077a <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   2077a:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2077c:	1c4b      	adds	r3, r1, #1
   2077e:	bf08      	it	eq
   20780:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   20784:	4604      	mov	r4, r0
   20786:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20788:	d013      	beq.n	207b2 <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2078a:	ea54 0105 	orrs.w	r1, r4, r5
   2078e:	d103      	bne.n	20798 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   20790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   20794:	f7fb baf8 	b.w	1bd88 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   20798:	f06f 0101 	mvn.w	r1, #1
   2079c:	1a0a      	subs	r2, r1, r0
   2079e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   207a2:	eb61 0305 	sbc.w	r3, r1, r5
   207a6:	2a00      	cmp	r2, #0
   207a8:	f173 0100 	sbcs.w	r1, r3, #0
   207ac:	db02      	blt.n	207b4 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   207ae:	4610      	mov	r0, r2
   207b0:	4619      	mov	r1, r3
}
   207b2:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   207b4:	f7fb fae8 	bl	1bd88 <sys_clock_tick_get>
   207b8:	2c01      	cmp	r4, #1
   207ba:	f175 0300 	sbcs.w	r3, r5, #0
   207be:	bfbc      	itt	lt
   207c0:	2401      	movlt	r4, #1
   207c2:	2500      	movlt	r5, #0
   207c4:	1820      	adds	r0, r4, r0
   207c6:	eb45 0101 	adc.w	r1, r5, r1
   207ca:	e7f2      	b.n	207b2 <sys_clock_timeout_end_calc+0x38>

000207cc <k_timer_init>:
	timer->status = 0U;
   207cc:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   207ce:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
   207d2:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   207d6:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   207da:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   207de:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   207e0:	6343      	str	r3, [r0, #52]	; 0x34
}
   207e2:	4770      	bx	lr

000207e4 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   207e4:	b510      	push	{r4, lr}
   207e6:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   207e8:	f7ff ff7f 	bl	206ea <z_abort_timeout>

	if (inactive) {
   207ec:	b9b0      	cbnz	r0, 2081c <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   207ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   207f0:	b10b      	cbz	r3, 207f6 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   207f2:	4620      	mov	r0, r4
   207f4:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   207f6:	f104 0018 	add.w	r0, r4, #24
   207fa:	f7ff ff1c 	bl	20636 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   207fe:	b168      	cbz	r0, 2081c <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   20800:	f7ff feba 	bl	20578 <z_ready_thread>
	__asm__ volatile(
   20804:	f04f 0340 	mov.w	r3, #64	; 0x40
   20808:	f3ef 8011 	mrs	r0, BASEPRI
   2080c:	f383 8812 	msr	BASEPRI_MAX, r3
   20810:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   20814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   20818:	f7ff be8e 	b.w	20538 <z_reschedule_irqlock>
   2081c:	bd10      	pop	{r4, pc}

0002081e <clear_event_registrations>:
	while (num_events--) {
   2081e:	2314      	movs	r3, #20
{
   20820:	b570      	push	{r4, r5, r6, lr}
   20822:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   20826:	2400      	movs	r4, #0
   20828:	2601      	movs	r6, #1
	while (num_events--) {
   2082a:	4281      	cmp	r1, r0
   2082c:	d100      	bne.n	20830 <clear_event_registrations+0x12>
}
   2082e:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   20830:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   20834:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   20838:	f003 031f 	and.w	r3, r3, #31
   2083c:	2b08      	cmp	r3, #8
   2083e:	d80d      	bhi.n	2085c <clear_event_registrations+0x3e>
   20840:	fa06 f303 	lsl.w	r3, r6, r3
   20844:	f413 7f8b 	tst.w	r3, #278	; 0x116
   20848:	d008      	beq.n	2085c <clear_event_registrations+0x3e>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2084a:	f851 3c14 	ldr.w	r3, [r1, #-20]
   2084e:	b12b      	cbz	r3, 2085c <clear_event_registrations+0x3e>
	sys_dnode_t *const prev = node->prev;
   20850:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
   20854:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   20856:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   20858:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   2085c:	f382 8811 	msr	BASEPRI, r2
   20860:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   20864:	f04f 0340 	mov.w	r3, #64	; 0x40
   20868:	f3ef 8211 	mrs	r2, BASEPRI
   2086c:	f383 8812 	msr	BASEPRI_MAX, r3
   20870:	f3bf 8f6f 	isb	sy
   20874:	3914      	subs	r1, #20
   20876:	e7d8      	b.n	2082a <clear_event_registrations+0xc>

00020878 <add_event>:
{
   20878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2087a:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2087c:	e9d0 2300 	ldrd	r2, r3, [r0]
   20880:	4290      	cmp	r0, r2
   20882:	4604      	mov	r4, r0
   20884:	460d      	mov	r5, r1
   20886:	d105      	bne.n	20894 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   20888:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2088a:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2088e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   20890:	6065      	str	r5, [r4, #4]
}
   20892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   20894:	2b00      	cmp	r3, #0
   20896:	d0f7      	beq.n	20888 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   20898:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2089a:	b100      	cbz	r0, 2089e <add_event+0x26>
   2089c:	3860      	subs	r0, #96	; 0x60
   2089e:	b107      	cbz	r7, 208a2 <add_event+0x2a>
   208a0:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   208a2:	4639      	mov	r1, r7
   208a4:	f7ff fe1b 	bl	204de <z_sched_prio_cmp>
	if ((pending == NULL) ||
   208a8:	2800      	cmp	r0, #0
   208aa:	dced      	bgt.n	20888 <add_event+0x10>
	return list->head == list;
   208ac:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   208ae:	42b4      	cmp	r4, r6
   208b0:	d0ea      	beq.n	20888 <add_event+0x10>
   208b2:	2e00      	cmp	r6, #0
   208b4:	bf38      	it	cc
   208b6:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   208b8:	2e00      	cmp	r6, #0
   208ba:	d0e5      	beq.n	20888 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   208bc:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   208be:	b101      	cbz	r1, 208c2 <add_event+0x4a>
   208c0:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   208c2:	4638      	mov	r0, r7
   208c4:	f7ff fe0b 	bl	204de <z_sched_prio_cmp>
   208c8:	2800      	cmp	r0, #0
   208ca:	dd05      	ble.n	208d8 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   208cc:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   208ce:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   208d2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   208d4:	6075      	str	r5, [r6, #4]
			return;
   208d6:	e7dc      	b.n	20892 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   208d8:	6863      	ldr	r3, [r4, #4]
   208da:	42b3      	cmp	r3, r6
   208dc:	d0d4      	beq.n	20888 <add_event+0x10>
   208de:	6836      	ldr	r6, [r6, #0]
   208e0:	e7ea      	b.n	208b8 <add_event+0x40>

000208e2 <register_events>:
{
   208e2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   208e6:	2500      	movs	r5, #0
{
   208e8:	468b      	mov	fp, r1
   208ea:	4614      	mov	r4, r2
   208ec:	461f      	mov	r7, r3
   208ee:	4682      	mov	sl, r0
	int events_registered = 0;
   208f0:	462e      	mov	r6, r5
	event->poller = NULL;
   208f2:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   208f4:	455d      	cmp	r5, fp
   208f6:	db02      	blt.n	208fe <register_events+0x1c>
}
   208f8:	4630      	mov	r0, r6
   208fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   208fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   20902:	f3ef 8911 	mrs	r9, BASEPRI
   20906:	f383 8812 	msr	BASEPRI_MAX, r3
   2090a:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2090e:	f89a 300d 	ldrb.w	r3, [sl, #13]
   20912:	f003 031f 	and.w	r3, r3, #31
   20916:	3b01      	subs	r3, #1
   20918:	2b07      	cmp	r3, #7
   2091a:	d80f      	bhi.n	2093c <register_events+0x5a>
   2091c:	e8df f003 	tbb	[pc, r3]
   20920:	0a0e041e 	.word	0x0a0e041e
   20924:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   20928:	f8da 3010 	ldr.w	r3, [sl, #16]
   2092c:	689b      	ldr	r3, [r3, #8]
   2092e:	b12b      	cbz	r3, 2093c <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   20930:	2302      	movs	r3, #2
   20932:	e020      	b.n	20976 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   20934:	f8da 3010 	ldr.w	r3, [sl, #16]
   20938:	681b      	ldr	r3, [r3, #0]
   2093a:	bb8b      	cbnz	r3, 209a0 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   2093c:	bb47      	cbnz	r7, 20990 <register_events+0xae>
   2093e:	7823      	ldrb	r3, [r4, #0]
   20940:	b333      	cbz	r3, 20990 <register_events+0xae>
	switch (event->type) {
   20942:	f89a 300d 	ldrb.w	r3, [sl, #13]
   20946:	f003 031f 	and.w	r3, r3, #31
   2094a:	3b01      	subs	r3, #1
   2094c:	2b07      	cmp	r3, #7
   2094e:	d830      	bhi.n	209b2 <register_events+0xd0>
   20950:	e8df f003 	tbb	[pc, r3]
   20954:	282f2833 	.word	0x282f2833
   20958:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   2095c:	f8da 3010 	ldr.w	r3, [sl, #16]
   20960:	689b      	ldr	r3, [r3, #8]
   20962:	2b00      	cmp	r3, #0
   20964:	d0ea      	beq.n	2093c <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   20966:	2301      	movs	r3, #1
   20968:	e005      	b.n	20976 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   2096a:	f8da 3010 	ldr.w	r3, [sl, #16]
   2096e:	6a1b      	ldr	r3, [r3, #32]
   20970:	2b00      	cmp	r3, #0
   20972:	d0e3      	beq.n	2093c <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   20974:	2310      	movs	r3, #16
	event->state |= state;
   20976:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   2097a:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   2097e:	f3c2 3145 	ubfx	r1, r2, #13, #6
   20982:	430b      	orrs	r3, r1
   20984:	f363 3252 	bfi	r2, r3, #13, #6
   20988:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   2098c:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   20990:	f389 8811 	msr	BASEPRI, r9
   20994:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   20998:	3501      	adds	r5, #1
   2099a:	f10a 0a14 	add.w	sl, sl, #20
   2099e:	e7a9      	b.n	208f4 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   209a0:	2304      	movs	r3, #4
   209a2:	e7e8      	b.n	20976 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   209a4:	f8da 0010 	ldr.w	r0, [sl, #16]
   209a8:	4622      	mov	r2, r4
   209aa:	4651      	mov	r1, sl
   209ac:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   209ae:	f7ff ff63 	bl	20878 <add_event>
	event->poller = poller;
   209b2:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   209b6:	3601      	adds	r6, #1
   209b8:	e7ea      	b.n	20990 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   209ba:	f8da 0010 	ldr.w	r0, [sl, #16]
   209be:	4622      	mov	r2, r4
   209c0:	4651      	mov	r1, sl
   209c2:	e7f4      	b.n	209ae <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   209c4:	f8da 0010 	ldr.w	r0, [sl, #16]
   209c8:	4622      	mov	r2, r4
   209ca:	4651      	mov	r1, sl
   209cc:	3024      	adds	r0, #36	; 0x24
   209ce:	e7ee      	b.n	209ae <register_events+0xcc>

000209d0 <signal_poll_event>:
{
   209d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   209d4:	6884      	ldr	r4, [r0, #8]
{
   209d6:	4605      	mov	r5, r0
   209d8:	460e      	mov	r6, r1
	if (poller != NULL) {
   209da:	b144      	cbz	r4, 209ee <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   209dc:	7863      	ldrb	r3, [r4, #1]
   209de:	2b01      	cmp	r3, #1
   209e0:	d138      	bne.n	20a54 <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   209e2:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   209e6:	f013 0302 	ands.w	r3, r3, #2
   209ea:	d10a      	bne.n	20a02 <signal_poll_event+0x32>
		poller->is_polling = false;
   209ec:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   209ee:	68eb      	ldr	r3, [r5, #12]
   209f0:	f3c3 3145 	ubfx	r1, r3, #13, #6
   209f4:	430e      	orrs	r6, r1
	event->poller = NULL;
   209f6:	2000      	movs	r0, #0
	event->state |= state;
   209f8:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   209fc:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   209fe:	60eb      	str	r3, [r5, #12]
	return retcode;
   20a00:	e00d      	b.n	20a1e <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   20a02:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   20a06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20a0a:	f06f 0001 	mvn.w	r0, #1
   20a0e:	428b      	cmp	r3, r1
   20a10:	bf08      	it	eq
   20a12:	4282      	cmpeq	r2, r0
   20a14:	d105      	bne.n	20a22 <signal_poll_event+0x52>
		poller->is_polling = false;
   20a16:	2300      	movs	r3, #0
   20a18:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   20a1a:	f06f 000a 	mvn.w	r0, #10
}
   20a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   20a22:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   20a26:	4640      	mov	r0, r8
   20a28:	f7ff fd72 	bl	20510 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   20a2c:	2e08      	cmp	r6, #8
   20a2e:	bf0c      	ite	eq
   20a30:	f06f 0303 	mvneq.w	r3, #3
   20a34:	2300      	movne	r3, #0
   20a36:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   20a38:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   20a3c:	06db      	lsls	r3, r3, #27
   20a3e:	d102      	bne.n	20a46 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   20a40:	f854 7c48 	ldr.w	r7, [r4, #-72]
   20a44:	b10f      	cbz	r7, 20a4a <signal_poll_event+0x7a>
		poller->is_polling = false;
   20a46:	2300      	movs	r3, #0
   20a48:	e7d0      	b.n	209ec <signal_poll_event+0x1c>
	z_ready_thread(thread);
   20a4a:	4640      	mov	r0, r8
   20a4c:	f7ff fd94 	bl	20578 <z_ready_thread>
		poller->is_polling = false;
   20a50:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   20a52:	e7cc      	b.n	209ee <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   20a54:	2b02      	cmp	r3, #2
   20a56:	d1f6      	bne.n	20a46 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   20a58:	7823      	ldrb	r3, [r4, #0]
   20a5a:	2b00      	cmp	r3, #0
   20a5c:	d0c7      	beq.n	209ee <signal_poll_event+0x1e>
   20a5e:	f854 7c04 	ldr.w	r7, [r4, #-4]
   20a62:	2f00      	cmp	r7, #0
   20a64:	d0f4      	beq.n	20a50 <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   20a66:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   20a6a:	f1a4 0914 	sub.w	r9, r4, #20
   20a6e:	f104 0014 	add.w	r0, r4, #20
   20a72:	f7ff fe3a 	bl	206ea <z_abort_timeout>
		twork->poll_result = 0;
   20a76:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   20a7a:	4649      	mov	r1, r9
   20a7c:	4638      	mov	r0, r7
   20a7e:	f7ff fcdf 	bl	20440 <k_work_submit_to_queue>
		poller->is_polling = false;
   20a82:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   20a86:	e7b2      	b.n	209ee <signal_poll_event+0x1e>

00020a88 <z_handle_obj_poll_events>:
{
   20a88:	4603      	mov	r3, r0
	return list->head == list;
   20a8a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   20a8c:	4283      	cmp	r3, r0
   20a8e:	d008      	beq.n	20aa2 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   20a90:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   20a94:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   20a96:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20a98:	2300      	movs	r3, #0
	node->prev = NULL;
   20a9a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   20a9e:	f7ff bf97 	b.w	209d0 <signal_poll_event>
}
   20aa2:	4770      	bx	lr

00020aa4 <k_free>:
	if (ptr != NULL) {
   20aa4:	b120      	cbz	r0, 20ab0 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   20aa6:	1f01      	subs	r1, r0, #4
   20aa8:	f850 0c04 	ldr.w	r0, [r0, #-4]
   20aac:	f7ff bb1f 	b.w	200ee <k_heap_free>
}
   20ab0:	4770      	bx	lr
	...

00020ab4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   20ab4:	f7f9 ba40 	b.w	19f38 <SystemInit>
